/* automatically generated by rust-bindgen 0.71.1 */

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[doc = " DATA TYPES                                                           *"]
pub type xint64 = i64;
pub type xuint64 = u64;
pub type xint32 = i32;
pub type xuint32 = u32;
pub type xint16 = i16;
pub type xuint16 = u16;
pub type xint8 = i8;
pub type xuint8 = u8;
pub type xreal64 = f64;
pub type xbool = xuint8;
pub type xhandle = *mut ::std::os::raw::c_void;
pub type XC_OBJECT_TYPE = xuint16;
pub type XM_DATA_TYPE_TYPE = xuint8;
pub type XM_DATA_TYPE_REPRESENTATION = xuint8;
pub type XM_DATA_TYPE = xuint16;
pub type XC_TIME = xint32;
pub type XC_HITIME = xuint64;
pub type XC_EXTIME = xint64;
pub type XC_HITIME_DELTA = xint64;
pub type XC_PRICE_TYPE = xuint8;
pub type XC_PRICE = xint32;
pub type XC_VOLUME = xuint32;
pub type XC_TRADED_VALUE = xint64;
pub type XC_ORDER_REF_ID_TYPE = xuint8;
pub type XC_SYMBOL_NAMESPACE = xuint8;
pub type XC_LIST_UPDATE_ACTION = xuint8;
pub type XC_LIST_UPDATE_VARIANT = xuint8;
pub type XC_BOOLEAN_FILTER = xuint8;
pub type XC_INSTRUMENT_GROUP_ID_TYPE = xuint8;
pub type XC_STATS_IDENTIFIER = [::std::os::raw::c_char; 32usize];
pub type XC_STATS_LONG_IDENTIFIER = [::std::os::raw::c_char; 64usize];
pub type XC_STATS_SHORT_IDENTIFIER = [::std::os::raw::c_char; 16usize];
pub type XC_STATS_MINI_IDENTIFIER = [::std::os::raw::c_char; 8usize];
pub type XC_KEYLIST_DESCRIPTION = [::std::os::raw::c_char; 64usize];
pub type XC_KEYLIST_EDIT_ACTION = xuint8;
pub type XC_LIMIT_TYPE = xuint8;
pub type XC_INDICATIVE_TYPE = xuint8;
pub type XC_ASSET_CLASS = xuint16;
pub type XC_INST_ATTRIBUTE = xuint16;
pub type XC_RULE_ID = xuint8;
pub type XC_SIDE = xuint8;
pub type XC_UPDATE_TYPE = xuint8;
pub type XC_PRICING_MODEL = xuint8;
pub type XC_BOOK_SWEEP_MODEL = xuint8;
pub type XC_VOLATILITY_CALC_TYPE = xuint8;
pub type XC_SIGNAL_STATUS = xuint8;
pub type XC_PROBABILITY = xuint16;
pub type XC_SYMBOL_TYPE = xuint8;
pub type XC_EVENT_QUAL = xuint8;
pub type XC_QUOTE_QUAL = xuint8;
pub type XC_TRADE_QUAL = xuint8;
pub type XC_REFRESH_QUAL = xuint8;
pub type XC_INDICATIVE_QUAL = xuint8;
pub type XC_STAT_QUAL = xuint8;
pub type XC_QUALIFIER = xuint16;
pub type XC_QUOTE_QUALIFIER = xuint16;
pub type XC_TRADE_QUALIFIER = xuint16;
pub type XC_REFRESH_QUALIFIER = xuint16;
pub type XC_INDICATIVE_QUALIFIER = xuint16;
pub type XC_LINE_ID = xuint16;
pub type XC_ORDER_BOOK_TRANSACTION_TYPE = xuint8;
pub type XC_ORDER_BOOK_UPDATE_TYPE = xuint8;
pub type XC_EXECUTION_SIDE_ATTRIBUTION = xuint8;
pub type XC_BATE_CODE = xuint8;
pub type XC_MARKET_SEGMENT = xuint8;
pub type XC_ORDER_IMBALANCE_TYPE = xuint8;
pub type XC_ORDER_IMBALANCE_AUCTION_TYPE = xuint8;
pub type XC_TRADING_STATUS = xuint8;
#[doc = "Values less than 4 pertain to all trading statuses;\nvalues from 4 to 15 are status-specific and are listed\nin separate enumerations, although they should be thought\nof as all belonging to this XC_TRADING_SUBSTATUS enumeration."]
pub type XC_TRADING_SUBSTATUS = xuint8;
pub type XC_TRADING_SUBSTATUS_OPEN = xuint8;
pub type XC_TRADING_SUBSTATUS_CLOSED = xuint8;
pub type XC_TRADING_SUBSTATUS_HALTED = xuint8;
pub type XC_TRADING_SUBSTATUS_ACTIVE = xuint8;
pub type XC_TRADING_SUBSTATUS_INACTIVE = xuint8;
pub type XC_TRADING_SUBSTATUS_AUCTION = xuint8;
pub type XC_LINE_STATE = xuint8;
pub type XC_MATCH_ALGO = xuint8;
pub type XC_SIDE_ATTRIBUTION = xuint8;
pub type XC_FIELD_ID = xuint64;
pub type XC_FIELD_GROUP_ID = xuint64;
#[doc = " Callback signature for all non-vectored callbacks.\n\n  @param object [IN] reference to the associated object instance.\n  @param slot [IN] slot number of the associated item within the object.\n  @param xevent [IN] reference to the active notification event. The event is\n     automatically destroyed once the callback returns.\n  @param eventType [IN] type identifier of event object (will be in the\n     EVENT group)\n  @param turnkey [IN] a turn-around key that was supplied either on\n     session creation (for session callbacks) or on item request (for\n     container/snapshot callbacks)\n  @param status [IN] indicates status corresponding to the event\n"]
pub type xcObjectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        object: xhandle,
        slot: xuint32,
        xevent: xhandle,
        eventType: XC_OBJECT_TYPE,
        turnkey: xuint64,
        status: xerr,
    ),
>;
#[doc = " Callback signature for all vectored callbacks.\n\n  @param object [IN] reference to the associated object instance.\n  @param slot [IN] slot number of the associated item within the object.\n  @param turnkey [IN] a turn-around key that was supplied on item request\n  @param count [IN] number of items in each of the subsequent parameters\n  @param events [IN] array of structures containing information about each\n     event object in the vector of events.\n"]
pub type xcObjectVectoredCallback = ::std::option::Option<
    unsafe extern "C" fn(
        object: xhandle,
        slot: xuint32,
        turnkey: xuint64,
        count: xuint32,
        events: *const XC_EVENT_DESC,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XM_DATA_TYPE_INFO {
    #[doc = "< datatype described in this record"]
    pub xdti_datatype: xuint16,
    #[doc = "< type of entity described in this record"]
    pub xdti_type: XM_DATA_TYPE_TYPE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< size of type in bits (0 indicates variable-length)"]
    pub xdti_bitsize: xuint32,
    #[doc = "< name of datatype (NUL-terminated)"]
    pub xdti_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XM_STRUCTFIELD_INFO {
    #[doc = "< datatype of field described in this record"]
    pub xsfi_datatype: xuint16,
    #[doc = "< datatype of structure to which this field belongs"]
    pub xsfi_struct_datatype: xuint16,
    #[doc = "< size of field in bits"]
    pub xsfi_bitsize: xuint32,
    #[doc = "< offset in bits of field within structure"]
    pub xsfi_bitoffset: xuint16,
    #[doc = "< length of prefix within the name (0 if no prefix)"]
    pub xsfi_prefix_len: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< field is an array of this many cells (0 if not array)"]
    pub xsfi_array_count: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XSFI_RESERVED_01: xuint16,
    #[doc = "< name of field (NUL-terminated)"]
    pub xsfi_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XM_ENUM_VALUE_INFO {
    #[doc = "< datatype of enumeration to which this value belongs"]
    pub xevi_datatype: xuint16,
    #[doc = "< length of prefix within the name (0 if no prefix)"]
    pub xevi_prefix_len: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XEVI_RESERVED_00: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XEVI_RESERVED_01: xuint32,
    #[doc = "< value within the enumeration"]
    pub xevi_value: xuint64,
    #[doc = "< name of enumeration token (NUL-terminated)"]
    pub xevi_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_DATE__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_DAYSBACK {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_DATETIME {
    #[doc = "< a time"]
    pub xdtm_time: XC_TIME,
    #[doc = "< a date"]
    pub xdtm_date: XC_DATE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_PRICE_DESC {
    #[doc = "< price"]
    pub xpd_price: XC_PRICE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPD_RESERVED_01: [xuint8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]
pub struct XC_EXCHANGE_ID {
    #[doc = "< characters in exchange identifier"]
    pub xex_ch: [::std::os::raw::c_char; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]
pub struct XC_COUNTRY_ID {
    #[doc = "< characters in country identifier"]
    pub xcc_ch: [::std::os::raw::c_char; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_CURRENCY_ID {
    #[doc = "< characters in currency identifier"]
    pub xcur_ch: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ALTERNATE_ID {
    #[doc = "< characters in alternate identifier"]
    pub xalt_ch: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_REFERENCE_STRING {
    pub str_: [::std::os::raw::c_char; 72usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_MMID {
    #[doc = "< characters in market maker identifier"]
    pub xmmid_ch: [::std::os::raw::c_char; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TRADE_VENUE {
    #[doc = "< characters in trade venue"]
    pub ch: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_1 {
    #[doc = "< characters in order reference identifier"]
    pub xoid_ch: [::std::os::raw::c_char; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_2 {
    #[doc = "< binary-coded decimal values (plus some extensions)"]
    pub xoid_bcd_pair: [xuint8; 12usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_3 {
    #[doc = "< first number of pair"]
    pub xoid_uint1: xuint32,
    #[doc = "< second number of pair"]
    pub xoid_uint2: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_4 {
    #[doc = "< 12-character alphanumeric encoded as a base-36 number"]
    pub xoid_alpha36: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_5 {
    #[doc = "< 64-bit unsigned integer"]
    pub xoid_raw64: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_ORDER_REF_ID__bindgen_ty_6 {
    #[doc = "< 32-bit symbol hash ID"]
    pub xoid_sym_uint_symbol: xuint32,
    #[doc = "< 64-bit order ref id"]
    pub xoid_sym_uint_refid: xuint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]
pub struct XC_SYMBOL {
    #[doc = "< characters in symbol"]
    pub xsym_ch: [::std::os::raw::c_char; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]
pub struct XC_KEY {
    pub xk_exchange: XC_EXCHANGE_ID,
    pub xk_country: XC_COUNTRY_ID,
    pub xk_symbol: XC_SYMBOL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_KEY_DESC {
    pub xkd_key: XC_KEY,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XKD_RESERVED_01: [xuint8; 7usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_FIELD_DESC {
    #[doc = "< [INPUT]  XCAPI Field or Field Group ID"]
    pub xfd_id: xuint64,
    #[doc = "< [INPUT]  Address of output buffer for this field/group"]
    pub xfd_buffer_address: xuint64,
    #[doc = "< [INPUT]  Size of each element to be written (if count > 1)"]
    pub xfd_elmsiz: xuint32,
    pub xfd_in_count: xuint32,
    #[doc = "< [OUTPUT] Number of elements written to output buffer"]
    pub xfd_out_count: xuint32,
    #[doc = "< [OUTPUT] Status of individual field/group retrieval"]
    pub xfd_status: xuint32,
    #[doc = "< [INPUT]  Size of XC_FIELD_DESC (in bytes)"]
    pub xfd_desc_size: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XFD_RESERVED_00: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XFD_RESERVED_01: xuint16,
    pub __bindgen_anon_1: XC_FIELD_DESC__bindgen_ty_1,
}
#[doc = "Fields related to conversion of output to a string type.\nxfds_string_type must be one of:\nXTYP_STRING_FIXED_LENGTH: elmsiz indicates length of each output string\nXTYP_STRING_KNOWN_LENGTH: elmsiz indicates length of each output string\nXTYP_STRING_NUL_TERM:     elmsiz indicates buffer size (including NUL)\nin_count must be 1 in this case"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< [INPUT]  Convert output to specified string type"]
    pub xfds_string_type: XM_DATA_TYPE,
    #[doc = "< [INPUT]  Field width if convert_to_type is XTYP_STRING_xxx"]
    pub xfds_field_width: xuint16,
    pub xfds_options: xuint32,
}
#[doc = "Fields related to conversion of output to a different binary type.\nSupported types (xfdb_convert_type) are:\nXTYP_float:                single-precision floating point\nXTYP_double, XTYP_xreal64: double-precision floating point"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< [INPUT]  Convert output to specified binary type"]
    pub xfdb_convert_type: XM_DATA_TYPE,
}
#[repr(C, packed)]
pub struct XC_EVENT_DESC {
    #[doc = "< Object type of event"]
    pub xvi_type: XC_OBJECT_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XVI_RESERVED_00: xuint16,
    #[doc = "< Status of event"]
    pub xvi_status: xerr,
    #[doc = "< Handle to event object"]
    pub xvi_event: xhandle,
    #[doc = "< -- Reserved for future use --"]
    pub XVI_RESERVED_01: [xuint64; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_SLOT_CONTEXT {
    #[doc = "< Request key"]
    pub xcreq_key: XC_KEY,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCREQ_RESERVED_01: [xuint8; 3usize],
    #[doc = "< -- Reserved for future use --"]
    pub XCREQ_RESERVED_02: xuint32,
    #[doc = "< User-specified turnkey (passed to callback on each event)"]
    pub xcreq_turnkey: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCREQ_RESERVED_03: xuint64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XC_LIST_UPDATE {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XLU_RESERVED_01: [xuint8; 3usize],
    pub var: XC_LIST_UPDATE__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1 {
    pub xlu_index: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< Byte offset to key within data item"]
    pub xlu_key_offset: xuint16,
    #[doc = "< Length of key within data item (in bytes)"]
    pub xlu_key_size: xuint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TRADING_STATE_FILTER__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_INSTRUMENT_GROUP_ID {
    #[doc = "< The group's country"]
    pub country: XC_COUNTRY_ID,
    #[doc = "< The group's exchange"]
    pub exchange: XC_EXCHANGE_ID,
    #[doc = "< The group's type"]
    pub type_: XC_INSTRUMENT_GROUP_ID_TYPE,
    #[doc = "< The group priority"]
    pub priority: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub RESERVED_00: xuint16,
    pub __bindgen_anon_1: XC_INSTRUMENT_GROUP_ID__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_EVENT_ID {
    #[doc = "< characters in event ID"]
    pub xei_ch: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_EQUITY_TRADE_UPDATE_FLAGS {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_COMMODITY_TRADE_UPDATE_FLAGS {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_DFLOAT_64__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_SYMBOL_LABEL {
    pub ch: [::std::os::raw::c_char; 256usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_THRESHOLDS {
    pub thresholds: [XC_PROBABILITY; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_EVENT_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub q1: XC_EVENT_QUAL,
    #[doc = "< second qualifier"]
    pub q2: XC_EVENT_QUAL,
    #[doc = "< third qualifier"]
    pub q3: XC_EVENT_QUAL,
    #[doc = "< fourth qualifier"]
    pub q4: XC_EVENT_QUAL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_QUOTE_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub qq1: XC_QUOTE_QUAL,
    #[doc = "< second qualifier"]
    pub qq2: XC_QUOTE_QUAL,
    #[doc = "< third qualifier"]
    pub qq3: XC_QUOTE_QUAL,
    #[doc = "< fourth qualifier"]
    pub qq4: XC_QUOTE_QUAL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TRADE_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub tq1: XC_TRADE_QUAL,
    #[doc = "< second qualifier"]
    pub tq2: XC_TRADE_QUAL,
    #[doc = "< third qualifier"]
    pub tq3: XC_TRADE_QUAL,
    #[doc = "< fourth qualifier"]
    pub tq4: XC_TRADE_QUAL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_REFRESH_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub rq1: XC_REFRESH_QUAL,
    #[doc = "< second qualifier"]
    pub rq2: XC_REFRESH_QUAL,
    #[doc = "< third qualifier"]
    pub rq3: XC_REFRESH_QUAL,
    #[doc = "< fourth qualifier"]
    pub rq4: XC_REFRESH_QUAL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_INDICATIVE_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub iq1: XC_INDICATIVE_QUAL,
    #[doc = "< second qualifier"]
    pub iq2: XC_INDICATIVE_QUAL,
    #[doc = "< third qualifier"]
    pub iq3: XC_INDICATIVE_QUAL,
    #[doc = "< fourth qualifier"]
    pub iq4: XC_INDICATIVE_QUAL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_STAT_QUALS__bindgen_ty_1 {
    #[doc = "< first qualifier"]
    pub eq1: XC_STAT_QUAL,
    #[doc = "< second qualifier"]
    pub eq2: XC_STAT_QUAL,
    #[doc = "< third qualifier"]
    pub eq3: XC_STAT_QUAL,
    #[doc = "< fourth qualifier"]
    pub eq4: XC_STAT_QUAL,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_QUALIFIERS {
    #[doc = "< array of qualifiers"]
    pub entries: [XC_QUALIFIER; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_QUOTE_QUALIFIERS {
    #[doc = "< Array of quote qualifiers"]
    pub entries: [XC_QUOTE_QUALIFIER; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TRADE_QUALIFIERS {
    #[doc = "< Array of trade qualifiers"]
    pub entries: [XC_TRADE_QUALIFIER; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_REFRESH_QUALIFIERS {
    #[doc = "< Array of refresh qualifiers"]
    pub entries: [XC_REFRESH_QUALIFIER; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_INDICATIVE_QUALIFIERS {
    #[doc = "< Array of indicative qualifiers"]
    pub entries: [XC_INDICATIVE_QUALIFIER; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TICK_FLAGS {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TS_REQUEST_TYPE {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_FINANCIAL_STATUS {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_CC_FLAGS {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_TRADING_STATE__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EVENT_COMMON {
    #[doc = "< exchange code"]
    pub xev_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xev_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xev_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xev_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xev_quals: XC_EVENT_QUALS,
    #[doc = "< instrument status"]
    pub xev_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xev_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XEV_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xev_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xev_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xev_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_EVENT_TIMING {
    #[doc = "< data sequence number"]
    pub xtev_sequence: xuint64,
    #[doc = "< exchange time - published by feed"]
    pub xtev_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xtev_receive_hitime: XC_HITIME,
    pub xtev_transmit_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by XCAPI"]
    pub xtev_xcapi_receive_hitime: XC_HITIME,
    #[doc = "< callback time - stamped by XCAPI"]
    pub xtev_xcapi_callback_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XTEV_RESERVED_00: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XTEV_RESERVED_01: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_EQUITY_QUOTE {
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_00: xuint16,
    #[doc = "< bid exchange code"]
    pub xcq_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcq_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcq_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcq_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_01: xuint8,
    #[doc = "< ask exchange code"]
    pub xcq_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcq_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcq_ask_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_QUOTE_ALL {
    #[doc = "< exchange code"]
    pub xcq_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcq_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcq_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcq_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcq_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xcq_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcq_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcq_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcq_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcq_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_03: xuint16,
    #[doc = "< bid exchange code"]
    pub xcq_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcq_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcq_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcq_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_04: xuint8,
    #[doc = "< ask exchange code"]
    pub xcq_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcq_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcq_ask_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL {
    #[doc = "< exchange code"]
    pub xcq_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcq_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcq_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcq_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcq_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xcq_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcq_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcq_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcq_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcq_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_03: xuint16,
    #[doc = "< bid exchange code"]
    pub xcq_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcq_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcq_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcq_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_04: xuint8,
    #[doc = "< ask exchange code"]
    pub xcq_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcq_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcq_ask_size: XC_VOLUME,
    pub xcq_bid_customer_size: XC_VOLUME,
    pub xcq_bid_professional_size: XC_VOLUME,
    pub xcq_bid_market_maker_size: XC_VOLUME,
    pub xcq_ask_customer_size: XC_VOLUME,
    pub xcq_ask_professional_size: XC_VOLUME,
    pub xcq_ask_market_maker_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_EQUITY_TRADE {
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_00: xuint32,
    #[doc = "< sub-market identifier"]
    pub xct_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_01: xuint16,
    #[doc = "< price"]
    pub xct_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xct_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_EQUITY_TRADE_ACCUM {
    #[doc = "< close price"]
    pub xct_close_price: XC_PRICE,
    #[doc = "< tick direction"]
    pub xct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_00: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_01: xuint16,
    #[doc = "< volume"]
    pub xct_volume: XC_VOLUME,
    #[doc = "< VWAP volume"]
    pub xct_vwap_volume: XC_VOLUME,
    #[doc = "< traded value"]
    pub xct_traded_value: XC_TRADED_VALUE,
    #[doc = "< open price"]
    pub xct_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xct_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xct_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xct_low_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_TRADE_ALL {
    #[doc = "< exchange code"]
    pub xct_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xct_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xct_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xct_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xct_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xct_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xct_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xct_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xct_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xct_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_05: xuint16,
    #[doc = "< sub-market identifier"]
    pub xct_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_06: xuint16,
    #[doc = "< price"]
    pub xct_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xct_size: XC_VOLUME,
    #[doc = "< close price"]
    pub xct_close_price: XC_PRICE,
    #[doc = "< tick direction"]
    pub xct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_07: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_08: xuint16,
    #[doc = "< volume"]
    pub xct_volume: XC_VOLUME,
    #[doc = "< VWAP volume"]
    pub xct_vwap_volume: XC_VOLUME,
    #[doc = "< traded value"]
    pub xct_traded_value: XC_TRADED_VALUE,
    #[doc = "< open price"]
    pub xct_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xct_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xct_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xct_low_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_CANCEL_ALL {
    #[doc = "< exchange code"]
    pub xca_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xca_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xca_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xca_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xca_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xca_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xca_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xca_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xca_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xca_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_05: xuint16,
    #[doc = "< sub-market identifier"]
    pub xca_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_06: xuint16,
    #[doc = "< price"]
    pub xca_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xca_size: XC_VOLUME,
    #[doc = "< close price"]
    pub xca_close_price: XC_PRICE,
    #[doc = "< tick direction"]
    pub xca_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_07: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_08: xuint16,
    #[doc = "< volume"]
    pub xca_volume: XC_VOLUME,
    #[doc = "< VWAP volume"]
    pub xca_vwap_volume: XC_VOLUME,
    #[doc = "< traded value"]
    pub xca_traded_value: XC_TRADED_VALUE,
    #[doc = "< open price"]
    pub xca_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xca_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xca_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xca_low_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_EQUITY_CORRECTION {
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_00: xuint32,
    #[doc = "< sub-market identifier"]
    pub xcc_cancel_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_01: xuint16,
    #[doc = "< price"]
    pub xcc_cancel_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xcc_cancel_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_02: xuint32,
    #[doc = "< sub-market identifier"]
    pub xcc_correct_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_03: xuint16,
    #[doc = "< price"]
    pub xcc_correct_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xcc_correct_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_CORRECTION_ALL {
    #[doc = "< exchange code"]
    pub xcc_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcc_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcc_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcc_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcc_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xcc_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcc_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcc_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcc_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcc_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_05: xuint16,
    #[doc = "< sub-market identifier"]
    pub xcc_cancel_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_06: xuint16,
    #[doc = "< price"]
    pub xcc_cancel_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xcc_cancel_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_07: xuint8,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_09: xuint16,
    #[doc = "< sub-market identifier"]
    pub xcc_correct_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_10: xuint16,
    #[doc = "< price"]
    pub xcc_correct_price: XC_PRICE,
    #[doc = "< size (number of shares)"]
    pub xcc_correct_size: XC_VOLUME,
    #[doc = "< close price"]
    pub xcc_close_price: XC_PRICE,
    #[doc = "< tick direction"]
    pub xcc_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_11: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_12: xuint16,
    #[doc = "< volume"]
    pub xcc_volume: XC_VOLUME,
    #[doc = "< VWAP volume"]
    pub xcc_vwap_volume: XC_VOLUME,
    #[doc = "< traded value"]
    pub xcc_traded_value: XC_TRADED_VALUE,
    #[doc = "< open price"]
    pub xcc_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xcc_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xcc_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xcc_low_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xcr_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xcr_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xcr_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: xuint32,
    #[doc = "< closing reference trade price"]
    pub xcr_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xcr_open_interest: XC_VOLUME,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xcr_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xcr_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xcr_close_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xcr_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< ask exchange code"]
    pub xcr_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xcr_bid_hitime: XC_HITIME,
    #[doc = "< ask time"]
    pub xcr_ask_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xcr_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xcr_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint8,
    #[doc = "< last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xcr_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_12: xuint32,
    #[doc = "< traded value"]
    pub xcr_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_13: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_14: xuint64,
    #[doc = "< open price"]
    pub xcr_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xcr_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xcr_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xcr_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_15: xuint16,
    #[doc = "< last time"]
    pub xcr_last_hitime: XC_HITIME,
    #[doc = "< open time"]
    pub xcr_open_hitime: XC_HITIME,
    #[doc = "< high time"]
    pub xcr_high_hitime: XC_HITIME,
    #[doc = "< low time"]
    pub xcr_low_hitime: XC_HITIME,
    pub xcr_bid_customer_size: XC_VOLUME,
    pub xcr_bid_professional_size: XC_VOLUME,
    pub xcr_bid_market_maker_size: XC_VOLUME,
    pub xcr_ask_customer_size: XC_VOLUME,
    pub xcr_ask_professional_size: XC_VOLUME,
    pub xcr_ask_market_maker_size: XC_VOLUME,
    pub xcr_upper_limit_price: XC_PRICE,
    pub xcr_lower_limit_price: XC_PRICE,
    pub xcr_limit_price_hitime: XC_HITIME,
    pub xcr_quote_quals: XC_QUOTE_QUALS,
    pub xcr_trade_quals: XC_TRADE_QUALS,
    pub xcr_quote_sequence: xuint64,
    pub xcr_trade_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_REFRESH_ALL {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xcr_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xcr_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xcr_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: xuint32,
    #[doc = "< closing reference trade price"]
    pub xcr_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xcr_open_interest: XC_VOLUME,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xcr_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xcr_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xcr_close_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xcr_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< ask exchange code"]
    pub xcr_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xcr_bid_extime: XC_EXTIME,
    #[doc = "< ask time"]
    pub xcr_ask_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xcr_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xcr_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint8,
    #[doc = "< last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xcr_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_12: xuint32,
    #[doc = "< traded value"]
    pub xcr_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_13: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_14: xuint64,
    #[doc = "< open price"]
    pub xcr_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xcr_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xcr_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xcr_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_15: xuint16,
    #[doc = "< last time"]
    pub xcr_last_extime: XC_EXTIME,
    #[doc = "< open time"]
    pub xcr_open_extime: XC_EXTIME,
    #[doc = "< high time"]
    pub xcr_high_extime: XC_EXTIME,
    #[doc = "< low time"]
    pub xcr_low_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xcr_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xcr_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xcr_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: xuint32,
    #[doc = "< closing reference trade price"]
    pub xcr_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xcr_open_interest: XC_VOLUME,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xcr_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xcr_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xcr_close_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xcr_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< ask exchange code"]
    pub xcr_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xcr_bid_extime: XC_EXTIME,
    #[doc = "< ask time"]
    pub xcr_ask_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xcr_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xcr_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint8,
    #[doc = "< last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xcr_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_12: xuint32,
    #[doc = "< traded value"]
    pub xcr_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_13: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_14: xuint64,
    #[doc = "< open price"]
    pub xcr_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xcr_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xcr_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xcr_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_15: xuint16,
    #[doc = "< last time"]
    pub xcr_last_extime: XC_EXTIME,
    #[doc = "< open time"]
    pub xcr_open_extime: XC_EXTIME,
    #[doc = "< high time"]
    pub xcr_high_extime: XC_EXTIME,
    #[doc = "< low time"]
    pub xcr_low_extime: XC_EXTIME,
    pub xcr_bid_customer_size: XC_VOLUME,
    pub xcr_bid_professional_size: XC_VOLUME,
    pub xcr_bid_market_maker_size: XC_VOLUME,
    pub xcr_ask_customer_size: XC_VOLUME,
    pub xcr_ask_professional_size: XC_VOLUME,
    pub xcr_ask_market_maker_size: XC_VOLUME,
    pub xcr_upper_limit_price: XC_PRICE,
    pub xcr_lower_limit_price: XC_PRICE,
    pub xcr_limit_price_extime: XC_EXTIME,
    pub xcr_quote_quals: XC_QUOTE_QUALS,
    pub xcr_trade_quals: XC_TRADE_QUALS,
    pub xcr_quote_sequence: xuint64,
    pub xcr_trade_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xci_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xci_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xci_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: xuint32,
    #[doc = "< closing reference trade price"]
    pub xci_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xci_open_interest: XC_VOLUME,
    pub xci_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xci_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xci_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xci_close_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xci_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< ask exchange code"]
    pub xci_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xci_bid_hitime: XC_HITIME,
    #[doc = "< ask time"]
    pub xci_ask_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xci_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xci_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint8,
    #[doc = "< last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xci_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_13: xuint32,
    #[doc = "< traded value"]
    pub xci_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_14: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_15: xuint64,
    #[doc = "< open price"]
    pub xci_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xci_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xci_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xci_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_16: xuint16,
    #[doc = "< last time"]
    pub xci_last_hitime: XC_HITIME,
    #[doc = "< open time"]
    pub xci_open_hitime: XC_HITIME,
    #[doc = "< high time"]
    pub xci_high_hitime: XC_HITIME,
    #[doc = "< low time"]
    pub xci_low_hitime: XC_HITIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_IMAGE_ALL {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xci_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xci_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xci_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: xuint32,
    #[doc = "< closing reference trade price"]
    pub xci_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xci_open_interest: XC_VOLUME,
    pub xci_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xci_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xci_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xci_close_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xci_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< ask exchange code"]
    pub xci_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xci_bid_extime: XC_EXTIME,
    #[doc = "< ask time"]
    pub xci_ask_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xci_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xci_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint8,
    #[doc = "< last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xci_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_13: xuint32,
    #[doc = "< traded value"]
    pub xci_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_14: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_15: xuint64,
    #[doc = "< open price"]
    pub xci_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xci_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xci_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xci_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_16: xuint16,
    #[doc = "< last time"]
    pub xci_last_extime: XC_EXTIME,
    #[doc = "< open time"]
    pub xci_open_extime: XC_EXTIME,
    #[doc = "< high time"]
    pub xci_high_extime: XC_EXTIME,
    #[doc = "< low time"]
    pub xci_low_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< alternate ID for symbol"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< second alternate ID for symbol"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint16,
    #[doc = "< exchange code of closing trade"]
    pub xci_close_exch: XC_EXCHANGE_ID,
    #[doc = "< closing trade price"]
    pub xci_close_price: XC_PRICE,
    #[doc = "< closing trade size (number of shares)"]
    pub xci_close_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: xuint32,
    #[doc = "< closing reference trade price"]
    pub xci_ref_close_price: XC_PRICE,
    #[doc = "< open interest"]
    pub xci_open_interest: XC_VOLUME,
    pub xci_exch_time_offset: xint32,
    #[doc = "< prime exchange code"]
    pub xci_prime_exch: XC_EXCHANGE_ID,
    #[doc = "< lot size"]
    pub xci_lot_size: xuint16,
    #[doc = "< time of closing trade"]
    pub xci_close_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: [xuint8; 10usize],
    #[doc = "< bid exchange code"]
    pub xci_bid_exch: XC_EXCHANGE_ID,
    #[doc = "< bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< bid size (number of shares)"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< bid tick flags"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< ask exchange code"]
    pub xci_ask_exch: XC_EXCHANGE_ID,
    #[doc = "< ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< ask size (number of shares)"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< bid time"]
    pub xci_bid_extime: XC_EXTIME,
    #[doc = "< ask time"]
    pub xci_ask_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint64,
    #[doc = "< previous day's closing trade price"]
    pub xci_prev_close: XC_PRICE,
    #[doc = "< last exchange code"]
    pub xci_last_exch: XC_EXCHANGE_ID,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint8,
    #[doc = "< last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< last size (number of shares)"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< VWAP Volume"]
    pub xci_vwap_volume: XC_VOLUME,
    #[doc = "< Date of the market session for the trade price."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_13: xuint32,
    #[doc = "< traded value"]
    pub xci_traded_value: XC_TRADED_VALUE,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_14: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_15: xuint64,
    #[doc = "< open price"]
    pub xci_open_price: XC_PRICE,
    #[doc = "< total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< high price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< high exchange code"]
    pub xci_high_exch: XC_EXCHANGE_ID,
    #[doc = "< low exchange code"]
    pub xci_low_exch: XC_EXCHANGE_ID,
    #[doc = "< open exchange code"]
    pub xci_open_exch: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_16: xuint16,
    #[doc = "< last time"]
    pub xci_last_extime: XC_EXTIME,
    #[doc = "< open time"]
    pub xci_open_extime: XC_EXTIME,
    #[doc = "< high time"]
    pub xci_high_extime: XC_EXTIME,
    #[doc = "< low time"]
    pub xci_low_extime: XC_EXTIME,
    pub xci_bid_customer_size: XC_VOLUME,
    pub xci_bid_professional_size: XC_VOLUME,
    pub xci_bid_market_maker_size: XC_VOLUME,
    pub xci_ask_customer_size: XC_VOLUME,
    pub xci_ask_professional_size: XC_VOLUME,
    pub xci_ask_market_maker_size: XC_VOLUME,
    pub xci_upper_limit_price: XC_PRICE,
    pub xci_lower_limit_price: XC_PRICE,
    pub xci_limit_price_extime: XC_EXTIME,
    pub xci_quote_quals: XC_QUOTE_QUALS,
    pub xci_trade_quals: XC_TRADE_QUALS,
    pub xci_quote_sequence: xuint64,
    pub xci_trade_sequence: xuint64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_TRADE_REF {
    #[doc = "< Bid side order reference id."]
    pub xct_bid_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Ask side order reference id."]
    pub xct_ask_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Bid side market maker id."]
    pub xct_bid_mmid: XC_MMID,
    #[doc = "< Ask side market maker id."]
    pub xct_ask_mmid: XC_MMID,
    #[doc = "< Trade reference id."]
    pub xct_trade_ref: XC_ORDER_REF_ID,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_COMMODITY_QUOTE {
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_00: xuint16,
    #[doc = "< bid tick flags"]
    pub xcq_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_02: xuint32,
    #[doc = "< bid price"]
    pub xcq_bid_price: XC_PRICE,
    #[doc = "< bid size"]
    pub xcq_bid_size: XC_VOLUME,
    #[doc = "< ask price"]
    pub xcq_ask_price: XC_PRICE,
    #[doc = "< ask size"]
    pub xcq_ask_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_QUOTE_ALL {
    #[doc = "< exchange code"]
    pub xcq_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcq_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcq_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcq_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcq_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xcq_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcq_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcq_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcq_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcq_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_03: xuint16,
    #[doc = "< bid tick flags"]
    pub xcq_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCQ_RESERVED_05: xuint32,
    #[doc = "< bid price"]
    pub xcq_bid_price: XC_PRICE,
    #[doc = "< bid size"]
    pub xcq_bid_size: XC_VOLUME,
    #[doc = "< ask price"]
    pub xcq_ask_price: XC_PRICE,
    #[doc = "< ask size"]
    pub xcq_ask_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_COMMODITY_TRADE {
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_00: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_03: xuint32,
    #[doc = "< price"]
    pub xct_price: XC_PRICE,
    #[doc = "< size"]
    pub xct_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_COMMODITY_TRADE_ACCUM {
    #[doc = "< volume"]
    pub xct_volume: XC_VOLUME,
    #[doc = "< total change"]
    pub xct_total_change: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_TRADE_ALL {
    #[doc = "< exchange code"]
    pub xct_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xct_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xct_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xct_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xct_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xct_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xct_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xct_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xct_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xct_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCT_RESERVED_06: xuint32,
    #[doc = "< price"]
    pub xct_price: XC_PRICE,
    #[doc = "< size"]
    pub xct_size: XC_VOLUME,
    #[doc = "< volume"]
    pub xct_volume: XC_VOLUME,
    #[doc = "< total change"]
    pub xct_total_change: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_CANCEL_ALL {
    #[doc = "< exchange code"]
    pub xca_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xca_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xca_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xca_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xca_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xca_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xca_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xca_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xca_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xca_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xca_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCA_RESERVED_06: xuint32,
    #[doc = "< price"]
    pub xca_price: XC_PRICE,
    #[doc = "< size"]
    pub xca_size: XC_VOLUME,
    #[doc = "< volume"]
    pub xca_volume: XC_VOLUME,
    #[doc = "< total change"]
    pub xca_total_change: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_COMMODITY_CORRECTION {
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_00: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xcc_cancel_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_03: xuint32,
    #[doc = "< price"]
    pub xcc_cancel_price: XC_PRICE,
    #[doc = "< size"]
    pub xcc_cancel_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_04: xuint8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xcc_correct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_06: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_07: xuint32,
    #[doc = "< price"]
    pub xcc_correct_price: XC_PRICE,
    #[doc = "< size"]
    pub xcc_correct_size: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_CORRECTION_ALL {
    #[doc = "< exchange code"]
    pub xcc_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcc_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcc_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcc_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcc_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xcc_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcc_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcc_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcc_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcc_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_03: xuint8,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xcc_cancel_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_06: xuint32,
    #[doc = "< price"]
    pub xcc_cancel_price: XC_PRICE,
    #[doc = "< size"]
    pub xcc_cancel_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_07: xuint8,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< tick direction"]
    pub xcc_correct_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_09: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCC_RESERVED_10: xuint32,
    #[doc = "< price"]
    pub xcc_correct_price: XC_PRICE,
    #[doc = "< size"]
    pub xcc_correct_size: XC_VOLUME,
    #[doc = "< volume"]
    pub xcc_volume: XC_VOLUME,
    #[doc = "< total change"]
    pub xcc_total_change: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint32,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: xuint8,
    #[doc = "< Expiration date"]
    pub xcr_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xcr_bid_hitime: XC_HITIME,
    #[doc = "< Ask timestamp"]
    pub xcr_ask_hitime: XC_HITIME,
    #[doc = "< Bid implied size"]
    pub xcr_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xcr_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xcr_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint8,
    #[doc = "< Last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xcr_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xcr_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xcr_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xcr_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xcr_pd_setl_hitime: XC_HITIME,
    #[doc = "< Last timestamp"]
    pub xcr_last_hitime: XC_HITIME,
    #[doc = "< High timestamp"]
    pub xcr_high_hitime: XC_HITIME,
    #[doc = "< Low timestamp"]
    pub xcr_low_hitime: XC_HITIME,
    #[doc = "< Open timestamp"]
    pub xcr_open_hitime: XC_HITIME,
    #[doc = "< Close timestamp"]
    pub xcr_close_hitime: XC_HITIME,
    #[doc = "< Settlement time"]
    pub xcr_setl_hitime: XC_HITIME,
    #[doc = "< Settlement price"]
    pub xcr_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xcr_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xcr_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint64,
    #[doc = "< Quote qualifiers"]
    pub xcr_quote_quals: XC_QUOTE_QUALS,
    #[doc = "< Trade qualifiers"]
    pub xcr_trade_quals: XC_TRADE_QUALS,
    #[doc = "< Quote sequence"]
    pub xcr_quote_sequence: xuint64,
    #[doc = "< Trade sequence"]
    pub xcr_trade_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_REFRESH_ALL {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint32,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: xuint8,
    #[doc = "< Expiration date"]
    pub xcr_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xcr_bid_extime: XC_EXTIME,
    #[doc = "< Ask timestamp"]
    pub xcr_ask_extime: XC_EXTIME,
    #[doc = "< Bid implied size"]
    pub xcr_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xcr_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xcr_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint8,
    #[doc = "< Last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xcr_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xcr_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xcr_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xcr_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xcr_pd_setl_extime: XC_EXTIME,
    #[doc = "< Last timestamp"]
    pub xcr_last_extime: XC_EXTIME,
    #[doc = "< High timestamp"]
    pub xcr_high_extime: XC_EXTIME,
    #[doc = "< Low timestamp"]
    pub xcr_low_extime: XC_EXTIME,
    #[doc = "< Open timestamp"]
    pub xcr_open_extime: XC_EXTIME,
    #[doc = "< Close timestamp"]
    pub xcr_close_extime: XC_EXTIME,
    #[doc = "< Settlement time"]
    pub xcr_setl_extime: XC_EXTIME,
    #[doc = "< Settlement price"]
    pub xcr_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xcr_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xcr_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL {
    #[doc = "< exchange code"]
    pub xcr_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xcr_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xcr_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xcr_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xcr_quals: XC_REFRESH_QUALS,
    #[doc = "< instrument status"]
    pub xcr_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xcr_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xcr_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xcr_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xcr_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_03: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xcr_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xcr_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xcr_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_04: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_06: xuint32,
    pub xcr_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_07: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xcr_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_08: xuint8,
    #[doc = "< Expiration date"]
    pub xcr_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xcr_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xcr_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xcr_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xcr_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xcr_bid_extime: XC_EXTIME,
    #[doc = "< Ask timestamp"]
    pub xcr_ask_extime: XC_EXTIME,
    #[doc = "< Bid implied size"]
    pub xcr_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xcr_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xcr_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_09: xuint8,
    #[doc = "< tick direction"]
    pub xcr_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_10: xuint8,
    #[doc = "< Last price"]
    pub xcr_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xcr_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xcr_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xcr_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xcr_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xcr_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xcr_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xcr_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xcr_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xcr_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xcr_pd_setl_extime: XC_EXTIME,
    #[doc = "< Last timestamp"]
    pub xcr_last_extime: XC_EXTIME,
    #[doc = "< High timestamp"]
    pub xcr_high_extime: XC_EXTIME,
    #[doc = "< Low timestamp"]
    pub xcr_low_extime: XC_EXTIME,
    #[doc = "< Open timestamp"]
    pub xcr_open_extime: XC_EXTIME,
    #[doc = "< Close timestamp"]
    pub xcr_close_extime: XC_EXTIME,
    #[doc = "< Settlement time"]
    pub xcr_setl_extime: XC_EXTIME,
    #[doc = "< Settlement price"]
    pub xcr_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xcr_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xcr_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xcr_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCR_RESERVED_11: xuint64,
    #[doc = "< Quote qualifiers"]
    pub xcr_quote_quals: XC_QUOTE_QUALS,
    #[doc = "< Trade qualifiers"]
    pub xcr_trade_quals: XC_TRADE_QUALS,
    #[doc = "< Quote sequence"]
    pub xcr_quote_sequence: xuint64,
    #[doc = "< Trade sequence"]
    pub xcr_trade_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint32,
    pub xci_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: xuint8,
    #[doc = "< Expiration date"]
    pub xci_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xci_bid_hitime: XC_HITIME,
    #[doc = "< Ask timestamp"]
    pub xci_ask_hitime: XC_HITIME,
    #[doc = "< Bid implied size"]
    pub xci_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xci_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xci_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint8,
    #[doc = "< Last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xci_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xci_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xci_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xci_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xci_pd_setl_hitime: XC_HITIME,
    #[doc = "< Last timestamp"]
    pub xci_last_hitime: XC_HITIME,
    #[doc = "< High timestamp"]
    pub xci_high_hitime: XC_HITIME,
    #[doc = "< Low timestamp"]
    pub xci_low_hitime: XC_HITIME,
    #[doc = "< Open timestamp"]
    pub xci_open_hitime: XC_HITIME,
    #[doc = "< Close timestamp"]
    pub xci_close_hitime: XC_HITIME,
    #[doc = "< Settlement time"]
    pub xci_setl_hitime: XC_HITIME,
    #[doc = "< Settlement price"]
    pub xci_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xci_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xci_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_IMAGE_ALL {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint32,
    pub xci_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: xuint8,
    #[doc = "< Expiration date"]
    pub xci_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xci_bid_extime: XC_EXTIME,
    #[doc = "< Ask timestamp"]
    pub xci_ask_extime: XC_EXTIME,
    #[doc = "< Bid implied size"]
    pub xci_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xci_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xci_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint8,
    #[doc = "< Last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xci_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xci_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xci_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xci_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xci_pd_setl_extime: XC_EXTIME,
    #[doc = "< Last timestamp"]
    pub xci_last_extime: XC_EXTIME,
    #[doc = "< High timestamp"]
    pub xci_high_extime: XC_EXTIME,
    #[doc = "< Low timestamp"]
    pub xci_low_extime: XC_EXTIME,
    #[doc = "< Open timestamp"]
    pub xci_open_extime: XC_EXTIME,
    #[doc = "< Close timestamp"]
    pub xci_close_extime: XC_EXTIME,
    #[doc = "< Settlement time"]
    pub xci_setl_extime: XC_EXTIME,
    #[doc = "< Settlement price"]
    pub xci_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xci_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xci_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL {
    #[doc = "< exchange code"]
    pub xci_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xci_country_code: XC_COUNTRY_ID,
    #[doc = "< native symbol"]
    pub xci_symbol: XC_SYMBOL,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< instrument status"]
    pub xci_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xci_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_02: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_03: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_04: xuint64,
    #[doc = "< Alternate symbol ID 1"]
    pub xci_alternate_id1: XC_ALTERNATE_ID,
    #[doc = "< Alternate symbol ID 2"]
    pub xci_alternate_id2: XC_ALTERNATE_ID,
    #[doc = "< Currency for symbol"]
    pub xci_currency: XC_CURRENCY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_05: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_06: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_07: xuint32,
    pub xci_exch_time_offset: xint32,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_08: [xuint8; 10usize],
    #[doc = "< bid tick direction"]
    pub xci_bid_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_09: xuint8,
    #[doc = "< Expiration date"]
    pub xci_expiration: XC_DATE,
    #[doc = "< Bid price"]
    pub xci_bid_price: XC_PRICE,
    #[doc = "< Bid size"]
    pub xci_bid_size: XC_VOLUME,
    #[doc = "< Ask price"]
    pub xci_ask_price: XC_PRICE,
    #[doc = "< Ask size"]
    pub xci_ask_size: XC_VOLUME,
    #[doc = "< Bid timestamp"]
    pub xci_bid_extime: XC_EXTIME,
    #[doc = "< Ask timestamp"]
    pub xci_ask_extime: XC_EXTIME,
    #[doc = "< Bid implied size"]
    pub xci_bid_implied_size: XC_VOLUME,
    #[doc = "< Ask implied size"]
    pub xci_ask_implied_size: XC_VOLUME,
    #[doc = "< Previous day settlement price"]
    pub xci_pd_setl_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_10: xuint8,
    #[doc = "< tick direction"]
    pub xci_trade_tick_flags: XC_TICK_FLAGS,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_11: xuint8,
    #[doc = "< Last price"]
    pub xci_last_price: XC_PRICE,
    #[doc = "< Last size"]
    pub xci_last_size: XC_VOLUME,
    #[doc = "< Volume"]
    pub xci_volume: XC_VOLUME,
    #[doc = "< Total change"]
    pub xci_total_change: XC_PRICE,
    #[doc = "< High price"]
    pub xci_high_price: XC_PRICE,
    #[doc = "< Low price"]
    pub xci_low_price: XC_PRICE,
    #[doc = "< High end of open price range"]
    pub xci_open_price_high: XC_PRICE,
    #[doc = "< Low end of open price range"]
    pub xci_open_price_low: XC_PRICE,
    #[doc = "< High end of close price range"]
    pub xci_close_price_high: XC_PRICE,
    #[doc = "< Low end of close price range"]
    pub xci_close_price_low: XC_PRICE,
    #[doc = "< Previous day settlement time"]
    pub xci_pd_setl_extime: XC_EXTIME,
    #[doc = "< Last timestamp"]
    pub xci_last_extime: XC_EXTIME,
    #[doc = "< High timestamp"]
    pub xci_high_extime: XC_EXTIME,
    #[doc = "< Low timestamp"]
    pub xci_low_extime: XC_EXTIME,
    #[doc = "< Open timestamp"]
    pub xci_open_extime: XC_EXTIME,
    #[doc = "< Close timestamp"]
    pub xci_close_extime: XC_EXTIME,
    #[doc = "< Settlement time"]
    pub xci_setl_extime: XC_EXTIME,
    #[doc = "< Settlement price"]
    pub xci_setl_price: XC_PRICE,
    #[doc = "< Session date of the trade."]
    pub xci_trading_session_date: XC_DATE,
    #[doc = "< Open interest"]
    pub xci_open_interest: XC_VOLUME,
    #[doc = "< Previous Day Volume"]
    pub xci_pd_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCI_RESERVED_12: xuint64,
    #[doc = "< Quote qualifiers"]
    pub xci_quote_quals: XC_QUOTE_QUALS,
    #[doc = "< Trade qualifiers"]
    pub xci_trade_quals: XC_TRADE_QUALS,
    #[doc = "< Quote sequence"]
    pub xci_quote_sequence: xuint64,
    #[doc = "< Trade sequence"]
    pub xci_trade_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_ENTRY {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_01: xuint8,
    #[doc = "< Market maker identifier"]
    pub xob_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xob_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xob_size: XC_VOLUME,
    #[doc = "< Order qualifiers"]
    pub xob_order_quals: XC_QUOTE_QUALS,
    #[doc = "< Order reference id"]
    pub xob_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xob_origin_extime: XC_EXTIME,
    #[doc = "< Exchange code"]
    pub xob_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xob_country: XC_COUNTRY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_02: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_01: xuint8,
    #[doc = "< Market maker identifier"]
    pub xob_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xob_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xob_size: XC_VOLUME,
    #[doc = "< Order qualifiers"]
    pub xob_order_quals: XC_QUOTE_QUALS,
    #[doc = "< Order reference id"]
    pub xob_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xob_origin_extime: XC_EXTIME,
    #[doc = "< Exchange code"]
    pub xob_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xob_country: XC_COUNTRY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_02: xuint32,
    #[doc = "< Order priority"]
    pub xob_order_priority: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_ENTRY {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_extime: XC_EXTIME,
    #[doc = "< Size of non-professional customer orders"]
    pub xpb_customer_volume: XC_VOLUME,
    #[doc = "< Size of professional customer orders"]
    pub xpb_professional_volume: XC_VOLUME,
    #[doc = "< Size of market maker orders"]
    pub xpb_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_LEVEL {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price level"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
    #[doc = "< Size of implied orders"]
    pub xpb_implied_volume: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price level"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_extime: XC_EXTIME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
    #[doc = "< Size of implied orders"]
    pub xpb_implied_volume: XC_VOLUME,
    #[doc = "< Size of non-professional customer orders"]
    pub xpb_customer_volume: XC_VOLUME,
    #[doc = "< Size of professional customer orders"]
    pub xpb_professional_volume: XC_VOLUME,
    #[doc = "< Size of market maker orders"]
    pub xpb_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_03: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_UPDATE {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Market maker identifier"]
    pub xobu_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xobu_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xobu_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_03: xuint32,
    #[doc = "< Order reference id"]
    pub xobu_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xobu_origin_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Market maker identifier"]
    pub xobu_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xobu_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xobu_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_03: xuint32,
    #[doc = "< Order reference id"]
    pub xobu_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xobu_origin_extime: XC_EXTIME,
    #[doc = "< Order priority"]
    pub xobu_order_priority: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_UPDATE_ALL {
    #[doc = "< exchange code"]
    pub xobu_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xobu_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xobu_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xobu_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xobu_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xobu_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xobu_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xobu_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xobu_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xobu_sequence: xuint64,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Market maker identifier"]
    pub xobu_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xobu_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xobu_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_06: xuint32,
    #[doc = "< Order reference id"]
    pub xobu_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xobu_origin_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_CPMVOL {
    #[doc = "< Volume attributed to non-professional customer"]
    pub xcpm_customer_volume: XC_VOLUME,
    #[doc = "< Volume attributed to professional customer"]
    pub xcpm_professional_volume: XC_VOLUME,
    #[doc = "< Volume attributed to market maker"]
    pub xcpm_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XCPM_RESERVED_00: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_ALL {
    #[doc = "< exchange code"]
    pub xpbu_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xpbu_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xpbu_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xpbu_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xpbu_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xpbu_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xpbu_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xpbu_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xpbu_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xpbu_sequence: xuint64,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL {
    #[doc = "< exchange code"]
    pub xpbu_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xpbu_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xpbu_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xpbu_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xpbu_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xpbu_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xpbu_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xpbu_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xpbu_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xpbu_sequence: xuint64,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
    #[doc = "< Volume attributed to non-professional customer"]
    pub xpbu_customer_volume: XC_VOLUME,
    #[doc = "< Volume attributed to professional customer"]
    pub xpbu_professional_volume: XC_VOLUME,
    #[doc = "< Volume attributed to market maker"]
    pub xpbu_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_05: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
    #[doc = "< Row level"]
    pub xpbu_row_level: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL {
    #[doc = "< exchange code"]
    pub xpbu_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xpbu_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xpbu_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xpbu_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xpbu_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xpbu_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xpbu_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xpbu_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xpbu_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xpbu_sequence: xuint64,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
    #[doc = "< Row level"]
    pub xpbu_row_level: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_05: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL {
    #[doc = "< exchange code"]
    pub xpbu_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xpbu_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xpbu_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xpbu_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xpbu_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xpbu_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xpbu_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xpbu_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xpbu_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xpbu_sequence: xuint64,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_extime: XC_EXTIME,
    #[doc = "< Row level"]
    pub xpbu_row_level: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_05: xuint16,
    #[doc = "< Volume attributed to non-professional customer"]
    pub xpbu_customer_volume: XC_VOLUME,
    #[doc = "< Volume attributed to professional customer"]
    pub xpbu_professional_volume: XC_VOLUME,
    #[doc = "< Volume attributed to market maker"]
    pub xpbu_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_06: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_01: xuint8,
    #[doc = "< Market maker identifier"]
    pub xob_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xob_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xob_size: XC_VOLUME,
    #[doc = "< Order qualifiers"]
    pub xob_order_quals: XC_QUOTE_QUALS,
    #[doc = "< Order reference id"]
    pub xob_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xob_origin_hitime: XC_HITIME,
    #[doc = "< Exchange code"]
    pub xob_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xob_country: XC_COUNTRY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_02: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_01: xuint8,
    #[doc = "< Market maker identifier"]
    pub xob_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xob_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xob_size: XC_VOLUME,
    #[doc = "< Order qualifiers"]
    pub xob_order_quals: XC_QUOTE_QUALS,
    #[doc = "< Order reference id"]
    pub xob_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xob_origin_hitime: XC_HITIME,
    #[doc = "< Exchange code"]
    pub xob_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xob_country: XC_COUNTRY_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOB_RESERVED_02: xuint32,
    #[doc = "< Order priority"]
    pub xob_order_priority: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_hitime: XC_HITIME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_hitime: XC_HITIME,
    #[doc = "< Size of non-professional customer orders"]
    pub xpb_customer_volume: XC_VOLUME,
    #[doc = "< Size of professional customer orders"]
    pub xpb_professional_volume: XC_VOLUME,
    #[doc = "< Size of market maker orders"]
    pub xpb_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price level"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
    #[doc = "< Size of implied orders"]
    pub xpb_implied_volume: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_01: xuint8,
    #[doc = "< Number of orders at this price level"]
    pub xpb_order_count: xuint16,
    #[doc = "< Exchange code"]
    pub xpb_exch: XC_EXCHANGE_ID,
    #[doc = "< Country code"]
    pub xpb_country: XC_COUNTRY_ID,
    #[doc = "< Price"]
    pub xpb_price: XC_PRICE,
    #[doc = "< Size of all orders"]
    pub xpb_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpb_hitime: XC_HITIME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_02: xuint32,
    #[doc = "< Size of implied orders"]
    pub xpb_implied_volume: XC_VOLUME,
    #[doc = "< Size of non-professional customer orders"]
    pub xpb_customer_volume: XC_VOLUME,
    #[doc = "< Size of professional customer orders"]
    pub xpb_professional_volume: XC_VOLUME,
    #[doc = "< Size of market maker orders"]
    pub xpb_market_maker_volume: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XPB_RESERVED_03: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Market maker identifier"]
    pub xobu_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xobu_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xobu_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_03: xuint32,
    #[doc = "< Order reference id"]
    pub xobu_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xobu_origin_hitime: XC_HITIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Market maker identifier"]
    pub xobu_mmid: XC_MMID,
    #[doc = "< Price of order"]
    pub xobu_price: XC_PRICE,
    #[doc = "< Size of order"]
    pub xobu_size: XC_VOLUME,
    #[doc = "< -- Reserved for future use --"]
    pub XOBU_RESERVED_03: xuint32,
    #[doc = "< Order reference id"]
    pub xobu_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Origination time of order"]
    pub xobu_origin_hitime: XC_HITIME,
    #[doc = "< Order priority"]
    pub xobu_order_priority: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_hitime: XC_HITIME,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< Number of orders at this price level"]
    pub xpbu_order_count: xuint16,
    #[doc = "< Price at level"]
    pub xpbu_price: XC_PRICE,
    #[doc = "< Volume"]
    pub xpbu_volume: XC_VOLUME,
    #[doc = "< Time of latest order"]
    pub xpbu_hitime: XC_HITIME,
    #[doc = "< Row level"]
    pub xpbu_row_level: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XPBU_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_EXECUTION_V3_1_7 {
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_00: xuint32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub xoex_order_ref_id_type: XC_ORDER_REF_ID_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_02: [xuint8; 2usize],
    #[doc = "< Price"]
    pub xoex_price: XC_PRICE,
    #[doc = "< Size"]
    pub xoex_size: XC_VOLUME,
    #[doc = "< Trade reference id"]
    pub xoex_trade_ref: XC_ORDER_REF_ID,
    #[doc = "< Order reference id"]
    pub xoex_order_ref: XC_ORDER_REF_ID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_EXECUTION {
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_00: xuint32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub xoex_order_ref_id_type: XC_ORDER_REF_ID_TYPE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_03: xuint8,
    #[doc = "< Price"]
    pub xoex_price: XC_PRICE,
    #[doc = "< Size"]
    pub xoex_size: XC_VOLUME,
    #[doc = "< Trade reference id"]
    pub xoex_trade_ref: XC_ORDER_REF_ID,
    #[doc = "< Deprecated order reference id"]
    pub xoex_order_ref: XC_ORDER_REF_ID,
    pub xoex_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_04: xuint16,
    #[doc = "< Bid side order reference id"]
    pub xoex_bid_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Ask side order reference id"]
    pub xoex_ask_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Bid side market maker id"]
    pub xoex_bid_mmid: XC_MMID,
    #[doc = "< Ask side market maker id"]
    pub xoex_ask_mmid: XC_MMID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7 {
    #[doc = "< exchange code"]
    pub xoex_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xoex_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xoex_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xoex_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xoex_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xoex_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xoex_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xoex_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xoex_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xoex_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_03: xuint32,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub xoex_order_ref_id_type: XC_ORDER_REF_ID_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_05: [xuint8; 2usize],
    #[doc = "< Price"]
    pub xoex_price: XC_PRICE,
    #[doc = "< Size"]
    pub xoex_size: XC_VOLUME,
    #[doc = "< Trade reference id"]
    pub xoex_trade_ref: XC_ORDER_REF_ID,
    #[doc = "< Order reference id"]
    pub xoex_order_ref: XC_ORDER_REF_ID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_EXECUTION_ALL {
    #[doc = "< exchange code"]
    pub xoex_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xoex_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xoex_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xoex_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xoex_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xoex_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xoex_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xoex_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xoex_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xoex_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_03: xuint32,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub xoex_order_ref_id_type: XC_ORDER_REF_ID_TYPE,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_06: xuint8,
    #[doc = "< Price"]
    pub xoex_price: XC_PRICE,
    #[doc = "< Size"]
    pub xoex_size: XC_VOLUME,
    #[doc = "< Trade reference id"]
    pub xoex_trade_ref: XC_ORDER_REF_ID,
    #[doc = "< Deprecated order reference id"]
    pub xoex_order_ref: XC_ORDER_REF_ID,
    pub xoex_sub_market: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XOEX_RESERVED_07: xuint16,
    #[doc = "< Bid side order reference id"]
    pub xoex_bid_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Ask side order reference id"]
    pub xoex_ask_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Bid side market maker id"]
    pub xoex_bid_mmid: XC_MMID,
    #[doc = "< Ask side market maker id"]
    pub xoex_ask_mmid: XC_MMID,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE {
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_00: xuint16,
    #[doc = "< Type of order imbalance"]
    pub xoimb_type: XC_ORDER_IMBALANCE_TYPE,
    #[doc = "< Type of auction cross"]
    pub xoimb_auction_type: XC_ORDER_IMBALANCE_AUCTION_TYPE,
    #[doc = "< Number of shares out of balance"]
    pub xoimb_imbalance_volume: XC_VOLUME,
    pub xoimb_paired_volume: XC_VOLUME,
    #[doc = "< Reference price point for imbalance"]
    pub xoimb_reference_price: XC_PRICE,
    pub xoimb_near_price: XC_PRICE,
    pub xoimb_far_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE_ALL {
    #[doc = "< exchange code"]
    pub xoimb_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xoimb_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xoimb_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xoimb_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xoimb_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xoimb_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xoimb_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xoimb_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xoimb_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xoimb_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_03: xuint16,
    #[doc = "< Type of order imbalance"]
    pub xoimb_type: XC_ORDER_IMBALANCE_TYPE,
    #[doc = "< Type of auction cross"]
    pub xoimb_auction_type: XC_ORDER_IMBALANCE_AUCTION_TYPE,
    #[doc = "< Number of shares out of balance"]
    pub xoimb_imbalance_volume: XC_VOLUME,
    pub xoimb_paired_volume: XC_VOLUME,
    #[doc = "< Reference price point for imbalance"]
    pub xoimb_reference_price: XC_PRICE,
    pub xoimb_near_price: XC_PRICE,
    pub xoimb_far_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE_AUCTION {
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_00: [xuint8; 4usize],
    pub xoimb_imbalance_quals: XC_QUOTE_QUALS,
    pub xoimb_imbalance_sequence: xuint64,
    pub xoimb_imbalance_receive_hitime: XC_HITIME,
    pub xoimb_imbalance_type: XC_ORDER_IMBALANCE_TYPE,
    pub xoimb_imbalance_auction_type: XC_ORDER_IMBALANCE_AUCTION_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_01: [xuint8; 2usize],
    pub xoimb_imbalance_volume: XC_VOLUME,
    pub xoimb_imbalance_paired_volume: XC_VOLUME,
    pub xoimb_imbalance_reference_price: XC_PRICE,
    pub xoimb_imbalance_near_price: XC_PRICE,
    pub xoimb_imbalance_far_price: XC_PRICE,
    pub xoimb_imbalance_auction_id: XC_EVENT_ID,
    pub xoimb_imbalance_auction_start_hitime: XC_HITIME,
    pub xoimb_imbalance_auction_end_hitime: XC_HITIME,
    pub xoimb_imbalance_auction_owner: [::std::os::raw::c_char; 8usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED {
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_00: [xuint8; 4usize],
    pub xoimb_imbalance_quals: XC_QUOTE_QUALS,
    pub xoimb_imbalance_sequence: xuint64,
    pub xoimb_imbalance_receive_hitime: XC_HITIME,
    pub xoimb_imbalance_type: XC_ORDER_IMBALANCE_TYPE,
    pub xoimb_imbalance_unpaired_type: XC_ORDER_IMBALANCE_TYPE,
    pub xoimb_imbalance_auction_type: XC_ORDER_IMBALANCE_AUCTION_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_01: [xuint8; 1usize],
    pub xoimb_imbalance_volume: XC_VOLUME,
    pub xoimb_imbalance_paired_volume: XC_VOLUME,
    pub xoimb_imbalance_unpaired_volume: XC_VOLUME,
    pub xoimb_imbalance_reference_price: XC_PRICE,
    pub xoimb_imbalance_nominal_reference_price: XC_PRICE,
    pub xoimb_imbalance_near_price: XC_PRICE,
    pub xoimb_imbalance_far_price: XC_PRICE,
    pub xoimb_imbalance_auction_id: XC_EVENT_ID,
    pub xoimb_imbalance_auction_start_hitime: XC_HITIME,
    pub xoimb_imbalance_auction_end_hitime: XC_HITIME,
    pub xoimb_imbalance_auction_owner: [::std::os::raw::c_char; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE_REGULATORY {
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_00: xuint16,
    pub xoimb_imbalance_reg_type: XC_ORDER_IMBALANCE_TYPE,
    pub xoimb_imbalance_reg_unpaired_type: XC_ORDER_IMBALANCE_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XOIMB_RESERVED_01: xuint32,
    pub xoimb_imbalance_reg_volume: XC_VOLUME,
    pub xoimb_imbalance_reg_paired_volume: XC_VOLUME,
    pub xoimb_imbalance_reg_unpaired_volume: XC_VOLUME,
    pub xoimb_imbalance_reg_nominal_reference_price: XC_PRICE,
    pub xoimb_imbalance_reg_auction_start_hitime: XC_HITIME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_INDICATION_OF_INTEREST {
    #[doc = "< Price offset for an IOI bid order"]
    pub ioi_ioi_bid_offset_price: XC_PRICE,
    #[doc = "< Price offset for an IOI ask order"]
    pub ioi_ioi_ask_offset_price: XC_PRICE,
    #[doc = "< Type of an IOI bid order"]
    pub ioi_ioi_bid_quals: XC_QUOTE_QUALS,
    #[doc = "< Type of an IOI ask order"]
    pub ioi_ioi_ask_quals: XC_QUOTE_QUALS,
    #[doc = "< Unique identifier for an IOI bid order"]
    pub ioi_ioi_bid_order_ref: XC_ORDER_REF_ID,
    #[doc = "< Unique identifier for an IOI ask order"]
    pub ioi_ioi_ask_order_ref: XC_ORDER_REF_ID,
    #[doc = "< BID/ASK order reference type"]
    pub ioi_ioi_order_ref_type: XC_ORDER_REF_ID_TYPE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub IOI_RESERVED_01: [xuint8; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING {
    pub xoimb_imbalance_auction_clearing_leg_security_id: xuint64,
    #[doc = "< Identifier of clearing firm"]
    pub xoimb_imbalance_auction_clearing_firm: [::std::os::raw::c_char; 8usize],
    #[doc = "< Identifier of clearing account"]
    pub xoimb_imbalance_auction_clearing_account: [::std::os::raw::c_char; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_MARKET_DIRECTORY {
    #[doc = "< -- Reserved for future use --"]
    pub XMD_RESERVED_00: xuint32,
    #[doc = "< Financial status of instrument"]
    pub xmd_financial_status: XC_FINANCIAL_STATUS,
    #[doc = "< Market segment of instrument"]
    pub xmd_market_segment: XC_MARKET_SEGMENT,
    #[doc = "< prime exchange code"]
    pub xmd_prime_exch: XC_EXCHANGE_ID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_MARKET_DIRECTORY_ALL {
    #[doc = "< exchange code"]
    pub xmd_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xmd_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xmd_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xmd_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xmd_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xmd_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xmd_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XMD_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xmd_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xmd_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xmd_sequence: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub XMD_RESERVED_03: xuint32,
    #[doc = "< Financial status of instrument"]
    pub xmd_financial_status: XC_FINANCIAL_STATUS,
    #[doc = "< Market segment of instrument"]
    pub xmd_market_segment: XC_MARKET_SEGMENT,
    #[doc = "< prime exchange code"]
    pub xmd_prime_exch: XC_EXCHANGE_ID,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_REQUEST_FOR_QUOTE {
    #[doc = "< Quantity of requested quote"]
    pub xrfq_requested_size: XC_VOLUME,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XRFQ_RESERVED_01: [xuint8; 3usize],
    #[doc = "< Request ID"]
    pub xrfq_quote_request_id: XC_EVENT_ID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_REQUEST_FOR_QUOTE_ALL {
    #[doc = "< exchange code"]
    pub xrfq_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xrfq_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xrfq_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xrfq_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xrfq_quals: XC_QUOTE_QUALS,
    #[doc = "< instrument status"]
    pub xrfq_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xrfq_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XRFQ_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xrfq_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xrfq_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xrfq_sequence: xuint64,
    #[doc = "< Quantity of requested quote"]
    pub xrfq_requested_size: XC_VOLUME,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XRFQ_RESERVED_04: [xuint8; 3usize],
    #[doc = "< Request ID"]
    pub xrfq_quote_request_id: XC_EVENT_ID,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_TRADING_ACTION_ALL {
    #[doc = "< exchange code"]
    pub xta_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xta_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xta_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xta_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xta_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xta_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xta_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XTA_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xta_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xta_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xta_sequence: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_TRADING_ACTION_WITH_LULD_ALL {
    #[doc = "< exchange code"]
    pub xta_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< country code"]
    pub xta_country_code: XC_COUNTRY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< symbol type"]
    pub xta_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< data source line identifier"]
    pub xta_line_id: XC_LINE_ID,
    #[doc = "< event qualifiers"]
    pub xta_quals: XC_TRADE_QUALS,
    #[doc = "< instrument status"]
    pub xta_instrument_status: XC_TRADING_STATE,
    #[doc = "< market status"]
    pub xta_market_status: XC_TRADING_STATE,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub XTA_RESERVED_02: xuint8,
    #[doc = "< exchange time - published by feed"]
    pub xta_exchange_hitime: XC_HITIME,
    #[doc = "< receive time - stamped by appliance"]
    pub xta_receive_hitime: XC_HITIME,
    #[doc = "< data sequence number"]
    pub xta_sequence: xuint64,
    pub xta_upper_limit_price: XC_PRICE,
    pub xta_lower_limit_price: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_NAV_UPDATE_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub NAV_RESERVED_00: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub NAV_RESERVED_02: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub NAV_RESERVED_03: xuint32,
    #[doc = "< Number of unopened constituents"]
    pub nav_unopened_count: xuint16,
    #[doc = "< Number of halted constituents"]
    pub nav_halted_count: xuint16,
    #[doc = "< NAV computed with last trade price"]
    pub nav_last: XC_PRICE,
    #[doc = "< NAV computed with bid price"]
    pub nav_bid: XC_PRICE,
    #[doc = "< NAV computed with ask price"]
    pub nav_ask: XC_PRICE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_BASKET_HEADER {
    #[doc = "< divisor for the basket"]
    pub bskh_divisor: xreal64,
    #[doc = "< cash position for basket"]
    pub bskh_cash_position: xreal64,
    #[doc = "< value for delta trigger on last price"]
    pub bskh_delta_last: xreal64,
    #[doc = "< value for delta trigger on bid price"]
    pub bskh_delta_bid: xreal64,
    #[doc = "< value for delta trigger on ask price"]
    pub bskh_delta_ask: xreal64,
    #[doc = "< value for delta trigger on ask price"]
    pub bskh_user_nav1: xreal64,
    #[doc = "< value for delta trigger on ask price"]
    pub bskh_user_nav2: xreal64,
}
#[repr(C, packed)]
pub struct XC_GROUP_BASKET_CONSTITUENT {
    #[doc = "< key of instrument"]
    pub bskc_key_string: [::std::os::raw::c_char; 80usize],
    pub bskc_status: xerr,
    #[doc = "< -- Reserved for future use --"]
    pub BSKC_RESERVED_00: xint32,
    #[doc = "< weighting factor"]
    pub bskc_weight: xreal64,
    #[doc = "< Halted price of the constituent."]
    pub bskc_halted_price: XC_PRICE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub BSKC_RESERVED_02: [xuint8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_BASKET_CONSTITUENT_INFO {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub BCONS_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub BCONS_RESERVED_02: xuint16,
    #[doc = "< price to use in NAV calculation while constituent is halted"]
    pub bcons_halted_price: XC_PRICE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_BASKET_CATALOG_UPDATE_ALL {
    #[doc = "< key information for basket"]
    pub blu_key_string: [::std::os::raw::c_char; 80usize],
    #[doc = "< list update information"]
    pub blu_update_info: XC_LIST_UPDATE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_KEYLIST_HEADER {
    #[doc = "< Date when keylist was last created or modified"]
    pub klh_update_date: XC_DATE,
    #[doc = "< Time when keylist was last created or modified"]
    pub klh_update_time: XC_TIME,
    #[doc = "< Description of keylist (NUL-terminated)"]
    pub klh_description: XC_KEYLIST_DESCRIPTION,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_KEYLIST_ITEM {
    #[doc = "< Matched key"]
    pub kli_key: XC_KEY,
    #[doc = "< Type of symbol of item key"]
    pub kli_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub KLI_RESERVED_00: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub KLI_RESERVED_01: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub KLI_RESERVED_02: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_KEYLIST_CATALOG_ITEM {
    #[doc = "< Key of keylist"]
    pub klci_key: XC_KEY,
    #[doc = "< Type of symbol of keylist"]
    pub klci_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub KLCI_RESERVED_00: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub KLCI_RESERVED_01: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub KLCI_RESERVED_02: xuint32,
    #[doc = "< Date when keylist was last created or modified"]
    pub klci_update_date: XC_DATE,
    #[doc = "< Time when keylist was last created or modified"]
    pub klci_update_time: XC_TIME,
    #[doc = "< Description of keylist (NUL-terminated)"]
    pub klci_description: XC_KEYLIST_DESCRIPTION,
    #[doc = "< list update information"]
    pub klci_update_info: XC_LIST_UPDATE,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_LINE_STATS {
    #[doc = "< Line identifier"]
    pub lst_identifier: XC_LINE_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub LST_RESERVED_02: xuint16,
    #[doc = "< Number of UDP sockets configured for this line"]
    pub lst_udp_socket_count: xuint8,
    #[doc = "< Number of TCPP sockets configured for this line"]
    pub lst_tcp_socket_count: xuint8,
    #[doc = "< Time at which statistics were computed"]
    pub lst_timestamp: XC_HITIME,
    #[doc = "< Line name"]
    pub lst_name: XC_STATS_IDENTIFIER,
    #[doc = "< Name of associated feed"]
    pub lst_feed_id: XC_FEED_ID,
    #[doc = "< Name of feed handler"]
    pub lst_handler_name: XC_STATS_IDENTIFIER,
    #[doc = "< Version of feed handler"]
    pub lst_handler_version: XC_STATS_IDENTIFIER,
    #[doc = "< Total number of new messages missed due to data gaps"]
    pub lst_gap_count: xuint64,
    #[doc = "< Time of last gap"]
    pub lst_last_gap_time: XC_HITIME,
    #[doc = "< Current time skew between pairs of feeds for this line"]
    pub lst_line_skew: XC_HITIME_DELTA,
    #[doc = "< Current time skew between pairs of feeds for this line"]
    pub lst_exchange_skew: XC_HITIME_DELTA,
    #[doc = "< Total post-arbitration messages received"]
    pub lst_message_count: xuint64,
    #[doc = "< Post-arbitration messages received per second"]
    pub lst_message_rate: xuint64,
    #[doc = "< Total post-arbitration bytes received"]
    pub lst_byte_count: xuint64,
    #[doc = "< Post-arbitration bytes received per second"]
    pub lst_byte_rate: xuint64,
    #[doc = "< Total post-arbitration packets received"]
    pub lst_packet_count: xuint64,
    #[doc = "< Post-arbitration packets received per second"]
    pub lst_packet_rate: xuint64,
    #[doc = "< Post-arbitration trades received"]
    pub lst_trade_count: xuint64,
    #[doc = "< Post-arbitration trades received per second"]
    pub lst_trade_rate: xuint64,
    #[doc = "< Post-arbitration quotes received"]
    pub lst_quote_count: xuint64,
    #[doc = "< Post-arbitration quotes received per second"]
    pub lst_quote_rate: xuint64,
    pub lst_peak_message_burstrate: xuint64,
    pub lst_packet_burstrate_at_message_peak: xuint64,
    pub lst_byte_burstrate_at_message_peak: xuint64,
    pub lst_peak_message_hirate: xuint64,
    pub lst_packet_hirate_at_message_peak: xuint64,
    pub lst_byte_hirate_at_message_peak: xuint64,
    #[doc = "< Time of burst peak"]
    pub lst_peak_time_burstrate: XC_HITIME,
    #[doc = "< Time of hi peak"]
    pub lst_peak_time_hirate: XC_HITIME,
    #[doc = "< BURSTRATE detection interval as frequency"]
    pub lst_burstrate_timespan: XC_HITIME_DELTA,
    #[doc = "< HIRATE detection interval as frequency"]
    pub lst_hirate_timespan: XC_HITIME_DELTA,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_SOCKET_STATS {
    #[doc = "< Line identifier"]
    pub sst_identifier: XC_LINE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub SST_RESERVED_00: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub SST_RESERVED_01: xuint32,
    #[doc = "< Line name"]
    pub sst_line_name: XC_STATS_IDENTIFIER,
    #[doc = "< Time at which statistics were computed"]
    pub sst_timestamp: XC_HITIME,
    #[doc = "< Type of socket"]
    pub sst_connection_type: XC_STATS_MINI_IDENTIFIER,
    pub sst_feed_address: XC_IPV4_ADDRESS,
    pub sst_feed_multicast: XC_IPV4_ADDRESS,
    #[doc = "< IPv4 address of local interface on Exegy appliance"]
    pub sst_appliance_address: XC_IPV4_ADDRESS,
    #[doc = "< TCP/UDP port number of data feed connection"]
    pub sst_port: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub SST_RESERVED_02: xuint16,
    #[doc = "< Total pre-arbitration messages received"]
    pub sst_message_count: xuint64,
    #[doc = "< Pre-arbitration messages received per second"]
    pub sst_message_rate: xuint64,
    #[doc = "< Total pre-arbitration bytes received"]
    pub sst_byte_count: xuint64,
    #[doc = "< Pre-arbitration bytes received per second"]
    pub sst_byte_rate: xuint64,
    #[doc = "< Total pre-arbitration packets received"]
    pub sst_packet_count: xuint64,
    #[doc = "< Pre-arbitration packets received per second"]
    pub sst_packet_rate: xuint64,
    #[doc = "< -- Reserved for future use --"]
    pub SST_RESERVED_03: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_LINE_GAP_LINE_INFO {
    #[doc = "< Line identifier"]
    pub lginf_line_identifier: XC_LINE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub LGINF_RESERVED_00: [xuint8; 6usize],
    #[doc = "< Time at which gap list was retrieved"]
    pub lginf_timestamp: XC_HITIME,
    #[doc = "< Name of associated feed"]
    pub lginf_feed_id: XC_FEED_ID,
    #[doc = "< Name of line"]
    pub lginf_line_name: XC_STATS_IDENTIFIER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_LINE_GAPS {
    #[doc = "< Sequence number of first missing item in this gap range"]
    pub lgi_first_missing: xuint64,
    #[doc = "< Number of missing items in this gap range"]
    pub lgi_count_missing: xuint64,
    #[doc = "< Time of this gap range"]
    pub lgi_time: XC_HITIME,
    #[doc = "< Subline number of this gap range"]
    pub lgi_subline: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub LGI_RESERVED_00: [xuint8; 7usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FEED_INFO {
    #[doc = "< Feed name, handle"]
    pub fi_feed_id: XC_FEED_ID,
    #[doc = "< Country code"]
    pub fi_country_code: XC_COUNTRY_ID,
    #[doc = "< Exchange code"]
    pub fi_exchange_code: XC_EXCHANGE_ID,
    #[doc = "< Market status"]
    pub fi_market_status: XC_TRADING_STATE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub FI_RESERVED_01: xuint16,
    #[doc = "< Exchange label, official marketing string"]
    pub fi_exchange_label: XC_STATS_LONG_IDENTIFIER,
    #[doc = "< Feed label, official marketing string"]
    pub fi_feed_label: XC_STATS_LONG_IDENTIFIER,
    #[doc = "< Feed handler name"]
    pub fi_feed_handler_name: XC_STATS_IDENTIFIER,
    #[doc = "< Feed handler version number"]
    pub fi_feed_handler_version: XC_STATS_IDENTIFIER,
    #[doc = "< Nominal open time for feed"]
    pub fi_nominal_open: XC_STATS_MINI_IDENTIFIER,
    #[doc = "< Nominal close time for feed"]
    pub fi_nominal_close: XC_STATS_MINI_IDENTIFIER,
    #[doc = "< Timezone for feed"]
    pub fi_timezone: XC_STATS_IDENTIFIER,
    #[doc = "< Exchange time at which status change was published"]
    pub fi_exchange_hitime: XC_HITIME,
    pub fi_update_info: XC_LIST_UPDATE,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_MWCB {
    pub mwcb_level1_price: XC_PRICE,
    pub mwcb_level2_price: XC_PRICE,
    pub mwcb_level3_price: XC_PRICE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub MWCB_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub MWCB_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_V3_8 {
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_00: xuint16,
    pub drc_primary_mmid: XC_MMID,
    pub drc_market_segment_id: xuint64,
    pub drc_market_segment_desc: xuint64,
    pub drc_product_partition_id: xuint32,
    pub drc_product_bin_id: xuint32,
    pub drc_trade_start_time: XC_TIME,
    pub drc_trade_stop_time: XC_TIME,
    pub drc_tick_count: xuint8,
    pub drc_match_count: xuint8,
    pub drc_auction_count: xuint8,
    pub drc_underlying_count: xuint8,
    pub drc_parent_market_segment_id: [::std::os::raw::c_char; 12usize],
    pub drc_market_segment_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_01: [xuint8; 7usize],
    pub drc_security_id: xuint64,
    pub drc_maturity_date: XC_DATE,
    pub drc_maturity_time: XC_TIME,
    pub drc_contract_size: XC_VOLUME,
    pub drc_strike: XC_PRICE,
    pub drc_strike_currency: XC_CURRENCY_ID,
    pub drc_instrument_status: XC_TRADING_STATE,
    pub drc_deliverable_count: xuint8,
    pub drc_leg_count: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_03: xuint8,
    pub drc_contract_root_string: [::std::os::raw::c_char; 8usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub drc_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_05: [xuint8; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE {
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_00: xuint16,
    pub drc_primary_mmid: XC_MMID,
    pub drc_market_segment_id: xuint64,
    pub drc_market_segment_desc: xuint64,
    pub drc_product_partition_id: xuint32,
    pub drc_product_bin_id: xuint32,
    pub drc_trade_start_time: XC_TIME,
    pub drc_trade_stop_time: XC_TIME,
    pub drc_tick_count: xuint8,
    pub drc_match_count: xuint8,
    pub drc_auction_count: xuint8,
    pub drc_underlying_count: xuint8,
    pub drc_parent_market_segment_id: [::std::os::raw::c_char; 12usize],
    pub drc_market_segment_status: XC_TRADING_STATE,
    pub drc_currency: XC_CURRENCY_ID,
    pub drc_settlement_currency: XC_CURRENCY_ID,
    pub drc_size_rule_count: xuint8,
    #[doc = "< The group to which the security belongs."]
    pub drc_security_group: [::std::os::raw::c_char; 8usize],
    pub drc_product_market_identifier_code: [::std::os::raw::c_char; 4usize],
    #[doc = "< The ISIN of the instrument or product, if provided."]
    pub drc_isin: [::std::os::raw::c_char; 12usize],
    pub drc_asset_class: XC_ASSET_CLASS,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_01: [xuint8; 6usize],
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_02: [xuint64; 2usize],
    pub drc_security_id: xuint64,
    pub drc_maturity_date: XC_DATE,
    pub drc_maturity_time: XC_TIME,
    pub drc_contract_size: XC_VOLUME,
    pub drc_strike: XC_PRICE,
    pub drc_strike_currency: XC_CURRENCY_ID,
    pub drc_instrument_status: XC_TRADING_STATE,
    pub drc_deliverable_count: xuint8,
    pub drc_leg_count: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub drc_attribute_count: xuint8,
    pub drc_contract_root_string: [::std::os::raw::c_char; 8usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub drc_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_05: [xuint8; 6usize],
    pub drc_instrument_market_identifier_code: [::std::os::raw::c_char; 4usize],
    pub drc_display_factor: XC_PRICE,
    pub drc_original_strike_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_06: [xuint8; 3usize],
    #[doc = "< -- Reserved for future use --"]
    pub DRC_RESERVED_07: [xuint64; 2usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT {
    pub dri_product_market_segment_id: xuint64,
    pub dri_security_id: xuint64,
    pub dri_maturity_date: XC_DATE,
    pub dri_maturity_time: XC_TIME,
    pub dri_contract_size: XC_VOLUME,
    pub dri_strike: XC_PRICE,
    pub dri_strike_currency: XC_CURRENCY_ID,
    pub dri_instrument_status: XC_TRADING_STATE,
    pub dri_deliverable_count: xuint8,
    pub dri_leg_count: xuint8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dri_attribute_count: xuint8,
    pub dri_contract_root_string: [::std::os::raw::c_char; 8usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dri_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub DRI_RESERVED_02: [xuint8; 6usize],
    pub dri_instrument_market_identifier_code: [::std::os::raw::c_char; 4usize],
    pub dri_display_factor: XC_PRICE,
    pub dri_original_strike_price: XC_PRICE,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRI_RESERVED_03: [xuint8; 3usize],
    #[doc = "< -- Reserved for future use --"]
    pub DRI_RESERVED_04: [xuint64; 2usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT {
    #[doc = "< -- Reserved for future use --"]
    pub DRP_RESERVED_00: xuint16,
    pub drp_primary_mmid: XC_MMID,
    pub drp_market_segment_id: xuint64,
    pub drp_market_segment_desc: xuint64,
    pub drp_product_partition_id: xuint32,
    pub drp_product_bin_id: xuint32,
    pub drp_trade_start_time: XC_TIME,
    pub drp_trade_stop_time: XC_TIME,
    pub drp_tick_count: xuint8,
    pub drp_match_count: xuint8,
    pub drp_auction_count: xuint8,
    pub drp_underlying_count: xuint8,
    pub drp_parent_market_segment_id: [::std::os::raw::c_char; 12usize],
    pub drp_market_segment_status: XC_TRADING_STATE,
    pub drp_currency: XC_CURRENCY_ID,
    pub drp_settlement_currency: XC_CURRENCY_ID,
    pub drp_size_rule_count: xuint8,
    #[doc = "< The group to which the security belongs."]
    pub drp_security_group: [::std::os::raw::c_char; 8usize],
    pub drp_product_market_identifier_code: [::std::os::raw::c_char; 4usize],
    #[doc = "< The ISIN of the instrument or product, if provided."]
    pub drp_isin: [::std::os::raw::c_char; 12usize],
    pub drp_asset_class: XC_ASSET_CLASS,
    #[doc = "< -- Reserved for future use --"]
    pub DRP_RESERVED_01: [xuint8; 6usize],
    #[doc = "< -- Reserved for future use --"]
    pub DRP_RESERVED_02: [xuint64; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_TICK {
    pub drt_tick_price_range_start: XC_PRICE,
    pub drt_tick_price_range_end: XC_PRICE,
    pub drt_tick_increment: XC_PRICE,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub drt_tick_rule_id: XC_RULE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub DRT_RESERVED_01: [xuint8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_MATCH {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRM_RESERVED_01: [xuint8; 3usize],
    pub drm_match_rule_id: XC_RULE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub DRM_RESERVED_02: [xuint8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE {
    pub drd_deliverable_security_id: xuint64,
    pub drd_deliverable_factor: xuint32,
    pub drd_deliverable_cash: XC_PRICE,
    pub drd_deliverable_currency: XC_CURRENCY_ID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub drd_deliverable_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub DRD_RESERVED_01: [xuint8; 3usize],
    pub drd_deliverable_key_string: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_AUCTION {
    pub dra_auction_types: [::std::os::raw::c_char; 40usize],
    pub dra_auction_rule_id: XC_RULE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub DRA_RESERVED_00: [xuint8; 7usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING {
    pub dru_underlying_key_string: [::std::os::raw::c_char; 32usize],
    #[doc = "< Underlying security id"]
    pub dru_underlying_security_id: xuint64,
    #[doc = "< Underlying symbol type"]
    pub dru_underlying_symbol_type: XC_SYMBOL_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub DRU_RESERVED_00: [xuint8; 7usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE {
    #[doc = "< The minimum tradable quantity of the instrument."]
    pub drsr_size_rule_min_trade: XC_VOLUME,
    #[doc = "< The maximum tradable quantity of the instrument."]
    pub drsr_size_rule_max_trade: XC_VOLUME,
    #[doc = "< The minimum size for submitting bids on the instrument."]
    pub drsr_size_rule_min_bid: XC_VOLUME,
    #[doc = "< The minimum size for submitting asks on the instrument."]
    pub drsr_size_rule_min_ask: XC_VOLUME,
    #[doc = "< The minimum round lot size for the instrument."]
    pub drsr_size_rule_round_lot: XC_VOLUME,
    #[doc = "< The minimum block lot size for the instrument."]
    pub drsr_size_rule_block_trade: XC_VOLUME,
    #[doc = "< An enumerated identifier to which the size rule applies."]
    pub drsr_size_rule_id: XC_RULE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub DRSR_RESERVED_00: [xuint8; 7usize],
    #[doc = "< -- Reserved for future use --"]
    pub DRSR_RESERVED_01: xuint64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8 {
    pub drl_leg_key_string: [::std::os::raw::c_char; 32usize],
    pub drl_leg_security_id: xuint64,
    pub drl_leg_market_segment_id: xuint64,
    pub drl_leg_ratio: xreal64,
    pub drl_leg_maturity_date: XC_DATE,
    pub drl_leg_maturity_time: XC_TIME,
    pub drl_leg_contract_size: XC_VOLUME,
    pub drl_leg_strike: XC_PRICE,
    pub drl_leg_strike_currency: XC_CURRENCY_ID,
    pub drl_leg_trading_status: XC_TRADING_STATE,
    pub drl_leg_primary_mmid: XC_MMID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_01: xuint8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_03: [xuint8; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_DERIVATIVE_REFERENCE_LEG {
    pub drl_leg_key_string: [::std::os::raw::c_char; 32usize],
    pub drl_leg_security_id: xuint64,
    pub drl_leg_market_segment_id: xuint64,
    pub drl_leg_ratio: xreal64,
    pub drl_leg_maturity_date: XC_DATE,
    pub drl_leg_maturity_time: XC_TIME,
    pub drl_leg_contract_size: XC_VOLUME,
    pub drl_leg_strike: XC_PRICE,
    pub drl_leg_strike_currency: XC_CURRENCY_ID,
    pub drl_leg_trading_status: XC_TRADING_STATE,
    pub drl_leg_primary_mmid: XC_MMID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_01: xuint8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 2usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_04: xuint16,
    pub drl_leg_option_delta: xreal64,
    #[doc = "< A price for the leg of a complex instrument."]
    pub drl_leg_reference_price: XC_PRICE,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_05: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub DRL_RESERVED_06: [xuint64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_ORDER_ON_BOOK {
    pub oobc_entry_count: xuint8,
    pub oobc_party_count: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub OOBC_RESERVED_00: [xuint8; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_ORDER_ON_BOOK_ENTRY {
    pub oobe_entry_price: XC_PRICE,
    pub oobe_entry_size: XC_VOLUME,
    pub oobe_entry_order_quals: XC_QUOTE_QUALS,
    pub oobe_entry_min_quantity: XC_VOLUME,
    pub oobe_entry_order_ref: xuint64,
    pub oobe_entry_order_capacity: ::std::os::raw::c_char,
    #[doc = "< -- Reserved for future use --"]
    pub OOBE_RESERVED_00: [xuint8; 3usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< -- Reserved for future use --"]
    pub OOBE_RESERVED_02: [xuint8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_ORDER_ON_BOOK_PARTY {
    pub oobp_party_id: [::std::os::raw::c_char; 8usize],
    pub oobp_party_role: xuint32,
    pub oobp_party_order: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub OOBP_RESERVED_00: [::std::os::raw::c_char; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_CLIENT_STATS {
    pub clst_username: [::std::os::raw::c_char; 16usize],
    pub clst_api_version: xuint32,
    pub clst_remote_process_id: xuint32,
    pub clst_api_build_platform: [::std::os::raw::c_char; 16usize],
    pub clst_API_BUILD_OS_VERSION: [::std::os::raw::c_char; 32usize],
    pub clst_connection_time: XC_TIME,
    pub clst_connection_date: XC_DATE,
    pub clst_channel_name: [::std::os::raw::c_char; 24usize],
    pub clst_appliance_hostname: XC_STATS_IDENTIFIER,
    pub clst_appliance_local_interface: XC_STATS_IDENTIFIER,
    pub clst_appliance_local_address: XC_STATS_LONG_IDENTIFIER,
    pub clst_appliance_local_port: xuint32,
    pub clst_client_hostname: [::std::os::raw::c_char; 32usize],
    pub clst_client_local_address: XC_STATS_LONG_IDENTIFIER,
    pub clst_client_local_port: xuint32,
    pub clst_local_ib_key: XC_STATS_IDENTIFIER,
    pub clst_remote_ib_key: XC_STATS_IDENTIFIER,
    pub clst_current_subscription_count: xuint32,
    pub clst_max_subscription_count: xuint64,
    pub clst_current_unique_subscription_count: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_TICKER_PLANT_SUMMARY_RATES {
    pub tpsr_pre_arb_packet_count: xuint64,
    pub tpsr_pre_arb_message_count: xuint64,
    pub tpsr_pre_arb_byte_count: xuint64,
    pub tpsr_post_arb_packet_count: xuint64,
    pub tpsr_post_arb_message_count: xuint64,
    pub tpsr_post_arb_quote_count: xuint64,
    pub tpsr_post_arb_quote_filtered_count: xuint64,
    pub tpsr_post_arb_trade_count: xuint64,
    pub tpsr_post_arb_byte_count: xuint64,
    pub tpsr_output_packet_count: xuint64,
    pub tpsr_output_message_count: xuint64,
    pub tpsr_output_quote_count: xuint64,
    pub tpsr_output_trade_count: xuint64,
    pub tpsr_output_byte_count: xuint64,
    pub tpsr_timespan: XC_HITIME_DELTA,
    pub tpsr_hirate_timespan: XC_HITIME_DELTA,
    pub tpsr_burstrate_timespan: XC_HITIME_DELTA,
    pub tpsr_pre_arb_peak_message_rate: xuint64,
    pub tpsr_pre_arb_peak_packet_rate: xuint64,
    pub tpsr_pre_arb_peak_byte_rate: xuint64,
    pub tpsr_pre_arb_peak_message_hirate: xuint64,
    pub tpsr_pre_arb_packet_hirate_at_message_peak: xuint64,
    pub tpsr_pre_arb_byte_hirate_at_message_peak: xuint64,
    pub tpsr_pre_arb_peak_message_burstrate: xuint64,
    pub tpsr_pre_arb_packet_burstrate_at_message_peak: xuint64,
    pub tpsr_pre_arb_byte_burstrate_at_message_peak: xuint64,
    pub tpsr_post_arb_peak_message_rate: xuint64,
    pub tpsr_post_arb_peak_quote_rate: xuint64,
    pub tpsr_post_arb_peak_quote_filtered_rate: xuint64,
    pub tpsr_post_arb_peak_trade_rate: xuint64,
    pub tpsr_post_arb_peak_packet_rate: xuint64,
    pub tpsr_post_arb_peak_byte_rate: xuint64,
    pub tpsr_post_arb_peak_message_hirate: xuint64,
    pub tpsr_post_arb_packet_hirate_at_message_peak: xuint64,
    pub tpsr_post_arb_byte_hirate_at_message_peak: xuint64,
    pub tpsr_post_arb_peak_message_burstrate: xuint64,
    pub tpsr_post_arb_packet_burstrate_at_message_peak: xuint64,
    pub tpsr_post_arb_byte_burstrate_at_message_peak: xuint64,
    pub tpsr_output_peak_message_rate: xuint64,
    pub tpsr_output_peak_quote_rate: xuint64,
    pub tpsr_output_peak_trade_rate: xuint64,
    pub tpsr_output_peak_packet_rate: xuint64,
    pub tpsr_output_peak_byte_rate: xuint64,
    pub tpsr_output_peak_message_hirate: xuint64,
    pub tpsr_output_packet_hirate_at_message_peak: xuint64,
    pub tpsr_output_byte_hirate_at_message_peak: xuint64,
    pub tpsr_output_peak_message_burstrate: xuint64,
    pub tpsr_output_packet_burstrate_at_message_peak: xuint64,
    pub tpsr_output_byte_burstrate_at_message_peak: xuint64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_TICKER_PLANT_LATENCY {
    pub tpls_samples: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub TPLS_RESERVED_00: xuint32,
    pub tpls_avg: XC_HITIME_DELTA,
    pub tpls_max: XC_HITIME_DELTA,
    pub tpls_min: XC_HITIME_DELTA,
    pub tpls_std_dev: XC_HITIME_DELTA,
    pub tpls_bin0_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin1_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin2_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin3_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin4_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin5_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin6_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin7_lower_bound: XC_HITIME_DELTA,
    pub tpls_bin0_samples: xuint32,
    pub tpls_bin1_samples: xuint32,
    pub tpls_bin2_samples: xuint32,
    pub tpls_bin3_samples: xuint32,
    pub tpls_bin4_samples: xuint32,
    pub tpls_bin5_samples: xuint32,
    pub tpls_bin6_samples: xuint32,
    pub tpls_bin7_samples: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_TICKER_PLANT_CLIENTS_RATES {
    pub tpcr_max_client_buffer_size: xuint64,
    pub tpcr_appliance_output_packet_count: xuint64,
    pub tpcr_appliance_output_message_count: xuint64,
    pub tpcr_appliance_output_byte_count: xuint64,
    pub tpcr_output_peak_packet_rate: xuint64,
    pub tpcr_output_peak_message_rate: xuint64,
    pub tpcr_output_peak_byte_rate: xuint64,
    pub tpcr_pending_send_buffer_count: xuint64,
    pub tpcr_pending_send_byte_count: xuint64,
    pub tpcr_full_buffer_send_count: xuint64,
    pub tpcr_samples: xuint32,
    pub tpcr_client_id: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub TPCR_RESERVED_00: xuint16,
    pub tpcr_avg: XC_HITIME_DELTA,
    pub tpcr_max: XC_HITIME_DELTA,
    pub tpcr_min: XC_HITIME_DELTA,
    pub tpcr_std_dev: XC_HITIME_DELTA,
    pub tpcr_bin0_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin1_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin2_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin3_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin4_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin5_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin6_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin7_lower_bound: XC_HITIME_DELTA,
    pub tpcr_bin0_samples: xuint32,
    pub tpcr_bin1_samples: xuint32,
    pub tpcr_bin2_samples: xuint32,
    pub tpcr_bin3_samples: xuint32,
    pub tpcr_bin4_samples: xuint32,
    pub tpcr_bin5_samples: xuint32,
    pub tpcr_bin6_samples: xuint32,
    pub tpcr_bin7_samples: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_TICKER_PLANT_SUMMARY {
    pub tpsm_ticker_plant_version: XC_STATS_IDENTIFIER,
    pub tpsm_last_restart_time: XC_STATS_IDENTIFIER,
    pub tpsm_configured_lines_count: xuint32,
    pub tpsm_configured_udp_sockets_count: xuint32,
    pub tpsm_configured_tcp_sockets_count: xuint32,
    #[doc = "< -- Reserved for future use --"]
    pub TPSM_RESERVED_00: xuint32,
    pub tpsm_packet_drop_count: xuint64,
    pub tpsm_regional_symbol_count: xuint32,
    pub tpsm_composite_symbol_count: xuint32,
    pub tpsm_current_client_count: xuint32,
    pub tpsm_max_client_count: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub TPSM_RESERVED_01: xuint16,
    pub tpsm_current_client_subscriptions: xuint32,
    pub tpsm_max_client_subscriptions: xuint32,
    pub tpsm_current_subscription_overlap: xuint16,
    pub tpsm_max_subscription_overlap: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXSPOT_REFRESH_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSR_RESERVED_00: xuint64,
    #[doc = "< Ask price"]
    pub xgfxsr_ask_price: XC_PRICE,
    #[doc = "< Bid price"]
    pub xgfxsr_bid_price: XC_PRICE,
    #[doc = "< Max ask size"]
    pub xgfxsr_ask_size: XC_VOLUME,
    #[doc = "< Max bid size"]
    pub xgfxsr_bid_size: XC_VOLUME,
    #[doc = "< Min ask size"]
    pub xgfxsr_ask_min_size: XC_VOLUME,
    #[doc = "< Min bid size"]
    pub xgfxsr_bid_min_size: XC_VOLUME,
    #[doc = "< Ask time"]
    pub xgfxsr_ask_hitime: XC_HITIME,
    #[doc = "< Bid time"]
    pub xgfxsr_bid_hitime: XC_HITIME,
    #[doc = "< Quote expiry time"]
    pub xgfxsr_valid_until_hitime: XC_HITIME,
    #[doc = "< Client request ID"]
    pub xgfxsr_request_id: XC_EVENT_ID,
    #[doc = "< Exchange quote ID"]
    pub xgfxsr_quote_id: XC_EVENT_ID,
    #[doc = "< Settlement date"]
    pub xgfxsr_setl_date: XC_DATE,
    #[doc = "< Instrument status"]
    pub xgfxsr_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSR_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSR_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXSPOT_QUOTE_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSQ_RESERVED_00: xuint64,
    #[doc = "< Ask price"]
    pub xgfxsq_ask_price: XC_PRICE,
    #[doc = "< Bid price"]
    pub xgfxsq_bid_price: XC_PRICE,
    #[doc = "< Max ask size"]
    pub xgfxsq_ask_size: XC_VOLUME,
    #[doc = "< Max bid size"]
    pub xgfxsq_bid_size: XC_VOLUME,
    #[doc = "< Min ask size"]
    pub xgfxsq_ask_min_size: XC_VOLUME,
    #[doc = "< Min bid size"]
    pub xgfxsq_bid_min_size: XC_VOLUME,
    #[doc = "< Ask time"]
    pub xgfxsq_ask_hitime: XC_HITIME,
    #[doc = "< Bid time"]
    pub xgfxsq_bid_hitime: XC_HITIME,
    #[doc = "< Quote expiry time"]
    pub xgfxsq_valid_until_hitime: XC_HITIME,
    #[doc = "< Client request ID"]
    pub xgfxsq_request_id: XC_EVENT_ID,
    #[doc = "< Exchange quote ID"]
    pub xgfxsq_quote_id: XC_EVENT_ID,
    #[doc = "< Settlement date"]
    pub xgfxsq_setl_date: XC_DATE,
    #[doc = "< Instrument status"]
    pub xgfxsq_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSQ_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXSQ_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXFWD_REFRESH_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFR_RESERVED_00: xuint64,
    pub xgfxfr_ask_spot_price: XC_PRICE,
    pub xgfxfr_ask_price: XC_PRICE,
    pub xgfxfr_ask_size: XC_VOLUME,
    pub xgfxfr_ask_min_size: XC_VOLUME,
    pub xgfxfr_ask_hitime: XC_HITIME,
    pub xgfxfr_ask_forward_points: xreal64,
    pub xgfxfr_bid_spot_price: XC_PRICE,
    pub xgfxfr_bid_price: XC_PRICE,
    pub xgfxfr_bid_size: XC_VOLUME,
    pub xgfxfr_bid_min_size: XC_VOLUME,
    pub xgfxfr_bid_hitime: XC_HITIME,
    pub xgfxfr_bid_forward_points: xreal64,
    pub xgfxfr_valid_until_hitime: XC_HITIME,
    pub xgfxfr_request_id: XC_EVENT_ID,
    pub xgfxfr_quote_id: XC_EVENT_ID,
    pub xgfxfr_setl_date: XC_DATE,
    #[doc = "< Instrument status"]
    pub xgfxfr_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFR_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFR_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXFWD_QUOTE_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFQ_RESERVED_00: xuint64,
    pub xgfxfq_ask_spot_price: XC_PRICE,
    pub xgfxfq_ask_price: XC_PRICE,
    pub xgfxfq_ask_size: XC_VOLUME,
    pub xgfxfq_ask_min_size: XC_VOLUME,
    pub xgfxfq_ask_hitime: XC_HITIME,
    pub xgfxfq_ask_forward_points: xreal64,
    pub xgfxfq_bid_spot_price: XC_PRICE,
    pub xgfxfq_bid_price: XC_PRICE,
    pub xgfxfq_bid_size: XC_VOLUME,
    pub xgfxfq_bid_min_size: XC_VOLUME,
    pub xgfxfq_bid_hitime: XC_HITIME,
    pub xgfxfq_bid_forward_points: xreal64,
    pub xgfxfq_valid_until_hitime: XC_HITIME,
    pub xgfxfq_request_id: XC_EVENT_ID,
    pub xgfxfq_quote_id: XC_EVENT_ID,
    pub xgfxfq_setl_date: XC_DATE,
    #[doc = "< Instrument status"]
    pub xgfxfq_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFQ_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXFQ_RESERVED_02: xuint16,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXSWAP_REFRESH_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWR_RESERVED_00: xuint64,
    pub xgfxwr_ask_spot_price: XC_PRICE,
    pub xgfxwr_ask_near_price: XC_PRICE,
    pub xgfxwr_ask_far_price: XC_PRICE,
    pub xgfxwr_bid_spot_price: XC_PRICE,
    pub xgfxwr_bid_near_price: XC_PRICE,
    pub xgfxwr_bid_far_price: XC_PRICE,
    pub xgfxwr_ask_near_size: XC_VOLUME,
    pub xgfxwr_ask_far_size: XC_VOLUME,
    pub xgfxwr_ask_hitime: XC_HITIME,
    pub xgfxwr_ask_near_forward_points: xreal64,
    pub xgfxwr_ask_far_forward_points: xreal64,
    pub xgfxwr_bid_near_size: XC_VOLUME,
    pub xgfxwr_bid_far_size: XC_VOLUME,
    pub xgfxwr_bid_hitime: XC_HITIME,
    pub xgfxwr_bid_near_forward_points: xreal64,
    pub xgfxwr_bid_far_forward_points: xreal64,
    pub xgfxwr_near_setl_date: XC_DATE,
    pub xgfxwr_far_setl_date: XC_DATE,
    pub xgfxwr_valid_until_hitime: XC_HITIME,
    pub xgfxwr_request_id: XC_EVENT_ID,
    pub xgfxwr_quote_id: XC_EVENT_ID,
    #[doc = "< Instrument status"]
    pub xgfxwr_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWR_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWR_RESERVED_02: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWR_RESERVED_03: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_FXSWAP_QUOTE_ALL {
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWQ_RESERVED_00: xuint64,
    pub xgfxwq_ask_spot_price: XC_PRICE,
    pub xgfxwq_ask_near_price: XC_PRICE,
    pub xgfxwq_ask_far_price: XC_PRICE,
    pub xgfxwq_bid_spot_price: XC_PRICE,
    pub xgfxwq_bid_near_price: XC_PRICE,
    pub xgfxwq_bid_far_price: XC_PRICE,
    pub xgfxwq_ask_near_size: XC_VOLUME,
    pub xgfxwq_ask_far_size: XC_VOLUME,
    pub xgfxwq_ask_hitime: XC_HITIME,
    pub xgfxwq_ask_near_forward_points: xreal64,
    pub xgfxwq_ask_far_forward_points: xreal64,
    pub xgfxwq_bid_near_size: XC_VOLUME,
    pub xgfxwq_bid_far_size: XC_VOLUME,
    pub xgfxwq_bid_hitime: XC_HITIME,
    pub xgfxwq_bid_near_forward_points: xreal64,
    pub xgfxwq_bid_far_forward_points: xreal64,
    pub xgfxwq_near_setl_date: XC_DATE,
    pub xgfxwq_far_setl_date: XC_DATE,
    pub xgfxwq_valid_until_hitime: XC_HITIME,
    pub xgfxwq_request_id: XC_EVENT_ID,
    pub xgfxwq_quote_id: XC_EVENT_ID,
    #[doc = "< Instrument status"]
    pub xgfxwq_instrument_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWQ_RESERVED_01: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWQ_RESERVED_02: xuint16,
    #[doc = "< -- Reserved for future use --"]
    pub XGFXWQ_RESERVED_03: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_SESSIONS_RATES {
    pub tpsr_max_client_buffer_size: xuint64,
    pub tpsr_appliance_output_packet_count: xuint64,
    pub tpsr_appliance_output_message_count: xuint64,
    pub tpsr_appliance_output_byte_count: xuint64,
    pub tpsr_output_peak_packet_rate: xuint64,
    pub tpsr_output_peak_message_rate: xuint64,
    pub tpsr_output_peak_byte_rate: xuint64,
    pub tpsr_pending_send_buffer_count: xuint64,
    pub tpsr_pending_send_byte_count: xuint64,
    pub tpsr_full_buffer_send_count: xuint64,
    pub tpsr_samples: xuint32,
    pub tpsr_client_id: xuint16,
    pub tpsr_session_id: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub TPSR_RESERVED_00: xuint8,
    pub tpsr_avg: XC_HITIME_DELTA,
    pub tpsr_max: XC_HITIME_DELTA,
    pub tpsr_min: XC_HITIME_DELTA,
    pub tpsr_std_dev: XC_HITIME_DELTA,
    pub tpsr_bin0_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin1_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin2_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin3_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin4_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin5_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin6_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin7_lower_bound: XC_HITIME_DELTA,
    pub tpsr_bin0_samples: xuint32,
    pub tpsr_bin1_samples: xuint32,
    pub tpsr_bin2_samples: xuint32,
    pub tpsr_bin3_samples: xuint32,
    pub tpsr_bin4_samples: xuint32,
    pub tpsr_bin5_samples: xuint32,
    pub tpsr_bin6_samples: xuint32,
    pub tpsr_bin7_samples: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_SESSIONS {
    pub sest_client_id: xuint16,
    pub sest_session_id: xuint8,
    #[doc = "< -- Reserved for future use --"]
    pub SEST_RESERVED_00: [xuint8; 5usize],
    pub sest_username: [::std::os::raw::c_char; 16usize],
    pub sest_api_version: xuint32,
    pub sest_remote_process_id: xuint32,
    pub sest_api_build_platform: [::std::os::raw::c_char; 16usize],
    pub sest_api_build_os_version: [::std::os::raw::c_char; 32usize],
    pub sest_connection_time: XC_TIME,
    pub sest_connection_date: XC_DATE,
    pub sest_channel_name: [::std::os::raw::c_char; 24usize],
    pub sest_appliance_hostname: XC_STATS_IDENTIFIER,
    pub sest_appliance_local_interface: XC_STATS_IDENTIFIER,
    pub sest_appliance_local_address: XC_STATS_LONG_IDENTIFIER,
    pub sest_appliance_local_port: xuint32,
    pub sest_client_hostname: [::std::os::raw::c_char; 32usize],
    pub sest_client_local_address: XC_STATS_LONG_IDENTIFIER,
    pub sest_client_local_port: xuint32,
    pub sest_local_ib_key: XC_STATS_IDENTIFIER,
    pub sest_remote_ib_key: XC_STATS_IDENTIFIER,
    pub sest_current_subscription_count: xuint32,
    pub sest_max_subscription_count: xuint64,
    pub sest_current_unique_subscription_count: xuint32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XC_GROUP_INDICATIVE_PRICE {
    #[doc = "< Indicative price"]
    pub xip_price: XC_PRICE,
    #[doc = "< Type of indicative price"]
    pub xip_indicative_type: XC_INDICATIVE_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XIP_RESERVED_00: [::std::os::raw::c_char; 3usize],
    #[doc = "< -- Reserved for future use --"]
    pub XIP_RESERVED_01: [xuint64; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_INSTRUMENT_GROUP {
    #[doc = "< The instrument group's identifier"]
    pub xig_group_id: XC_INSTRUMENT_GROUP_ID,
    #[doc = "< The instrument group's status"]
    pub xig_group_status: XC_TRADING_STATE,
    #[doc = "< -- Reserved for future use --"]
    pub XIG_RESERVED_00: [xuint8; 7usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_VOLATILITY_BBO {
    #[doc = "<"]
    pub xvb_bid_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvb_ask_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvb_bid_size: XC_VOLUME,
    #[doc = "<"]
    pub xvb_ask_size: XC_VOLUME,
    #[doc = "<"]
    pub xvb_bid_time: XC_HITIME,
    #[doc = "<"]
    pub xvb_ask_time: XC_HITIME,
    #[doc = "<"]
    pub xvb_bid_exchange: XC_EXCHANGE_ID,
    #[doc = "<"]
    pub xvb_ask_exchange: XC_EXCHANGE_ID,
    #[doc = "<"]
    pub xvb_traded_volume: XC_VOLUME,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_VOLATILITY_UNDERLYING {
    #[doc = "<"]
    pub xvu_underlying_bid_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvu_underlying_ask_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvu_underlying_theoretical_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvu_underlying_volume: XC_VOLUME,
    #[doc = "<"]
    pub xvu_underlying_eod_indicator: XC_VOLATILITY_CALC_TYPE,
    #[doc = "< -- Reserved for future use --"]
    pub XVU_RESERVED_00: [xuint8; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_VOLATILITY_TRADE {
    #[doc = "<"]
    pub xvt_eod_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvt_trade_sequence: xuint64,
    #[doc = "<"]
    pub xvt_trade_time: XC_HITIME,
    #[doc = "<"]
    pub xvt_trade_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvt_trade_size: XC_VOLUME,
    #[doc = "<"]
    pub xvt_trade_qualifiers: XC_TRADE_QUALS,
    #[doc = "<"]
    pub xvt_trade_exchange: XC_EXCHANGE_ID,
    #[doc = "< -- Reserved for future use --"]
    pub XVT_RESERVED_00: [xuint8; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XC_GROUP_VOLATILITY_MISC {
    #[doc = "<"]
    pub xvt_forward_price: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvt_borrow_cost: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvt_intrinsic_value: XC_DFLOAT_64,
    #[doc = "<"]
    pub xvt_time_value: XC_DFLOAT_64,
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const COMP_GNU_: u32 = 1;
pub const ARCH_X86_64_: u32 = 1;
pub const LITTLE_ENDIAN_: u32 = 1;
pub const MAX_EXEGY_DEVS: u32 = 4;
pub const OS_LINUX_: u32 = 1;
pub const OS_UNIX_: u32 = 1;
pub const MIN_XINT8: i8 = -128;
pub const MAX_XINT8: i8 = 127;
pub const MAX_XUINT8: u8 = 255;
pub const MIN_XINT16: i16 = -32768;
pub const MAX_XINT16: i16 = 32767;
pub const MAX_XUINT16: u16 = 65535;
pub const MIN_XINT32: i32 = -2147483648;
pub const MAX_XINT32: i32 = 2147483647;
pub const MAX_XUINT32: u32 = 4294967295;
pub const XFALSE: u32 = 0;
pub const XTRUE: u32 = 1;
pub const XOBJ_INVALID: u16 = 0;
pub const XOBJ_SESSION_TICKER: u16 = 257;
pub const XOBJ_SESSION_TICKER_MONITORING: u16 = 259;
pub const XOBJ_REALTIME_EQUITY_SUMMARY: u16 = 513;
pub const XOBJ_REALTIME_EXCHANGE_STREAM: u16 = 514;
pub const XOBJ_REALTIME_ORDER_BOOK_SUMMARY: u16 = 515;
pub const XOBJ_REALTIME_ORDER_BOOK_EXCHANGE_STREAM: u16 = 516;
pub const XOBJ_REALTIME_PRICE_BOOK_SUMMARY: u16 = 517;
pub const XOBJ_REALTIME_PRICE_BOOK_EXCHANGE_STREAM: u16 = 518;
pub const XOBJ_REALTIME_BASKET_SUMMARY: u16 = 519;
pub const XOBJ_REALTIME_BASKET_CATALOG: u16 = 520;
pub const XOBJ_REALTIME_KEYLIST_FILTER: u16 = 521;
pub const XOBJ_REALTIME_KEYLIST_CATALOG: u16 = 522;
pub const XOBJ_REALTIME_COMMODITY_SUMMARY: u16 = 523;
pub const XOBJ_REALTIME_EQUITY_STREAM: u16 = 524;
pub const XOBJ_REALTIME_COMMODITY_STREAM: u16 = 525;
pub const XOBJ_REALTIME_ORDER_BOOK_STREAM: u16 = 526;
pub const XOBJ_REALTIME_PRICE_BOOK_STREAM: u16 = 527;
pub const XOBJ_REALTIME_TICKER_PLANT_FEEDS: u16 = 530;
pub const XOBJ_REALTIME_TICKER_PLANT_LINES: u16 = 531;
pub const XOBJ_REALTIME_TICKER_PLANT_SOCKETS: u16 = 532;
pub const XOBJ_REALTIME_TICKER_PLANT_CLIENTS: u16 = 535;
pub const XOBJ_REALTIME_DERIVATIVE_REFERENCE_SUMMARY: u16 = 539;
pub const XOBJ_REALTIME_DERIVATIVE_REFERENCE_EXCHANGE_STREAM: u16 = 540;
pub const XOBJ_REALTIME_FXSPOT_STREAM: u16 = 541;
pub const XOBJ_REALTIME_FXFORWARD_STREAM: u16 = 542;
pub const XOBJ_REALTIME_FXSWAP_STREAM: u16 = 543;
pub const XOBJ_REALTIME_TICKER_PLANT_SUMMARY: u16 = 544;
pub const XOBJ_REALTIME_TICKER_PLANT_LATENCY: u16 = 545;
pub const XOBJ_REALTIME_TICKER_PLANT_CLIENTS_RATES: u16 = 546;
pub const XOBJ_REALTIME_TICKER_PLANT_SUMMARY_RATES: u16 = 547;
pub const XOBJ_REALTIME_TICKER_PLANT_SESSIONS: u16 = 549;
pub const XOBJ_REALTIME_TICKER_PLANT_SESSIONS_RATES: u16 = 550;
pub const XOBJ_REALTIME_INSTRUMENT_GROUP_SUMMARY: u16 = 552;
pub const XOBJ_REALTIME_FX_SUMMARY: u16 = 553;
pub const XOBJ_REALTIME_FX_STREAM: u16 = 554;
pub const XOBJ_REALTIME_VOLATILITY_SUMMARY: u16 = 555;
pub const XOBJ_REALTIME_SYMBOL_REFERENCE_SUMMARY: u16 = 556;
pub const XOBJ_WRITEONLY_EQUITY_INSTRUMENT: u16 = 769;
pub const XOBJ_WRITEONLY_COMMODITY_INSTRUMENT: u16 = 770;
pub const XOBJ_WRITEONLY_LEVEL2_INSTRUMENT: u16 = 771;
pub const XOBJ_WRITEONLY_KEYLIST_EDIT: u16 = 772;
pub const XOBJ_EVENT_SUBSCRIBE: u16 = 1026;
pub const XOBJ_EVENT_SNAPSHOT: u16 = 1028;
pub const XOBJ_EVENT_EQUITY_TRADE: u16 = 1029;
pub const XOBJ_EVENT_EQUITY_QUOTE: u16 = 1030;
pub const XOBJ_EVENT_EQUITY_REFRESH: u16 = 1031;
pub const XOBJ_EVENT_EQUITY_CANCEL: u16 = 1032;
pub const XOBJ_EVENT_EQUITY_CORRECTION: u16 = 1033;
pub const XOBJ_EVENT_ORDER_BOOK_REFRESH_BID: u16 = 1034;
pub const XOBJ_EVENT_ORDER_BOOK_REFRESH_ASK: u16 = 1035;
pub const XOBJ_EVENT_ORDER_BOOK_UPDATE: u16 = 1036;
pub const XOBJ_EVENT_PRICE_BOOK_REFRESH_BID: u16 = 1037;
pub const XOBJ_EVENT_PRICE_BOOK_REFRESH_ASK: u16 = 1038;
pub const XOBJ_EVENT_PRICE_BOOK_UPDATE: u16 = 1039;
pub const XOBJ_EVENT_COMMODITY_REFRESH: u16 = 1040;
pub const XOBJ_EVENT_COMMODITY_TRADE: u16 = 1041;
pub const XOBJ_EVENT_COMMODITY_QUOTE: u16 = 1042;
pub const XOBJ_EVENT_COMMODITY_CANCEL: u16 = 1043;
pub const XOBJ_EVENT_COMMODITY_CORRECTION: u16 = 1044;
pub const XOBJ_EVENT_NAV_UPDATE: u16 = 1046;
pub const XOBJ_EVENT_BASKET_CATALOG_REFRESH: u16 = 1047;
pub const XOBJ_EVENT_BASKET_CATALOG_UPDATE: u16 = 1048;
pub const XOBJ_EVENT_BASKET_DEFN_REFRESH: u16 = 1049;
pub const XOBJ_EVENT_BASKET_DEFN_STATUS: u16 = 1050;
pub const XOBJ_EVENT_BASKET_CONSTITUENT_UPDATE_STATUS: u16 = 1051;
pub const XOBJ_EVENT_BASKET_CONSTITUENT_REFRESH: u16 = 1052;
pub const XOBJ_EVENT_STATIC_EQUITY_REFRESH: u16 = 1054;
pub const XOBJ_EVENT_STATIC_COMMODITY_REFRESH: u16 = 1055;
pub const XOBJ_EVENT_BASKET_DEFN_DELETE: u16 = 1060;
pub const XOBJ_EVENT_KEYLIST_DEFN_STATUS: u16 = 1061;
pub const XOBJ_EVENT_KEYLIST_DEFN_REFRESH: u16 = 1062;
pub const XOBJ_EVENT_KEYLIST_DEFN_DELETE: u16 = 1063;
pub const XOBJ_EVENT_KEYLIST_FILTER_DEFN_STATUS: u16 = 1064;
pub const XOBJ_EVENT_KEYLIST_FILTER_DEFN_REFRESH: u16 = 1065;
pub const XOBJ_EVENT_KEYLIST_FILTER_DEFN_DELETE: u16 = 1066;
pub const XOBJ_EVENT_KEYLIST_FILTER_MATCH_START: u16 = 1067;
pub const XOBJ_EVENT_KEYLIST_FILTER_MATCH_END: u16 = 1068;
pub const XOBJ_EVENT_KEYLIST_FILTER_MATCH: u16 = 1069;
pub const XOBJ_EVENT_KEYLIST_FILTER_MATCH_REMOVE: u16 = 1070;
pub const XOBJ_EVENT_KEYLIST_CATALOG_REFRESH: u16 = 1071;
pub const XOBJ_EVENT_KEYLIST_CATALOG_UPDATE: u16 = 1072;
pub const XOBJ_EVENT_INSTRUMENT_UPDATE_STATUS: u16 = 1073;
pub const XOBJ_EVENT_SIGNUM_PREDICTIVE_DATA_REFRESH: u16 = 1074;
pub const XOBJ_EVENT_SIGNUM_PREDICTIVE_DATA_STATUS: u16 = 1075;
pub const XOBJ_EVENT_ORDER_EXECUTION: u16 = 1076;
pub const XOBJ_EVENT_ORDER_IMBALANCE: u16 = 1077;
pub const XOBJ_EVENT_MARKET_DIRECTORY: u16 = 1078;
pub const XOBJ_EVENT_TRADING_ACTION: u16 = 1079;
pub const XOBJ_EVENT_TICKER_PLANT_FEED_REFRESH: u16 = 1091;
pub const XOBJ_EVENT_TICKER_PLANT_FEED_UPDATE: u16 = 1092;
pub const XOBJ_EVENT_TICKER_PLANT_LINE_REFRESH: u16 = 1093;
pub const XOBJ_EVENT_TICKER_PLANT_SOCKET_REFRESH: u16 = 1094;
pub const XOBJ_EVENT_TICKER_PLANT_CLIENT_REFRESH: u16 = 1097;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_LINE_REFRESH: u16 = 1098;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_SOCKET_REFRESH: u16 = 1099;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_CLIENT_REFRESH: u16 = 1102;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_LINE_GAPS_REFRESH: u16 = 1105;
pub const XOBJ_EVENT_DERIVATIVE_REFERENCE_REFRESH: u16 = 1108;
pub const XOBJ_EVENT_ORDER_ON_BOOK: u16 = 1109;
pub const XOBJ_EVENT_FXSPOT_REFRESH: u16 = 1110;
pub const XOBJ_EVENT_FXSPOT_QUOTE: u16 = 1111;
pub const XOBJ_EVENT_FXFWD_REFRESH: u16 = 1112;
pub const XOBJ_EVENT_FXFWD_QUOTE: u16 = 1113;
pub const XOBJ_EVENT_FXSWAP_REFRESH: u16 = 1114;
pub const XOBJ_EVENT_FXSWAP_QUOTE: u16 = 1115;
pub const XOBJ_EVENT_TICKER_PLANT_SUMMARY_REFRESH: u16 = 1116;
pub const XOBJ_EVENT_TICKER_PLANT_LATENCY_REFRESH: u16 = 1117;
pub const XOBJ_EVENT_TICKER_PLANT_CLIENTS_RATES_REFRESH: u16 = 1118;
pub const XOBJ_EVENT_TICKER_PLANT_SUMMARY_RATES_REFRESH: u16 = 1119;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_SUMMARY_REFRESH: u16 = 1120;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_LATENCY_REFRESH: u16 = 1121;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_CLIENTS_RATES_REFRESH: u16 = 1122;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_SUMMARY_RATES_REFRESH: u16 = 1123;
pub const XOBJ_EVENT_TICKER_PLANT_MWCB_UPDATE: u16 = 1124;
pub const XOBJ_EVENT_TICKER_PLANT_SESSIONS_RATES_REFRESH: u16 = 1127;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_SESSIONS_RATES_REFRESH: u16 = 1128;
pub const XOBJ_EVENT_TICKER_PLANT_SESSIONS_REFRESH: u16 = 1129;
pub const XOBJ_EVENT_STATIC_TICKER_PLANT_SESSIONS_REFRESH: u16 = 1130;
pub const XOBJ_EVENT_REQUEST_FOR_QUOTE: u16 = 1133;
pub const XOBJ_EVENT_INDICATIVE_PRICE: u16 = 1134;
pub const XOBJ_EVENT_INSTRUMENT_GROUP_REFRESH: u16 = 1135;
pub const XOBJ_EVENT_INSTRUMENT_GROUP_UPDATE: u16 = 1136;
pub const XOBJ_EVENT_SESSION_STATUS: u16 = 1216;
pub const XOBJ_EVENT_FX_REFRESH: u16 = 1217;
pub const XOBJ_EVENT_FX_UPDATE: u16 = 1218;
pub const XOBJ_EVENT_VOLATILITY_REFRESH: u16 = 1219;
pub const XOBJ_EVENT_VOLATILITY_QUOTE_RISK: u16 = 1220;
pub const XOBJ_EVENT_VOLATILITY_TRADE_RISK: u16 = 1221;
pub const XOBJ_EVENT_SYMBOL_REFERENCE_REFRESH: u16 = 1222;
pub const XOBJ_EVENT_SIGNAL_STATUS: u16 = 1223;
pub const XOBJ_EVENT_TRADE_SUMMARY: u16 = 1224;
pub const XOBJ_EVENT_EXCHANGE_STATISTICS: u16 = 1225;
pub const XOBJ_READWRITE_BASKET_DEFINITION: u16 = 1281;
pub const XOBJ_READWRITE_KEYLIST_DEFINITION: u16 = 1282;
pub const XOBJ_READWRITE_KEYLIST_FILTER_DEFINITION: u16 = 1283;
pub const XOBJ_READWRITE_BASKET_CONSTITUENT: u16 = 1284;
pub const XOBJ_READWRITE_SIGNUM_PREDICTIVE_DATA: u16 = 1285;
pub const XOBJ_STATIC_EQUITY_SUMMARY: u16 = 1537;
pub const XOBJ_STATIC_COMMODITY_SUMMARY: u16 = 1538;
pub const XOBJ_STATIC_TICKER_PLANT_LINES: u16 = 1542;
pub const XOBJ_STATIC_TICKER_PLANT_SOCKETS: u16 = 1543;
pub const XOBJ_STATIC_TICKER_PLANT_CLIENTS: u16 = 1546;
pub const XOBJ_STATIC_TICKER_PLANT_LINE_GAPS: u16 = 1549;
pub const XOBJ_STATIC_TICKER_PLANT_SUMMARY: u16 = 1552;
pub const XOBJ_STATIC_TICKER_PLANT_LATENCY: u16 = 1553;
pub const XOBJ_STATIC_TICKER_PLANT_CLIENTS_RATES: u16 = 1554;
pub const XOBJ_STATIC_TICKER_PLANT_SUMMARY_RATES: u16 = 1555;
pub const XOBJ_STATIC_TICKER_PLANT_SESSIONS: u16 = 1557;
pub const XOBJ_STATIC_TICKER_PLANT_SESSIONS_RATES: u16 = 1558;
pub const XDTT_INVALID: u32 = 0;
pub const XDTT_SCALAR: u32 = 1;
pub const XDTT_STRUCT: u32 = 2;
pub const XDTT_UNION: u32 = 3;
pub const XDTT_ENUM: u32 = 4;
pub const XDTT_EQUIV: u32 = 5;
pub const XDTT_POINTER: u32 = 6;
pub const XDTR_INVALID: u32 = 0;
pub const XDTR_SIGNED_INTEGER: u32 = 1;
pub const XDTR_UNSIGNED_INTEGER: u32 = 2;
pub const XDTR_FLOATING_POINT: u32 = 3;
pub const XDTR_STRING_FIXED: u32 = 4;
pub const XDTR_STRING_NUL_TERM: u32 = 5;
pub const XDTR_POINTER: u32 = 6;
pub const XDTR_STRUCTURE: u32 = 7;
pub const XTYP_INVALID: u32 = 0;
pub const XTYP_FIRST_CLIENT: u32 = 1;
pub const XTYP_LAST_CLIENT: u32 = 999;
pub const XTYP_FIRST_BUILTIN: u32 = 1000;
pub const XTYP_char: u32 = 1000;
pub const XTYP_INT: u32 = 1001;
pub const XTYP_UNSIGNED_INT: u32 = 1002;
pub const XTYP_STRING_FIXED_LENGTH: u32 = 1003;
pub const XTYP_STRING_KNOWN_LENGTH: u32 = 1004;
pub const XTYP_STRING_NUL_TERM: u32 = 1005;
pub const XTYP_float: u32 = 1006;
pub const XTYP_double: u32 = 1007;
pub const XTYP_NEXT_FREE_BUILTIN: u32 = 1008;
pub const XTYP_FIRST_EXEGY: u32 = 2000;
pub const XTYP_xint8: u32 = 2000;
pub const XTYP_xuint8: u32 = 2001;
pub const XTYP_xint16: u32 = 2002;
pub const XTYP_xuint16: u32 = 2003;
pub const XTYP_xint32: u32 = 2004;
pub const XTYP_xuint32: u32 = 2005;
pub const XTYP_xint64: u32 = 2006;
pub const XTYP_xuint64: u32 = 2007;
pub const XTYP_XC_GROUP_EQUITY_REFRESH_ALL: u32 = 2008;
pub const XTYP_XC_EXCHANGE_ID: u32 = 2009;
pub const XTYP_XC_DATE: u32 = 2013;
pub const XTYP_XC_DATETIME: u32 = 2015;
pub const XTYP_XC_ALTERNATE_ID: u32 = 2016;
pub const XTYP_XC_TIME: u32 = 2017;
pub const XTYP_XC_COUNTRY_ID: u32 = 2019;
pub const XTYP_XC_PRICE: u32 = 2025;
pub const XTYP_XC_KEY: u32 = 2026;
pub const XTYP_XC_SYMBOL: u32 = 2028;
pub const XTYP_XC_CURRENCY_ID: u32 = 2029;
pub const XTYP_XC_TRADED_VALUE: u32 = 2032;
pub const XTYP_XC_VOLUME: u32 = 2033;
pub const XTYP_XC_TICK_FLAGS: u32 = 2035;
pub const XTYP_XC_GROUP_ORDER_BOOK_ENTRY: u32 = 2038;
pub const XTYP_XC_GROUP_PRICE_BOOK_ENTRY: u32 = 2047;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE: u32 = 2052;
pub const XTYP_XC_GROUP_ORDER_BOOK_UPDATE: u32 = 2054;
pub const XTYP_XC_GROUP_TIMESERIES_PARAMS: u32 = 2055;
pub const XTYP_XC_REFRESH_QUALS: u32 = 2060;
pub const XTYP_XC_TRADE_QUALS: u32 = 2062;
pub const XTYP_XC_QUOTE_QUALS: u32 = 2063;
pub const XTYP_XC_GROUP_NAV_UPDATE_ALL: u32 = 2064;
pub const XTYP_xreal64: u32 = 2066;
pub const XTYP_XC_GROUP_BASKET_HEADER: u32 = 2068;
pub const XTYP_XC_GROUP_BASKET_CONSTITUENT: u32 = 2069;
pub const XTYP_XC_LIST_UPDATE: u32 = 2074;
pub const XTYP_XC_GROUP_BASKET_CATALOG_UPDATE_ALL: u32 = 2076;
pub const XTYP_XC_CC_FLAGS: u32 = 2077;
pub const XTYP_XC_GROUP_TS_QUOTE: u32 = 2078;
pub const XTYP_XC_GROUP_TS_TRADE: u32 = 2079;
pub const XTYP_XC_GROUP_KEYLIST_HEADER: u32 = 2080;
pub const XTYP_XC_GROUP_KEYLIST_CATALOG_ITEM: u32 = 2081;
pub const XTYP_XC_GROUP_COMMODITY_IMAGE_ALL: u32 = 2083;
pub const XTYP_XC_GROUP_COMMODITY_REFRESH_ALL: u32 = 2084;
pub const XTYP_XC_PRICE_DESC: u32 = 2093;
pub const XTYP_XC_GROUP_EQUITY_IMAGE_ALL: u32 = 2094;
pub const XTYP_XC_SLOT_CONTEXT: u32 = 2095;
pub const XTYP_XC_FINANCIAL_STATUS: u32 = 2100;
pub const XTYP_XC_GROUP_LINE_STATE_INFO: u32 = 2106;
pub const XTYP_XC_FIELD_DESC: u32 = 2107;
pub const XTYP_XC_GROUP_TS_ORDEX: u32 = 2108;
pub const XTYP_XC_ORDER_REF_ID: u32 = 2109;
pub const XTYP_XC_KEY_DESC: u32 = 2110;
pub const XTYP_XC_GROUP_TS_PRCBKUPD: u32 = 2112;
pub const XTYP_XC_MMID: u32 = 2113;
pub const XTYP_XC_GROUP_TS_ORDBKUPD: u32 = 2115;
pub const XTYP_XC_BASKET_MOMENTUM: u32 = 2117;
pub const XTYP_XC_GROUP_BASKET_CONSTITUENT_INFO: u32 = 2118;
pub const XTYP_XC_GROUP_EQUITY_QUOTE_ALL: u32 = 2119;
pub const XTYP_XC_GROUP_MARKET_DIRECTORY: u32 = 2120;
pub const XTYP_XC_GROUP_COMMODITY_TRADE_ALL: u32 = 2121;
pub const XTYP_XC_GROUP_COMMODITY_CORRECTION_ALL: u32 = 2122;
pub const XTYP_XC_GROUP_ORDER_EXECUTION_V3_1_7: u32 = 2123;
pub const XTYP_XC_GROUP_COMMODITY_QUOTE_ALL: u32 = 2124;
pub const XTYP_XC_GROUP_TRADING_ACTION: u32 = 2125;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE: u32 = 2126;
pub const XTYP_XC_GROUP_EQUITY_CORRECTION_ALL: u32 = 2127;
pub const XTYP_XC_GROUP_EQUITY_TRADE_ALL: u32 = 2128;
pub const XTYP_XC_GROUP_KEYLIST_ITEM: u32 = 2129;
pub const XTYP_XC_EVENT_DESC: u32 = 2132;
pub const XTYP_xhandle: u32 = 2133;
pub const XTYP_XC_HITIME_DELTA: u32 = 2136;
pub const XTYP_XC_IPV4_ADDRESS: u32 = 2137;
pub const XTYP_XC_HITIME: u32 = 2139;
pub const XTYP_XC_STATS_IDENTIFIER: u32 = 2141;
pub const XTYP_XC_STATS_MINI_IDENTIFIER: u32 = 2142;
pub const XTYP_XC_STATS_SHORT_IDENTIFIER: u32 = 2143;
pub const XTYP_XC_STATS_LONG_IDENTIFIER: u32 = 2144;
pub const XTYP_XC_GROUP_COMMODITY_QUOTE: u32 = 2145;
pub const XTYP_XC_GROUP_COMMODITY_TRADE: u32 = 2146;
pub const XTYP_XC_GROUP_COMMODITY_TRADE_ACCUM: u32 = 2147;
pub const XTYP_XC_GROUP_EQUITY_TRADE: u32 = 2148;
pub const XTYP_XC_GROUP_EQUITY_TRADE_ACCUM: u32 = 2149;
pub const XTYP_XC_GROUP_COMMODITY_CORRECTION: u32 = 2150;
pub const XTYP_XC_GROUP_COMMODITY_REFRESH: u32 = 2151;
pub const XTYP_XC_GROUP_EQUITY_CORRECTION: u32 = 2152;
pub const XTYP_XC_GROUP_EQUITY_REFRESH: u32 = 2153;
pub const XTYP_XC_GROUP_MARKET_DIRECTORY_ALL: u32 = 2154;
pub const XTYP_XC_GROUP_ORDER_BOOK_UPDATE_ALL: u32 = 2155;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE_ALL: u32 = 2156;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_ALL: u32 = 2157;
pub const XTYP_XC_GROUP_TRADING_ACTION_ALL: u32 = 2158;
pub const XTYP_XC_GROUP_COMMODITY_CANCEL_ALL: u32 = 2159;
pub const XTYP_XC_GROUP_EQUITY_CANCEL_ALL: u32 = 2160;
pub const XTYP_XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7: u32 = 2161;
pub const XTYP_XC_EVENT_QUAL: u32 = 2162;
pub const XTYP_XC_EVENT_QUALS: u32 = 2163;
pub const XTYP_XC_GROUP_EQUITY_QUOTE: u32 = 2164;
pub const XTYP_XC_GROUP_EVENT_COMMON: u32 = 2165;
pub const XTYP_XC_FEED_ID: u32 = 2166;
pub const XTYP_XC_GROUP_FEED_INFO: u32 = 2167;
pub const XTYP_XC_GROUP_LINE_GAPS: u32 = 2168;
pub const XTYP_XC_GROUP_LINE_STATS: u32 = 2169;
pub const XTYP_XC_GROUP_SOCKET_STATS: u32 = 2170;
pub const XTYP_XC_KEYLIST_DESCRIPTION: u32 = 2171;
pub const XTYP_XC_DAYSBACK: u32 = 2172;
pub const XTYP_XC_GROUP_LINE_GAP_LINE_INFO: u32 = 2173;
pub const XTYP_XC_TRADING_STATE: u32 = 2174;
pub const XTYP_XC_GROUP_PRICE_BOOK_LEVEL: u32 = 2175;
pub const XTYP_XC_GROUP_EVENT_TIMING: u32 = 2176;
pub const XTYP_XC_EXTIME: u32 = 2177;
pub const XTYP_XC_TS_REQUEST_TYPE: u32 = 2178;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_V3_8: u32 = 2179;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_AUCTION: u32 = 2180;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE: u32 = 2181;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8: u32 = 2182;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_MATCH: u32 = 2183;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_TICK: u32 = 2184;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING: u32 = 2185;
pub const XTYP_XC_GROUP_ORDER_ON_BOOK: u32 = 2186;
pub const XTYP_XC_GROUP_ORDER_ON_BOOK_ENTRY: u32 = 2187;
pub const XTYP_XC_GROUP_ORDER_ON_BOOK_PARTY: u32 = 2188;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL: u32 = 2189;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL: u32 = 2190;
pub const XTYP_XC_GROUP_EQUITY_TRADE_REF: u32 = 2193;
pub const XTYP_XC_GROUP_TRADE_REF: u32 = 2194;
pub const XTYP_XC_GROUP_ORDER_EXECUTION_REF: u32 = 2195;
pub const XTYP_XC_GROUP_ORDER_EXECUTION_REF_ALL: u32 = 2196;
pub const XTYP_XC_GROUP_ORDER_EXECUTION_ALL: u32 = 2197;
pub const XTYP_XC_GROUP_ORDER_EXECUTION: u32 = 2198;
pub const XTYP_XC_EVENT_ID: u32 = 2199;
pub const XTYP_XC_GROUP_FXFWD_QUOTE_ALL: u32 = 2200;
pub const XTYP_XC_GROUP_FXFWD_REFRESH_ALL: u32 = 2201;
pub const XTYP_XC_GROUP_FXSPOT_QUOTE_ALL: u32 = 2202;
pub const XTYP_XC_GROUP_FXSPOT_REFRESH_ALL: u32 = 2203;
pub const XTYP_XC_GROUP_FXSWAP_QUOTE_ALL: u32 = 2204;
pub const XTYP_XC_GROUP_FXSWAP_REFRESH_ALL: u32 = 2205;
pub const XTYP_XC_GROUP_CLIENT_STATS: u32 = 2206;
pub const XTYP_XC_GROUP_TICKER_PLANT_CLIENTS_RATES: u32 = 2207;
pub const XTYP_XC_GROUP_TICKER_PLANT_LATENCY: u32 = 2208;
pub const XTYP_XC_GROUP_TICKER_PLANT_SUMMARY: u32 = 2209;
pub const XTYP_XC_GROUP_TICKER_PLANT_SUMMARY_RATES: u32 = 2210;
pub const XTYP_XC_TRADING_STATE_FILTER: u32 = 2215;
pub const XTYP_XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL: u32 = 2216;
pub const XTYP_XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL: u32 = 2217;
pub const XTYP_XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL: u32 = 2218;
pub const XTYP_XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL: u32 = 2219;
pub const XTYP_XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL: u32 = 2220;
pub const XTYP_XC_GROUP_MWCB: u32 = 2221;
pub const XTYP_XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL: u32 = 2222;
pub const XTYP_XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL: u32 = 2223;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL: u32 = 2224;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL: u32 = 2225;
pub const XTYP_XC_GROUP_TRADING_ACTION_WITH_LULD_ALL: u32 = 2226;
pub const XTYP_XC_GROUP_SESSIONS: u32 = 2227;
pub const XTYP_XC_GROUP_SESSIONS_RATES: u32 = 2228;
pub const XTYP_XC_GROUP_REQUEST_FOR_QUOTE: u32 = 2229;
pub const XTYP_XC_GROUP_REQUEST_FOR_QUOTE_ALL: u32 = 2230;
pub const XTYP_XC_GROUP_CPMVOL: u32 = 2231;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE_AUCTION: u32 = 2232;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING: u32 = 2233;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_LEG: u32 = 2234;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE: u32 = 2235;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE: u32 = 2236;
pub const XTYP_XC_GROUP_INDICATIVE_PRICE: u32 = 2237;
pub const XTYP_XC_INDICATIVE_QUALS: u32 = 2238;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT: u32 = 2239;
pub const XTYP_XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT: u32 = 2240;
pub const XTYP_XC_GROUP_INSTRUMENT_GROUP: u32 = 2241;
pub const XTYP_XC_INSTRUMENT_GROUP_ID: u32 = 2242;
pub const XTYP_XC_QUALIFIER: u32 = 2243;
pub const XTYP_XC_QUALIFIERS: u32 = 2244;
pub const XTYP_XC_INDICATIVE_QUALIFIER: u32 = 2245;
pub const XTYP_XC_INDICATIVE_QUALIFIERS: u32 = 2246;
pub const XTYP_XC_QUOTE_QUALIFIER: u32 = 2247;
pub const XTYP_XC_QUOTE_QUALIFIERS: u32 = 2248;
pub const XTYP_XC_REFRESH_QUALIFIER: u32 = 2249;
pub const XTYP_XC_REFRESH_QUALIFIERS: u32 = 2250;
pub const XTYP_XC_TRADE_QUALIFIER: u32 = 2251;
pub const XTYP_XC_TRADE_QUALIFIERS: u32 = 2252;
pub const XTYP_XC_GROUP_CURRENT_LIQUIDITY_LAMP: u32 = 2253;
pub const XTYP_XC_GROUP_PRICE_BOOK_ENTRY_WITH_LIQUIDITY_LAMP: u32 = 2254;
pub const XTYP_XC_GROUP_PRICE_BOOK_LEVEL_WITH_LIQUIDITY_LAMP: u32 = 2255;
pub const XTYP_XC_DFLOAT_64: u32 = 2256;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED: u32 = 2257;
pub const XTYP_XC_GROUP_ORDER_IMBALANCE_REGULATORY: u32 = 2258;
pub const XTYP_XC_TRADE_VENUE: u32 = 2259;
pub const XTYP_XC_GROUP_VOLATILITY_BBO: u32 = 2260;
pub const XTYP_XC_GROUP_VOLATILITY_MISC: u32 = 2261;
pub const XTYP_XC_GROUP_VOLATILITY_TRADE: u32 = 2262;
pub const XTYP_XC_GROUP_VOLATILITY_UNDERLYING: u32 = 2263;
pub const XTYP_XC_REFERENCE_STRING: u32 = 2264;
pub const XTYP_XC_SYMBOL_LABEL: u32 = 2265;
pub const XTYP_XC_PROBABILITY: u32 = 2266;
pub const XTYP_XC_GROUP_INDICATION_OF_INTEREST: u32 = 2267;
pub const XTYP_XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY: u32 = 2268;
pub const XTYP_XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY: u32 = 2269;
pub const XTYP_XC_AUTHORIZATION: u32 = 2270;
pub const XTYP_XC_COMMODITY_TRADE_UPDATE_FLAGS: u32 = 2271;
pub const XTYP_XC_EQUITY_TRADE_UPDATE_FLAGS: u32 = 2272;
pub const XTYP_int16_t: u32 = 2273;
pub const XTYP_int32_t: u32 = 2274;
pub const XTYP_int64_t: u32 = 2275;
pub const XTYP_int8_t: u32 = 2276;
pub const XTYP_uint16_t: u32 = 2277;
pub const XTYP_uint32_t: u32 = 2278;
pub const XTYP_uint64_t: u32 = 2279;
pub const XTYP_uint8_t: u32 = 2280;
pub const XTYP_XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME: u32 = 2281;
pub const XTYP_XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME: u32 = 2282;
pub const XTYP_XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME: u32 = 2283;
pub const XTYP_XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME: u32 = 2284;
pub const XTYP_XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME: u32 = 2285;
pub const XTYP_XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME: u32 = 2286;
pub const XTYP_XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME: u32 = 2287;
pub const XTYP_XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME: u32 = 2288;
pub const XTYP_XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME: u32 = 2289;
pub const XTYP_XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME: u32 = 2290;
pub const XTYP_XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME: u32 = 2291;
pub const XTYP_XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME: u32 = 2292;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME: u32 = 2293;
pub const XTYP_XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME: u32 = 2294;
pub const XTYP_XC_THRESHOLDS: u32 = 2295;
pub const XTYP_XC_STAT_QUALS: u32 = 2296;
pub const XTYP_NEXT_FREE_EXEGY: u32 = 2297;
pub const XTYP_FIRST_ENUM: u32 = 3000;
pub const XTYP_XC_TRADE_QUAL: u32 = 3000;
pub const XTYP_xbool: u32 = 3001;
pub const XTYP_XC_QUOTE_QUAL: u32 = 3002;
pub const XTYP_xerr: u32 = 3003;
pub const XTYP_XC_PRICE_TYPE: u32 = 3004;
pub const XTYP_XC_REFRESH_QUAL: u32 = 3005;
pub const XTYP_XC_OBJECT_TYPE: u32 = 3007;
pub const XTYP_XC_FIELD_GROUP_ID: u32 = 3008;
pub const XTYP_XC_FIELD_ID: u32 = 3009;
pub const XTYP_xalert: u32 = 3010;
pub const XTYP_XC_TS_SCOPE_TYPE: u32 = 3012;
pub const XTYP_XC_BATE_CODE: u32 = 3013;
pub const XTYP_XC_ORDER_BOOK_TRANSACTION_TYPE: u32 = 3014;
pub const XTYP_XC_LIST_UPDATE_ACTION: u32 = 3016;
pub const XTYP_XC_LIST_UPDATE_VARIANT: u32 = 3017;
pub const XTYP_XC_ORDER_BOOK_UPDATE_TYPE: u32 = 3018;
pub const XTYP_XC_SYMBOL_TYPE: u32 = 3020;
pub const XTYP_XC_MARKET_SEGMENT: u32 = 3023;
pub const XTYP_XC_ORDER_IMBALANCE_TYPE: u32 = 3025;
pub const XTYP_XC_ORDER_IMBALANCE_AUCTION_TYPE: u32 = 3026;
pub const XTYP_XC_SYMBOL_NAMESPACE: u32 = 3030;
pub const XTYP_XC_LINE_ID: u32 = 3031;
pub const XTYP_XC_ORDER_REF_ID_TYPE: u32 = 3032;
pub const XTYP_XC_ORDER_REF_ID_ENCODING: u32 = 3034;
pub const XTYP_XC_STAT_TYPE: u32 = 3035;
pub const XTYP_XC_BOOLEAN_FILTER: u32 = 3036;
pub const XTYP_XC_TRADING_STATUS: u32 = 3041;
pub const XTYP_XC_TRADING_SUBSTATUS: u32 = 3042;
pub const XTYP_XC_EXECUTION_SIDE_ATTRIBUTION: u32 = 3043;
pub const XTYP_XC_LINE_STATE: u32 = 3044;
pub const XTYP_XC_TRADING_PRIMARY_STATUS: u32 = 3045;
pub const XTYP_XC_TRADING_SUBSTATUS_CLOSED: u32 = 3046;
pub const XTYP_XC_TRADING_SUBSTATUS_HALTED: u32 = 3047;
pub const XTYP_XC_TRADING_SUBSTATUS_OPEN: u32 = 3048;
pub const XTYP_XC_HIDDEN_OBJECT_TYPE: u32 = 3049;
pub const XTYP_XC_PRICE_UPDATE_TYPE: u32 = 3050;
pub const XTYP_XC_QUALITY_STATE: u32 = 3051;
pub const XTYP_XC_MATCH_ALGO: u32 = 3052;
pub const XTYP_XC_TRADING_SUBSTATUS_ACTIVE: u32 = 3053;
pub const XTYP_XC_TRADING_SUBSTATUS_INACTIVE: u32 = 3054;
pub const XTYP_XC_TRADING_SUBSTATUS_AUCTION: u32 = 3055;
pub const XTYP_XC_KEYLIST_EDIT_ACTION: u32 = 3056;
pub const XTYP_XC_SIDE_ATTRIBUTION: u32 = 3057;
pub const XTYP_XC_ASSET_CLASS: u32 = 3058;
pub const XTYP_XC_INDICATIVE_QUAL: u32 = 3059;
pub const XTYP_XC_INDICATIVE_TYPE: u32 = 3060;
pub const XTYP_XC_INST_ATTRIBUTE: u32 = 3061;
pub const XTYP_XC_LIMIT_TYPE: u32 = 3062;
pub const XTYP_XC_RULE_ID: u32 = 3063;
pub const XTYP_XC_INSTRUMENT_GROUP_ID_TYPE: u32 = 3064;
pub const XTYP_XC_BOOK_SWEEP_MODEL: u32 = 3065;
pub const XTYP_XC_PRICING_MODEL: u32 = 3066;
pub const XTYP_XC_SIDE: u32 = 3067;
pub const XTYP_XC_UPDATE_TYPE: u32 = 3068;
pub const XTYP_XC_VOLATILITY_CALC_TYPE: u32 = 3069;
pub const XTYP_XC_SIGNAL_STATUS: u32 = 3070;
pub const XTYP_XC_STAT_QUAL: u32 = 3071;
pub const XTYP_NEXT_FREE_ENUM: u32 = 3072;
pub const XTYP_XM_DATA_TYPE: u32 = 3999;
pub const XTYP_FIRST_RESERVED: u32 = 20000;
pub const XTYP_LAST_RESERVED: u32 = 29999;
pub const XC_NEXT_AVAILABLE_SLOT: u32 = 4294967295;
pub const XC_SESSION: u32 = 4294967294;
pub const XC_CONTAINER: u32 = 4294967293;
pub const XC_EVENT: u32 = 4294967292;
pub const XC_BOOK_DEPTH_USE_DEFAULT: u32 = 0;
pub const XC_BOOK_DEPTH_UNLIMITED: u32 = 4294967295;
pub const XC_FX_BOOK_DEPTH_UNLIMITED: u32 = 65535;
pub const XC_ERROR_STRING_MAXLEN: usize = 128;
pub const XC_KEYLIST_DESCRIPTION_MAXLEN: usize = 64;
pub const XC_STATS_IDENTIFIER_MAXLEN: usize = 32;
pub const XC_STATS_LONG_IDENTIFIER_MAXLEN: usize = 64;
pub const XC_STATS_SHORT_IDENTIFIER_MAXLEN: usize = 16;
pub const XC_STATS_MINI_IDENTIFIER_MAXLEN: usize = 8;
pub const XC_LONG_SYMBOL_MAXLEN: usize = 72;
pub const XC_FX_QUOTE_ID_MAXLEN: usize = 255;
pub const XC_FX_SESSION_ID_MAXLEN: usize = 255;
pub const XC_FX_LP_ID_MAXLEN: usize = 255;
pub const XC_FX_REF_ID_MAXLEN: usize = 255;
pub const XC_DFLOAT_64_SPECIAL_EXPONENT_VAL: u32 = 15;
pub const XC_SYMBOL_LABEL_MAXLEN: usize = 256;
pub const XC_THRESHOLD_NONE: u32 = 0;
pub const XC_THRESHOLD_ALL: u32 = 65535;
pub const XC_MAX_THRESHOLD_COUNT: u32 = 4;
pub const XPT_DECIMAL_0: u32 = 0;
pub const XPT_DECIMAL_1: u32 = 1;
pub const XPT_DECIMAL_2: u32 = 2;
pub const XPT_DECIMAL_3: u32 = 3;
pub const XPT_DECIMAL_4: u32 = 4;
pub const XPT_DECIMAL_5: u32 = 5;
pub const XPT_DECIMAL_6: u32 = 6;
pub const XPT_DECIMAL_7: u32 = 7;
pub const XPT_DECIMAL_8: u32 = 8;
pub const XPT_DECIMAL_9: u32 = 9;
pub const XPT_FRACTIONAL_512: u32 = 10;
pub const XPT_MAX_VALID_PRICETYPE: u32 = 10;
pub const XPT_UNDEFINED: u32 = 15;
pub const XOIDT_ASCII: u32 = 0;
pub const XOIDT_BCD: u32 = 1;
pub const XOIDT_UINT_PAIR: u32 = 2;
pub const XOIDT_ALPHA36: u32 = 3;
pub const XOIDT_RAW64: u32 = 4;
pub const XOIDT_SYMID_UINT: u32 = 5;
pub const sns_search_all: u32 = 0;
pub const sns_native: u32 = 1;
pub const sns_alternate_id1: u32 = 2;
pub const sns_alternate_id2: u32 = 3;
pub const sns_long_symbol: u32 = 4;
pub const XLUA_INVALID: u32 = 0;
pub const XLUA_INSERT: u32 = 1;
pub const XLUA_REPLACE: u32 = 2;
pub const XLUA_REMOVE: u32 = 3;
pub const XLUV_INVALID: u32 = 0;
pub const XLUV_POSITIONAL: u32 = 1;
pub const XLUV_KEYED: u32 = 2;
pub const XBF_MATCH_EITHER: u32 = 0;
pub const XBF_MATCH_FALSE: u32 = 1;
pub const XBF_MATCH_TRUE: u32 = 2;
pub const XIGIT_RAW64: u32 = 0;
pub const XIGIT_ASCII: u32 = 1;
pub const XKEA_INVALID: u32 = 0;
pub const XKEA_ADD: u32 = 1;
pub const XKEA_DELETE: u32 = 2;
pub const XLT_INVALID: u32 = 0;
pub const XLT_PERCENT_OFF_LAST: u32 = 1;
pub const XLT_DELTA_OFF_LAST: u32 = 2;
pub const XLT_DELTA_OFF_REFERENCE: u32 = 3;
pub const XIT_INVALID: u32 = 0;
pub const XIT_OPEN: u32 = 1;
pub const XIT_CLOSE: u32 = 2;
pub const XIT_SETL: u32 = 3;
pub const XIT_QUOTE: u32 = 4;
pub const XAC_UNSPECIFIED: u32 = 0;
pub const XAC_OTHER: u32 = 1;
pub const XAC_AGRICULTURE: u32 = 2;
pub const XAC_COMMODITY: u32 = 3;
pub const XAC_CURRENCY: u32 = 4;
pub const XAC_ENERGY: u32 = 5;
pub const XAC_EQUITY: u32 = 6;
pub const XAC_FX_CASH: u32 = 7;
pub const XAC_INTEREST: u32 = 8;
pub const XAC_METAL: u32 = 9;
pub const XAC_EQUITY_INDEX: u32 = 10;
pub const XAC_FUTURE: u32 = 11;
pub const XAC_INDEX: u32 = 12;
pub const XAC_EXCHRATE: u32 = 13;
pub const XAC_GOVERNMENT: u32 = 14;
pub const XIA_INVALID: u32 = 0;
pub const XIA_ALLOW_IMPLIED: u32 = 1;
pub const XIA_ALLOW_OPTIONS: u32 = 2;
pub const XIA_ALLOW_SERIAL_OPTIONS: u32 = 3;
pub const XIA_BLOCK_ELIGIBLE: u32 = 4;
pub const XIA_CRACK_SPREAD: u32 = 5;
pub const XIA_DAILY_ELIGIBLE: u32 = 6;
pub const XIA_DECAY_ELIGIBLE: u32 = 7;
pub const XIA_EBF_ELIGIBLE: u32 = 8;
pub const XIA_EFP_ELIGIBLE: u32 = 9;
pub const XIA_EFR_ELIGIBLE: u32 = 10;
pub const XIA_EFS_ELIGIBLE: u32 = 11;
pub const XIA_ELECTRONIC_ELIGIBLE: u32 = 12;
pub const XIA_GT_ELIGIBLE: u32 = 13;
pub const XIA_HEDGE_ONLY: u32 = 14;
pub const XIA_IMPLIED_MATCH_ELIGIBLE: u32 = 15;
pub const XIA_IS_FRACTIONAL: u32 = 16;
pub const XIA_LEPO: u32 = 17;
pub const XIA_MASS_QUOTE_ELIGIBLE: u32 = 18;
pub const XIA_NEGATIVE_PRICE_ELIGIBLE: u32 = 19;
pub const XIA_NEGATIVE_STRIKE_ELIGIBLE: u32 = 20;
pub const XIA_ONE_SIDED_QUOTE_ALLOWED: u32 = 21;
pub const XIA_ORDER_CROSS_ELIGIBLE: u32 = 22;
pub const XIA_OTC_ELIGIBLE: u32 = 23;
pub const XIA_RFQ_CROSS_ELIGIBLE: u32 = 24;
pub const XIA_TRADABLE: u32 = 25;
pub const XIA_USER_DEFINED: u32 = 26;
pub const XIA_VARIABLE_ELIGIBLE: u32 = 27;
pub const XIA_ZERO_PRICE_ELIGIBLE: u32 = 28;
pub const XIA_FINANCIALLY_SETTLED: u32 = 29;
pub const XIA_PHYSICALLY_SETTLED: u32 = 30;
pub const XIA_AON: u32 = 31;
pub const XIA_MIFID_REGULATED: u32 = 32;
pub const XIA_CAS: u32 = 33;
pub const XIA_VCM: u32 = 34;
pub const XIA_POS: u32 = 35;
pub const XRI_INVALID: u32 = 0;
pub const XRI_VOLATILITY_STRATEGY: u32 = 1;
pub const XRI_SIMPLE_INSTRUMENT: u32 = 2;
pub const XRI_FUTURE_SPREAD: u32 = 3;
pub const XRI_INTERPRODUCT_SPREAD: u32 = 4;
pub const XRI_STANDARD_FUTURE_STRATEGY: u32 = 5;
pub const XRI_PACK_AND_BUNDLE: u32 = 6;
pub const XRI_STRIP: u32 = 7;
pub const XRI_FAST_MARKET: u32 = 8;
pub const XRI_NORMAL_TRADING: u32 = 9;
pub const XRI_STANDARD_OPTION_STRATEGY: u32 = 23;
pub const XRI_NONSTANDARD_OPTION_STRATEGY: u32 = 26;
pub const XRI_REG: u32 = 27;
pub const XRI_PRIVATE: u32 = 28;
pub const XRI_DELAY: u32 = 29;
pub const XRI_LIS: u32 = 30;
pub const XRI_REG_BLOCK: u32 = 31;
pub const XRI_PRIVATE_BLOCK: u32 = 32;
pub const XRI_DELAY_BLOCK: u32 = 33;
pub const XRI_LIS_BLOCK: u32 = 34;
pub const XRI_REG_EXSWAP: u32 = 35;
pub const XRI_PRIVATE_EXSWAP: u32 = 36;
pub const XRI_DELAY_EXSWAP: u32 = 37;
pub const XRI_LIS_EXSWAP: u32 = 38;
pub const XRI_REG_EPHYS: u32 = 39;
pub const XRI_PRIVATE_EPHYS: u32 = 40;
pub const XRI_DELAY_EPHYS: u32 = 41;
pub const XRI_LIS_EPHYS: u32 = 42;
pub const XRI_REG_NG_EPHYS_EXSWAP: u32 = 43;
pub const XRI_PRIVATE_NG_EPHYS_EXSWAP: u32 = 44;
pub const XRI_DELAY_NG_EPHYS_EXSWAP: u32 = 45;
pub const XRI_LIS_NG_EPHYS_EXSWAP: u32 = 46;
pub const XRI_REG_EXCHANGE_OPTIONS: u32 = 47;
pub const XRI_PRIVATE_EXCHANGE_OPTIONS: u32 = 48;
pub const XRI_DELAY_EXCHANGE_OPTIONS: u32 = 49;
pub const XRI_LIS_EXCHANGE_OPTIONS: u32 = 50;
pub const XRI_REG_SPECIAL: u32 = 51;
pub const XRI_PRIVATE_SPECIAL: u32 = 52;
pub const XRI_DELAY_SPECIAL: u32 = 53;
pub const XRI_LIS_SPECIAL: u32 = 54;
pub const XRI_REG_GUARANTEED_CROSS: u32 = 55;
pub const XRI_PRIVATE_GUARANTEED_CROSS: u32 = 56;
pub const XRI_DELAY_GUARANTEED_CROSS: u32 = 57;
pub const XRI_LIS_GUARANTEED_CROSS: u32 = 58;
pub const XRI_REG_BASIS: u32 = 59;
pub const XRI_PRIVATE_BASIS: u32 = 60;
pub const XRI_DELAY_BASIS: u32 = 61;
pub const XRI_LIS_BASIS: u32 = 62;
pub const XRI_REG_AAT: u32 = 63;
pub const XRI_PRIVATE_AAT: u32 = 64;
pub const XRI_DELAY_AAT: u32 = 65;
pub const XRI_LIS_AAT: u32 = 66;
pub const XRI_FLEXIBLE_INSTRUMENT: u32 = 67;
pub const XSD_UNDEFINED: u32 = 0;
pub const XSD_BID: u32 = 1;
pub const XSD_ASK: u32 = 2;
pub const XSD_MID: u32 = 3;
pub const XUT_ADD: u32 = 0;
pub const XUT_MODIFY: u32 = 1;
pub const XUT_DELETE: u32 = 2;
pub const XPM_UNDEFINED: u32 = 0;
pub const XPM_STACKED: u32 = 1;
pub const XPM_TIERED: u32 = 2;
pub const XPM_VOLUME_BANDS: u32 = 3;
pub const XPM_ORDER_BOOK: u32 = 4;
pub const XBSM_UNDEFINED: u32 = 0;
pub const XBSM_BULLET_SWEEP: u32 = 1;
pub const XBSM_SPRAY_SWEEP: u32 = 2;
pub const XBSM_NON_SWEEP: u32 = 3;
pub const XBSM_FULL_AMOUNT: u32 = 4;
pub const XVCT_INVALID: u32 = 0;
pub const XVCT_REGULAR: u32 = 1;
pub const XVCT_SNAPSHOT: u32 = 2;
pub const XVCT_SETTLEMENT: u32 = 3;
pub const XSS_DISABLED: u32 = 0;
pub const XSS_RESET: u32 = 1;
pub const XSS_LOW_QUALITY: u32 = 2;
pub const XSS_HIGH_QUALITY: u32 = 3;
pub const XSYMTYP_INVALID: u32 = 0;
pub const XSYMTYP_EQUITY: u32 = 1;
pub const XSYMTYP_EQUITY_OPTION: u32 = 2;
pub const XSYMTYP_NAV: u32 = 3;
pub const XSYMTYP_FUND: u32 = 4;
pub const XSYMTYP_WARRANT: u32 = 5;
pub const XSYMTYP_INDEX: u32 = 6;
pub const XSYMTYP_FOREIGN_EXCHANGE: u32 = 7;
pub const XSYMTYP_BOND: u32 = 8;
pub const XSYMTYP_FIXED_INCOME: u32 = 9;
pub const XSYMTYP_FUTURE: u32 = 10;
pub const XSYMTYP_FUTURE_OPTION: u32 = 11;
pub const XSYMTYP_FUTURE_SPREAD: u32 = 12;
pub const XSYMTYP_USER_KEYLIST: u32 = 13;
pub const XSYMTYP_FILTER_KEYLIST: u32 = 14;
pub const XSYMTYP_EQUITY_L2: u32 = 15;
pub const XSYMTYP_EQUITY_OPTION_L2: u32 = 16;
pub const XSYMTYP_FUTURE_L2: u32 = 17;
pub const XSYMTYP_FUTURE_OPTION_L2: u32 = 18;
pub const XSYMTYP_FUTURE_SPREAD_L2: u32 = 19;
pub const XSYMTYP_COMMODITY_INDEX: u32 = 20;
pub const XSYMTYP_FUTURE_OPTION_SPREAD: u32 = 21;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_L2: u32 = 22;
pub const XSYMTYP_EQUITY_OPTION_SPREAD: u32 = 23;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_L2: u32 = 24;
pub const XSYMTYP_FOREIGN_EXCHANGE_L2: u32 = 25;
pub const XSYMTYP_EQUITY_OPTION_STOCK_COMBO: u32 = 26;
pub const XSYMTYP_EQUITY_OPTION_STOCK_COMBO_L2: u32 = 27;
pub const XSYMTYP_ETF: u32 = 28;
pub const XSYMTYP_CURRENCY: u32 = 29;
pub const XSYMTYP_FUTURE_SPREAD_VERTICAL: u32 = 30;
pub const XSYMTYP_FUTURE_SPREAD_CALENDAR: u32 = 31;
pub const XSYMTYP_FUTURE_SPREAD_STRADDLE: u32 = 32;
pub const XSYMTYP_FUTURE_SPREAD_NON_STANDARD: u32 = 33;
pub const XSYMTYP_FUTURE_SPREAD_VERTICAL_L2: u32 = 34;
pub const XSYMTYP_FUTURE_SPREAD_CALENDAR_L2: u32 = 35;
pub const XSYMTYP_FUTURE_SPREAD_STRADDLE_L2: u32 = 36;
pub const XSYMTYP_FUTURE_SPREAD_NON_STANDARD_L2: u32 = 37;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_VERTICAL: u32 = 38;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_CALENDAR: u32 = 39;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_STRADDLE: u32 = 40;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_NON_STANDARD: u32 = 41;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_VERTICAL_L2: u32 = 42;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_CALENDAR_L2: u32 = 43;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_STRADDLE_L2: u32 = 44;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_NON_STANDARD_L2: u32 = 45;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_VERTICAL: u32 = 46;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_CALENDAR: u32 = 47;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_STRADDLE: u32 = 48;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_NON_STANDARD: u32 = 49;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_VERTICAL_L2: u32 = 50;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_CALENDAR_L2: u32 = 51;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_STRADDLE_L2: u32 = 52;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_NON_STANDARD_L2: u32 = 53;
pub const XSYMTYP_FUTURE_SPREAD_STRANGLE: u32 = 54;
pub const XSYMTYP_FUTURE_SPREAD_STRANGLE_L2: u32 = 55;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_STRANGLE: u32 = 56;
pub const XSYMTYP_FUTURE_OPTION_SPREAD_STRANGLE_L2: u32 = 57;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_STRANGLE: u32 = 58;
pub const XSYMTYP_EQUITY_OPTION_SPREAD_STRANGLE_L2: u32 = 59;
pub const XSYMTYP_CURRENCY_INDEX: u32 = 60;
pub const XSYMTYP_SPARE1: u32 = 61;
pub const XSYMTYP_SPARE2: u32 = 62;
pub const XSYMTYP_ETF_INDEX: u32 = 63;
pub const XSYMTYP_SPARE3: u32 = 64;
pub const XSYMTYP_FOREIGN_EXCHANGE_INDEX: u32 = 65;
pub const XSYMTYP_INTEREST_RATE: u32 = 66;
pub const XSYMTYP_INTEREST_RATE_INDEX: u32 = 67;
pub const XSYMTYP_FUND_L2: u32 = 68;
pub const XSYMTYP_WARRANT_L2: u32 = 69;
pub const XSYMTYP_INDEX_L2: u32 = 70;
pub const XSYMTYP_BOND_L2: u32 = 71;
pub const XSYMTYP_FIXED_INCOME_L2: u32 = 72;
pub const XSYMTYP_COMMODITY_INDEX_L2: u32 = 73;
pub const XSYMTYP_ETF_L2: u32 = 74;
pub const XSYMTYP_CURRENCY_L2: u32 = 75;
pub const XSYMTYP_CURRENCY_INDEX_L2: u32 = 76;
pub const XSYMTYP_ETF_INDEX_L2: u32 = 77;
pub const XSYMTYP_FOREIGN_EXCHANGE_INDEX_L2: u32 = 78;
pub const XSYMTYP_INTEREST_RATE_L2: u32 = 79;
pub const XSYMTYP_INTEREST_RATE_INDEX_L2: u32 = 80;
pub const XSYMTYP_FX_SPOT: u32 = 81;
pub const XSYMTYP_FX_FORWARD: u32 = 82;
pub const XSYMTYP_FX_NDF: u32 = 83;
pub const XSYMTYP_FX_SWAP: u32 = 84;
pub const XSYMTYP_COUNT: u32 = 85;
pub const XQQ_REG: u32 = 0;
pub const XQQ_RESUME: u32 = 1;
pub const XQQ_CLOSE: u32 = 2;
pub const XQQ_OPEN: u32 = 3;
pub const XQQ_XHOURS: u32 = 4;
pub const XQQ_FIRM: u32 = 5;
pub const XQQ_NONFIRM: u32 = 6;
pub const XQQ_SPECBK: u32 = 7;
pub const XQQ_SPECBK_B: u32 = 8;
pub const XQQ_SPECBK_O: u32 = 9;
pub const XQQ_ORD_IMB: u32 = 10;
pub const XQQ_NWS_DIS: u32 = 11;
pub const XQQ_NWS_PEND: u32 = 12;
pub const XQQ_RNWS_DIS: u32 = 13;
pub const XQQ_RNWS_PEND: u32 = 14;
pub const XQQ_IVC: u32 = 15;
pub const XQQ_EQUIP: u32 = 16;
pub const XQQ_NO_NR: u32 = 17;
pub const XQQ_FLUX: u32 = 18;
pub const XQQ_DUE_RS: u32 = 19;
pub const XQQ_ADD_INFO: u32 = 20;
pub const XQQ_ADD_INFO_RS: u32 = 21;
pub const XQQ_HALT_SUSP: u32 = 22;
pub const XQQ_HALT_REG: u32 = 23;
pub const XQQ_HALT_OPER: u32 = 24;
pub const XQQ_HALTED: u32 = 25;
pub const XQQ_ELGAUTO: u32 = 26;
pub const XQQ_INACT: u32 = 27;
pub const XQQ_SLOW: u32 = 28;
pub const XQQ_SLOW_B: u32 = 29;
pub const XQQ_SLOW_O: u32 = 30;
pub const XQQ_SLOW_LRP_B: u32 = 31;
pub const XQQ_SLOW_LRP_O: u32 = 32;
pub const XQQ_SLOW_LAG: u32 = 33;
pub const XQQ_SLOW_SSL: u32 = 34;
pub const XQQ_SPECIAL: u32 = 35;
pub const XQQ_ROTAT: u32 = 36;
pub const XQQ_MMDEL: u32 = 37;
pub const XQQ_WITHDRAW: u32 = 38;
pub const XQQ_WITHDRAW_EXC: u32 = 39;
pub const XQQ_MM_SUSP: u32 = 40;
pub const XQQ_OVERFLOW: u32 = 41;
pub const XQQ_IMPLIED: u32 = 42;
pub const XQQ_NOQ: u32 = 43;
pub const XQQ_RANGELIM: u32 = 44;
pub const XQQ_AUCTION: u32 = 45;
pub const XQQ_INDICATIVE: u32 = 46;
pub const XQQ_BID_HIT: u32 = 47;
pub const XQQ_MARKET: u32 = 48;
pub const XQQ_MANUAL: u32 = 49;
pub const XQQ_MAN_OFR: u32 = 50;
pub const XQQ_MAN_BID: u32 = 51;
pub const XQQ_FAST: u32 = 52;
pub const XQQ_AGGA: u32 = 53;
pub const XQQ_AGGB: u32 = 54;
pub const XQQ_COMMPRIN: u32 = 55;
pub const XQQ_FIRMEX: u32 = 56;
pub const XQQ_MTSIDE: u32 = 57;
pub const XQQ_FIRMMKT: u32 = 58;
pub const XQQ_SUB_PENNY: u32 = 59;
pub const XQQ_TAH: u32 = 60;
pub const XQQ_ONE_SIDED: u32 = 61;
pub const XQQ_BBO: u32 = 62;
pub const XQQ_LIMIT: u32 = 64;
pub const XQQ_LP_ASK: u32 = 65;
pub const XQQ_LP_BID: u32 = 66;
pub const XQQ_LP_BID_ASK: u32 = 67;
pub const XQQ_EXEC: u32 = 68;
pub const XQQ_EXEC_AT_PRICE: u32 = 69;
pub const XQQ_CANC: u32 = 70;
pub const XQQ_ERO: u32 = 71;
pub const XQQ_PEG: u32 = 72;
pub const XQQ_HIDDEN: u32 = 73;
pub const XQQ_CLEANSING: u32 = 74;
pub const XQQ_CALCULATED: u32 = 75;
pub const XQQ_INFORMATIONAL: u32 = 76;
pub const XQQ_REGULATORY: u32 = 77;
pub const XQQ_PARTIAL_IMPLIED: u32 = 78;
pub const XQQ_FACILITATED: u32 = 79;
pub const XQQ_SOLICITED: u32 = 80;
pub const XQQ_LOST_POSITION: u32 = 81;
pub const XQQ_EXPIRED: u32 = 82;
pub const XQQ_LOCAL_OSEQ: u32 = 83;
pub const XQQ_SHORT_RESTRICT: u32 = 84;
pub const XQQ_MM_CLOSED: u32 = 85;
pub const XQQ_CLEARBOOK: u32 = 86;
pub const XQQ_SSR_FILLING_PRICE: u32 = 87;
pub const XQQ_AUCTION_START: u32 = 88;
pub const XQQ_AUCTION_END: u32 = 89;
pub const XQQ_BLOCK: u32 = 90;
pub const XQQ_DIRECTED: u32 = 91;
pub const XQQ_FLASH: u32 = 92;
pub const XQQ_PIM: u32 = 93;
pub const XQQ_DIRECTED_PIM: u32 = 94;
pub const XQQ_EXPOSURE: u32 = 95;
pub const XQQ_EXPOSURE_STOCK: u32 = 96;
pub const XQQ_FACILITATION_STOCK: u32 = 97;
pub const XQQ_SOLICIT_STOCK: u32 = 98;
pub const XQQ_PIM_STOCK: u32 = 99;
pub const XQQ_PRE_MARKET: u32 = 100;
pub const XQQ_HALT_SSVTP: u32 = 101;
pub const XQQ_SPREAD: u32 = 102;
pub const XQQ_CALC_SIZE: u32 = 103;
pub const XQQ_ALL_OR_NONE: u32 = 104;
pub const XQQ_BID_FIRM: u32 = 105;
pub const XQQ_ASK_FIRM: u32 = 106;
pub const XQQ_CROSSED: u32 = 107;
pub const XQQ_PENALTY: u32 = 108;
pub const XQQ_PASSIVE: u32 = 109;
pub const XQQ_PRE_SYNDICATE: u32 = 110;
pub const XQQ_SYNDICATE: u32 = 111;
pub const XQQ_UNSOLICITED: u32 = 112;
pub const XQQ_EXEC_SUSPEND: u32 = 113;
pub const XQQ_CALC_SETTLE: u32 = 114;
pub const XQQ_SCHED_AUCTION: u32 = 115;
pub const XQQ_UBBO_RECOMPUTE: u32 = 116;
pub const XQQ_RI_B: u32 = 117;
pub const XQQ_RI_O: u32 = 118;
pub const XQQ_RI: u32 = 119;
pub const XQQ_RI_BO: u32 = 119;
pub const XQQ_NOBID: u32 = 120;
pub const XQQ_NOASK: u32 = 121;
pub const XQQ_BB_LIM: u32 = 123;
pub const XQQ_BO_LIM: u32 = 124;
pub const XQQ_BBO_LIM: u32 = 125;
pub const XQQ_BB_NOEX: u32 = 126;
pub const XQQ_BO_NOEX: u32 = 127;
pub const XQQ_BBO_NOEX: u32 = 128;
pub const XQQ_PROFINT: u32 = 129;
pub const XQQ_PROFINT_B: u32 = 130;
pub const XQQ_PROFINT_O: u32 = 131;
pub const XQQ_MMINT: u32 = 132;
pub const XQQ_MMINT_B: u32 = 133;
pub const XQQ_MMINT_O: u32 = 134;
pub const XQQ_NO_OPEN: u32 = 136;
pub const XQQ_INVAL_QUOTE: u32 = 137;
pub const XQQ_DPM: u32 = 138;
pub const XQQ_LEGAL: u32 = 139;
pub const XQQ_NON_LEGAL: u32 = 140;
pub const XQQ_CUSTOMER: u32 = 141;
pub const XQQ_PROFESSIONAL: u32 = 142;
pub const XQQ_BROKER_DEALER: u32 = 143;
pub const XQQ_PROPRIETARY: u32 = 144;
pub const XQQ_AWAY_MARKET_MAKER: u32 = 145;
pub const XQQ_MARKET_MAKER: u32 = 146;
pub const XQQ_AUCTION_UPDATE: u32 = 147;
pub const XQQ_NBL: u32 = 148;
pub const XQQ_COND: u32 = 149;
pub const XQQ_OVERLAY: u32 = 150;
pub const XQQ_LOW: u32 = 151;
pub const XQQ_MEDIUM: u32 = 152;
pub const XQQ_HIGH: u32 = 153;
pub const XQQ_IOC: u32 = 154;
pub const XQQ_MAX: u32 = 155;
pub const XQQ_BUY_CLOSING: u32 = 156;
pub const XQQ_SELL_CLOSING: u32 = 157;
pub const XQQ_BUYING_UP: u32 = 158;
pub const XQQ_SELLING_DOWN: u32 = 159;
pub const XQQ_DARK_MIDPOINT: u32 = 160;
pub const XQQ_CABINET: u32 = 161;
pub const XQQ_SIGNIFICANT: u32 = 162;
pub const XQQ_EXTREME: u32 = 163;
pub const XQQ_SNAPSHOT: u32 = 164;
pub const XQQ_INVAL: u32 = 255;
pub const XTQ_REG: u32 = 0;
pub const XTQ_OSEQ: u32 = 1;
pub const XTQ_CANC: u32 = 2;
pub const XTQ_LAST_CANC: u32 = 3;
pub const XTQ_LATE: u32 = 4;
pub const XTQ_CANC_OPN: u32 = 5;
pub const XTQ_OPEN: u32 = 6;
pub const XTQ_CNOL: u32 = 7;
pub const XTQ_AUTO: u32 = 8;
pub const XTQ_REOP: u32 = 9;
pub const XTQ_AJST: u32 = 10;
pub const XTQ_SPRD: u32 = 11;
pub const XTQ_STDL: u32 = 12;
pub const XTQ_STPD: u32 = 13;
pub const XTQ_CSTP: u32 = 14;
pub const XTQ_CMBO: u32 = 15;
pub const XTQ_INDEXLS: u32 = 16;
pub const XTQ_OPINT_END: u32 = 17;
pub const XTQ_RESUME: u32 = 18;
pub const XTQ_LULD_BAND: u32 = 19;
pub const XTQ_HELD: u32 = 20;
pub const XTQ_CASH: u32 = 21;
pub const XTQ_AVG: u32 = 22;
pub const XTQ_SWEEP: u32 = 23;
pub const XTQ_IDTD: u32 = 24;
pub const XTQ_HALT_IIV: u32 = 25;
pub const XTQ_RULES: u32 = 26;
pub const XTQ_NDT: u32 = 27;
pub const XTQ_SELLER: u32 = 28;
pub const XTQ_BUYER: u32 = 29;
pub const XTQ_XHOURS: u32 = 30;
pub const XTQ_DERIV: u32 = 31;
pub const XTQ_OFFICIAL: u32 = 32;
pub const XTQ_CROSSED: u32 = 33;
pub const XTQ_BARGAIN: u32 = 34;
pub const XTQ_BLOCK: u32 = 35;
pub const XTQ_NOTTOMARK: u32 = 36;
pub const XTQ_RELATIVE_BAND: u32 = 37;
pub const XTQ_UNCROSS: u32 = 38;
pub const XTQ_PDC: u32 = 39;
pub const XTQ_CONTRA: u32 = 40;
pub const XTQ_TENDER: u32 = 41;
pub const XTQ_VWAP: u32 = 42;
pub const XTQ_NETAV: u32 = 43;
pub const XTQ_PORTF: u32 = 44;
pub const XTQ_SETL: u32 = 45;
pub const XTQ_TRD_OPTEX: u32 = 46;
pub const XTQ_SEC_DEL: u32 = 47;
pub const XTQ_BUNCHED: u32 = 48;
pub const XTQ_BUNCHED_SOLD: u32 = 49;
pub const XTQ_ACQ: u32 = 50;
pub const XTQ_DISTRIBUTION: u32 = 51;
pub const XTQ_PRIOR_REF: u32 = 52;
pub const XTQ_OPENING_PRINTS: u32 = 53;
pub const XTQ_SPLIT: u32 = 54;
pub const XTQ_YELLOW: u32 = 55;
pub const XTQ_SSSL: u32 = 56;
pub const XTQ_SSSOS: u32 = 57;
pub const XTQ_REOPEN_PRINTS: u32 = 58;
pub const XTQ_CLOSING_PRINTS: u32 = 59;
pub const XTQ_OVERNIGHT: u32 = 60;
pub const XTQ_HALT_MERGER: u32 = 61;
pub const XTQ_NRSNDC: u32 = 62;
pub const XTQ_LATE_CORR: u32 = 63;
pub const XTQ_MID: u32 = 64;
pub const XTQ_EPHYS: u32 = 65;
pub const XTQ_INDICATIVE: u32 = 66;
pub const XTQ_MATCH: u32 = 67;
pub const XTQ_VOLATILITY: u32 = 68;
pub const XTQ_DELAYED: u32 = 69;
pub const XTQ_NBL: u32 = 70;
pub const XTQ_MANDCASH: u32 = 71;
pub const XTQ_OUTSIDE: u32 = 72;
pub const XTQ_DDAY: u32 = 73;
pub const XTQ_NONVS: u32 = 74;
pub const XTQ_ACCR_INT: u32 = 75;
pub const XTQ_RESVS: u32 = 76;
pub const XTQ_USD: u32 = 77;
pub const XTQ_SUBVS: u32 = 78;
pub const XTQ_INT_CROSS: u32 = 79;
pub const XTQ_CONTINGENT: u32 = 80;
pub const XTQ_SETLAST: u32 = 81;
pub const XTQ_SPECIAL: u32 = 82;
pub const XTQ_BASIS: u32 = 83;
pub const XTQ_MOC: u32 = 84;
pub const XTQ_OTC: u32 = 85;
pub const XTQ_SOLDLAST: u32 = 86;
pub const XTQ_BWRT: u32 = 87;
pub const XTQ_OPNLT: u32 = 88;
pub const XTQ_INBOARD: u32 = 89;
pub const XTQ_INISSUER: u32 = 90;
pub const XTQ_CAPPOOL: u32 = 91;
pub const XTQ_ORDTRADE: u32 = 92;
pub const XTQ_EPOIB: u32 = 93;
pub const XTQ_EPOIA: u32 = 94;
pub const XTQ_PARTPD_ASK: u32 = 95;
pub const XTQ_PARTPD_BID: u32 = 96;
pub const XTQ_RATION_ASK: u32 = 97;
pub const XTQ_RATION_BID: u32 = 98;
pub const XTQ_ESTIM: u32 = 99;
pub const XTQ_CANC_ASK: u32 = 100;
pub const XTQ_CANC_BID: u32 = 101;
pub const XTQ_OPENING: u32 = 102;
pub const XTQ_FIXING: u32 = 103;
pub const XTQ_PAID_ASK: u32 = 104;
pub const XTQ_PAID_BID: u32 = 105;
pub const XTQ_TAH: u32 = 106;
pub const XTQ_AUCTION: u32 = 107;
pub const XTQ_BLOCK_MKT: u32 = 108;
pub const XTQ_PUT_THRU: u32 = 109;
pub const XTQ_DELTA: u32 = 110;
pub const XTQ_ACKNOW: u32 = 111;
pub const XTQ_GROUP_CHANGE: u32 = 112;
pub const XTQ_OTCIFCDLY: u32 = 113;
pub const XTQ_OTCLTCOR: u32 = 114;
pub const XTQ_OTCTRD: u32 = 115;
pub const XTQ_FACILITATION: u32 = 116;
pub const XTQ_NEGTRD: u32 = 117;
pub const XTQ_SOLICITATION: u32 = 118;
pub const XTQ_SILTCOR: u32 = 119;
pub const XTQ_SITRD: u32 = 120;
pub const XTQ_SITRDLY: u32 = 121;
pub const XTQ_OTCTRDDLY: u32 = 122;
pub const XTQ_STKOPT: u32 = 123;
pub const XTQ_DELTA_NEUTRAL: u32 = 124;
pub const XTQ_HALTED: u32 = 125;
pub const XTQ_XHOURS_OSEQ: u32 = 126;
pub const XTQ_TTE: u32 = 127;
pub const XTQ_SPIM: u32 = 128;
pub const XTQ_BNMT: u32 = 129;
pub const XTQ_PROFESSIONAL: u32 = 130;
pub const XTQ_AAT: u32 = 131;
pub const XTQ_EXSWAP: u32 = 132;
pub const XTQ_BEST: u32 = 133;
pub const XTQ_SYS_PRICED_LEG: u32 = 134;
pub const XTQ_GLOBEX: u32 = 135;
pub const XTQ_EX_PIT: u32 = 136;
pub const XTQ_SYS_PRICED_CRACK_LEG: u32 = 137;
pub const XTQ_BILAT_OFF_EXCHG: u32 = 138;
pub const XTQ_NG_EPHYS_EXSWAP: u32 = 139;
pub const XTQ_CCX_EPHYS: u32 = 140;
pub const XTQ_EXRISK: u32 = 141;
pub const XTQ_AGAINST_ACTUAL: u32 = 142;
pub const XTQ_GUARANTEED_CROSS: u32 = 143;
pub const XTQ_EXTERNAL_MATCH: u32 = 144;
pub const XTQ_EXEC_AT_PRICE: u32 = 145;
pub const XTQ_HIDDEN: u32 = 146;
pub const XTQ_BUY_SIDE: u32 = 147;
pub const XTQ_SELL_SIDE: u32 = 148;
pub const XTQ_OPEN_CROSS: u32 = 149;
pub const XTQ_CLOSE_CROSS: u32 = 150;
pub const XTQ_INTRADAY_CROSS: u32 = 151;
pub const XTQ_IPO_HALT_CROSS: u32 = 152;
pub const XTQ_EMC_CROSS: u32 = 153;
pub const XTQ_INTERNAL: u32 = 154;
pub const XTQ_CASH_STL: u32 = 155;
pub const XTQ_CASH_STL_TODAY: u32 = 156;
pub const XTQ_DELAY: u32 = 157;
pub const XTQ_NONNET: u32 = 158;
pub const XTQ_NATIONAL: u32 = 159;
pub const XTQ_AS_OF_TRADE: u32 = 160;
pub const XTQ_IMPLIED: u32 = 161;
pub const XTQ_HALT_NWS_PEND: u32 = 162;
pub const XTQ_HALT_NWS_DIS: u32 = 163;
pub const XTQ_HALT_RNWS_PEND: u32 = 164;
pub const XTQ_HALT_RNWS_DIS: u32 = 165;
pub const XTQ_HALT_ETF: u32 = 166;
pub const XTQ_HALT_INFO_REQ: u32 = 167;
pub const XTQ_HALT_NONCOM: u32 = 168;
pub const XTQ_HALT_NOTCUR: u32 = 169;
pub const XTQ_HALT_SUSP: u32 = 170;
pub const XTQ_HALT_EMA: u32 = 171;
pub const XTQ_HALT_REG: u32 = 172;
pub const XTQ_HALT_OPER: u32 = 173;
pub const XTQ_HALT_IPO_NYT: u32 = 174;
pub const XTQ_HALT_ACT: u32 = 175;
pub const XTQ_HALT_NOQ: u32 = 176;
pub const XTQ_HALT_PRICE_BREAK: u32 = 177;
pub const XTQ_HALT_DISABLED: u32 = 178;
pub const XTQ_HALT_MARKETPLACE: u32 = 179;
pub const XTQ_RESUME_NWS: u32 = 180;
pub const XTQ_RESUME_FIL_RES: u32 = 181;
pub const XTQ_RESUME_FIL_CUR: u32 = 182;
pub const XTQ_RESUME_NONWS: u32 = 183;
pub const XTQ_RESUME_QUALRES: u32 = 184;
pub const XTQ_RESUME_QUALMAINT: u32 = 185;
pub const XTQ_RESUME_REG: u32 = 186;
pub const XTQ_RESUME_ISSUE: u32 = 187;
pub const XTQ_RESUME_NEW_ISSUE: u32 = 188;
pub const XTQ_RESUME_IPO_RELEASED: u32 = 189;
pub const XTQ_RESUME_IPO_WE: u32 = 190;
pub const XTQ_PRICE_VAR: u32 = 191;
pub const XTQ_LOCAL_OSEQ: u32 = 192;
pub const XTQ_HALT_SSVTP: u32 = 193;
pub const XTQ_SHORT_RESTRICT: u32 = 194;
pub const XTQ_FLUX: u32 = 195;
pub const XTQ_ORD_IMB: u32 = 196;
pub const XTQ_EQUIP: u32 = 197;
pub const XTQ_SUB_PENNY: u32 = 198;
pub const XTQ_HALT_DUE_RS: u32 = 199;
pub const XTQ_HALT_IVC: u32 = 200;
pub const XTQ_HALT_NO_NR: u32 = 201;
pub const XTQ_HALT_AS_OF: u32 = 202;
pub const XTQ_OVERFLOW: u32 = 203;
pub const XTQ_BUST_ADJUST: u32 = 204;
pub const XTQ_IMP_SPREAD_AT_OPEN: u32 = 205;
pub const XTQ_DARK_MIDPOINT: u32 = 206;
pub const XTQ_CHIDELTA: u32 = 207;
pub const XTQ_RFQ: u32 = 208;
pub const XTQ_NEGCFD_CURR: u32 = 209;
pub const XTQ_DIVIDEND: u32 = 210;
pub const XTQ_PRE_MARKET: u32 = 211;
pub const XTQ_OPEN_SETTLE: u32 = 212;
pub const XTQ_CALC_PRICE: u32 = 213;
pub const XTQ_ALGORITHMIC: u32 = 214;
pub const XTQ_DUPLICATIVE: u32 = 215;
pub const XTQ_PAID: u32 = 216;
pub const XTQ_GIVEN: u32 = 217;
pub const XTQ_LOW_FROM_ASK: u32 = 218;
pub const XTQ_HIGH_FROM_BID: u32 = 219;
pub const XTQ_BCLEAR: u32 = 220;
pub const XTQ_CABINET: u32 = 221;
pub const XTQ_COMBO: u32 = 222;
pub const XTQ_CLOSE_HIGH: u32 = 223;
pub const XTQ_CLOSE_LOW: u32 = 224;
pub const XTQ_CHANGING_TRANSACTION: u32 = 225;
pub const XTQ_FAST: u32 = 226;
pub const XTQ_EXCHANGE_GRANTED1: u32 = 227;
pub const XTQ_EXCHANGE_GRANTED2: u32 = 228;
pub const XTQ_EXCHANGE_OPTIONS: u32 = 229;
pub const XTQ_FREEZE: u32 = 230;
pub const XTQ_MARKET_SUPERVISION: u32 = 231;
pub const XTQ_POST_CLOSE: u32 = 232;
pub const XTQ_PRE_CLOSE: u32 = 233;
pub const XTQ_REVISE_CLOSE: u32 = 234;
pub const XTQ_REVISE_OPEN: u32 = 235;
pub const XTQ_RESUME_HIGH: u32 = 236;
pub const XTQ_RESUME_LOW: u32 = 237;
pub const XTQ_VALUATION: u32 = 238;
pub const XTQ_RESTRICTED_OPEN: u32 = 239;
pub const XTQ_SHORT_SALE: u32 = 240;
pub const XTQ_BISO: u32 = 241;
pub const XTQ_THEO: u32 = 242;
pub const XTQ_FORCED: u32 = 243;
pub const XTQ_OFF_BOOK: u32 = 244;
pub const XTQ_EOD_ROLL: u32 = 245;
pub const XTQ_GENERATED: u32 = 246;
pub const XTQ_ICEBERG: u32 = 247;
pub const XTQ_MWCB_LEVEL1: u32 = 248;
pub const XTQ_MWCB_LEVEL2: u32 = 249;
pub const XTQ_MWCB_LEVEL3: u32 = 250;
pub const XTQ_RI_B: u32 = 251;
pub const XTQ_RI_O: u32 = 252;
pub const XTQ_RI: u32 = 253;
pub const XTQ_MAX: u32 = 254;
pub const XTQ_INVAL: u32 = 255;
pub const XRQ_REG: u32 = 0;
pub const XRQ_CLIENT: u32 = 1;
pub const XRQ_SODROLL: u32 = 2;
pub const XRQ_CANCOR: u32 = 3;
pub const XRQ_SUBSCR: u32 = 4;
pub const XRQ_OFCLCLOSE: u32 = 5;
pub const XRQ_EODCLOSE: u32 = 6;
pub const XRQ_SODOPEN: u32 = 7;
pub const XRQ_OFFMKT: u32 = 8;
pub const XRQ_OFCLOPEN: u32 = 9;
pub const XRQ_CLEARBOOK: u32 = 10;
pub const XRQ_STATICDATA: u32 = 11;
pub const XRQ_MANUAL: u32 = 12;
pub const XRQ_GENERATED: u32 = 13;
pub const XRQ_TRADE_DATE: u32 = 14;
pub const XRQ_LAST_KNOWN: u32 = 15;
pub const XRQ_NEW: u32 = 16;
pub const XRQ_SNAPSHOT: u32 = 17;
pub const XRQ_PRIMEX_CHNG: u32 = 18;
pub const XRQ_COMPOSITE_RECOMPUTE: u32 = 19;
pub const XRQ_MAX: u32 = 20;
pub const XRQ_INVAL: u32 = 255;
pub const XIQ_REG: u32 = 0;
pub const XIQ_THEORETICAL: u32 = 1;
pub const XIQ_ROUNDED: u32 = 2;
pub const XIQ_INTRADAY: u32 = 3;
pub const XIQ_PRELIMINARY: u32 = 4;
pub const XIQ_ASK: u32 = 5;
pub const XIQ_BID: u32 = 6;
pub const XEQ_REG: u32 = 0;
pub const XLINE_INVALID: u32 = 0;
pub const XLINE_CANCL1: u32 = 2;
pub const XLINE_CANTL1: u32 = 3;
pub const XLINE_CUSTOM1: u32 = 5;
pub const XLINE_CUSTOM2: u32 = 6;
pub const XLINE_CUSTOM3: u32 = 7;
pub const XLINE_CUSTOM4: u32 = 8;
pub const XLINE_CUSTOM5: u32 = 9;
pub const XLINE_CUSTOM6: u32 = 10;
pub const XLINE_CUSTOM7: u32 = 11;
pub const XLINE_CUSTOM8: u32 = 12;
pub const XLINE_CME_EBSULT_NY: u32 = 13;
pub const XLINE_CMEC_EBSULT_NY: u32 = 14;
pub const XLINE_CME_EBSULT_LN: u32 = 15;
pub const XLINE_CMEC_EBSULT_LN: u32 = 16;
pub const XLINE_CME_EBSULT_ND: u32 = 17;
pub const XLINE_CMEC_EBSULT_ND: u32 = 18;
pub const XLINE_CME_EBSULT_SEF: u32 = 19;
pub const XLINE_CMEC_EBSULT_SEF: u32 = 20;
pub const XLINE_SIP0_XTIGTWY_28: u32 = 21;
pub const XLINE_SIP0_XTIGTWY_29: u32 = 22;
pub const XLINE_SIP0_XTIGTWY_30: u32 = 23;
pub const XLINE_PCAP: u32 = 29;
pub const XLINE_TOT_TCP: u32 = 30;
pub const XLINE_TDDS: u32 = 31;
pub const XLINE_BTECITCH: u32 = 32;
pub const XLINE_BTECITCH_SYMMGR: u32 = 33;
pub const XLINE_BTECITCT: u32 = 34;
pub const XLINE_BTECITCT_SYMMGR: u32 = 35;
pub const XLINE_NYSEALERTS: u32 = 37;
pub const XLINE_ATHX_TOP5: u32 = 38;
pub const XLINE_ATHX_TOP5_SYM: u32 = 39;
pub const XLINE_ATHX_TOP5T: u32 = 40;
pub const XLINE_ATHX_TOP5T_SYM: u32 = 41;
pub const XLINE_OPRA_RETRANS: u32 = 56;
pub const XLINE_OPRA_RETRANS2: u32 = 57;
pub const XLINE_AOPT_255: u32 = 61;
pub const XLINE_OPRA1: u32 = 62;
pub const XLINE_OPRA2: u32 = 63;
pub const XLINE_OPRA3: u32 = 64;
pub const XLINE_OPRA4: u32 = 65;
pub const XLINE_OPRA5: u32 = 66;
pub const XLINE_OPRA6: u32 = 67;
pub const XLINE_OPRA7: u32 = 68;
pub const XLINE_OPRA8: u32 = 69;
pub const XLINE_OPRA9: u32 = 70;
pub const XLINE_OPRA10: u32 = 71;
pub const XLINE_OPRA11: u32 = 72;
pub const XLINE_OPRA12: u32 = 73;
pub const XLINE_OPRA13: u32 = 74;
pub const XLINE_OPRA14: u32 = 75;
pub const XLINE_OPRA15: u32 = 76;
pub const XLINE_OPRA16: u32 = 77;
pub const XLINE_OPRA17: u32 = 78;
pub const XLINE_OPRA18: u32 = 79;
pub const XLINE_OPRA19: u32 = 80;
pub const XLINE_OPRA20: u32 = 81;
pub const XLINE_OPRA21: u32 = 82;
pub const XLINE_OPRA22: u32 = 83;
pub const XLINE_OPRA23: u32 = 84;
pub const XLINE_OPRA24: u32 = 85;
pub const XLINE_CME_100_ITC: u32 = 86;
pub const XLINE_BATSMC_1: u32 = 87;
pub const XLINE_BATSMC_2: u32 = 88;
pub const XLINE_BATSMC_3: u32 = 89;
pub const XLINE_BATSMC_4: u32 = 90;
pub const XLINE_BATSMC_5: u32 = 91;
pub const XLINE_BATSMC_6: u32 = 92;
pub const XLINE_CME_200_ITC: u32 = 93;
pub const XLINE_CME_201_ITC: u32 = 94;
pub const XLINE_CME_202_ITC: u32 = 95;
pub const XLINE_CME_203_ITC: u32 = 96;
pub const XLINE_CME_204_ITC: u32 = 97;
pub const XLINE_CME_205_ITC: u32 = 98;
pub const XLINE_CME_206_ITC: u32 = 99;
pub const XLINE_CME_207_ITC: u32 = 100;
pub const XLINE_CME_208_ITC: u32 = 101;
pub const XLINE_CME_209_ITC: u32 = 102;
pub const XLINE_CME_210_ITC: u32 = 103;
pub const XLINE_CME_211_ITC: u32 = 104;
pub const XLINE_CME_212_ITC: u32 = 105;
pub const XLINE_CME_213_ITC: u32 = 106;
pub const XLINE_BATSMC_7: u32 = 107;
pub const XLINE_BATSMC_8: u32 = 108;
pub const XLINE_BATSMC_9: u32 = 109;
pub const XLINE_BATSMC_10: u32 = 110;
pub const XLINE_BATSMC_11: u32 = 111;
pub const XLINE_CME_CH3_ITC: u32 = 112;
pub const XLINE_CME_38_ITC: u32 = 113;
pub const XLINE_CME_39_ITC: u32 = 114;
pub const XLINE_CME_40_ITC: u32 = 115;
pub const XLINE_FXIN: u32 = 116;
pub const XLINE_BBDS: u32 = 117;
pub const XLINE_ISE: u32 = 118;
pub const XLINE_CME_110_DJ: u32 = 120;
pub const XLINE_NASDVELO_1: u32 = 121;
pub const XLINE_NASDVELO_2: u32 = 122;
pub const XLINE_NASDVELO_3: u32 = 123;
pub const XLINE_OB_AA: u32 = 147;
pub const XLINE_OB_BB: u32 = 148;
pub const XLINE_OB_CC: u32 = 149;
pub const XLINE_OB_DD: u32 = 150;
pub const XLINE_OB_EE: u32 = 151;
pub const XLINE_OB_FF: u32 = 152;
pub const XLINE_OB_GG: u32 = 153;
pub const XLINE_OB_HH: u32 = 154;
pub const XLINE_OB_IJ: u32 = 155;
pub const XLINE_OB_KK: u32 = 156;
pub const XLINE_OB_LL: u32 = 157;
pub const XLINE_OB_MM: u32 = 158;
pub const XLINE_OB_NN: u32 = 159;
pub const XLINE_OB_OO: u32 = 160;
pub const XLINE_OB_PQ: u32 = 161;
pub const XLINE_OB_RR: u32 = 162;
pub const XLINE_OB_SS: u32 = 163;
pub const XLINE_OB_TT: u32 = 164;
pub const XLINE_OB_UV: u32 = 165;
pub const XLINE_OB_WZ: u32 = 166;
pub const XLINE_NYTRADE: u32 = 170;
pub const XLINE_NYIMBALANCE: u32 = 171;
pub const XLINE_NSXFAST: u32 = 172;
pub const XLINE_BQ_AC: u32 = 173;
pub const XLINE_BQ_DJ: u32 = 174;
pub const XLINE_BQ_KQ: u32 = 175;
pub const XLINE_BQ_RZ: u32 = 176;
pub const XLINE_CANCL2: u32 = 177;
pub const XLINE_CANTL2: u32 = 178;
pub const XLINE_OB_SYMMGR: u32 = 179;
pub const XLINE_ICEI: u32 = 181;
pub const XLINE_NYTRADE_SYMMGR: u32 = 182;
pub const XLINE_BATSTOP: u32 = 183;
pub const XLINE_OMEGA: u32 = 185;
pub const XLINE_BATSMC_12: u32 = 210;
pub const XLINE_ARC_COMP_1: u32 = 211;
pub const XLINE_ARC_COMP_2: u32 = 212;
pub const XLINE_ARC_COMP_3: u32 = 213;
pub const XLINE_ARC_COMP_4: u32 = 214;
pub const XLINE_NYLRP: u32 = 215;
pub const XLINE_AMEXALERTS: u32 = 216;
pub const XLINE_NYGIF1: u32 = 217;
pub const XLINE_NYGIF2: u32 = 218;
pub const XLINE_NYGIF3: u32 = 219;
pub const XLINE_RFA_AM: u32 = 220;
pub const XLINE_RFA_EA: u32 = 221;
pub const XLINE_RFA_SA: u32 = 222;
pub const XLINE_RFA_US: u32 = 223;
pub const XLINE_RFA_FX: u32 = 224;
pub const XLINE_RFA_C1: u32 = 225;
pub const XLINE_RFA_C2: u32 = 226;
pub const XLINE_AMEX_OB_AZ: u32 = 227;
pub const XLINE_AOPTLS_SYMMGR: u32 = 228;
pub const XLINE_AOPTLS_1: u32 = 229;
pub const XLINE_AMOPTLS_1: u32 = 231;
pub const XLINE_DE_X_1: u32 = 232;
pub const XLINE_DE_X_2: u32 = 233;
pub const XLINE_DE_X_3: u32 = 234;
pub const XLINE_DE_X_4: u32 = 235;
pub const XLINE_DE_X_5: u32 = 236;
pub const XLINE_DE_X_6: u32 = 237;
pub const XLINE_DE_X_7: u32 = 238;
pub const XLINE_DE_X_8: u32 = 239;
pub const XLINE_DE_X_9: u32 = 240;
pub const XLINE_DE_X_10: u32 = 241;
pub const XLINE_DE_A_1: u32 = 242;
pub const XLINE_DE_A_2: u32 = 243;
pub const XLINE_DE_A_3: u32 = 244;
pub const XLINE_DE_A_4: u32 = 245;
pub const XLINE_DE_A_5: u32 = 246;
pub const XLINE_DE_A_6: u32 = 247;
pub const XLINE_DE_A_7: u32 = 248;
pub const XLINE_DE_A_8: u32 = 249;
pub const XLINE_DE_A_9: u32 = 250;
pub const XLINE_DE_A_10: u32 = 251;
pub const XLINE_RUSSELLTICK: u32 = 253;
pub const XLINE_GIDS: u32 = 254;
pub const XLINE_EXEGY: u32 = 255;
pub const XLINE_CTS_1A: u32 = 257;
pub const XLINE_CTS_2A: u32 = 258;
pub const XLINE_CTS_3A: u32 = 259;
pub const XLINE_CTS_4A: u32 = 260;
pub const XLINE_CTS_5A: u32 = 261;
pub const XLINE_CTS_6A: u32 = 262;
pub const XLINE_CTS_7A: u32 = 263;
pub const XLINE_CTS_8A: u32 = 264;
pub const XLINE_CTS_9A: u32 = 265;
pub const XLINE_CTS_10A: u32 = 266;
pub const XLINE_CTS_11A: u32 = 267;
pub const XLINE_CTS_12A: u32 = 268;
pub const XLINE_MER_DOM_C_1: u32 = 269;
pub const XLINE_MER_DOM_C_2: u32 = 270;
pub const XLINE_MER_DOM_C_3: u32 = 271;
pub const XLINE_MER_DOM_C_4: u32 = 272;
pub const XLINE_MER_DOM_C_5: u32 = 273;
pub const XLINE_MER_DOM_C_6: u32 = 274;
pub const XLINE_MER_DOM_C_7: u32 = 275;
pub const XLINE_MER_DOM_C_8: u32 = 276;
pub const XLINE_MER_DOM_C_9: u32 = 277;
pub const XLINE_MER_DOM_C_10: u32 = 278;
pub const XLINE_MER_DOM_S_1: u32 = 279;
pub const XLINE_MER_DOM_S_2: u32 = 280;
pub const XLINE_MER_DOM_S_3: u32 = 281;
pub const XLINE_MER_DOM_S_4: u32 = 282;
pub const XLINE_MER_DOM_S_5: u32 = 283;
pub const XLINE_MER_DOM_S_6: u32 = 284;
pub const XLINE_MER_DOM_S_7: u32 = 285;
pub const XLINE_MER_DOM_S_8: u32 = 286;
pub const XLINE_MER_DOM_S_9: u32 = 287;
pub const XLINE_MER_DOM_S_10: u32 = 288;
pub const XLINE_CTS_1B: u32 = 289;
pub const XLINE_CTS_2B: u32 = 290;
pub const XLINE_CTS_3B: u32 = 291;
pub const XLINE_CTS_4B: u32 = 292;
pub const XLINE_CTS_5B: u32 = 293;
pub const XLINE_CTS_6B: u32 = 294;
pub const XLINE_CTS_7B: u32 = 295;
pub const XLINE_CTS_8B: u32 = 296;
pub const XLINE_CTS_9B: u32 = 297;
pub const XLINE_CTS_10B: u32 = 298;
pub const XLINE_CTS_11B: u32 = 299;
pub const XLINE_CTS_12B: u32 = 300;
pub const XLINE_MER_DOM_S_11: u32 = 301;
pub const XLINE_MER_DOM_S_12: u32 = 302;
pub const XLINE_MER_DOM_S_13: u32 = 303;
pub const XLINE_MER_DOM_S_14: u32 = 304;
pub const XLINE_MER_DOM_S_15: u32 = 305;
pub const XLINE_MER_DOM_S_16: u32 = 306;
pub const XLINE_MER_DOM_S_17: u32 = 307;
pub const XLINE_MER_DOM_S_18: u32 = 308;
pub const XLINE_MER_DOM_S_19: u32 = 309;
pub const XLINE_MER_DOM_S_20: u32 = 310;
pub const XLINE_MER_DOM_S_21: u32 = 311;
pub const XLINE_MER_DOM_S_22: u32 = 312;
pub const XLINE_MER_DOM_S_23: u32 = 313;
pub const XLINE_MER_DOM_S_24: u32 = 314;
pub const XLINE_MER_DOM_S_25: u32 = 315;
pub const XLINE_MER_DOM_S_26: u32 = 316;
pub const XLINE_MER_DOM_S_27: u32 = 317;
pub const XLINE_MER_DOM_S_28: u32 = 318;
pub const XLINE_MER_DOM_S_29: u32 = 319;
pub const XLINE_MER_DOM_S_30: u32 = 320;
pub const XLINE_CTS_INDEX1: u32 = 321;
pub const XLINE_CTS_INDEX2: u32 = 322;
pub const XLINE_TCTS_1A: u32 = 323;
pub const XLINE_TCTS_2A: u32 = 324;
pub const XLINE_TCTS_3A: u32 = 325;
pub const XLINE_TCTS_4A: u32 = 326;
pub const XLINE_TCTS_5A: u32 = 327;
pub const XLINE_TCTS_6A: u32 = 328;
pub const XLINE_TCTS_7A: u32 = 329;
pub const XLINE_TCTS_8A: u32 = 330;
pub const XLINE_TCTS_9A: u32 = 331;
pub const XLINE_TCTS_10A: u32 = 332;
pub const XLINE_TCTS_11A: u32 = 333;
pub const XLINE_TCTS_12A: u32 = 334;
pub const XLINE_TCTS_1B: u32 = 335;
pub const XLINE_TCTS_2B: u32 = 336;
pub const XLINE_TCTS_3B: u32 = 337;
pub const XLINE_TCTS_4B: u32 = 338;
pub const XLINE_TCTS_5B: u32 = 339;
pub const XLINE_TCTS_6B: u32 = 340;
pub const XLINE_TCTS_7B: u32 = 341;
pub const XLINE_TCTS_8B: u32 = 342;
pub const XLINE_TCTS_9B: u32 = 343;
pub const XLINE_TCTS_10B: u32 = 344;
pub const XLINE_TCTS_11B: u32 = 345;
pub const XLINE_TCTS_12B: u32 = 346;
pub const XLINE_TCTS_INDEX1: u32 = 347;
pub const XLINE_TCTS_INDEX2: u32 = 348;
pub const XLINE_MER_DOM_S_31: u32 = 349;
pub const XLINE_MER_DOM_S_32: u32 = 350;
pub const XLINE_MER_DOM_S_33: u32 = 351;
pub const XLINE_MER_DOM_S_34: u32 = 352;
pub const XLINE_MER_DOM_S_35: u32 = 353;
pub const XLINE_MER_DOM_S_36: u32 = 354;
pub const XLINE_MER_DOM_S_37: u32 = 355;
pub const XLINE_MER_DOM_S_38: u32 = 356;
pub const XLINE_MER_DOM_S_39: u32 = 357;
pub const XLINE_MER_DOM_S_40: u32 = 358;
pub const XLINE_MER_DOM_S_41: u32 = 359;
pub const XLINE_MER_DOM_S_42: u32 = 360;
pub const XLINE_MER_DOM_S_43: u32 = 361;
pub const XLINE_MER_DOM_S_44: u32 = 362;
pub const XLINE_MER_DOM_S_45: u32 = 363;
pub const XLINE_MER_DOM_S_46: u32 = 364;
pub const XLINE_MER_DOM_S_47: u32 = 365;
pub const XLINE_MER_DOM_S_48: u32 = 366;
pub const XLINE_MER_DOM_S_49: u32 = 367;
pub const XLINE_MER_DOM_S_50: u32 = 368;
pub const XLINE_MER_DOM_S_51: u32 = 369;
pub const XLINE_MER_DOM_S_52: u32 = 370;
pub const XLINE_MER_DOM_S_53: u32 = 371;
pub const XLINE_MER_DOM_S_54: u32 = 372;
pub const XLINE_MER_DOM_S_55: u32 = 373;
pub const XLINE_MER_DOM_S_56: u32 = 374;
pub const XLINE_MER_DOM_S_57: u32 = 375;
pub const XLINE_MER_DOM_S_58: u32 = 376;
pub const XLINE_MER_DOM_S_59: u32 = 377;
pub const XLINE_MER_DOM_S_60: u32 = 378;
pub const XLINE_MER_ORD_C_1: u32 = 379;
pub const XLINE_MER_ORD_C_2: u32 = 380;
pub const XLINE_MER_ORD_C_3: u32 = 381;
pub const XLINE_MER_ORD_C_4: u32 = 382;
pub const XLINE_MER_ORD_C_5: u32 = 383;
pub const XLINE_MER_ORD_C_6: u32 = 384;
pub const XLINE_CQS_1E: u32 = 385;
pub const XLINE_CQS_2E: u32 = 386;
pub const XLINE_CQS_3E: u32 = 387;
pub const XLINE_CQS_4E: u32 = 388;
pub const XLINE_CQS_5E: u32 = 389;
pub const XLINE_CQS_6E: u32 = 390;
pub const XLINE_CQS_7E: u32 = 391;
pub const XLINE_CQS_8E: u32 = 392;
pub const XLINE_CQS_9E: u32 = 393;
pub const XLINE_CQS_10E: u32 = 394;
pub const XLINE_CQS_11E: u32 = 395;
pub const XLINE_CQS_12E: u32 = 396;
pub const XLINE_MER_ORD_C_7: u32 = 397;
pub const XLINE_MER_ORD_C_8: u32 = 398;
pub const XLINE_MER_ORD_C_9: u32 = 399;
pub const XLINE_MER_ORD_C_10: u32 = 400;
pub const XLINE_MER_ORD_S_1: u32 = 401;
pub const XLINE_MER_ORD_S_2: u32 = 402;
pub const XLINE_MER_ORD_S_3: u32 = 403;
pub const XLINE_MER_ORD_S_4: u32 = 404;
pub const XLINE_MER_ORD_S_5: u32 = 405;
pub const XLINE_MER_ORD_S_6: u32 = 406;
pub const XLINE_MER_ORD_S_7: u32 = 407;
pub const XLINE_MER_ORD_S_8: u32 = 408;
pub const XLINE_MER_ORD_S_9: u32 = 409;
pub const XLINE_MER_ORD_S_10: u32 = 410;
pub const XLINE_MER_REF_INC: u32 = 411;
pub const XLINE_MER_REF_SNAP: u32 = 412;
pub const XLINE_MER_TQ_C_1: u32 = 413;
pub const XLINE_MER_TQ_C_2: u32 = 414;
pub const XLINE_MER_TQ_C_3: u32 = 415;
pub const XLINE_MER_TQ_C_4: u32 = 416;
pub const XLINE_CQS_1F: u32 = 417;
pub const XLINE_CQS_2F: u32 = 418;
pub const XLINE_CQS_3F: u32 = 419;
pub const XLINE_CQS_4F: u32 = 420;
pub const XLINE_CQS_5F: u32 = 421;
pub const XLINE_CQS_6F: u32 = 422;
pub const XLINE_CQS_7F: u32 = 423;
pub const XLINE_CQS_8F: u32 = 424;
pub const XLINE_CQS_9F: u32 = 425;
pub const XLINE_CQS_10F: u32 = 426;
pub const XLINE_CQS_11F: u32 = 427;
pub const XLINE_CQS_12F: u32 = 428;
pub const XLINE_TCQS_1E: u32 = 429;
pub const XLINE_TCQS_2E: u32 = 430;
pub const XLINE_TCQS_3E: u32 = 431;
pub const XLINE_TCQS_4E: u32 = 432;
pub const XLINE_TCQS_5E: u32 = 433;
pub const XLINE_TCQS_6E: u32 = 434;
pub const XLINE_TCQS_7E: u32 = 435;
pub const XLINE_TCQS_8E: u32 = 436;
pub const XLINE_TCQS_9E: u32 = 437;
pub const XLINE_TCQS_10E: u32 = 438;
pub const XLINE_TCQS_11E: u32 = 439;
pub const XLINE_TCQS_12E: u32 = 440;
pub const XLINE_TCQS_1F: u32 = 441;
pub const XLINE_TCQS_2F: u32 = 442;
pub const XLINE_TCQS_3F: u32 = 443;
pub const XLINE_TCQS_4F: u32 = 444;
pub const XLINE_TCQS_5F: u32 = 445;
pub const XLINE_TCQS_6F: u32 = 446;
pub const XLINE_TCQS_7F: u32 = 447;
pub const XLINE_TCQS_8F: u32 = 448;
pub const XLINE_TCQS_9F: u32 = 449;
pub const XLINE_TCQS_10F: u32 = 450;
pub const XLINE_TCQS_11F: u32 = 451;
pub const XLINE_TCQS_12F: u32 = 452;
pub const XLINE_FENICS_SYMMGR: u32 = 454;
pub const XLINE_FENICS: u32 = 455;
pub const XLINE_FENICST_SYMMGR: u32 = 456;
pub const XLINE_FENICST: u32 = 457;
pub const XLINE_XBUD_EMDI: u32 = 458;
pub const XLINE_XBUDT_EMDI: u32 = 459;
pub const XLINE_XLJU_EMDI: u32 = 460;
pub const XLINE_XLJUT_EMDI: u32 = 461;
pub const XLINE_XPRA_EMDI: u32 = 462;
pub const XLINE_XPRAT_EMDI: u32 = 463;
pub const XLINE_XZAG_EMDI: u32 = 464;
pub const XLINE_XZAGT_EMDI: u32 = 465;
pub const XLINE_XWBO_EMDI: u32 = 466;
pub const XLINE_XWBOT_EMDI: u32 = 467;
pub const XLINE_MER_TQ_C_5: u32 = 468;
pub const XLINE_MER_TQ_C_6: u32 = 469;
pub const XLINE_MER_TQ_C_7: u32 = 470;
pub const XLINE_MER_TQ_C_8: u32 = 471;
pub const XLINE_MER_TQ_C_9: u32 = 472;
pub const XLINE_MER_TQ_C_10: u32 = 473;
pub const XLINE_MER_TQ_S_1: u32 = 474;
pub const XLINE_MER_TQ_S_2: u32 = 475;
pub const XLINE_MER_TQ_S_3: u32 = 476;
pub const XLINE_MER_TQ_S_4: u32 = 477;
pub const XLINE_MER_TQ_S_5: u32 = 478;
pub const XLINE_MER_TQ_S_6: u32 = 479;
pub const XLINE_MER_TQ_S_7: u32 = 495;
pub const XLINE_MER_TQ_S_8: u32 = 496;
pub const XLINE_MER_TQ_S_9: u32 = 497;
pub const XLINE_MER_TQ_S_10: u32 = 498;
pub const XLINE_MER_TQ_S_11: u32 = 499;
pub const XLINE_MER_TQ_S_12: u32 = 500;
pub const XLINE_MER_TQ_S_13: u32 = 501;
pub const XLINE_MER_TQ_S_14: u32 = 502;
pub const XLINE_MER_TQ_S_15: u32 = 503;
pub const XLINE_MER_TQ_S_16: u32 = 504;
pub const XLINE_MER_TQ_S_17: u32 = 505;
pub const XLINE_MER_TQ_S_18: u32 = 506;
pub const XLINE_MER_TQ_S_19: u32 = 507;
pub const XLINE_MER_TQ_S_20: u32 = 508;
pub const XLINE_MER_TQ_S_21: u32 = 509;
pub const XLINE_MER_TQ_S_22: u32 = 510;
pub const XLINE_MER_TQ_S_23: u32 = 511;
pub const XLINE_MER_TQ_S_24: u32 = 512;
pub const XLINE_UTDF_AB: u32 = 513;
pub const XLINE_UTDF_CD: u32 = 514;
pub const XLINE_UTDF_EI: u32 = 515;
pub const XLINE_UTDF_JN: u32 = 516;
pub const XLINE_UTDF_OR: u32 = 517;
pub const XLINE_UTDF_SZ: u32 = 518;
pub const XLINE_MER_TQ_S_25: u32 = 519;
pub const XLINE_MER_TQ_S_26: u32 = 520;
pub const XLINE_MER_TQ_S_27: u32 = 521;
pub const XLINE_MER_TQ_S_28: u32 = 522;
pub const XLINE_MER_TQ_S_29: u32 = 523;
pub const XLINE_MER_TQ_S_30: u32 = 524;
pub const XLINE_MER_TQ_S_31: u32 = 525;
pub const XLINE_MER_TQ_S_32: u32 = 526;
pub const XLINE_MER_TQ_S_33: u32 = 527;
pub const XLINE_MER_TQ_S_34: u32 = 528;
pub const XLINE_MER_TQ_S_35: u32 = 529;
pub const XLINE_MER_TQ_S_36: u32 = 530;
pub const XLINE_MER_TQ_S_37: u32 = 531;
pub const XLINE_MER_TQ_S_38: u32 = 532;
pub const XLINE_MER_TQ_S_39: u32 = 533;
pub const XLINE_MER_TQ_S_40: u32 = 534;
pub const XLINE_MER_TQ_S_41: u32 = 535;
pub const XLINE_MER_TQ_S_42: u32 = 536;
pub const XLINE_MER_TQ_S_43: u32 = 537;
pub const XLINE_MER_TQ_S_44: u32 = 538;
pub const XLINE_MER_TQ_S_45: u32 = 539;
pub const XLINE_MER_TQ_S_46: u32 = 540;
pub const XLINE_MER_TQ_S_47: u32 = 541;
pub const XLINE_MER_TQ_S_48: u32 = 542;
pub const XLINE_MER_TQ_S_49: u32 = 543;
pub const XLINE_MER_TQ_S_50: u32 = 544;
pub const XLINE_UQDF_AB: u32 = 545;
pub const XLINE_UQDF_CD: u32 = 546;
pub const XLINE_UQDF_EI: u32 = 547;
pub const XLINE_UQDF_JN: u32 = 548;
pub const XLINE_UQDF_OR: u32 = 549;
pub const XLINE_UQDF_SZ: u32 = 550;
pub const XLINE_MER_TQ_S_51: u32 = 551;
pub const XLINE_MER_TQ_S_52: u32 = 552;
pub const XLINE_MER_TQ_S_53: u32 = 553;
pub const XLINE_MER_TQ_S_54: u32 = 554;
pub const XLINE_MER_TQ_S_55: u32 = 555;
pub const XLINE_MER_TQ_S_56: u32 = 556;
pub const XLINE_MER_TQ_S_57: u32 = 557;
pub const XLINE_MER_TQ_S_58: u32 = 558;
pub const XLINE_MER_TQ_S_59: u32 = 559;
pub const XLINE_NORDITCH_UAT_1: u32 = 560;
pub const XLINE_NORDITCH: u32 = 561;
pub const XLINE_NLS: u32 = 562;
pub const XLINE_NLS_NTF: u32 = 563;
pub const XLINE_NLS_TRF: u32 = 564;
pub const XLINE_NORDITCH_SYMMGR: u32 = 566;
pub const XLINE_TASE_RZT: u32 = 568;
pub const XLINE_TASE_RZT_SYMMGR: u32 = 569;
pub const XLINE_PSX_SYMMGR: u32 = 570;
pub const XLINE_TASE_RZF: u32 = 572;
pub const XLINE_TASE_RZF_SYMMGR: u32 = 573;
pub const XLINE_NORDTVT: u32 = 574;
pub const XLINE_NORDTVT_SYMMGR: u32 = 575;
pub const XLINE_OPRA25: u32 = 576;
pub const XLINE_OPRA26: u32 = 577;
pub const XLINE_OPRA27: u32 = 578;
pub const XLINE_OPRA28: u32 = 579;
pub const XLINE_OPRA29: u32 = 580;
pub const XLINE_OPRA30: u32 = 581;
pub const XLINE_OPRA31: u32 = 582;
pub const XLINE_OPRA32: u32 = 583;
pub const XLINE_OPRA33: u32 = 584;
pub const XLINE_OPRA34: u32 = 585;
pub const XLINE_OPRA35: u32 = 586;
pub const XLINE_OPRA36: u32 = 587;
pub const XLINE_OPRA37: u32 = 588;
pub const XLINE_OPRA38: u32 = 589;
pub const XLINE_OPRA39: u32 = 590;
pub const XLINE_OPRA40: u32 = 591;
pub const XLINE_OPRA41: u32 = 592;
pub const XLINE_OPRA42: u32 = 593;
pub const XLINE_OPRA43: u32 = 594;
pub const XLINE_OPRA44: u32 = 595;
pub const XLINE_OPRA45: u32 = 596;
pub const XLINE_OPRA46: u32 = 597;
pub const XLINE_OPRA47: u32 = 598;
pub const XLINE_OPRA48: u32 = 599;
pub const XLINE_OPRA91: u32 = 600;
pub const XLINE_OPRA92: u32 = 601;
pub const XLINE_OPRA93: u32 = 602;
pub const XLINE_OPRA94: u32 = 603;
pub const XLINE_OPRA95: u32 = 604;
pub const XLINE_OPRA96: u32 = 605;
pub const XLINE_OPRA97: u32 = 606;
pub const XLINE_OPRA98: u32 = 607;
pub const XLINE_OPRAETH_RETR: u32 = 608;
pub const XLINE_OPRAETH_RETR2: u32 = 609;
pub const XLINE_MER_TQ_S_60: u32 = 610;
pub const XLINE_MER_TRD_C_1: u32 = 611;
pub const XLINE_MER_TRD_C_2: u32 = 612;
pub const XLINE_MER_TRD_C_3: u32 = 613;
pub const XLINE_MER_TRD_C_4: u32 = 614;
pub const XLINE_MER_TRD_C_5: u32 = 615;
pub const XLINE_MER_TRD_C_6: u32 = 616;
pub const XLINE_MER_TRD_C_7: u32 = 617;
pub const XLINE_MER_TRD_C_8: u32 = 618;
pub const XLINE_MER_TRD_C_9: u32 = 619;
pub const XLINE_MER_TRD_C_10: u32 = 620;
pub const XLINE_MER_TRD_S_1: u32 = 621;
pub const XLINE_MER_TRD_S_2: u32 = 622;
pub const XLINE_MER_TRD_S_3: u32 = 623;
pub const XLINE_MER_TRD_S_4: u32 = 624;
pub const XLINE_MER_TRD_S_5: u32 = 625;
pub const XLINE_MER_TRD_S_6: u32 = 626;
pub const XLINE_MER_TRD_S_7: u32 = 627;
pub const XLINE_MER_TRD_S_8: u32 = 628;
pub const XLINE_MER_TRD_S_9: u32 = 629;
pub const XLINE_MER_TRD_S_10: u32 = 630;
pub const XLINE_FNCST_SYMMGR: u32 = 631;
pub const XLINE_FNCST: u32 = 632;
pub const XLINE_FNCS_VG1_SYMMGR: u32 = 633;
pub const XLINE_FNCS_VG1: u32 = 634;
pub const XLINE_FNCS_VG2_SYMMGR: u32 = 635;
pub const XLINE_FNCS_VG2: u32 = 636;
pub const XLINE_FNCS_CUSTOM: u32 = 637;
pub const XLINE_UQDF_1: u32 = 640;
pub const XLINE_UQDF_2: u32 = 641;
pub const XLINE_UQDF_3: u32 = 642;
pub const XLINE_UQDF_4: u32 = 643;
pub const XLINE_UQDF_5: u32 = 644;
pub const XLINE_UQDF_6: u32 = 645;
pub const XLINE_UTDF_1: u32 = 648;
pub const XLINE_UTDF_2: u32 = 649;
pub const XLINE_UTDF_3: u32 = 650;
pub const XLINE_UTDF_4: u32 = 651;
pub const XLINE_UTDF_5: u32 = 652;
pub const XLINE_UTDF_6: u32 = 653;
pub const XLINE_LITCHMC_1: u32 = 656;
pub const XLINE_LITCHMC_2: u32 = 657;
pub const XLINE_LITCHMC_3: u32 = 658;
pub const XLINE_LITCHMC_4: u32 = 659;
pub const XLINE_LITCHMC_5: u32 = 660;
pub const XLINE_LITCHMC_6: u32 = 661;
pub const XLINE_LITCHMC_7: u32 = 662;
pub const XLINE_LITCHMC_8: u32 = 663;
pub const XLINE_LITCHMC_9: u32 = 664;
pub const XLINE_LITCHMC_10: u32 = 665;
pub const XLINE_LITCHMC_11: u32 = 666;
pub const XLINE_LITCHMC_12: u32 = 667;
pub const XLINE_LITCHMC_13: u32 = 668;
pub const XLINE_LITCHMC_14: u32 = 669;
pub const XLINE_LITCHMC_15: u32 = 670;
pub const XLINE_LITCHMC_16: u32 = 671;
pub const XLINE_LITCHMC_17: u32 = 672;
pub const XLINE_LITCHMC_18: u32 = 673;
pub const XLINE_LITCHMC_19: u32 = 674;
pub const XLINE_LITCHMC_20: u32 = 675;
pub const XLINE_LITCHMC_21: u32 = 676;
pub const XLINE_LITCHMC_22: u32 = 677;
pub const XLINE_LITCHMC_23: u32 = 678;
pub const XLINE_LITCHMC_24: u32 = 679;
pub const XLINE_LITCHMC_25: u32 = 680;
pub const XLINE_LITCHMC_26: u32 = 681;
pub const XLINE_NYAM_OB_SYMMGR: u32 = 688;
pub const XLINE_NYAM_OB_AC: u32 = 689;
pub const XLINE_NYAM_OB_DJ: u32 = 690;
pub const XLINE_NYAM_OB_KR: u32 = 691;
pub const XLINE_NYAM_OB_SZ: u32 = 692;
pub const XLINE_NYAM_OC_SYMMGR: u32 = 693;
pub const XLINE_NYAM_OC_AJ: u32 = 694;
pub const XLINE_NYAM_OC_KZ: u32 = 695;
pub const XLINE_NYSE_INT_PI_1: u32 = 696;
pub const XLINE_NYSE_INT_PI_2: u32 = 697;
pub const XLINE_NYSE_INT_PI_3: u32 = 698;
pub const XLINE_NYSE_INT_PI_4: u32 = 699;
pub const XLINE_NYSE_INT_PI_5: u32 = 700;
pub const XLINE_NYSE_INT_PI_6: u32 = 701;
pub const XLINE_NYSE_INT_PI_7: u32 = 702;
pub const XLINE_NYSE_INT_PI_8: u32 = 703;
pub const XLINE_NYSE_INT_PI_9: u32 = 704;
pub const XLINE_NYSE_INT_PI_10: u32 = 705;
pub const XLINE_NYSE_INT_PI_11: u32 = 706;
pub const XLINE_NYSE_INT_PI_12: u32 = 707;
pub const XLINE_NYSE_INT_PI_13: u32 = 708;
pub const XLINE_NYSE_INT_PI_14: u32 = 709;
pub const XLINE_NCHT_INT_1: u32 = 748;
pub const XLINE_NCHT_INT_2: u32 = 749;
pub const XLINE_NCHT_INT_3: u32 = 750;
pub const XLINE_NCHT_INT_SYMMGR: u32 = 751;
pub const XLINE_NCHT_BBO_1: u32 = 752;
pub const XLINE_NCHT_BBO_SYMMGR: u32 = 753;
pub const XLINE_NCHT_TRD_1: u32 = 754;
pub const XLINE_NCHT_TRD_SYMMGR: u32 = 755;
pub const XLINE_NCHX_INT_1: u32 = 756;
pub const XLINE_NCHX_INT_2: u32 = 757;
pub const XLINE_NCHX_INT_3: u32 = 758;
pub const XLINE_NCHX_INT_4: u32 = 759;
pub const XLINE_NCHX_INT_5: u32 = 760;
pub const XLINE_NCHX_INT_6: u32 = 761;
pub const XLINE_NCHX_INT_SYMMGR: u32 = 762;
pub const XLINE_NCHX_BBO_1: u32 = 763;
pub const XLINE_NCHX_BBO_2: u32 = 764;
pub const XLINE_NCHX_BBO_SYMMGR: u32 = 765;
pub const XLINE_NCHX_TRD_1: u32 = 766;
pub const XLINE_NCHX_TRD_SYMMGR: u32 = 767;
pub const XLINE_LIFFE_US_1: u32 = 768;
pub const XLINE_LIFFE_US_2: u32 = 769;
pub const XLINE_LIFFE_US_3: u32 = 770;
pub const XLINE_MEMX_DOM_SYMMGR: u32 = 771;
pub const XLINE_MEMX_DOM: u32 = 772;
pub const XLINE_MEMX_DOMT_SYM: u32 = 773;
pub const XLINE_MEMX_DOMT: u32 = 774;
pub const XLINE_MEMX_TOP_SYMMGR: u32 = 775;
pub const XLINE_MEMX_TOP: u32 = 776;
pub const XLINE_MEMX_TOPT_SYM: u32 = 777;
pub const XLINE_MEMX_TOPT: u32 = 778;
pub const XLINE_MEMX_TRD_SYMMGR: u32 = 779;
pub const XLINE_MEMX_TRD: u32 = 780;
pub const XLINE_MEMX_TRDT_SYM: u32 = 781;
pub const XLINE_MEMX_TRDT: u32 = 782;
pub const XLINE_ARCATRD_L: u32 = 784;
pub const XLINE_ARCATRD_O: u32 = 785;
pub const XLINE_ARCATRD_E: u32 = 786;
pub const XLINE_LAVA_AG: u32 = 800;
pub const XLINE_LAVA_HO: u32 = 801;
pub const XLINE_LAVA_PZ: u32 = 802;
pub const XLINE_LITCH: u32 = 803;
pub const XLINE_LAVA_AFP_AG: u32 = 804;
pub const XLINE_LAVA_AFP_HO: u32 = 805;
pub const XLINE_LAVA_AFP_PZ: u32 = 806;
pub const XLINE_ITTO1: u32 = 816;
pub const XLINE_ITTO2: u32 = 817;
pub const XLINE_ITTO3: u32 = 818;
pub const XLINE_ITTO4: u32 = 819;
pub const XLINE_ITTO_SYMMGR: u32 = 820;
pub const XLINE_TOPO_SYMMGR: u32 = 830;
pub const XLINE_TOPO_Q1: u32 = 831;
pub const XLINE_PHLX_TOPO_T1: u32 = 832;
pub const XLINE_PHLX_TOPO_T2: u32 = 833;
pub const XLINE_PHLX_TOPO_T3: u32 = 834;
pub const XLINE_PHLX_TOPO_T4: u32 = 835;
pub const XLINE_PHLX_TOPO_T5: u32 = 836;
pub const XLINE_PHLX_TOPO_T6: u32 = 837;
pub const XLINE_PHLX_TOPO_T7: u32 = 838;
pub const XLINE_PHLX_TOPO_T8: u32 = 839;
pub const XLINE_TOPO_Q2: u32 = 840;
pub const XLINE_TOPO_Q3: u32 = 841;
pub const XLINE_TOPO_Q4: u32 = 842;
pub const XLINE_TOPO_Q5: u32 = 843;
pub const XLINE_TOPO_Q6: u32 = 844;
pub const XLINE_TOPO_Q7: u32 = 845;
pub const XLINE_TOPO_Q8: u32 = 846;
pub const XLINE_TOPO_T1: u32 = 847;
pub const XLINE_PHLX_TOPO_Q1: u32 = 848;
pub const XLINE_PHLX_TOPO_Q2: u32 = 849;
pub const XLINE_PHLX_TOPO_Q3: u32 = 850;
pub const XLINE_PHLX_TOPO_Q4: u32 = 851;
pub const XLINE_PHLX_TOPO_Q5: u32 = 852;
pub const XLINE_PHLX_TOPO_Q6: u32 = 853;
pub const XLINE_PHLX_TOPO_Q7: u32 = 854;
pub const XLINE_PHLX_TOPO_Q8: u32 = 855;
pub const XLINE_PHLX_SYMMGR: u32 = 856;
pub const XLINE_TOPO_T2: u32 = 857;
pub const XLINE_TOPO_T3: u32 = 858;
pub const XLINE_TOPO_T4: u32 = 859;
pub const XLINE_TOPO_T5: u32 = 860;
pub const XLINE_TOPO_T6: u32 = 861;
pub const XLINE_TOPO_T7: u32 = 862;
pub const XLINE_TOPO_T8: u32 = 863;
pub const XLINE_BONO1: u32 = 864;
pub const XLINE_BONO2: u32 = 865;
pub const XLINE_BONO3: u32 = 866;
pub const XLINE_BONO4: u32 = 867;
pub const XLINE_BONO_SYMMGR: u32 = 868;
pub const XLINE_BONO_Q1: u32 = 869;
pub const XLINE_BONO_Q2: u32 = 870;
pub const XLINE_BONO_Q3: u32 = 871;
pub const XLINE_BONO_Q4: u32 = 872;
pub const XLINE_BONO_T1: u32 = 873;
pub const XLINE_BONO_T2: u32 = 874;
pub const XLINE_BONO_T3: u32 = 875;
pub const XLINE_BONO_T4: u32 = 876;
pub const XLINE_CHX_L: u32 = 880;
pub const XLINE_CHX_O: u32 = 881;
pub const XLINE_BXOPT_1: u32 = 882;
pub const XLINE_BXOPT_2: u32 = 883;
pub const XLINE_BXOPT_3: u32 = 884;
pub const XLINE_BXOPT_4: u32 = 885;
pub const XLINE_BXOPT_SYMMGR: u32 = 886;
pub const XLINE_BXTOP_SYMMGR: u32 = 887;
pub const XLINE_BXTOP_Q1: u32 = 888;
pub const XLINE_BXTOP_Q2: u32 = 889;
pub const XLINE_BXTOP_Q3: u32 = 890;
pub const XLINE_BXTOP_Q4: u32 = 891;
pub const XLINE_BXTOP_T1: u32 = 892;
pub const XLINE_BXTOP_T2: u32 = 893;
pub const XLINE_BXTOP_T3: u32 = 894;
pub const XLINE_BXTOP_T4: u32 = 895;
pub const XLINE_PHLXDOM_1: u32 = 901;
pub const XLINE_PHLXDOM_2: u32 = 902;
pub const XLINE_PHLXDOM_3: u32 = 903;
pub const XLINE_PHLXDOM_4: u32 = 904;
pub const XLINE_PHLXDOM_5: u32 = 905;
pub const XLINE_PHLXDOM_6: u32 = 906;
pub const XLINE_PHLXDOM_7: u32 = 907;
pub const XLINE_PHLXDOM_8: u32 = 908;
pub const XLINE_PHLXDOM_SYMMGR: u32 = 909;
pub const XLINE_PHLXDOM_9: u32 = 910;
pub const XLINE_PHLXDOM_10: u32 = 911;
pub const XLINE_PHLXDOM_11: u32 = 912;
pub const XLINE_PHLXDOM_12: u32 = 913;
pub const XLINE_PHLXDOM_13: u32 = 914;
pub const XLINE_PHLXDOM_14: u32 = 915;
pub const XLINE_PHLXDOM_15: u32 = 916;
pub const XLINE_PHLXDOM_16: u32 = 917;
pub const XLINE_PHLXDOM_17: u32 = 918;
pub const XLINE_PHLXDOM_18: u32 = 919;
pub const XLINE_PHLXDOM_19: u32 = 920;
pub const XLINE_OMDF: u32 = 928;
pub const XLINE_NOIVIEW: u32 = 929;
pub const XLINE_AMEXIMBALANCE: u32 = 930;
pub const XLINE_DAP: u32 = 931;
pub const XLINE_TRACKECN: u32 = 932;
pub const XLINE_PHLX_ORD_1: u32 = 944;
pub const XLINE_PHLX_ORD_2: u32 = 945;
pub const XLINE_PHLX_ORD_3: u32 = 946;
pub const XLINE_PHLX_ORD_4: u32 = 947;
pub const XLINE_PHLX_CMP_SYMMGR: u32 = 948;
pub const XLINE_PHLX_CMP_1: u32 = 960;
pub const XLINE_PHLX_CMP_2: u32 = 961;
pub const XLINE_PHLX_CMP_3: u32 = 962;
pub const XLINE_PHLX_CMP_4: u32 = 963;
pub const XLINE_ARCA_LISTED: u32 = 976;
pub const XLINE_ARCA_OTC: u32 = 977;
pub const XLINE_ARCA_ETF_AM: u32 = 978;
pub const XLINE_ARCA_ETF_NZ: u32 = 979;
pub const XLINE_ARCA_SYMMGR: u32 = 980;
pub const XLINE_CBOE_FIX: u32 = 992;
pub const XLINE_CBOE_MDI: u32 = 993;
pub const XLINE_BATSMC_SYMMGR: u32 = 1023;
pub const XLINE_BATSMC_OPT_1: u32 = 1024;
pub const XLINE_BATSMC_OPT_2: u32 = 1025;
pub const XLINE_BATSMC_OPT_3: u32 = 1026;
pub const XLINE_BATSMC_OPT_4: u32 = 1027;
pub const XLINE_BATSMC_OPT_5: u32 = 1028;
pub const XLINE_BATSMC_OPT_6: u32 = 1029;
pub const XLINE_BATSMC_OPT_7: u32 = 1030;
pub const XLINE_BATSMC_OPT_8: u32 = 1031;
pub const XLINE_BATSMC_OPT_9: u32 = 1032;
pub const XLINE_BATSMC_OPT_10: u32 = 1033;
pub const XLINE_BATSMC_OPT_11: u32 = 1034;
pub const XLINE_BATSMC_OPT_12: u32 = 1035;
pub const XLINE_BATSMC_OPT_13: u32 = 1036;
pub const XLINE_BATSMC_OPT_14: u32 = 1037;
pub const XLINE_BATSMC_OPT_15: u32 = 1038;
pub const XLINE_BATSMC_OPT_16: u32 = 1039;
pub const XLINE_BATSMC_OPT_17: u32 = 1040;
pub const XLINE_BATSMC_OPT_18: u32 = 1041;
pub const XLINE_BATSMC_OPT_19: u32 = 1042;
pub const XLINE_BATSMC_OPT_20: u32 = 1043;
pub const XLINE_BATSMC_OPT_21: u32 = 1044;
pub const XLINE_BATSMC_OPT_22: u32 = 1045;
pub const XLINE_BATSMC_OPT_23: u32 = 1046;
pub const XLINE_BATSMC_OPT_24: u32 = 1047;
pub const XLINE_BATSYMC_1: u32 = 1048;
pub const XLINE_BATSYMC_2: u32 = 1049;
pub const XLINE_BATSYMC_3: u32 = 1050;
pub const XLINE_BATSYMC_4: u32 = 1051;
pub const XLINE_BATSYMC_5: u32 = 1052;
pub const XLINE_BATSYMC_6: u32 = 1053;
pub const XLINE_BATSYMC_7: u32 = 1054;
pub const XLINE_BATSYMC_8: u32 = 1055;
pub const XLINE_BATSYMC_9: u32 = 1056;
pub const XLINE_BATSYMC_10: u32 = 1057;
pub const XLINE_BATSYMC_11: u32 = 1058;
pub const XLINE_BATSYMC_12: u32 = 1059;
pub const XLINE_BATSMC_OPT_25: u32 = 1060;
pub const XLINE_BATSMC_OPT_26: u32 = 1061;
pub const XLINE_BATSMC_OPT_27: u32 = 1062;
pub const XLINE_BATSMC_OPT_28: u32 = 1063;
pub const XLINE_BATSMC_OPT_29: u32 = 1064;
pub const XLINE_BATSMC_OPT_30: u32 = 1065;
pub const XLINE_BATSMC_OPT_31: u32 = 1066;
pub const XLINE_BATSMC_OPT_32: u32 = 1067;
pub const XLINE_BATSYMC_13: u32 = 1068;
pub const XLINE_BATSYMC_14: u32 = 1069;
pub const XLINE_BATSYMC_15: u32 = 1070;
pub const XLINE_BATSYMC_16: u32 = 1071;
pub const XLINE_BATSYMC_17: u32 = 1072;
pub const XLINE_BATSYMC_18: u32 = 1073;
pub const XLINE_BATSYMC_19: u32 = 1074;
pub const XLINE_BATSYMC_20: u32 = 1075;
pub const XLINE_BATSYMC_21: u32 = 1076;
pub const XLINE_BATSYMC_22: u32 = 1077;
pub const XLINE_BATSYMC_23: u32 = 1078;
pub const XLINE_BATSYMC_24: u32 = 1079;
pub const XLINE_BATSYMC_25: u32 = 1080;
pub const XLINE_BATSYMC_26: u32 = 1081;
pub const XLINE_BATSYMC_27: u32 = 1082;
pub const XLINE_BATSYMC_28: u32 = 1083;
pub const XLINE_BATSYMC_29: u32 = 1084;
pub const XLINE_BATSYMC_30: u32 = 1085;
pub const XLINE_BATSYMC_31: u32 = 1086;
pub const XLINE_BATSYMC_32: u32 = 1087;
pub const XLINE_BATSMC_RR: u32 = 1088;
pub const XLINE_BATSYMC_RR: u32 = 1089;
pub const XLINE_BATSMC_OPT_RR: u32 = 1090;
pub const XLINE_BATSYMC_CERT_1: u32 = 1091;
pub const XLINE_BATSYMC_CERT_2: u32 = 1092;
pub const XLINE_BATS_EDGA_RR: u32 = 1093;
pub const XLINE_BATS_EDGX_RR: u32 = 1094;
pub const XLINE_BATSMC_OPT_33: u32 = 1095;
pub const XLINE_MIAX_1: u32 = 1136;
pub const XLINE_MIAX_2: u32 = 1137;
pub const XLINE_MIAX_3: u32 = 1138;
pub const XLINE_MIAX_4: u32 = 1139;
pub const XLINE_MIAX_5: u32 = 1140;
pub const XLINE_MIAX_6: u32 = 1141;
pub const XLINE_MIAX_7: u32 = 1142;
pub const XLINE_MIAX_8: u32 = 1143;
pub const XLINE_MIAX_9: u32 = 1144;
pub const XLINE_MIAX_10: u32 = 1145;
pub const XLINE_MIAX_11: u32 = 1146;
pub const XLINE_MIAX_12: u32 = 1147;
pub const XLINE_MIAX_13: u32 = 1148;
pub const XLINE_MIAX_14: u32 = 1149;
pub const XLINE_MIAX_15: u32 = 1150;
pub const XLINE_MIAX_16: u32 = 1151;
pub const XLINE_MIAX_17: u32 = 1152;
pub const XLINE_MIAX_18: u32 = 1153;
pub const XLINE_MIAX_19: u32 = 1154;
pub const XLINE_MIAX_20: u32 = 1155;
pub const XLINE_MIAX_21: u32 = 1156;
pub const XLINE_MIAX_22: u32 = 1157;
pub const XLINE_MIAX_23: u32 = 1158;
pub const XLINE_MIAX_24: u32 = 1159;
pub const XLINE_MIAX_SYMMGR: u32 = 1160;
pub const XLINE_TX1_GTE: u32 = 1161;
pub const XLINE_CME_100_ITC_RPY: u32 = 1162;
pub const XLINE_CME_229_ITC: u32 = 1163;
pub const XLINE_CME_229_ITC_RPY: u32 = 1164;
pub const XLINE_CME_244_ITC: u32 = 1165;
pub const XLINE_CME_244_ITC_RPY: u32 = 1166;
pub const XLINE_CME_245_ITC: u32 = 1167;
pub const XLINE_CME_245_ITC_RPY: u32 = 1168;
pub const XLINE_CME_CH3_ITC_RPY: u32 = 1169;
pub const XLINE_DETEST_A_1: u32 = 1170;
pub const XLINE_DETEST_A_R1: u32 = 1171;
pub const XLINE_DETEST_A_2: u32 = 1172;
pub const XLINE_DETEST_A_R2: u32 = 1173;
pub const XLINE_DETEST_X_1: u32 = 1174;
pub const XLINE_DETEST_X_2: u32 = 1175;
pub const XLINE_DETEST_X_R1: u32 = 1176;
pub const XLINE_DETEST_X_R2: u32 = 1177;
pub const XLINE_CME_170_FAST: u32 = 1178;
pub const XLINE_CME_172_FAST: u32 = 1179;
pub const XLINE_CME_190_FAST: u32 = 1180;
pub const XLINE_BPIPE: u32 = 1184;
pub const XLINE_BPOD_CMOV: u32 = 1185;
pub const XLINE_BPOD_CMPP: u32 = 1186;
pub const XLINE_BPOD_EQL1: u32 = 1187;
pub const XLINE_BPOD_EQOV: u32 = 1188;
pub const XLINE_BPOD_EQPP: u32 = 1189;
pub const XLINE_BTECOMNET_SYM: u32 = 1191;
pub const XLINE_TUQDF_1: u32 = 1192;
pub const XLINE_TUQDF_2: u32 = 1193;
pub const XLINE_TUQDF_3: u32 = 1194;
pub const XLINE_TUQDF_4: u32 = 1195;
pub const XLINE_TUQDF_5: u32 = 1196;
pub const XLINE_TUQDF_6: u32 = 1197;
pub const XLINE_TUTDF_1: u32 = 1198;
pub const XLINE_TUTDF_2: u32 = 1199;
pub const XLINE_TUTDF_3: u32 = 1200;
pub const XLINE_TUTDF_4: u32 = 1201;
pub const XLINE_TUTDF_5: u32 = 1202;
pub const XLINE_TUTDF_6: u32 = 1203;
pub const XLINE_BATS_EDGA_1: u32 = 1216;
pub const XLINE_BATS_EDGA_2: u32 = 1217;
pub const XLINE_BATS_EDGA_3: u32 = 1218;
pub const XLINE_BATS_EDGA_4: u32 = 1219;
pub const XLINE_BATS_EDGA_5: u32 = 1220;
pub const XLINE_BATS_EDGA_6: u32 = 1221;
pub const XLINE_BATS_EDGA_7: u32 = 1222;
pub const XLINE_BATS_EDGA_8: u32 = 1223;
pub const XLINE_BATS_EDGA_9: u32 = 1224;
pub const XLINE_BATS_EDGA_10: u32 = 1225;
pub const XLINE_BATS_EDGA_11: u32 = 1226;
pub const XLINE_BATS_EDGA_12: u32 = 1227;
pub const XLINE_BATS_EDGA_13: u32 = 1228;
pub const XLINE_BATS_EDGA_14: u32 = 1229;
pub const XLINE_BATS_EDGA_15: u32 = 1230;
pub const XLINE_BATS_EDGA_16: u32 = 1231;
pub const XLINE_BATS_EDGA_17: u32 = 1232;
pub const XLINE_BATS_EDGA_18: u32 = 1233;
pub const XLINE_BATS_EDGA_19: u32 = 1234;
pub const XLINE_BATS_EDGA_20: u32 = 1235;
pub const XLINE_BATS_EDGA_21: u32 = 1236;
pub const XLINE_BATS_EDGA_22: u32 = 1237;
pub const XLINE_BATS_EDGA_23: u32 = 1238;
pub const XLINE_BATS_EDGA_24: u32 = 1239;
pub const XLINE_BATS_EDGA_25: u32 = 1240;
pub const XLINE_BATS_EDGA_26: u32 = 1241;
pub const XLINE_BATS_EDGA_27: u32 = 1242;
pub const XLINE_BATS_EDGA_28: u32 = 1243;
pub const XLINE_BATS_EDGA_29: u32 = 1244;
pub const XLINE_BATS_EDGA_30: u32 = 1245;
pub const XLINE_BATS_EDGA_31: u32 = 1246;
pub const XLINE_BATS_EDGA_32: u32 = 1247;
pub const XLINE_BATS_EDGX_1: u32 = 1248;
pub const XLINE_BATS_EDGX_2: u32 = 1249;
pub const XLINE_BATS_EDGX_3: u32 = 1250;
pub const XLINE_BATS_EDGX_4: u32 = 1251;
pub const XLINE_BATS_EDGX_5: u32 = 1252;
pub const XLINE_BATS_EDGX_6: u32 = 1253;
pub const XLINE_BATS_EDGX_7: u32 = 1254;
pub const XLINE_BATS_EDGX_8: u32 = 1255;
pub const XLINE_BATS_EDGX_9: u32 = 1256;
pub const XLINE_BATS_EDGX_10: u32 = 1257;
pub const XLINE_BATS_EDGX_11: u32 = 1258;
pub const XLINE_BATS_EDGX_12: u32 = 1259;
pub const XLINE_BATS_EDGX_13: u32 = 1260;
pub const XLINE_BATS_EDGX_14: u32 = 1261;
pub const XLINE_BATS_EDGX_15: u32 = 1262;
pub const XLINE_BATS_EDGX_16: u32 = 1263;
pub const XLINE_BATS_EDGX_17: u32 = 1264;
pub const XLINE_BATS_EDGX_18: u32 = 1265;
pub const XLINE_BATS_EDGX_19: u32 = 1266;
pub const XLINE_BATS_EDGX_20: u32 = 1267;
pub const XLINE_BATS_EDGX_21: u32 = 1268;
pub const XLINE_BATS_EDGX_22: u32 = 1269;
pub const XLINE_BATS_EDGX_23: u32 = 1270;
pub const XLINE_BATS_EDGX_24: u32 = 1271;
pub const XLINE_BATS_EDGX_25: u32 = 1272;
pub const XLINE_BATS_EDGX_26: u32 = 1273;
pub const XLINE_BATS_EDGX_27: u32 = 1274;
pub const XLINE_BATS_EDGX_28: u32 = 1275;
pub const XLINE_BATS_EDGX_29: u32 = 1276;
pub const XLINE_BATS_EDGX_30: u32 = 1277;
pub const XLINE_BATS_EDGX_31: u32 = 1278;
pub const XLINE_BATS_EDGX_32: u32 = 1279;
pub const XLINE_BATSMC_13: u32 = 1280;
pub const XLINE_BATSMC_14: u32 = 1281;
pub const XLINE_BATSMC_15: u32 = 1282;
pub const XLINE_BATSMC_16: u32 = 1283;
pub const XLINE_BATSMC_17: u32 = 1284;
pub const XLINE_BATSMC_18: u32 = 1285;
pub const XLINE_BATSMC_19: u32 = 1286;
pub const XLINE_BATSMC_20: u32 = 1287;
pub const XLINE_BATSMC_21: u32 = 1288;
pub const XLINE_BATSMC_22: u32 = 1289;
pub const XLINE_BATSMC_23: u32 = 1290;
pub const XLINE_BATSMC_24: u32 = 1291;
pub const XLINE_BATSMC_25: u32 = 1292;
pub const XLINE_BATSMC_26: u32 = 1293;
pub const XLINE_BATSMC_27: u32 = 1294;
pub const XLINE_BATSMC_28: u32 = 1295;
pub const XLINE_BATSMC_29: u32 = 1296;
pub const XLINE_BATSMC_30: u32 = 1297;
pub const XLINE_BATSMC_31: u32 = 1298;
pub const XLINE_BATSMC_32: u32 = 1299;
pub const XLINE_BATSMC_CERT_1: u32 = 1300;
pub const XLINE_BATSMC_CERT_2: u32 = 1301;
pub const XLINE_BATSMC_33: u32 = 1302;
pub const XLINE_BATSMC_34: u32 = 1303;
pub const XLINE_BATSMC_35: u32 = 1304;
pub const XLINE_BATSMC_32_OLD: u32 = 1305;
pub const XLINE_CQS_1A_CERT: u32 = 1306;
pub const XLINE_CQS_2A_CERT: u32 = 1307;
pub const XLINE_CQS_3A_CERT: u32 = 1308;
pub const XLINE_CQS_4A_CERT: u32 = 1309;
pub const XLINE_CQS_1B_CERT: u32 = 1310;
pub const XLINE_CQS_2B_CERT: u32 = 1311;
pub const XLINE_CQS_3B_CERT: u32 = 1312;
pub const XLINE_CQS_4B_CERT: u32 = 1313;
pub const XLINE_CTS_1A_CERT: u32 = 1314;
pub const XLINE_CTS_2A_CERT: u32 = 1315;
pub const XLINE_CTS_3A_CERT: u32 = 1316;
pub const XLINE_CTS_4A_CERT: u32 = 1317;
pub const XLINE_CTS_1B_CERT: u32 = 1318;
pub const XLINE_CTS_2B_CERT: u32 = 1319;
pub const XLINE_CTS_3B_CERT: u32 = 1320;
pub const XLINE_CTS_4B_CERT: u32 = 1321;
pub const XLINE_CTS_INDEX1_CERT: u32 = 1322;
pub const XLINE_CTS_INDEX2_CERT: u32 = 1323;
pub const XLINE_BOX_OPT_1: u32 = 1344;
pub const XLINE_BOX_OPT_2: u32 = 1345;
pub const XLINE_BOX_OPT_3: u32 = 1346;
pub const XLINE_BOX_OPT_4: u32 = 1347;
pub const XLINE_BOX_OPT_5: u32 = 1348;
pub const XLINE_BOX_OPT_6: u32 = 1349;
pub const XLINE_BOX_OPT_7: u32 = 1350;
pub const XLINE_BOX_OPT_8: u32 = 1351;
pub const XLINE_BOX_MC_1: u32 = 1352;
pub const XLINE_BOX_MC_2: u32 = 1353;
pub const XLINE_BOX_MC_3: u32 = 1354;
pub const XLINE_BOX_MC_4: u32 = 1355;
pub const XLINE_BOX_MC_5: u32 = 1356;
pub const XLINE_BOX_MC_6: u32 = 1357;
pub const XLINE_BOX_MC_7: u32 = 1358;
pub const XLINE_BOX_MC_8: u32 = 1359;
pub const XLINE_DE_A_R01: u32 = 1360;
pub const XLINE_DE_A_R02: u32 = 1361;
pub const XLINE_DE_A_R03: u32 = 1362;
pub const XLINE_DE_A_R04: u32 = 1363;
pub const XLINE_DE_A_R05: u32 = 1364;
pub const XLINE_DE_A_R06: u32 = 1365;
pub const XLINE_DE_A_R07: u32 = 1366;
pub const XLINE_DE_A_R08: u32 = 1367;
pub const XLINE_DE_A_R09: u32 = 1368;
pub const XLINE_DE_A_R10: u32 = 1369;
pub const XLINE_DE_X_R01: u32 = 1370;
pub const XLINE_DE_X_R02: u32 = 1371;
pub const XLINE_DE_X_R03: u32 = 1372;
pub const XLINE_DE_X_R04: u32 = 1373;
pub const XLINE_DE_X_R05: u32 = 1374;
pub const XLINE_DE_X_R06: u32 = 1375;
pub const XLINE_DE_X_R07: u32 = 1376;
pub const XLINE_DE_X_R08: u32 = 1377;
pub const XLINE_DE_X_R09: u32 = 1378;
pub const XLINE_DE_X_R10: u32 = 1379;
pub const XLINE_EDGX_OPT_33: u32 = 1456;
pub const XLINE_EDGX_OPT_C_33: u32 = 1457;
pub const XLINE_EDGX_SYMMGR: u32 = 1468;
pub const XLINE_EDGX_OPT_RR: u32 = 1469;
pub const XLINE_EDGX_OPT_1: u32 = 1470;
pub const XLINE_EDGX_OPT_2: u32 = 1471;
pub const XLINE_EDGX_OPT_3: u32 = 1472;
pub const XLINE_EDGX_OPT_4: u32 = 1473;
pub const XLINE_EDGX_OPT_5: u32 = 1474;
pub const XLINE_EDGX_OPT_6: u32 = 1475;
pub const XLINE_EDGX_OPT_7: u32 = 1476;
pub const XLINE_EDGX_OPT_8: u32 = 1477;
pub const XLINE_EDGX_OPT_9: u32 = 1478;
pub const XLINE_EDGX_OPT_10: u32 = 1479;
pub const XLINE_EDGX_OPT_11: u32 = 1480;
pub const XLINE_EDGX_OPT_12: u32 = 1481;
pub const XLINE_EDGX_OPT_13: u32 = 1482;
pub const XLINE_EDGX_OPT_14: u32 = 1483;
pub const XLINE_EDGX_OPT_15: u32 = 1484;
pub const XLINE_EDGX_OPT_16: u32 = 1485;
pub const XLINE_EDGX_OPT_17: u32 = 1486;
pub const XLINE_EDGX_OPT_18: u32 = 1487;
pub const XLINE_EDGX_OPT_19: u32 = 1488;
pub const XLINE_EDGX_OPT_20: u32 = 1489;
pub const XLINE_EDGX_OPT_21: u32 = 1490;
pub const XLINE_EDGX_OPT_22: u32 = 1491;
pub const XLINE_EDGX_OPT_23: u32 = 1492;
pub const XLINE_EDGX_OPT_24: u32 = 1493;
pub const XLINE_EDGX_OPT_25: u32 = 1494;
pub const XLINE_EDGX_OPT_26: u32 = 1495;
pub const XLINE_EDGX_OPT_27: u32 = 1496;
pub const XLINE_EDGX_OPT_28: u32 = 1497;
pub const XLINE_EDGX_OPT_29: u32 = 1498;
pub const XLINE_EDGX_OPT_30: u32 = 1499;
pub const XLINE_EDGX_OPT_31: u32 = 1500;
pub const XLINE_EDGX_OPT_32: u32 = 1501;
pub const XLINE_EDGX_C_SYMMGR: u32 = 1502;
pub const XLINE_EDGX_OPT_C_RR: u32 = 1503;
pub const XLINE_EDGX_OPT_C_1: u32 = 1504;
pub const XLINE_EDGX_OPT_C_2: u32 = 1505;
pub const XLINE_EDGX_OPT_C_3: u32 = 1506;
pub const XLINE_EDGX_OPT_C_4: u32 = 1507;
pub const XLINE_EDGX_OPT_C_5: u32 = 1508;
pub const XLINE_EDGX_OPT_C_6: u32 = 1509;
pub const XLINE_EDGX_OPT_C_7: u32 = 1510;
pub const XLINE_EDGX_OPT_C_8: u32 = 1511;
pub const XLINE_EDGX_OPT_C_9: u32 = 1512;
pub const XLINE_EDGX_OPT_C_10: u32 = 1513;
pub const XLINE_EDGX_OPT_C_11: u32 = 1514;
pub const XLINE_EDGX_OPT_C_12: u32 = 1515;
pub const XLINE_EDGX_OPT_C_13: u32 = 1516;
pub const XLINE_EDGX_OPT_C_14: u32 = 1517;
pub const XLINE_EDGX_OPT_C_15: u32 = 1518;
pub const XLINE_EDGX_OPT_C_16: u32 = 1519;
pub const XLINE_EDGX_OPT_C_17: u32 = 1520;
pub const XLINE_EDGX_OPT_C_18: u32 = 1521;
pub const XLINE_EDGX_OPT_C_19: u32 = 1522;
pub const XLINE_EDGX_OPT_C_20: u32 = 1523;
pub const XLINE_EDGX_OPT_C_21: u32 = 1524;
pub const XLINE_EDGX_OPT_C_22: u32 = 1525;
pub const XLINE_EDGX_OPT_C_23: u32 = 1526;
pub const XLINE_EDGX_OPT_C_24: u32 = 1527;
pub const XLINE_EDGX_OPT_C_25: u32 = 1528;
pub const XLINE_EDGX_OPT_C_26: u32 = 1529;
pub const XLINE_EDGX_OPT_C_27: u32 = 1530;
pub const XLINE_EDGX_OPT_C_28: u32 = 1531;
pub const XLINE_EDGX_OPT_C_29: u32 = 1532;
pub const XLINE_EDGX_OPT_C_30: u32 = 1533;
pub const XLINE_EDGX_OPT_C_31: u32 = 1534;
pub const XLINE_EDGX_OPT_C_32: u32 = 1535;
pub const XLINE_AMEXOPT_127: u32 = 1563;
pub const XLINE_AMEX_TRADE: u32 = 1564;
pub const XLINE_AMEX_BQ_AC: u32 = 1565;
pub const XLINE_AMEX_BQ_DJ: u32 = 1566;
pub const XLINE_AMEX_BQ_KQ: u32 = 1567;
pub const XLINE_AMEX_BQ_RZ: u32 = 1568;
pub const XLINE_AMEXOPT_255: u32 = 1570;
pub const XLINE_AMEX_OB_SYMMGR: u32 = 1572;
pub const XLINE_TOPRA1: u32 = 1616;
pub const XLINE_TOPRA2: u32 = 1617;
pub const XLINE_TOPRA3: u32 = 1618;
pub const XLINE_TOPRA4: u32 = 1619;
pub const XLINE_TOPRA5: u32 = 1620;
pub const XLINE_TOPRA6: u32 = 1621;
pub const XLINE_TOPRA7: u32 = 1622;
pub const XLINE_TOPRA8: u32 = 1623;
pub const XLINE_TOPRA9: u32 = 1624;
pub const XLINE_TOPRA10: u32 = 1625;
pub const XLINE_TOPRA11: u32 = 1626;
pub const XLINE_TOPRA12: u32 = 1627;
pub const XLINE_TOPRA13: u32 = 1628;
pub const XLINE_TOPRA14: u32 = 1629;
pub const XLINE_TOPRA15: u32 = 1630;
pub const XLINE_TOPRA16: u32 = 1631;
pub const XLINE_TOPRA17: u32 = 1632;
pub const XLINE_TOPRA18: u32 = 1633;
pub const XLINE_TOPRA19: u32 = 1634;
pub const XLINE_TOPRA20: u32 = 1635;
pub const XLINE_TOPRA21: u32 = 1636;
pub const XLINE_TOPRA22: u32 = 1637;
pub const XLINE_TOPRA23: u32 = 1638;
pub const XLINE_TOPRA24: u32 = 1639;
pub const XLINE_TOPRA25: u32 = 1640;
pub const XLINE_TOPRA26: u32 = 1641;
pub const XLINE_TOPRA27: u32 = 1642;
pub const XLINE_TOPRA28: u32 = 1643;
pub const XLINE_TOPRA29: u32 = 1644;
pub const XLINE_TOPRA30: u32 = 1645;
pub const XLINE_TOPRA31: u32 = 1646;
pub const XLINE_TOPRA32: u32 = 1647;
pub const XLINE_TOPRA33: u32 = 1648;
pub const XLINE_TOPRA34: u32 = 1649;
pub const XLINE_TOPRA35: u32 = 1650;
pub const XLINE_TOPRA36: u32 = 1651;
pub const XLINE_TOPRA37: u32 = 1652;
pub const XLINE_TOPRA38: u32 = 1653;
pub const XLINE_TOPRA39: u32 = 1654;
pub const XLINE_TOPRA40: u32 = 1655;
pub const XLINE_TOPRA41: u32 = 1656;
pub const XLINE_TOPRA42: u32 = 1657;
pub const XLINE_TOPRA43: u32 = 1658;
pub const XLINE_TOPRA44: u32 = 1659;
pub const XLINE_TOPRA45: u32 = 1660;
pub const XLINE_TOPRA46: u32 = 1661;
pub const XLINE_TOPRA47: u32 = 1662;
pub const XLINE_TOPRA48: u32 = 1663;
pub const XLINE_TOPRA91: u32 = 1664;
pub const XLINE_TOPRA92: u32 = 1665;
pub const XLINE_TOPRA93: u32 = 1666;
pub const XLINE_TOPRA94: u32 = 1667;
pub const XLINE_TOPRA95: u32 = 1668;
pub const XLINE_TOPRA96: u32 = 1669;
pub const XLINE_TOPRA97: u32 = 1670;
pub const XLINE_TOPRA98: u32 = 1671;
pub const XLINE_OPRA_SYMMGR: u32 = 1672;
pub const XLINE_CQS_PI_1E: u32 = 1673;
pub const XLINE_CQS_PI_2E: u32 = 1674;
pub const XLINE_CQS_PI_3E: u32 = 1675;
pub const XLINE_CQS_PI_4E: u32 = 1676;
pub const XLINE_CQS_PI_5E: u32 = 1677;
pub const XLINE_CQS_PI_6E: u32 = 1678;
pub const XLINE_CQS_PI_7E: u32 = 1679;
pub const XLINE_CQS_PI_8E: u32 = 1680;
pub const XLINE_CQS_PI_9E: u32 = 1681;
pub const XLINE_CQS_PI_10E: u32 = 1682;
pub const XLINE_CQS_PI_11E: u32 = 1683;
pub const XLINE_CQS_PI_12E: u32 = 1684;
pub const XLINE_CQS_PI_1F: u32 = 1685;
pub const XLINE_CQS_PI_2F: u32 = 1686;
pub const XLINE_CQS_PI_3F: u32 = 1687;
pub const XLINE_CQS_PI_4F: u32 = 1688;
pub const XLINE_CQS_PI_5F: u32 = 1689;
pub const XLINE_CQS_PI_6F: u32 = 1690;
pub const XLINE_CQS_PI_7F: u32 = 1691;
pub const XLINE_CQS_PI_8F: u32 = 1692;
pub const XLINE_CQS_PI_9F: u32 = 1693;
pub const XLINE_CQS_PI_10F: u32 = 1694;
pub const XLINE_CQS_PI_11F: u32 = 1695;
pub const XLINE_CQS_PI_12F: u32 = 1696;
pub const XLINE_CTS_PI_1A: u32 = 1697;
pub const XLINE_CTS_PI_2A: u32 = 1698;
pub const XLINE_CTS_PI_3A: u32 = 1699;
pub const XLINE_CTS_PI_4A: u32 = 1700;
pub const XLINE_CTS_PI_5A: u32 = 1701;
pub const XLINE_CTS_PI_6A: u32 = 1702;
pub const XLINE_CTS_PI_7A: u32 = 1703;
pub const XLINE_CTS_PI_8A: u32 = 1704;
pub const XLINE_CTS_PI_9A: u32 = 1705;
pub const XLINE_CTS_PI_10A: u32 = 1706;
pub const XLINE_CTS_PI_11A: u32 = 1707;
pub const XLINE_CTS_PI_12A: u32 = 1708;
pub const XLINE_CTS_PI_1B: u32 = 1709;
pub const XLINE_CTS_PI_2B: u32 = 1710;
pub const XLINE_CTS_PI_3B: u32 = 1711;
pub const XLINE_CTS_PI_4B: u32 = 1712;
pub const XLINE_CTS_PI_5B: u32 = 1713;
pub const XLINE_CTS_PI_6B: u32 = 1714;
pub const XLINE_CTS_PI_7B: u32 = 1715;
pub const XLINE_CTS_PI_8B: u32 = 1716;
pub const XLINE_CTS_PI_9B: u32 = 1717;
pub const XLINE_CTS_PI_10B: u32 = 1718;
pub const XLINE_CTS_PI_11B: u32 = 1719;
pub const XLINE_CTS_PI_12B: u32 = 1720;
pub const XLINE_CTS_PI_INDEX1: u32 = 1721;
pub const XLINE_CTS_PI_INDEX2: u32 = 1722;
pub const XLINE_CQS_PI_RR: u32 = 1723;
pub const XLINE_CTS_PI_RR: u32 = 1724;
pub const XLINE_PINK_QUOTE: u32 = 1792;
pub const XLINE_PINK_DEPTH: u32 = 1793;
pub const XLINE_PINK_Q_SYMMGR: u32 = 1794;
pub const XLINE_PINK_QREFPRI: u32 = 1795;
pub const XLINE_PINK_TRADE: u32 = 1796;
pub const XLINE_PINK_REF: u32 = 1797;
pub const XLINE_PINK_REFNC: u32 = 1798;
pub const XLINE_PINK_SNAP: u32 = 1799;
pub const XLINE_PINK_TRADE_BIN: u32 = 1800;
pub const XLINE_PINK_REF_BIN: u32 = 1801;
pub const XLINE_PINK_REFNC_BIN: u32 = 1802;
pub const XLINE_PINK_QUOTE_G: u32 = 1803;
pub const XLINE_PINK_QG_SYMMGR: u32 = 1804;
pub const XLINE_PINK_T_SYMMGR: u32 = 1805;
pub const XLINE_OTC_QUOTEIN: u32 = 1808;
pub const XLINE_OTC_QUOTEIN_G: u32 = 1809;
pub const XLINE_OTC_QIN_SYMMGR: u32 = 1810;
pub const XLINE_OTC_QING_SYMMGR: u32 = 1811;
pub const XLINE_XRECONLY_1: u32 = 1824;
pub const XLINE_XRECONLY_2: u32 = 1825;
pub const XLINE_XRECONLY_3: u32 = 1826;
pub const XLINE_XRECONLY_4: u32 = 1827;
pub const XLINE_XRECONLY_5: u32 = 1828;
pub const XLINE_XRECONLY_6: u32 = 1829;
pub const XLINE_XRECONLY_7: u32 = 1830;
pub const XLINE_XRECONLY_8: u32 = 1831;
pub const XLINE_XRECONLY_9: u32 = 1832;
pub const XLINE_XRECONLY_10: u32 = 1833;
pub const XLINE_XRECONLY_11: u32 = 1834;
pub const XLINE_XRECONLY_12: u32 = 1835;
pub const XLINE_XRECONLY_13: u32 = 1836;
pub const XLINE_XRECONLY_14: u32 = 1837;
pub const XLINE_XRECONLY_15: u32 = 1838;
pub const XLINE_XRECONLY_16: u32 = 1839;
pub const XLINE_XRECONLY_17: u32 = 1840;
pub const XLINE_XRECONLY_18: u32 = 1841;
pub const XLINE_XRECONLY_19: u32 = 1842;
pub const XLINE_XRECONLY_20: u32 = 1843;
pub const XLINE_XRECONLY_21: u32 = 1844;
pub const XLINE_XRECONLY_22: u32 = 1845;
pub const XLINE_XRECONLY_23: u32 = 1846;
pub const XLINE_XRECONLY_24: u32 = 1847;
pub const XLINE_XRECONLY_25: u32 = 1848;
pub const XLINE_XRECONLY_26: u32 = 1849;
pub const XLINE_XRECONLY_27: u32 = 1850;
pub const XLINE_XRECONLY_28: u32 = 1851;
pub const XLINE_XRECONLY_29: u32 = 1852;
pub const XLINE_XRECONLY_30: u32 = 1853;
pub const XLINE_XTEST_1: u32 = 1872;
pub const XLINE_XTEST_2: u32 = 1873;
pub const XLINE_XTEST_3: u32 = 1874;
pub const XLINE_XTEST_4: u32 = 1875;
pub const XLINE_XTEST_5: u32 = 1876;
pub const XLINE_XTEST_6: u32 = 1877;
pub const XLINE_XTEST_7: u32 = 1878;
pub const XLINE_XTEST_8: u32 = 1879;
pub const XLINE_XTEST_9: u32 = 1880;
pub const XLINE_XTEST_10: u32 = 1881;
pub const XLINE_XTEST_11: u32 = 1882;
pub const XLINE_XTEST_12: u32 = 1883;
pub const XLINE_XTEST_13: u32 = 1884;
pub const XLINE_XTEST_14: u32 = 1885;
pub const XLINE_XTEST_15: u32 = 1886;
pub const XLINE_XTEST_16: u32 = 1887;
pub const XLINE_XTEST_17: u32 = 1888;
pub const XLINE_XTEST_18: u32 = 1889;
pub const XLINE_XTEST_19: u32 = 1890;
pub const XLINE_XTEST_20: u32 = 1891;
pub const XLINE_XTEST_21: u32 = 1892;
pub const XLINE_XTEST_22: u32 = 1893;
pub const XLINE_XTEST_23: u32 = 1894;
pub const XLINE_XTEST_24: u32 = 1895;
pub const XLINE_XTEST_25: u32 = 1896;
pub const XLINE_XTEST_26: u32 = 1897;
pub const XLINE_XTEST_27: u32 = 1898;
pub const XLINE_XTEST_28: u32 = 1899;
pub const XLINE_XTEST_29: u32 = 1900;
pub const XLINE_XTEST_30: u32 = 1901;
pub const XLINE_UAT_OB_AA: u32 = 1904;
pub const XLINE_UAT_OB_BB: u32 = 1905;
pub const XLINE_UAT_OB_CC: u32 = 1906;
pub const XLINE_UAT_OB_DD: u32 = 1907;
pub const XLINE_UAT_OB_EE: u32 = 1908;
pub const XLINE_UAT_OB_FF: u32 = 1909;
pub const XLINE_UAT_OB_GG: u32 = 1910;
pub const XLINE_UAT_OB_HH: u32 = 1911;
pub const XLINE_UAT_OB_IJ: u32 = 1912;
pub const XLINE_UAT_OB_KK: u32 = 1913;
pub const XLINE_UAT_OB_LL: u32 = 1914;
pub const XLINE_UAT_OB_MM: u32 = 1915;
pub const XLINE_UAT_OB_NN: u32 = 1916;
pub const XLINE_UAT_OB_OO: u32 = 1917;
pub const XLINE_UAT_OB_PQ: u32 = 1918;
pub const XLINE_UAT_OB_RR: u32 = 1919;
pub const XLINE_UAT_OB_SS: u32 = 1920;
pub const XLINE_UAT_OB_TT: u32 = 1921;
pub const XLINE_UAT_OB_UV: u32 = 1922;
pub const XLINE_UAT_OB_WZ: u32 = 1923;
pub const XLINE_UAT_OB_SYMMGR: u32 = 1924;
pub const XLINE_CRT_OB_AA: u32 = 1925;
pub const XLINE_CRT_OB_BB: u32 = 1926;
pub const XLINE_CRT_OB_CC: u32 = 1927;
pub const XLINE_CRT_OB_DD: u32 = 1928;
pub const XLINE_CRT_OB_EE: u32 = 1929;
pub const XLINE_CRT_OB_FF: u32 = 1930;
pub const XLINE_CRT_OB_GG: u32 = 1931;
pub const XLINE_CRT_OB_HH: u32 = 1932;
pub const XLINE_CRT_OB_IJ: u32 = 1933;
pub const XLINE_CRT_OB_KK: u32 = 1934;
pub const XLINE_CRT_OB_LL: u32 = 1935;
pub const XLINE_CRT_OB_MM: u32 = 1936;
pub const XLINE_CRT_OB_NN: u32 = 1937;
pub const XLINE_CRT_OB_OO: u32 = 1938;
pub const XLINE_CRT_OB_PQ: u32 = 1939;
pub const XLINE_CRT_OB_RR: u32 = 1940;
pub const XLINE_CRT_OB_SS: u32 = 1941;
pub const XLINE_CRT_OB_TT: u32 = 1942;
pub const XLINE_CRT_OB_UV: u32 = 1943;
pub const XLINE_CRT_OB_WZ: u32 = 1944;
pub const XLINE_CRT_OB_SYMMGR: u32 = 1945;
pub const XLINE_OBUP_SYMMGR: u32 = 1946;
pub const XLINE_OBUP_01: u32 = 1947;
pub const XLINE_OBUP_02: u32 = 1948;
pub const XLINE_OBUP_03: u32 = 1949;
pub const XLINE_OBUP_04: u32 = 1950;
pub const XLINE_OBUP_05: u32 = 1951;
pub const XLINE_OBUP_06: u32 = 1952;
pub const XLINE_OBUP_07: u32 = 1953;
pub const XLINE_OBUP_08: u32 = 1954;
pub const XLINE_OBUPT_SYMMGR: u32 = 1955;
pub const XLINE_OBUPT_1: u32 = 1956;
pub const XLINE_OBUPT_2: u32 = 1957;
pub const XLINE_ARCAOPT_D_1: u32 = 1958;
pub const XLINE_ARCAOPT_D_2: u32 = 1959;
pub const XLINE_ARCAOPT_D_3: u32 = 1960;
pub const XLINE_ARCAOPT_D_4: u32 = 1961;
pub const XLINE_ARCAOPT_D_5: u32 = 1962;
pub const XLINE_ARCAOPT_D_6: u32 = 1963;
pub const XLINE_ARCAOPT_D_7: u32 = 1964;
pub const XLINE_ARCAOPT_D_8: u32 = 1965;
pub const XLINE_ARCAOPT_D_9: u32 = 1966;
pub const XLINE_ARCAOPT_D_10: u32 = 1967;
pub const XLINE_ARCAOPT_D_11: u32 = 1968;
pub const XLINE_ARCAOPT_D_12: u32 = 1969;
pub const XLINE_ARCAOPT_D_13: u32 = 1970;
pub const XLINE_ARCAOPT_D_14: u32 = 1971;
pub const XLINE_ARCAOPTT_D_1: u32 = 1972;
pub const XLINE_ARCAOPTT_D_2: u32 = 1973;
pub const XLINE_ARCAOPTT_D_3: u32 = 1974;
pub const XLINE_ARCAOPT_BBO_1: u32 = 1975;
pub const XLINE_ARCAOPT_BBO_2: u32 = 1976;
pub const XLINE_ARCAOPT_BBO_3: u32 = 1977;
pub const XLINE_ARCAOPT_BBO_4: u32 = 1978;
pub const XLINE_ARCAOPT_BBO_5: u32 = 1979;
pub const XLINE_ARCAOPT_BBO_6: u32 = 1980;
pub const XLINE_ARCAOPT_BBO_7: u32 = 1981;
pub const XLINE_ARCAOPT_BBO_8: u32 = 1982;
pub const XLINE_ARCAOPT_BBO_9: u32 = 1983;
pub const XLINE_ARCAOPT_BBO_10: u32 = 1984;
pub const XLINE_ARCAOPT_BBO_11: u32 = 1985;
pub const XLINE_ARCAOPT_BBO_12: u32 = 1986;
pub const XLINE_ARCAOPT_BBO_13: u32 = 1987;
pub const XLINE_ARCAOPT_BBO_14: u32 = 1988;
pub const XLINE_ARCAOPTT_BBO_1: u32 = 1989;
pub const XLINE_ARCAOPTT_BBO_2: u32 = 1990;
pub const XLINE_ARCAOPTT_BBO_3: u32 = 1991;
pub const XLINE_ARCAOPT_TRD_1: u32 = 1992;
pub const XLINE_ARCAOPTT_TRD_1: u32 = 1993;
pub const XLINE_ARCAOPT_IMB_1: u32 = 1994;
pub const XLINE_ARCAOPTT_IMB_1: u32 = 1995;
pub const XLINE_ARCAOPT_C_1: u32 = 1996;
pub const XLINE_ARCAOPT_C_2: u32 = 1997;
pub const XLINE_ARCAOPT_C_3: u32 = 1998;
pub const XLINE_ARCAOPT_C_4: u32 = 1999;
pub const XLINE_ARCAOPT_C_5: u32 = 2000;
pub const XLINE_ARCAOPT_C_6: u32 = 2001;
pub const XLINE_ARCAOPT_C_7: u32 = 2002;
pub const XLINE_ARCAOPT_C_8: u32 = 2003;
pub const XLINE_ARCAOPT_C_9: u32 = 2004;
pub const XLINE_ARCAOPT_C_10: u32 = 2005;
pub const XLINE_ARCAOPT_C_11: u32 = 2006;
pub const XLINE_ARCAOPT_C_12: u32 = 2007;
pub const XLINE_ARCAOPT_C_13: u32 = 2008;
pub const XLINE_ARCAOPT_C_14: u32 = 2009;
pub const XLINE_ARCAOPTT_C_1: u32 = 2010;
pub const XLINE_ARCAOPTT_C_2: u32 = 2011;
pub const XLINE_ARCAOPTT_C_3: u32 = 2012;
pub const XLINE_ARO_D_SYMMGR: u32 = 2013;
pub const XLINE_AROT_D_SYMMGR: u32 = 2014;
pub const XLINE_ARO_C_SYMMGR: u32 = 2021;
pub const XLINE_AROT_C_SYMMGR: u32 = 2022;
pub const XLINE_ARCAOPT_SYMMGR: u32 = 2023;
pub const XLINE_ARCAOPTT_SYMMGR: u32 = 2024;
pub const XLINE_ISE_OPTIMISE: u32 = 2048;
pub const XLINE_ISE_DOM_S_1: u32 = 2049;
pub const XLINE_ISE_DOM_S_2: u32 = 2050;
pub const XLINE_ISE_DOM_S_3: u32 = 2051;
pub const XLINE_ISE_DOM_S_4: u32 = 2052;
pub const XLINE_ISE_DOM_S_5: u32 = 2053;
pub const XLINE_ISE_DOM_S_6: u32 = 2054;
pub const XLINE_ISE_DOM_S_7: u32 = 2055;
pub const XLINE_ISE_DOM_S_8: u32 = 2056;
pub const XLINE_ISE_DOM_S_9: u32 = 2057;
pub const XLINE_ISE_DOM_S_10: u32 = 2058;
pub const XLINE_ISE_DOM_S_11: u32 = 2059;
pub const XLINE_ISE_DOM_S_12: u32 = 2060;
pub const XLINE_ISE_DOM_S_13: u32 = 2061;
pub const XLINE_ISE_DOM_S_14: u32 = 2062;
pub const XLINE_ISE_DOM_S_15: u32 = 2063;
pub const XLINE_ISE_DOM_S_16: u32 = 2064;
pub const XLINE_ISE_DOM_S_17: u32 = 2065;
pub const XLINE_ISE_DOM_S_18: u32 = 2066;
pub const XLINE_ISE_DOM_S_19: u32 = 2067;
pub const XLINE_ISE_DOM_S_20: u32 = 2068;
pub const XLINE_ISE_DOM_S_21: u32 = 2069;
pub const XLINE_ISE_DOM_S_22: u32 = 2070;
pub const XLINE_ISE_DOM_S_23: u32 = 2071;
pub const XLINE_ISE_DOM_S_24: u32 = 2072;
pub const XLINE_ISE_DOM_S_25: u32 = 2073;
pub const XLINE_ISE_DOM_S_26: u32 = 2074;
pub const XLINE_ISE_DOM_S_27: u32 = 2075;
pub const XLINE_ISE_DOM_S_28: u32 = 2076;
pub const XLINE_ISE_DOM_S_29: u32 = 2077;
pub const XLINE_ISE_DOM_S_30: u32 = 2078;
pub const XLINE_ISE_DOM_S_31: u32 = 2079;
pub const XLINE_ISE_DOM_S_32: u32 = 2080;
pub const XLINE_ISE_DOM_S_33: u32 = 2081;
pub const XLINE_ISE_DOM_S_34: u32 = 2082;
pub const XLINE_ISE_DOM_S_35: u32 = 2083;
pub const XLINE_ISE_DOM_S_36: u32 = 2084;
pub const XLINE_ISE_DOM_S_37: u32 = 2085;
pub const XLINE_ISE_DOM_S_38: u32 = 2086;
pub const XLINE_ISE_DOM_S_39: u32 = 2087;
pub const XLINE_ISE_DOM_S_40: u32 = 2088;
pub const XLINE_ISE_DOM_S_41: u32 = 2089;
pub const XLINE_ISE_DOM_S_42: u32 = 2090;
pub const XLINE_ISE_DOM_S_43: u32 = 2091;
pub const XLINE_ISE_DOM_S_44: u32 = 2092;
pub const XLINE_ISE_DOM_S_45: u32 = 2093;
pub const XLINE_ISE_DOM_S_46: u32 = 2094;
pub const XLINE_ISE_DOM_S_47: u32 = 2095;
pub const XLINE_ISE_DOM_S_48: u32 = 2096;
pub const XLINE_ISE_DOM_S_49: u32 = 2097;
pub const XLINE_ISE_DOM_S_50: u32 = 2098;
pub const XLINE_ISE_DOM_S_51: u32 = 2099;
pub const XLINE_ISE_DOM_S_52: u32 = 2100;
pub const XLINE_ISE_DOM_S_53: u32 = 2101;
pub const XLINE_ISE_DOM_S_54: u32 = 2102;
pub const XLINE_ISE_DOM_S_55: u32 = 2103;
pub const XLINE_ISE_DOM_S_56: u32 = 2104;
pub const XLINE_ISE_DOM_S_57: u32 = 2105;
pub const XLINE_ISE_DOM_S_58: u32 = 2106;
pub const XLINE_ISE_DOM_S_59: u32 = 2107;
pub const XLINE_ISE_DOM_S_60: u32 = 2108;
pub const XLINE_ISE_TQ_S_1: u32 = 2109;
pub const XLINE_ISE_TQ_S_2: u32 = 2110;
pub const XLINE_ISE_TQ_S_3: u32 = 2111;
pub const XLINE_ISE_TQ_S_4: u32 = 2112;
pub const XLINE_ISE_TQ_S_5: u32 = 2113;
pub const XLINE_ISE_TQ_S_6: u32 = 2114;
pub const XLINE_ISE_TQ_S_7: u32 = 2115;
pub const XLINE_ISE_TQ_S_8: u32 = 2116;
pub const XLINE_ISE_TQ_S_9: u32 = 2117;
pub const XLINE_ISE_TQ_S_10: u32 = 2118;
pub const XLINE_ISE_TQ_S_11: u32 = 2119;
pub const XLINE_ISE_TQ_S_12: u32 = 2120;
pub const XLINE_ISE_TQ_S_13: u32 = 2121;
pub const XLINE_ISE_TQ_S_14: u32 = 2122;
pub const XLINE_ISE_TQ_S_15: u32 = 2123;
pub const XLINE_ISE_TQ_S_16: u32 = 2124;
pub const XLINE_ISE_TQ_S_17: u32 = 2125;
pub const XLINE_ISE_TQ_S_18: u32 = 2126;
pub const XLINE_ISE_TQ_S_19: u32 = 2127;
pub const XLINE_ISE_TQ_S_20: u32 = 2128;
pub const XLINE_ISE_TQ_S_21: u32 = 2129;
pub const XLINE_ISE_TQ_S_22: u32 = 2130;
pub const XLINE_ISE_TQ_S_23: u32 = 2131;
pub const XLINE_ISE_TQ_S_24: u32 = 2132;
pub const XLINE_ISE_TQ_S_25: u32 = 2133;
pub const XLINE_ISE_TQ_S_26: u32 = 2134;
pub const XLINE_ISE_TQ_S_27: u32 = 2135;
pub const XLINE_ISE_TQ_S_28: u32 = 2136;
pub const XLINE_ISE_TQ_S_29: u32 = 2137;
pub const XLINE_ISE_TQ_S_30: u32 = 2138;
pub const XLINE_ISE_TQ_S_31: u32 = 2139;
pub const XLINE_ISE_TQ_S_32: u32 = 2140;
pub const XLINE_ISE_TQ_S_33: u32 = 2141;
pub const XLINE_ISE_TQ_S_34: u32 = 2142;
pub const XLINE_ISE_TQ_S_35: u32 = 2143;
pub const XLINE_ISE_TQ_S_36: u32 = 2144;
pub const XLINE_ISE_TQ_S_37: u32 = 2145;
pub const XLINE_ISE_TQ_S_38: u32 = 2146;
pub const XLINE_ISE_TQ_S_39: u32 = 2147;
pub const XLINE_ISE_TQ_S_40: u32 = 2148;
pub const XLINE_ISE_TQ_S_41: u32 = 2149;
pub const XLINE_ISE_TQ_S_42: u32 = 2150;
pub const XLINE_ISE_TQ_S_43: u32 = 2151;
pub const XLINE_ISE_TQ_S_44: u32 = 2152;
pub const XLINE_ISE_TQ_S_45: u32 = 2153;
pub const XLINE_ISE_TQ_S_46: u32 = 2154;
pub const XLINE_ISE_TQ_S_47: u32 = 2155;
pub const XLINE_ISE_TQ_S_48: u32 = 2156;
pub const XLINE_ISE_TQ_S_49: u32 = 2157;
pub const XLINE_ISE_TQ_S_50: u32 = 2158;
pub const XLINE_ISE_TQ_S_51: u32 = 2159;
pub const XLINE_ISE_TQ_S_52: u32 = 2160;
pub const XLINE_ISE_TQ_S_53: u32 = 2161;
pub const XLINE_ISE_TQ_S_54: u32 = 2162;
pub const XLINE_ISE_TQ_S_55: u32 = 2163;
pub const XLINE_ISE_TQ_S_56: u32 = 2164;
pub const XLINE_ISE_TQ_S_57: u32 = 2165;
pub const XLINE_ISE_TQ_S_58: u32 = 2166;
pub const XLINE_ISE_TQ_S_59: u32 = 2167;
pub const XLINE_ISE_TQ_S_60: u32 = 2168;
pub const XLINE_ISE_ORD_S_1: u32 = 2169;
pub const XLINE_ISE_ORD_S_2: u32 = 2170;
pub const XLINE_ISE_ORD_S_3: u32 = 2171;
pub const XLINE_ISE_ORD_S_4: u32 = 2172;
pub const XLINE_ISE_ORD_S_5: u32 = 2173;
pub const XLINE_ISE_ORD_S_6: u32 = 2174;
pub const XLINE_ISE_ORD_S_7: u32 = 2175;
pub const XLINE_ISE_ORD_S_8: u32 = 2176;
pub const XLINE_ISE_ORD_S_9: u32 = 2177;
pub const XLINE_ISE_ORD_S_10: u32 = 2178;
pub const XLINE_ISE_ORD_S_11: u32 = 2179;
pub const XLINE_ISE_ORD_S_12: u32 = 2180;
pub const XLINE_ISE_ORD_S_13: u32 = 2181;
pub const XLINE_ISE_ORD_S_14: u32 = 2182;
pub const XLINE_ISE_ORD_S_15: u32 = 2183;
pub const XLINE_ISE_ORD_S_16: u32 = 2184;
pub const XLINE_ISE_ORD_S_17: u32 = 2185;
pub const XLINE_ISE_ORD_S_18: u32 = 2186;
pub const XLINE_ISE_ORD_S_19: u32 = 2187;
pub const XLINE_ISE_ORD_S_20: u32 = 2188;
pub const XLINE_ISE_ORD_S_21: u32 = 2189;
pub const XLINE_ISE_ORD_S_22: u32 = 2190;
pub const XLINE_ISE_ORD_S_23: u32 = 2191;
pub const XLINE_ISE_ORD_S_24: u32 = 2192;
pub const XLINE_ISE_ORD_S_25: u32 = 2193;
pub const XLINE_ISE_ORD_S_26: u32 = 2194;
pub const XLINE_ISE_ORD_S_27: u32 = 2195;
pub const XLINE_ISE_ORD_S_28: u32 = 2196;
pub const XLINE_ISE_ORD_S_29: u32 = 2197;
pub const XLINE_ISE_ORD_S_30: u32 = 2198;
pub const XLINE_ISE_ORD_S_31: u32 = 2199;
pub const XLINE_ISE_ORD_S_32: u32 = 2200;
pub const XLINE_ISE_ORD_S_33: u32 = 2201;
pub const XLINE_ISE_ORD_S_34: u32 = 2202;
pub const XLINE_ISE_ORD_S_35: u32 = 2203;
pub const XLINE_ISE_ORD_S_36: u32 = 2204;
pub const XLINE_ISE_ORD_S_37: u32 = 2205;
pub const XLINE_ISE_ORD_S_38: u32 = 2206;
pub const XLINE_ISE_ORD_S_39: u32 = 2207;
pub const XLINE_ISE_ORD_S_40: u32 = 2208;
pub const XLINE_ISE_ORD_S_41: u32 = 2209;
pub const XLINE_ISE_ORD_S_42: u32 = 2210;
pub const XLINE_ISE_ORD_S_43: u32 = 2211;
pub const XLINE_ISE_ORD_S_44: u32 = 2212;
pub const XLINE_ISE_ORD_S_45: u32 = 2213;
pub const XLINE_ISE_ORD_S_46: u32 = 2214;
pub const XLINE_ISE_ORD_S_47: u32 = 2215;
pub const XLINE_ISE_ORD_S_48: u32 = 2216;
pub const XLINE_ISE_ORD_S_49: u32 = 2217;
pub const XLINE_ISE_ORD_S_50: u32 = 2218;
pub const XLINE_ISE_ORD_S_51: u32 = 2219;
pub const XLINE_ISE_ORD_S_52: u32 = 2220;
pub const XLINE_ISE_ORD_S_53: u32 = 2221;
pub const XLINE_ISE_ORD_S_54: u32 = 2222;
pub const XLINE_ISE_ORD_S_55: u32 = 2223;
pub const XLINE_ISE_ORD_S_56: u32 = 2224;
pub const XLINE_ISE_ORD_S_57: u32 = 2225;
pub const XLINE_ISE_ORD_S_58: u32 = 2226;
pub const XLINE_ISE_ORD_S_59: u32 = 2227;
pub const XLINE_ISE_ORD_S_60: u32 = 2228;
pub const XLINE_ISE_ORD_C_1: u32 = 2229;
pub const XLINE_ISE_ORD_C_2: u32 = 2230;
pub const XLINE_ISE_ORD_C_3: u32 = 2231;
pub const XLINE_ISE_ORD_C_4: u32 = 2232;
pub const XLINE_ISE_ORD_C_5: u32 = 2233;
pub const XLINE_ISE_ORD_C_6: u32 = 2234;
pub const XLINE_ISE_ORD_C_7: u32 = 2235;
pub const XLINE_ISE_ORD_C_8: u32 = 2236;
pub const XLINE_ISE_ORD_C_9: u32 = 2237;
pub const XLINE_ISE_ORD_C_10: u32 = 2238;
pub const XLINE_ISE_TQ_C_1: u32 = 2239;
pub const XLINE_ISE_TQ_C_2: u32 = 2240;
pub const XLINE_ISE_TQ_C_3: u32 = 2241;
pub const XLINE_ISE_TQ_C_4: u32 = 2242;
pub const XLINE_ISE_TQ_C_5: u32 = 2243;
pub const XLINE_ISE_TQ_C_6: u32 = 2244;
pub const XLINE_ISE_TQ_C_7: u32 = 2245;
pub const XLINE_ISE_TQ_C_8: u32 = 2246;
pub const XLINE_ISE_TQ_C_9: u32 = 2247;
pub const XLINE_ISE_TQ_C_10: u32 = 2248;
pub const XLINE_ISE_TRD_C_1: u32 = 2249;
pub const XLINE_ISE_TRD_C_2: u32 = 2250;
pub const XLINE_ISE_TRD_C_3: u32 = 2251;
pub const XLINE_ISE_TRD_C_4: u32 = 2252;
pub const XLINE_ISE_TRD_C_5: u32 = 2253;
pub const XLINE_ISE_TRD_C_6: u32 = 2254;
pub const XLINE_ISE_TRD_C_7: u32 = 2255;
pub const XLINE_ISE_TRD_C_8: u32 = 2256;
pub const XLINE_ISE_TRD_C_9: u32 = 2257;
pub const XLINE_ISE_TRD_C_10: u32 = 2258;
pub const XLINE_ISE_DOM_C_1: u32 = 2259;
pub const XLINE_ISE_DOM_C_2: u32 = 2260;
pub const XLINE_ISE_DOM_C_3: u32 = 2261;
pub const XLINE_ISE_DOM_C_4: u32 = 2262;
pub const XLINE_ISE_DOM_C_5: u32 = 2263;
pub const XLINE_ISE_DOM_C_6: u32 = 2264;
pub const XLINE_ISE_DOM_C_7: u32 = 2265;
pub const XLINE_ISE_DOM_C_8: u32 = 2266;
pub const XLINE_ISE_DOM_C_9: u32 = 2267;
pub const XLINE_ISE_DOM_C_10: u32 = 2268;
pub const XLINE_ISE_POF_C_1: u32 = 2269;
pub const XLINE_ISE_POF_C_2: u32 = 2270;
pub const XLINE_ISE_POF_C_3: u32 = 2271;
pub const XLINE_ISE_POF_C_4: u32 = 2272;
pub const XLINE_ISE_POF_C_5: u32 = 2273;
pub const XLINE_ISE_POF_C_6: u32 = 2274;
pub const XLINE_ISE_POF_C_7: u32 = 2275;
pub const XLINE_ISE_POF_C_8: u32 = 2276;
pub const XLINE_ISE_POF_C_9: u32 = 2277;
pub const XLINE_ISE_POF_C_10: u32 = 2278;
pub const XLINE_ISE_POF_C_11: u32 = 2279;
pub const XLINE_ISE_POF_C_12: u32 = 2280;
pub const XLINE_ISE_POF_S_1: u32 = 2289;
pub const XLINE_ISE_POF_S_2: u32 = 2290;
pub const XLINE_ISE_POF_S_3: u32 = 2291;
pub const XLINE_ISE_POF_S_4: u32 = 2292;
pub const XLINE_ISE_POF_S_5: u32 = 2293;
pub const XLINE_ISE_POF_S_6: u32 = 2294;
pub const XLINE_ISE_POF_S_7: u32 = 2295;
pub const XLINE_ISE_POF_S_8: u32 = 2296;
pub const XLINE_ISE_POF_S_9: u32 = 2297;
pub const XLINE_ISE_POF_S_10: u32 = 2298;
pub const XLINE_ISE_POF_S_11: u32 = 2299;
pub const XLINE_ISE_POF_S_12: u32 = 2300;
pub const XLINE_ISE_POF_S_13: u32 = 2301;
pub const XLINE_ISE_POF_S_14: u32 = 2302;
pub const XLINE_ISE_POF_S_15: u32 = 2303;
pub const XLINE_ISE_POF_S_16: u32 = 2304;
pub const XLINE_ISE_POF_S_17: u32 = 2305;
pub const XLINE_ISE_POF_S_18: u32 = 2306;
pub const XLINE_ISE_POF_S_19: u32 = 2307;
pub const XLINE_ISE_POF_S_20: u32 = 2308;
pub const XLINE_ISE_POF_S_21: u32 = 2309;
pub const XLINE_ISE_POF_S_22: u32 = 2310;
pub const XLINE_ISE_POF_S_23: u32 = 2311;
pub const XLINE_ISE_POF_S_24: u32 = 2312;
pub const XLINE_ISE_POF_S_25: u32 = 2313;
pub const XLINE_ISE_POF_S_26: u32 = 2314;
pub const XLINE_ISE_POF_S_27: u32 = 2315;
pub const XLINE_ISE_POF_S_28: u32 = 2316;
pub const XLINE_ISE_POF_S_29: u32 = 2317;
pub const XLINE_ISE_POF_S_30: u32 = 2318;
pub const XLINE_ISE_POF_S_31: u32 = 2319;
pub const XLINE_ISE_POF_S_32: u32 = 2320;
pub const XLINE_ISE_POF_S_33: u32 = 2321;
pub const XLINE_ISE_POF_S_34: u32 = 2322;
pub const XLINE_ISE_POF_S_35: u32 = 2323;
pub const XLINE_ISE_POF_S_36: u32 = 2324;
pub const XLINE_ISE_POF_S_37: u32 = 2325;
pub const XLINE_ISE_POF_S_38: u32 = 2326;
pub const XLINE_ISE_POF_S_39: u32 = 2327;
pub const XLINE_ISE_POF_S_40: u32 = 2328;
pub const XLINE_ISE_POF_S_41: u32 = 2329;
pub const XLINE_ISE_POF_S_42: u32 = 2330;
pub const XLINE_ISE_POF_S_43: u32 = 2331;
pub const XLINE_ISE_POF_S_44: u32 = 2332;
pub const XLINE_ISE_POF_S_45: u32 = 2333;
pub const XLINE_ISE_POF_S_46: u32 = 2334;
pub const XLINE_ISE_POF_S_47: u32 = 2335;
pub const XLINE_ISE_POF_S_48: u32 = 2336;
pub const XLINE_ISE_POF_S_49: u32 = 2337;
pub const XLINE_ISE_POF_S_50: u32 = 2338;
pub const XLINE_ISE_POF_S_51: u32 = 2339;
pub const XLINE_ISE_POF_S_52: u32 = 2340;
pub const XLINE_ISE_POF_S_53: u32 = 2341;
pub const XLINE_ISE_POF_S_54: u32 = 2342;
pub const XLINE_ISE_POF_S_55: u32 = 2343;
pub const XLINE_ISE_POF_S_56: u32 = 2344;
pub const XLINE_ISE_POF_S_57: u32 = 2345;
pub const XLINE_ISE_POF_S_58: u32 = 2346;
pub const XLINE_ISE_POF_S_59: u32 = 2347;
pub const XLINE_ISE_POF_S_60: u32 = 2348;
pub const XLINE_ISE_TRD_S_1: u32 = 2349;
pub const XLINE_ISE_TRD_S_2: u32 = 2350;
pub const XLINE_ISE_TRD_S_3: u32 = 2351;
pub const XLINE_ISE_TRD_S_4: u32 = 2352;
pub const XLINE_ISE_TRD_S_5: u32 = 2353;
pub const XLINE_ISE_TRD_S_6: u32 = 2354;
pub const XLINE_ISE_TRD_S_7: u32 = 2355;
pub const XLINE_ISE_TRD_S_8: u32 = 2356;
pub const XLINE_ISE_TRD_S_9: u32 = 2357;
pub const XLINE_ISE_TRD_S_10: u32 = 2358;
pub const XLINE_ISE_TRD_S_11: u32 = 2359;
pub const XLINE_ISE_TRD_S_12: u32 = 2360;
pub const XLINE_ISE_TRD_S_13: u32 = 2361;
pub const XLINE_ISE_TRD_S_14: u32 = 2362;
pub const XLINE_ISE_TRD_S_15: u32 = 2363;
pub const XLINE_ISE_TRD_S_16: u32 = 2364;
pub const XLINE_ISE_TRD_S_17: u32 = 2365;
pub const XLINE_ISE_TRD_S_18: u32 = 2366;
pub const XLINE_ISE_TRD_S_19: u32 = 2367;
pub const XLINE_ISE_TRD_S_20: u32 = 2368;
pub const XLINE_ISE_TRD_S_21: u32 = 2369;
pub const XLINE_ISE_TRD_S_22: u32 = 2370;
pub const XLINE_ISE_TRD_S_23: u32 = 2371;
pub const XLINE_ISE_TRD_S_24: u32 = 2372;
pub const XLINE_ISE_TRD_S_25: u32 = 2373;
pub const XLINE_ISE_TRD_S_26: u32 = 2374;
pub const XLINE_ISE_TRD_S_27: u32 = 2375;
pub const XLINE_ISE_TRD_S_28: u32 = 2376;
pub const XLINE_ISE_TRD_S_29: u32 = 2377;
pub const XLINE_ISE_TRD_S_30: u32 = 2378;
pub const XLINE_ISE_TRD_S_31: u32 = 2379;
pub const XLINE_ISE_TRD_S_32: u32 = 2380;
pub const XLINE_ISE_TRD_S_33: u32 = 2381;
pub const XLINE_ISE_TRD_S_34: u32 = 2382;
pub const XLINE_ISE_TRD_S_35: u32 = 2383;
pub const XLINE_ISE_TRD_S_36: u32 = 2384;
pub const XLINE_ISE_TRD_S_37: u32 = 2385;
pub const XLINE_ISE_TRD_S_38: u32 = 2386;
pub const XLINE_ISE_TRD_S_39: u32 = 2387;
pub const XLINE_ISE_TRD_S_40: u32 = 2388;
pub const XLINE_ISE_TRD_S_41: u32 = 2389;
pub const XLINE_ISE_TRD_S_42: u32 = 2390;
pub const XLINE_ISE_TRD_S_43: u32 = 2391;
pub const XLINE_ISE_TRD_S_44: u32 = 2392;
pub const XLINE_ISE_TRD_S_45: u32 = 2393;
pub const XLINE_ISE_TRD_S_46: u32 = 2394;
pub const XLINE_ISE_TRD_S_47: u32 = 2395;
pub const XLINE_ISE_TRD_S_48: u32 = 2396;
pub const XLINE_ISE_TRD_S_49: u32 = 2397;
pub const XLINE_ISE_TRD_S_50: u32 = 2398;
pub const XLINE_ISE_TRD_S_51: u32 = 2399;
pub const XLINE_ISE_TRD_S_52: u32 = 2400;
pub const XLINE_ISE_TRD_S_53: u32 = 2401;
pub const XLINE_ISE_TRD_S_54: u32 = 2402;
pub const XLINE_ISE_TRD_S_55: u32 = 2403;
pub const XLINE_ISE_TRD_S_56: u32 = 2404;
pub const XLINE_ISE_TRD_S_57: u32 = 2405;
pub const XLINE_ISE_TRD_S_58: u32 = 2406;
pub const XLINE_ISE_TRD_S_59: u32 = 2407;
pub const XLINE_ISE_TRD_S_60: u32 = 2408;
pub const XLINE_ISE_REF_SNAP: u32 = 2409;
pub const XLINE_ISE_REF_INC: u32 = 2410;
pub const XLINE_ISEMT1_REF_SNAP: u32 = 2414;
pub const XLINE_ISEMT1_REF_INC: u32 = 2415;
pub const XLINE_ISEMT1_POS: u32 = 2416;
pub const XLINE_ISEMT1_POS2: u32 = 2417;
pub const XLINE_ISEMT1_POC: u32 = 2418;
pub const XLINE_ISEMT1_POC2: u32 = 2419;
pub const XLINE_ISEMT1_TBS: u32 = 2420;
pub const XLINE_ISEMT1_TBS2: u32 = 2421;
pub const XLINE_ISEMT1_TBC: u32 = 2422;
pub const XLINE_ISEMT1_TBC2: u32 = 2423;
pub const XLINE_ISEMT1_TIS: u32 = 2424;
pub const XLINE_ISEMT1_TIS2: u32 = 2425;
pub const XLINE_ISEMT1_TIC: u32 = 2426;
pub const XLINE_ISEMT1_TIC2: u32 = 2427;
pub const XLINE_ISEMT1_PDS: u32 = 2428;
pub const XLINE_ISEMT1_PDS2: u32 = 2429;
pub const XLINE_ISEMT1_PDC: u32 = 2430;
pub const XLINE_ISEMT1_PDC2: u32 = 2431;
pub const XLINE_ISEMT1_OBS: u32 = 2432;
pub const XLINE_ISEMT1_OBS2: u32 = 2433;
pub const XLINE_ISEMT1_OBC: u32 = 2434;
pub const XLINE_ISEMT1_OBC2: u32 = 2435;
pub const XLINE_ISE_DOM_S_101: u32 = 2436;
pub const XLINE_ISE_DOM_S_111: u32 = 2437;
pub const XLINE_ISE_DOM_S_112: u32 = 2438;
pub const XLINE_ISE_DOM_S_121: u32 = 2439;
pub const XLINE_ISE_DOM_S_122: u32 = 2440;
pub const XLINE_ISE_DOM_S_131: u32 = 2441;
pub const XLINE_ISE_DOM_S_132: u32 = 2442;
pub const XLINE_ISE_DOM_S_141: u32 = 2443;
pub const XLINE_ISE_DOM_S_142: u32 = 2444;
pub const XLINE_ISE_DOM_S_151: u32 = 2445;
pub const XLINE_ISE_DOM_S_152: u32 = 2446;
pub const XLINE_ISE_TQ_S_101: u32 = 2447;
pub const XLINE_ISE_TQ_S_111: u32 = 2448;
pub const XLINE_ISE_TQ_S_121: u32 = 2449;
pub const XLINE_ISE_TQ_S_131: u32 = 2450;
pub const XLINE_ISE_TQ_S_141: u32 = 2451;
pub const XLINE_ISE_TQ_S_151: u32 = 2452;
pub const XLINE_ISE_TQ_S_102: u32 = 2453;
pub const XLINE_ISE_TQ_S_112: u32 = 2454;
pub const XLINE_ISE_TQ_S_122: u32 = 2455;
pub const XLINE_ISE_TQ_S_132: u32 = 2456;
pub const XLINE_ISE_TQ_S_142: u32 = 2457;
pub const XLINE_ISE_TQ_S_152: u32 = 2458;
pub const XLINE_ISE_ORD_S_101: u32 = 2459;
pub const XLINE_ISE_ORD_S_111: u32 = 2460;
pub const XLINE_ISE_ORD_S_121: u32 = 2461;
pub const XLINE_ISE_ORD_S_131: u32 = 2462;
pub const XLINE_ISE_ORD_S_141: u32 = 2463;
pub const XLINE_ISE_ORD_S_151: u32 = 2464;
pub const XLINE_ISE_ORD_S_102: u32 = 2465;
pub const XLINE_ISE_ORD_S_112: u32 = 2466;
pub const XLINE_ISE_ORD_S_122: u32 = 2467;
pub const XLINE_ISE_ORD_S_132: u32 = 2468;
pub const XLINE_ISE_ORD_S_142: u32 = 2469;
pub const XLINE_ISE_ORD_S_152: u32 = 2470;
pub const XLINE_ISE_ORD_C_11: u32 = 2471;
pub const XLINE_ISE_ORD_C_12: u32 = 2472;
pub const XLINE_ISE_TQ_C_11: u32 = 2473;
pub const XLINE_ISE_TQ_C_12: u32 = 2474;
pub const XLINE_ISE_TRD_C_11: u32 = 2475;
pub const XLINE_ISE_TRD_C_12: u32 = 2476;
pub const XLINE_ISE_DOM_C_11: u32 = 2477;
pub const XLINE_ISE_DOM_C_12: u32 = 2478;
pub const XLINE_ISE_POF_S_101: u32 = 2479;
pub const XLINE_ISE_POF_S_111: u32 = 2480;
pub const XLINE_ISE_POF_S_121: u32 = 2481;
pub const XLINE_ISE_POF_S_131: u32 = 2482;
pub const XLINE_ISE_POF_S_141: u32 = 2483;
pub const XLINE_ISE_POF_S_151: u32 = 2484;
pub const XLINE_ISE_POF_S_102: u32 = 2485;
pub const XLINE_ISE_POF_S_112: u32 = 2486;
pub const XLINE_ISE_POF_S_122: u32 = 2487;
pub const XLINE_ISE_POF_S_132: u32 = 2488;
pub const XLINE_ISE_POF_S_142: u32 = 2489;
pub const XLINE_ISE_POF_S_152: u32 = 2490;
pub const XLINE_ISE_TRD_S_101: u32 = 2491;
pub const XLINE_ISE_TRD_S_111: u32 = 2492;
pub const XLINE_ISE_TRD_S_121: u32 = 2493;
pub const XLINE_ISE_TRD_S_131: u32 = 2494;
pub const XLINE_ISE_TRD_S_141: u32 = 2495;
pub const XLINE_ISE_TRD_S_151: u32 = 2496;
pub const XLINE_ISE_TRD_S_102: u32 = 2497;
pub const XLINE_ISE_TRD_S_112: u32 = 2498;
pub const XLINE_ISE_TRD_S_122: u32 = 2499;
pub const XLINE_ISE_TRD_S_132: u32 = 2500;
pub const XLINE_ISE_TRD_S_142: u32 = 2501;
pub const XLINE_ISE_TRD_S_152: u32 = 2502;
pub const XLINE_ISE_DOM_S_103: u32 = 2503;
pub const XLINE_ISE_DOM_S_113: u32 = 2504;
pub const XLINE_ISE_DOM_S_123: u32 = 2505;
pub const XLINE_ISE_DOM_S_133: u32 = 2506;
pub const XLINE_ISE_DOM_S_143: u32 = 2507;
pub const XLINE_ISE_DOM_S_153: u32 = 2508;
pub const XLINE_ISE_DOM_S_104: u32 = 2509;
pub const XLINE_ISE_DOM_S_114: u32 = 2510;
pub const XLINE_ISE_DOM_S_124: u32 = 2511;
pub const XLINE_ISE_DOM_S_134: u32 = 2512;
pub const XLINE_ISE_DOM_S_144: u32 = 2513;
pub const XLINE_ISE_DOM_S_154: u32 = 2514;
pub const XLINE_ISE_DOM_S_105: u32 = 2515;
pub const XLINE_ISE_DOM_S_115: u32 = 2516;
pub const XLINE_ISE_DOM_S_125: u32 = 2517;
pub const XLINE_ISE_DOM_S_135: u32 = 2518;
pub const XLINE_ISE_DOM_S_145: u32 = 2519;
pub const XLINE_ISE_DOM_S_155: u32 = 2520;
pub const XLINE_ISE_TQ_S_103: u32 = 2521;
pub const XLINE_ISE_TQ_S_113: u32 = 2522;
pub const XLINE_ISE_TQ_S_123: u32 = 2523;
pub const XLINE_ISE_TQ_S_133: u32 = 2524;
pub const XLINE_ISE_TQ_S_143: u32 = 2525;
pub const XLINE_ISE_TQ_S_153: u32 = 2526;
pub const XLINE_ISE_TQ_S_104: u32 = 2527;
pub const XLINE_ISE_TQ_S_114: u32 = 2528;
pub const XLINE_ISE_TQ_S_124: u32 = 2529;
pub const XLINE_ISE_TQ_S_134: u32 = 2530;
pub const XLINE_ISE_TQ_S_144: u32 = 2531;
pub const XLINE_ISE_TQ_S_154: u32 = 2532;
pub const XLINE_ISE_TQ_S_105: u32 = 2533;
pub const XLINE_ISE_TQ_S_115: u32 = 2534;
pub const XLINE_ISE_TQ_S_125: u32 = 2535;
pub const XLINE_ISE_TQ_S_135: u32 = 2536;
pub const XLINE_ISE_TQ_S_145: u32 = 2537;
pub const XLINE_ISE_TQ_S_155: u32 = 2538;
pub const XLINE_ISE_ORD_S_103: u32 = 2539;
pub const XLINE_ISE_ORD_S_113: u32 = 2540;
pub const XLINE_ISE_ORD_S_123: u32 = 2541;
pub const XLINE_ISE_ORD_S_133: u32 = 2542;
pub const XLINE_ISE_ORD_S_143: u32 = 2543;
pub const XLINE_ISE_ORD_S_153: u32 = 2544;
pub const XLINE_ISE_ORD_S_104: u32 = 2545;
pub const XLINE_ISE_ORD_S_114: u32 = 2546;
pub const XLINE_ISE_ORD_S_124: u32 = 2547;
pub const XLINE_ISE_ORD_S_134: u32 = 2548;
pub const XLINE_ISE_ORD_S_144: u32 = 2549;
pub const XLINE_ISE_ORD_S_154: u32 = 2550;
pub const XLINE_ISE_ORD_S_105: u32 = 2551;
pub const XLINE_ISE_ORD_S_115: u32 = 2552;
pub const XLINE_ISE_ORD_S_125: u32 = 2553;
pub const XLINE_ISE_ORD_S_135: u32 = 2554;
pub const XLINE_ISE_ORD_S_145: u32 = 2555;
pub const XLINE_ISE_ORD_S_155: u32 = 2556;
pub const XLINE_ISE_ORD_C_13: u32 = 2557;
pub const XLINE_ISE_TQ_C_13: u32 = 2558;
pub const XLINE_ISE_TRD_C_13: u32 = 2559;
pub const XLINE_ISE_DOM_C_13: u32 = 2560;
pub const XLINE_ISE_POF_C_13: u32 = 2561;
pub const XLINE_ISE_ORD_C_14: u32 = 2562;
pub const XLINE_ISE_TQ_C_14: u32 = 2563;
pub const XLINE_ISE_TRD_C_14: u32 = 2564;
pub const XLINE_ISE_DOM_C_14: u32 = 2565;
pub const XLINE_ISE_POF_C_14: u32 = 2566;
pub const XLINE_ISE_ORD_C_15: u32 = 2567;
pub const XLINE_ISE_TQ_C_15: u32 = 2568;
pub const XLINE_ISE_TRD_C_15: u32 = 2569;
pub const XLINE_ISE_DOM_C_15: u32 = 2570;
pub const XLINE_ISE_POF_C_15: u32 = 2571;
pub const XLINE_ISE_POF_S_103: u32 = 2572;
pub const XLINE_ISE_POF_S_113: u32 = 2573;
pub const XLINE_ISE_POF_S_123: u32 = 2574;
pub const XLINE_ISE_POF_S_133: u32 = 2575;
pub const XLINE_ISE_POF_S_143: u32 = 2576;
pub const XLINE_ISE_POF_S_153: u32 = 2577;
pub const XLINE_ISE_POF_S_104: u32 = 2578;
pub const XLINE_ISE_POF_S_114: u32 = 2579;
pub const XLINE_ISE_POF_S_124: u32 = 2580;
pub const XLINE_ISE_POF_S_134: u32 = 2581;
pub const XLINE_ISE_POF_S_144: u32 = 2582;
pub const XLINE_ISE_POF_S_154: u32 = 2583;
pub const XLINE_ISE_POF_S_105: u32 = 2584;
pub const XLINE_ISE_POF_S_115: u32 = 2585;
pub const XLINE_ISE_POF_S_125: u32 = 2586;
pub const XLINE_ISE_POF_S_135: u32 = 2587;
pub const XLINE_ISE_POF_S_145: u32 = 2588;
pub const XLINE_ISE_POF_S_155: u32 = 2589;
pub const XLINE_ISE_TRD_S_103: u32 = 2590;
pub const XLINE_ISE_TRD_S_113: u32 = 2591;
pub const XLINE_ISE_TRD_S_123: u32 = 2592;
pub const XLINE_ISE_TRD_S_133: u32 = 2593;
pub const XLINE_ISE_TRD_S_143: u32 = 2594;
pub const XLINE_ISE_TRD_S_153: u32 = 2595;
pub const XLINE_ISE_TRD_S_104: u32 = 2596;
pub const XLINE_ISE_TRD_S_114: u32 = 2597;
pub const XLINE_ISE_TRD_S_124: u32 = 2598;
pub const XLINE_ISE_TRD_S_134: u32 = 2599;
pub const XLINE_ISE_TRD_S_144: u32 = 2600;
pub const XLINE_ISE_TRD_S_154: u32 = 2601;
pub const XLINE_ISE_TRD_S_105: u32 = 2602;
pub const XLINE_ISE_TRD_S_115: u32 = 2603;
pub const XLINE_ISE_TRD_S_125: u32 = 2604;
pub const XLINE_ISE_TRD_S_135: u32 = 2605;
pub const XLINE_ISE_TRD_S_145: u32 = 2606;
pub const XLINE_ISE_TRD_S_155: u32 = 2607;
pub const XLINE_ISE_DOM_S_102: u32 = 2608;
pub const XLINE_ISEMT2_REF_SNAP: u32 = 2609;
pub const XLINE_ISEMT2_REF_INC: u32 = 2610;
pub const XLINE_ISEMT2_POS: u32 = 2611;
pub const XLINE_ISEMT2_POS2: u32 = 2612;
pub const XLINE_ISEMT2_POC: u32 = 2613;
pub const XLINE_ISEMT2_POC2: u32 = 2614;
pub const XLINE_ISEMT2_TBS: u32 = 2615;
pub const XLINE_ISEMT2_TBS2: u32 = 2616;
pub const XLINE_ISEMT2_TBC: u32 = 2617;
pub const XLINE_ISEMT2_TBC2: u32 = 2618;
pub const XLINE_ISEMT2_TIS: u32 = 2619;
pub const XLINE_ISEMT2_TIS2: u32 = 2620;
pub const XLINE_ISEMT2_TIC: u32 = 2621;
pub const XLINE_ISEMT2_TIC2: u32 = 2622;
pub const XLINE_ISEMT2_PDS: u32 = 2623;
pub const XLINE_ISEMT2_PDS2: u32 = 2624;
pub const XLINE_ISEMT2_PDC: u32 = 2625;
pub const XLINE_ISEMT2_PDC2: u32 = 2626;
pub const XLINE_ISEMT2_OBS: u32 = 2627;
pub const XLINE_ISEMT2_OBS2: u32 = 2628;
pub const XLINE_ISEMT2_OBC: u32 = 2629;
pub const XLINE_ISEMT2_OBC2: u32 = 2630;
pub const XLINE_ISETS_REC_DM: u32 = 2688;
pub const XLINE_ISETS_REC_TQ: u32 = 2689;
pub const XLINE_ISETS_REC_ORD: u32 = 2690;
pub const XLINE_ISETS_REC_TR: u32 = 2691;
pub const XLINE_ISETC_REC_DM: u32 = 2696;
pub const XLINE_ISETC_REC_TQ: u32 = 2697;
pub const XLINE_ISETC_REC_ORD: u32 = 2698;
pub const XLINE_ISETC_REC_TR: u32 = 2699;
pub const XLINE_GEMTS_REC_DM: u32 = 2704;
pub const XLINE_GEMTS_REC_TQ: u32 = 2705;
pub const XLINE_GEMTS_REC_ORD: u32 = 2706;
pub const XLINE_GEMTS_REC_TR: u32 = 2707;
pub const XLINE_MERTS_REC_DM: u32 = 2720;
pub const XLINE_MERTS_REC_TQ: u32 = 2721;
pub const XLINE_MERTS_REC_ORD: u32 = 2722;
pub const XLINE_MERTS_REC_TR: u32 = 2723;
pub const XLINE_GEMNS_DM_SYMMGR: u32 = 2816;
pub const XLINE_GEMNS_DM_1: u32 = 2817;
pub const XLINE_GEMNS_DM_2: u32 = 2818;
pub const XLINE_GEMNS_DM_3: u32 = 2819;
pub const XLINE_GEMNS_DM_4: u32 = 2820;
pub const XLINE_GEMNS_DM_ORD_1: u32 = 2821;
pub const XLINE_GEMNS_DM_ORD_2: u32 = 2822;
pub const XLINE_GEMNS_DM_ORD_3: u32 = 2823;
pub const XLINE_GEMNS_DM_ORD_4: u32 = 2824;
pub const XLINE_GEMTS_DM_SYMMGR: u32 = 2840;
pub const XLINE_GEMTS_DM_1: u32 = 2841;
pub const XLINE_GEMTS_DM_ORD_1: u32 = 2842;
pub const XLINE_GEMNS_TQ_SYMMGR: u32 = 2848;
pub const XLINE_GEMNS_TQ_1: u32 = 2849;
pub const XLINE_GEMNS_TQ_2: u32 = 2850;
pub const XLINE_GEMNS_TQ_3: u32 = 2851;
pub const XLINE_GEMNS_TQ_4: u32 = 2852;
pub const XLINE_GEMNS_TQ_ORD_1: u32 = 2853;
pub const XLINE_GEMNS_TQ_ORD_2: u32 = 2854;
pub const XLINE_GEMNS_TQ_ORD_3: u32 = 2855;
pub const XLINE_GEMNS_TQ_ORD_4: u32 = 2856;
pub const XLINE_GEMTS_TQ_SYMMGR: u32 = 2872;
pub const XLINE_GEMTS_TQ_1: u32 = 2873;
pub const XLINE_GEMTS_TQ_ORD_1: u32 = 2874;
pub const XLINE_GEMNS_TR_SYMMGR: u32 = 2880;
pub const XLINE_GEMNS_TR_1: u32 = 2881;
pub const XLINE_GEMNS_TR_2: u32 = 2882;
pub const XLINE_GEMNS_TR_3: u32 = 2883;
pub const XLINE_GEMNS_TR_4: u32 = 2884;
pub const XLINE_GEMNS_TR_ORD_1: u32 = 2885;
pub const XLINE_GEMNS_TR_ORD_2: u32 = 2886;
pub const XLINE_GEMNS_TR_ORD_3: u32 = 2887;
pub const XLINE_GEMNS_TR_ORD_4: u32 = 2888;
pub const XLINE_GEMTS_TR_SYMMGR: u32 = 2904;
pub const XLINE_GEMTS_TR_1: u32 = 2905;
pub const XLINE_GEMTS_TR_ORD_1: u32 = 2906;
pub const XLINE_ISENS_DM_SYMMGR: u32 = 2912;
pub const XLINE_ISENS_DM_1: u32 = 2913;
pub const XLINE_ISENS_DM_2: u32 = 2914;
pub const XLINE_ISENS_DM_3: u32 = 2915;
pub const XLINE_ISENS_DM_4: u32 = 2916;
pub const XLINE_ISENS_DM_ORD_1: u32 = 2917;
pub const XLINE_ISENS_DM_ORD_2: u32 = 2918;
pub const XLINE_ISENS_DM_ORD_3: u32 = 2919;
pub const XLINE_ISENS_DM_ORD_4: u32 = 2920;
pub const XLINE_ISETS_DM_SYMMGR: u32 = 2936;
pub const XLINE_ISETS_DM_1: u32 = 2937;
pub const XLINE_ISETS_DM_ORD_1: u32 = 2938;
pub const XLINE_ISENS_TQ_SYMMGR: u32 = 2944;
pub const XLINE_ISENS_TQ_1: u32 = 2945;
pub const XLINE_ISENS_TQ_2: u32 = 2946;
pub const XLINE_ISENS_TQ_3: u32 = 2947;
pub const XLINE_ISENS_TQ_4: u32 = 2948;
pub const XLINE_ISENS_TQ_ORD_1: u32 = 2949;
pub const XLINE_ISENS_TQ_ORD_2: u32 = 2950;
pub const XLINE_ISENS_TQ_ORD_3: u32 = 2951;
pub const XLINE_ISENS_TQ_ORD_4: u32 = 2952;
pub const XLINE_ISETS_TQ_SYMMGR: u32 = 2968;
pub const XLINE_ISETS_TQ_1: u32 = 2969;
pub const XLINE_ISETS_TQ_ORD_1: u32 = 2970;
pub const XLINE_ISENS_TR_SYMMGR: u32 = 2976;
pub const XLINE_ISENS_TR_1: u32 = 2977;
pub const XLINE_ISENS_TR_2: u32 = 2978;
pub const XLINE_ISENS_TR_3: u32 = 2979;
pub const XLINE_ISENS_TR_4: u32 = 2980;
pub const XLINE_ISENS_TR_ORD_1: u32 = 2981;
pub const XLINE_ISENS_TR_ORD_2: u32 = 2982;
pub const XLINE_ISENS_TR_ORD_3: u32 = 2983;
pub const XLINE_ISENS_TR_ORD_4: u32 = 2984;
pub const XLINE_ISETS_TR_SYMMGR: u32 = 3000;
pub const XLINE_ISETS_TR_1: u32 = 3001;
pub const XLINE_ISETS_TR_ORD_1: u32 = 3002;
pub const XLINE_ISENC_DM_SYMMGR: u32 = 3008;
pub const XLINE_ISENC_DM_1: u32 = 3009;
pub const XLINE_ISENC_DM_2: u32 = 3010;
pub const XLINE_ISENC_DM_3: u32 = 3011;
pub const XLINE_ISENC_DM_4: u32 = 3012;
pub const XLINE_ISENC_DM_ORD_1: u32 = 3013;
pub const XLINE_ISENC_DM_ORD_2: u32 = 3014;
pub const XLINE_ISENC_DM_ORD_3: u32 = 3015;
pub const XLINE_ISENC_DM_ORD_4: u32 = 3016;
pub const XLINE_ISETC_DM_SYMMGR: u32 = 3032;
pub const XLINE_ISETC_DM_1: u32 = 3033;
pub const XLINE_ISETC_DM_ORD_1: u32 = 3034;
pub const XLINE_ISENC_TQ_SYMMGR: u32 = 3040;
pub const XLINE_ISENC_TQ_1: u32 = 3041;
pub const XLINE_ISENC_TQ_2: u32 = 3042;
pub const XLINE_ISENC_TQ_3: u32 = 3043;
pub const XLINE_ISENC_TQ_4: u32 = 3044;
pub const XLINE_ISENC_TQ_ORD_1: u32 = 3045;
pub const XLINE_ISENC_TQ_ORD_2: u32 = 3046;
pub const XLINE_ISENC_TQ_ORD_3: u32 = 3047;
pub const XLINE_ISENC_TQ_ORD_4: u32 = 3048;
pub const XLINE_ISETC_TQ_SYMMGR: u32 = 3064;
pub const XLINE_ISETC_TQ_1: u32 = 3065;
pub const XLINE_ISETC_TQ_ORD_1: u32 = 3066;
pub const XLINE_ISENC_TR_SYMMGR: u32 = 3072;
pub const XLINE_ISENC_TR_1: u32 = 3073;
pub const XLINE_ISENC_TR_2: u32 = 3074;
pub const XLINE_ISENC_TR_3: u32 = 3075;
pub const XLINE_ISENC_TR_4: u32 = 3076;
pub const XLINE_ISENC_TR_ORD_1: u32 = 3077;
pub const XLINE_ISENC_TR_ORD_2: u32 = 3078;
pub const XLINE_ISENC_TR_ORD_3: u32 = 3079;
pub const XLINE_ISENC_TR_ORD_4: u32 = 3080;
pub const XLINE_ISETC_TR_SYMMGR: u32 = 3096;
pub const XLINE_ISETC_TR_1: u32 = 3097;
pub const XLINE_ISETC_TR_ORD_1: u32 = 3098;
pub const XLINE_MERNS_DM_SYMMGR: u32 = 3104;
pub const XLINE_MERNS_DM_1: u32 = 3105;
pub const XLINE_MERNS_DM_2: u32 = 3106;
pub const XLINE_MERNS_DM_3: u32 = 3107;
pub const XLINE_MERNS_DM_4: u32 = 3108;
pub const XLINE_MERNS_DM_ORD_1: u32 = 3109;
pub const XLINE_MERNS_DM_ORD_2: u32 = 3110;
pub const XLINE_MERNS_DM_ORD_3: u32 = 3111;
pub const XLINE_MERNS_DM_ORD_4: u32 = 3112;
pub const XLINE_MERTS_DM_SYMMGR: u32 = 3128;
pub const XLINE_MERTS_DM_1: u32 = 3129;
pub const XLINE_MERTS_DM_ORD_1: u32 = 3130;
pub const XLINE_MERNS_TQ_SYMMGR: u32 = 3136;
pub const XLINE_MERNS_TQ_1: u32 = 3137;
pub const XLINE_MERNS_TQ_2: u32 = 3138;
pub const XLINE_MERNS_TQ_3: u32 = 3139;
pub const XLINE_MERNS_TQ_4: u32 = 3140;
pub const XLINE_MERNS_TQ_ORD_1: u32 = 3141;
pub const XLINE_MERNS_TQ_ORD_2: u32 = 3142;
pub const XLINE_MERNS_TQ_ORD_3: u32 = 3143;
pub const XLINE_MERNS_TQ_ORD_4: u32 = 3144;
pub const XLINE_MERTS_TQ_SYMMGR: u32 = 3160;
pub const XLINE_MERTS_TQ_1: u32 = 3161;
pub const XLINE_MERTS_TQ_ORD_1: u32 = 3162;
pub const XLINE_MERNS_TR_SYMMGR: u32 = 3168;
pub const XLINE_MERNS_TR_1: u32 = 3169;
pub const XLINE_MERNS_TR_2: u32 = 3170;
pub const XLINE_MERNS_TR_3: u32 = 3171;
pub const XLINE_MERNS_TR_4: u32 = 3172;
pub const XLINE_MERNS_TR_ORD_1: u32 = 3173;
pub const XLINE_MERNS_TR_ORD_2: u32 = 3174;
pub const XLINE_MERNS_TR_ORD_3: u32 = 3175;
pub const XLINE_MERNS_TR_ORD_4: u32 = 3176;
pub const XLINE_MERTS_TR_SYMMGR: u32 = 3192;
pub const XLINE_MERTS_TR_1: u32 = 3193;
pub const XLINE_MERTS_TR_ORD_1: u32 = 3194;
pub const XLINE_BZXOPTT_SYMMGR: u32 = 3328;
pub const XLINE_BZXOPTT_RR: u32 = 3329;
pub const XLINE_BZXOPTT_1: u32 = 3330;
pub const XLINE_BZXOPTT_2: u32 = 3331;
pub const XLINE_BZXOPTT_3: u32 = 3332;
pub const XLINE_BZXOPTT_4: u32 = 3333;
pub const XLINE_BZXOPTT_5: u32 = 3334;
pub const XLINE_BZXOPTT_6: u32 = 3335;
pub const XLINE_BZXOPTT_7: u32 = 3336;
pub const XLINE_BZXOPTT_8: u32 = 3337;
pub const XLINE_BZXOPTT_9: u32 = 3338;
pub const XLINE_BZXOPTT_10: u32 = 3339;
pub const XLINE_BZXOPTT_11: u32 = 3340;
pub const XLINE_BZXOPTT_12: u32 = 3341;
pub const XLINE_BZXOPTT_13: u32 = 3342;
pub const XLINE_BZXOPTT_14: u32 = 3343;
pub const XLINE_BZXOPTT_15: u32 = 3344;
pub const XLINE_BZXOPTT_16: u32 = 3345;
pub const XLINE_BZXOPTT_17: u32 = 3346;
pub const XLINE_BZXOPTT_18: u32 = 3347;
pub const XLINE_BZXOPTT_19: u32 = 3348;
pub const XLINE_BZXOPTT_20: u32 = 3349;
pub const XLINE_BZXOPTT_21: u32 = 3350;
pub const XLINE_BZXOPTT_22: u32 = 3351;
pub const XLINE_BZXOPTT_23: u32 = 3352;
pub const XLINE_BZXOPTT_24: u32 = 3353;
pub const XLINE_BZXOPTT_25: u32 = 3354;
pub const XLINE_BZXOPTT_26: u32 = 3355;
pub const XLINE_BZXOPTT_27: u32 = 3356;
pub const XLINE_BZXOPTT_28: u32 = 3357;
pub const XLINE_BZXOPTT_29: u32 = 3358;
pub const XLINE_BZXOPTT_30: u32 = 3359;
pub const XLINE_BZXOPTT_31: u32 = 3360;
pub const XLINE_BZXOPTT_32: u32 = 3361;
pub const XLINE_BZXOPTT_33: u32 = 3362;
pub const XLINE_C1PITCH_SYMMGR: u32 = 3376;
pub const XLINE_C1PITCH_RR: u32 = 3377;
pub const XLINE_C1PITCH_1: u32 = 3378;
pub const XLINE_C1PITCH_2: u32 = 3379;
pub const XLINE_C1PITCH_3: u32 = 3380;
pub const XLINE_C1PITCH_4: u32 = 3381;
pub const XLINE_C1PITCH_5: u32 = 3382;
pub const XLINE_C1PITCH_6: u32 = 3383;
pub const XLINE_C1PITCH_7: u32 = 3384;
pub const XLINE_C1PITCH_8: u32 = 3385;
pub const XLINE_C1PITCH_9: u32 = 3386;
pub const XLINE_C1PITCH_10: u32 = 3387;
pub const XLINE_C1PITCH_11: u32 = 3388;
pub const XLINE_C1PITCH_12: u32 = 3389;
pub const XLINE_C1PITCH_13: u32 = 3390;
pub const XLINE_C1PITCH_14: u32 = 3391;
pub const XLINE_C1PITCH_15: u32 = 3392;
pub const XLINE_C1PITCH_16: u32 = 3393;
pub const XLINE_C1PITCH_17: u32 = 3394;
pub const XLINE_C1PITCH_18: u32 = 3395;
pub const XLINE_C1PITCH_19: u32 = 3396;
pub const XLINE_C1PITCH_20: u32 = 3397;
pub const XLINE_C1PITCH_21: u32 = 3398;
pub const XLINE_C1PITCH_22: u32 = 3399;
pub const XLINE_C1PITCH_23: u32 = 3400;
pub const XLINE_C1PITCH_24: u32 = 3401;
pub const XLINE_C1PITCH_25: u32 = 3402;
pub const XLINE_C1PITCH_26: u32 = 3403;
pub const XLINE_C1PITCH_27: u32 = 3404;
pub const XLINE_C1PITCH_28: u32 = 3405;
pub const XLINE_C1PITCH_29: u32 = 3406;
pub const XLINE_C1PITCH_30: u32 = 3407;
pub const XLINE_C1PITCH_31: u32 = 3408;
pub const XLINE_C1PITCH_32: u32 = 3409;
pub const XLINE_C1PITCH_33: u32 = 3410;
pub const XLINE_C1PITCH_34: u32 = 3411;
pub const XLINE_C1PITCH_35: u32 = 3412;
pub const XLINE_C1PITCC_SYMMGR: u32 = 3424;
pub const XLINE_C1PITCC_RR: u32 = 3425;
pub const XLINE_C1PITCC_1: u32 = 3426;
pub const XLINE_C1PITCC_2: u32 = 3427;
pub const XLINE_C1PITCC_3: u32 = 3428;
pub const XLINE_C1PITCC_4: u32 = 3429;
pub const XLINE_C1PITCC_5: u32 = 3430;
pub const XLINE_C1PITCC_6: u32 = 3431;
pub const XLINE_C1PITCC_7: u32 = 3432;
pub const XLINE_C1PITCC_8: u32 = 3433;
pub const XLINE_C1PITCC_9: u32 = 3434;
pub const XLINE_C1PITCC_10: u32 = 3435;
pub const XLINE_C1PITCC_11: u32 = 3436;
pub const XLINE_C1PITCC_12: u32 = 3437;
pub const XLINE_C1PITCC_13: u32 = 3438;
pub const XLINE_C1PITCC_14: u32 = 3439;
pub const XLINE_C1PITCC_15: u32 = 3440;
pub const XLINE_C1PITCC_16: u32 = 3441;
pub const XLINE_C1PITCC_17: u32 = 3442;
pub const XLINE_C1PITCC_18: u32 = 3443;
pub const XLINE_C1PITCC_19: u32 = 3444;
pub const XLINE_C1PITCC_20: u32 = 3445;
pub const XLINE_C1PITCC_21: u32 = 3446;
pub const XLINE_C1PITCC_22: u32 = 3447;
pub const XLINE_C1PITCC_23: u32 = 3448;
pub const XLINE_C1PITCC_24: u32 = 3449;
pub const XLINE_C1PITCC_25: u32 = 3450;
pub const XLINE_C1PITCC_26: u32 = 3451;
pub const XLINE_C1PITCC_27: u32 = 3452;
pub const XLINE_C1PITCC_28: u32 = 3453;
pub const XLINE_C1PITCC_29: u32 = 3454;
pub const XLINE_C1PITCC_30: u32 = 3455;
pub const XLINE_C1PITCC_31: u32 = 3456;
pub const XLINE_C1PITCC_32: u32 = 3457;
pub const XLINE_C1PITCC_33: u32 = 3458;
pub const XLINE_C1PITCC_34: u32 = 3459;
pub const XLINE_C1PITCC_35: u32 = 3460;
pub const XLINE_C1CPITCH_SYMMGR: u32 = 3472;
pub const XLINE_C1CPITCH_RR: u32 = 3473;
pub const XLINE_C1CPITCH_1: u32 = 3474;
pub const XLINE_C1CPITCH_2: u32 = 3475;
pub const XLINE_C1CPITCH_3: u32 = 3476;
pub const XLINE_C1CPITCH_4: u32 = 3477;
pub const XLINE_C1CPITCH_5: u32 = 3478;
pub const XLINE_C1CPITCH_6: u32 = 3479;
pub const XLINE_C1CPITCH_7: u32 = 3480;
pub const XLINE_C1CPITCH_8: u32 = 3481;
pub const XLINE_C1CPITCH_9: u32 = 3482;
pub const XLINE_C1CPITCH_10: u32 = 3483;
pub const XLINE_C1CPITCH_11: u32 = 3484;
pub const XLINE_C1CPITCH_12: u32 = 3485;
pub const XLINE_C1CPITCH_13: u32 = 3486;
pub const XLINE_C1CPITCH_14: u32 = 3487;
pub const XLINE_C1CPITCH_15: u32 = 3488;
pub const XLINE_C1CPITCH_16: u32 = 3489;
pub const XLINE_C1CPITCH_17: u32 = 3490;
pub const XLINE_C1CPITCH_18: u32 = 3491;
pub const XLINE_C1CPITCH_19: u32 = 3492;
pub const XLINE_C1CPITCH_20: u32 = 3493;
pub const XLINE_C1CPITCH_21: u32 = 3494;
pub const XLINE_C1CPITCH_22: u32 = 3495;
pub const XLINE_C1CPITCH_23: u32 = 3496;
pub const XLINE_C1CPITCH_24: u32 = 3497;
pub const XLINE_C1CPITCH_25: u32 = 3498;
pub const XLINE_C1CPITCH_26: u32 = 3499;
pub const XLINE_C1CPITCH_27: u32 = 3500;
pub const XLINE_C1CPITCH_28: u32 = 3501;
pub const XLINE_C1CPITCH_29: u32 = 3502;
pub const XLINE_C1CPITCH_30: u32 = 3503;
pub const XLINE_C1CPITCH_31: u32 = 3504;
pub const XLINE_C1CPITCH_32: u32 = 3505;
pub const XLINE_C1CPITCH_33: u32 = 3506;
pub const XLINE_C1CPITCH_34: u32 = 3507;
pub const XLINE_C1CPITCH_35: u32 = 3508;
pub const XLINE_C1CPITCC_SYMMGR: u32 = 3520;
pub const XLINE_C1CPITCC_RR: u32 = 3521;
pub const XLINE_C1CPITCC_1: u32 = 3522;
pub const XLINE_C1CPITCC_2: u32 = 3523;
pub const XLINE_C1CPITCC_3: u32 = 3524;
pub const XLINE_C1CPITCC_4: u32 = 3525;
pub const XLINE_C1CPITCC_5: u32 = 3526;
pub const XLINE_C1CPITCC_6: u32 = 3527;
pub const XLINE_C1CPITCC_7: u32 = 3528;
pub const XLINE_C1CPITCC_8: u32 = 3529;
pub const XLINE_C1CPITCC_9: u32 = 3530;
pub const XLINE_C1CPITCC_10: u32 = 3531;
pub const XLINE_C1CPITCC_11: u32 = 3532;
pub const XLINE_C1CPITCC_12: u32 = 3533;
pub const XLINE_C1CPITCC_13: u32 = 3534;
pub const XLINE_C1CPITCC_14: u32 = 3535;
pub const XLINE_C1CPITCC_15: u32 = 3536;
pub const XLINE_C1CPITCC_16: u32 = 3537;
pub const XLINE_C1CPITCC_17: u32 = 3538;
pub const XLINE_C1CPITCC_18: u32 = 3539;
pub const XLINE_C1CPITCC_19: u32 = 3540;
pub const XLINE_C1CPITCC_20: u32 = 3541;
pub const XLINE_C1CPITCC_21: u32 = 3542;
pub const XLINE_C1CPITCC_22: u32 = 3543;
pub const XLINE_C1CPITCC_23: u32 = 3544;
pub const XLINE_C1CPITCC_24: u32 = 3545;
pub const XLINE_C1CPITCC_25: u32 = 3546;
pub const XLINE_C1CPITCC_26: u32 = 3547;
pub const XLINE_C1CPITCC_27: u32 = 3548;
pub const XLINE_C1CPITCC_28: u32 = 3549;
pub const XLINE_C1CPITCC_29: u32 = 3550;
pub const XLINE_C1CPITCC_30: u32 = 3551;
pub const XLINE_C1CPITCC_31: u32 = 3552;
pub const XLINE_C1CPITCC_32: u32 = 3553;
pub const XLINE_C1CPITCC_33: u32 = 3554;
pub const XLINE_C1CPITCC_34: u32 = 3555;
pub const XLINE_C1CPITCC_35: u32 = 3556;
pub const XLINE_CME_ESFUT: u32 = 3584;
pub const XLINE_CME_ESFUT_SD: u32 = 3585;
pub const XLINE_CME_ESOPT: u32 = 3586;
pub const XLINE_CME_ESOPT_SD: u32 = 3587;
pub const XLINE_CME_IRFUT: u32 = 3588;
pub const XLINE_CME_IRFUT_SD: u32 = 3589;
pub const XLINE_CME_IROPT: u32 = 3590;
pub const XLINE_CME_IROPT_SD: u32 = 3591;
pub const XLINE_CME_FXFUT: u32 = 3592;
pub const XLINE_CME_FXFUT_SD: u32 = 3593;
pub const XLINE_CME_FXOPT: u32 = 3594;
pub const XLINE_CME_FXOPT_SD: u32 = 3595;
pub const XLINE_CME_CMDFUT: u32 = 3596;
pub const XLINE_CME_CMDFUT_SD: u32 = 3597;
pub const XLINE_CME_CMDOPT: u32 = 3598;
pub const XLINE_CME_CMDOPT_SD: u32 = 3599;
pub const XLINE_CME_EQFUT: u32 = 3600;
pub const XLINE_CME_EQFUT_SD: u32 = 3601;
pub const XLINE_CME_EQOPT: u32 = 3602;
pub const XLINE_CME_EQOPT_SD: u32 = 3603;
pub const XLINE_CME_FX2FUT: u32 = 3604;
pub const XLINE_CME_FX2FUT_SD: u32 = 3605;
pub const XLINE_CME_FX2OPT: u32 = 3606;
pub const XLINE_CME_FX2OPT_SD: u32 = 3607;
pub const XLINE_CBT_CMDFUT: u32 = 3608;
pub const XLINE_CBT_CMDFUT_SD: u32 = 3609;
pub const XLINE_CBT_CMDOPT: u32 = 3610;
pub const XLINE_CBT_CMDOPT_SD: u32 = 3611;
pub const XLINE_CBT_EQIXFUT: u32 = 3612;
pub const XLINE_CBT_EQIXFUT_SD: u32 = 3613;
pub const XLINE_CBT_EQIXOPT: u32 = 3614;
pub const XLINE_CBT_EQIXOPT_SD: u32 = 3615;
pub const XLINE_CBT_IRFUT: u32 = 3616;
pub const XLINE_CBT_IRFUT_SD: u32 = 3617;
pub const XLINE_CBT_IROPT: u32 = 3618;
pub const XLINE_CBT_IROPT_SD: u32 = 3619;
pub const XLINE_CBT_CMD2FUT: u32 = 3620;
pub const XLINE_CBT_CMD2FUT_SD: u32 = 3621;
pub const XLINE_COMX_FUT: u32 = 3622;
pub const XLINE_COMX_FUT_SD: u32 = 3623;
pub const XLINE_COMX_OPT: u32 = 3624;
pub const XLINE_COMX_OPT_SD: u32 = 3625;
pub const XLINE_NYM_EMSFUT: u32 = 3626;
pub const XLINE_NYM_EMSFUT_SD: u32 = 3627;
pub const XLINE_NYM_EMSOPT: u32 = 3628;
pub const XLINE_NYM_EMSOPT_SD: u32 = 3629;
pub const XLINE_NYM_CRDEFUT: u32 = 3630;
pub const XLINE_NYM_CRDEFUT_SD: u32 = 3631;
pub const XLINE_NYM_CRDEOPT: u32 = 3632;
pub const XLINE_NYM_CRDEOPT_SD: u32 = 3633;
pub const XLINE_NYM_MSAFUT: u32 = 3634;
pub const XLINE_NYM_MSAFUT_SD: u32 = 3635;
pub const XLINE_NYM_MSAOPT: u32 = 3636;
pub const XLINE_NYM_MSAOPT_SD: u32 = 3637;
pub const XLINE_NYM_NGOFUT: u32 = 3638;
pub const XLINE_NYM_NGOFUT_SD: u32 = 3639;
pub const XLINE_NYM_NGOPT: u32 = 3640;
pub const XLINE_NYM_NGOPT_SD: u32 = 3641;
pub const XLINE_CME_EUROFUT: u32 = 3642;
pub const XLINE_CME_EUROFUT_SD: u32 = 3643;
pub const XLINE_BMD_FUT: u32 = 3644;
pub const XLINE_CME_EVTOPT: u32 = 3645;
pub const XLINE_BMD_OPT: u32 = 3646;
pub const XLINE_CMEC_EVTOPT: u32 = 3647;
pub const XLINE_DME_FUT: u32 = 3648;
pub const XLINE_DME_FUT_SD: u32 = 3649;
pub const XLINE_DME_OPT: u32 = 3650;
pub const XLINE_DME_OPT_SD: u32 = 3651;
pub const XLINE_KRX_FUT: u32 = 3652;
pub const XLINE_KRX_FUT_SD: u32 = 3653;
pub const XLINE_MGE_FUT: u32 = 3654;
pub const XLINE_MGE_FUT_SD: u32 = 3655;
pub const XLINE_MGE_OPT: u32 = 3656;
pub const XLINE_MGE_OPT_SD: u32 = 3657;
pub const XLINE_BMF_FUT: u32 = 3658;
pub const XLINE_BMF_FUT_SD: u32 = 3659;
pub const XLINE_BMF_OPT: u32 = 3660;
pub const XLINE_BMF_OPT_SD: u32 = 3661;
pub const XLINE_CBT_IR2FUT: u32 = 3662;
pub const XLINE_CME_CCCYFUT: u32 = 3663;
pub const XLINE_CMEC_CCCYFUT: u32 = 3664;
pub const XLINE_CME_CCCYOPT: u32 = 3665;
pub const XLINE_CMEC_CCCYOPT: u32 = 3666;
pub const XLINE_CMEC_ESFUT: u32 = 3712;
pub const XLINE_CMEC_ESFUT_SD: u32 = 3713;
pub const XLINE_CMEC_ESOPT: u32 = 3714;
pub const XLINE_CMEC_ESOPT_SD: u32 = 3715;
pub const XLINE_CMEC_IRFUT: u32 = 3716;
pub const XLINE_CMEC_IRFUT_SD: u32 = 3717;
pub const XLINE_CMEC_IROPT: u32 = 3718;
pub const XLINE_CMEC_IROPT_SD: u32 = 3719;
pub const XLINE_CMEC_FXFUT: u32 = 3720;
pub const XLINE_CMEC_FXFUT_SD: u32 = 3721;
pub const XLINE_CMEC_FXOPT: u32 = 3722;
pub const XLINE_CMEC_FXOPT_SD: u32 = 3723;
pub const XLINE_CMEC_CMDFUT: u32 = 3724;
pub const XLINE_CMEC_CMDFUT_SD: u32 = 3725;
pub const XLINE_CMEC_CMDOPT: u32 = 3726;
pub const XLINE_CMEC_CMDOPT_SD: u32 = 3727;
pub const XLINE_CMEC_EQFUT: u32 = 3728;
pub const XLINE_CMEC_EQFUT_SD: u32 = 3729;
pub const XLINE_CMEC_EQOPT: u32 = 3730;
pub const XLINE_CMEC_EQOPT_SD: u32 = 3731;
pub const XLINE_CMEC_FX2FUT: u32 = 3732;
pub const XLINE_CMEC_FX2FUT_SD: u32 = 3733;
pub const XLINE_CMEC_FX2OPT: u32 = 3734;
pub const XLINE_CMEC_FX2OPT_SD: u32 = 3735;
pub const XLINE_CBTC_CMDFUT: u32 = 3736;
pub const XLINE_CBTC_CMDFUT_SD: u32 = 3737;
pub const XLINE_CBTC_CMDOPT: u32 = 3738;
pub const XLINE_CBTC_CMDOPT_SD: u32 = 3739;
pub const XLINE_CBTC_EQIXFUT: u32 = 3740;
pub const XLINE_CBTC_EQIXFUT_SD: u32 = 3741;
pub const XLINE_CBTC_EQIXOPT: u32 = 3742;
pub const XLINE_CBTC_EQIXOPT_SD: u32 = 3743;
pub const XLINE_CBTC_IRFUT: u32 = 3744;
pub const XLINE_CBTC_IRFUT_SD: u32 = 3745;
pub const XLINE_CBTC_IROPT: u32 = 3746;
pub const XLINE_CBTC_IROPT_SD: u32 = 3747;
pub const XLINE_CBTC_CMD2FUT: u32 = 3748;
pub const XLINE_CBTC_CMD2FUT_SD: u32 = 3749;
pub const XLINE_COMXC_FUT: u32 = 3750;
pub const XLINE_COMXC_FUT_SD: u32 = 3751;
pub const XLINE_COMXC_OPT: u32 = 3752;
pub const XLINE_COMXC_OPT_SD: u32 = 3753;
pub const XLINE_NYMC_EMSFUT: u32 = 3754;
pub const XLINE_NYMC_EMSFUT_SD: u32 = 3755;
pub const XLINE_NYMC_EMSOPT: u32 = 3756;
pub const XLINE_NYMC_EMSOPT_SD: u32 = 3757;
pub const XLINE_NYMC_CRDEFUT: u32 = 3758;
pub const XLINE_NYMC_CRDEFUT_SD: u32 = 3759;
pub const XLINE_NYMC_CRDEOPT: u32 = 3760;
pub const XLINE_NYMC_CRDEOPT_SD: u32 = 3761;
pub const XLINE_NYMC_MSAFUT: u32 = 3762;
pub const XLINE_NYMC_MSAFUT_SD: u32 = 3763;
pub const XLINE_NYMC_MSAOPT: u32 = 3764;
pub const XLINE_NYMC_MSAOPT_SD: u32 = 3765;
pub const XLINE_NYMC_NGOFUT: u32 = 3766;
pub const XLINE_NYMC_NGOFUT_SD: u32 = 3767;
pub const XLINE_NYMC_NGOPT: u32 = 3768;
pub const XLINE_NYMC_NGOPT_SD: u32 = 3769;
pub const XLINE_CMEC_EUROFUT: u32 = 3770;
pub const XLINE_CMEC_EUROFUT_SD: u32 = 3771;
pub const XLINE_BMDC_FUT: u32 = 3772;
pub const XLINE_BMDC_FUT_SD: u32 = 3773;
pub const XLINE_BMDC_OPT: u32 = 3774;
pub const XLINE_BMDC_OPT_SD: u32 = 3775;
pub const XLINE_DMEC_FUT: u32 = 3776;
pub const XLINE_DMEC_FUT_SD: u32 = 3777;
pub const XLINE_DMEC_OPT: u32 = 3778;
pub const XLINE_DMEC_OPT_SD: u32 = 3779;
pub const XLINE_KRXC_FUT: u32 = 3780;
pub const XLINE_KRXC_FUT_SD: u32 = 3781;
pub const XLINE_MGEC_FUT: u32 = 3782;
pub const XLINE_MGEC_FUT_SD: u32 = 3783;
pub const XLINE_MGEC_OPT: u32 = 3784;
pub const XLINE_MGEC_OPT_SD: u32 = 3785;
pub const XLINE_CBTC_IR2FUT: u32 = 3786;
pub const XLINE_AEQN: u32 = 3824;
pub const XLINE_AEQN_SYMMGR: u32 = 3825;
pub const XLINE_AEQN_GTE: u32 = 3826;
pub const XLINE_AEQN_GTE_SYMMGR: u32 = 3827;
pub const XLINE_ICE_US_AGS: u32 = 3840;
pub const XLINE_ICE_US_AGS_T5: u32 = 3841;
pub const XLINE_ICE_US_FINS: u32 = 3842;
pub const XLINE_ICE_US_FINS_T5: u32 = 3843;
pub const XLINE_ICE_EU_NOIL: u32 = 3844;
pub const XLINE_ICE_EU_NOIL_T5: u32 = 3845;
pub const XLINE_ICE_OTC: u32 = 3846;
pub const XLINE_ICE_OTC_T5: u32 = 3847;
pub const XLINE_ICE_CA: u32 = 3848;
pub const XLINE_ICE_CA_T5: u32 = 3849;
pub const XLINE_ICE_CCX: u32 = 3850;
pub const XLINE_ICE_CCX_T5: u32 = 3851;
pub const XLINE_ICE_BRENT: u32 = 3852;
pub const XLINE_ICE_BRENT_T5: u32 = 3853;
pub const XLINE_ICE_WTI: u32 = 3854;
pub const XLINE_ICE_WTI_T5: u32 = 3855;
pub const XLINE_ICE_EU_OILO: u32 = 3856;
pub const XLINE_ICE_EU_OILO_T5: u32 = 3857;
pub const XLINE_ICE_EU_OPTS: u32 = 3858;
pub const XLINE_ICE_US_FINOPTS: u32 = 3859;
pub const XLINE_ICE_US_AGSOPTS: u32 = 3860;
pub const XLINE_ICE_CCX_OPTS: u32 = 3861;
pub const XLINE_ICE_OTC_OPTS: u32 = 3862;
pub const XLINE_ICE_CA_OPTS: u32 = 3863;
pub const XLINE_ICE_ENDEX: u32 = 3864;
pub const XLINE_ICE_ENDEX_T5: u32 = 3865;
pub const XLINE_ICE_US_AGS_IMP: u32 = 3866;
pub const XLINE_ICE_BRENT_IMP: u32 = 3867;
pub const XLINE_ICE_EU_NOIL_IMP: u32 = 3868;
pub const XLINE_ICE_EU_OILO_IMP: u32 = 3869;
pub const XLINE_ICE_OTC_IMP: u32 = 3870;
pub const XLINE_ICE_WTI_IMP: u32 = 3871;
pub const XLINE_ICEFI_US_AGS_T5: u32 = 3872;
pub const XLINE_ICEFI_BRENT_T5: u32 = 3873;
pub const XLINE_ICEFI_EUNOIL_T5: u32 = 3874;
pub const XLINE_ICEFI_EUOILO_T5: u32 = 3875;
pub const XLINE_ICEFI_OTC_T5: u32 = 3876;
pub const XLINE_ICEFI_WTI_T5: u32 = 3877;
pub const XLINE_ICE_CA_OPT_T10: u32 = 3878;
pub const XLINE_ICE_END_OPT_T10: u32 = 3879;
pub const XLINE_ICE_EU_OPT_T10: u32 = 3880;
pub const XLINE_ICE_US_AGS_T10: u32 = 3881;
pub const XLINE_ICE_US_FIN_T10: u32 = 3882;
pub const XLINE_ICE_OTC_OPT_T10: u32 = 3883;
pub const XLINE_ICE_ENDEX_OPTS: u32 = 3884;
pub const XLINE_ICE_ENDEX_SPOT: u32 = 3885;
pub const XLINE_ICE_ENDEXSP_T5: u32 = 3886;
pub const XLINE_LICE_EU_STIRS: u32 = 3887;
pub const XLINE_LICEFI_EU_STIRS: u32 = 3888;
pub const XLINE_LICE_EU_EONIA: u32 = 3889;
pub const XLINE_LICEFI_EU_EONIA: u32 = 3890;
pub const XLINE_LICE_EU_ML_IR: u32 = 3891;
pub const XLINE_LICE_EU_EQTY: u32 = 3892;
pub const XLINE_LICEFI_EU_EQTY: u32 = 3893;
pub const XLINE_LICE_EU_AGS: u32 = 3894;
pub const XLINE_LICEFI_EU_AGS: u32 = 3895;
pub const XLINE_LICE_EU_GCF: u32 = 3896;
pub const XLINE_LICEFI_EU_GCF: u32 = 3897;
pub const XLINE_LICE_US_METAL: u32 = 3898;
pub const XLINE_LICEFI_US_MTLS: u32 = 3899;
pub const XLINE_LICE_US_EQTY: u32 = 3900;
pub const XLINE_LICE_US_OPTS: u32 = 3901;
pub const XLINE_LICEFI_EU_ML_IR: u32 = 3902;
pub const XLINE_LICE_EO_IND: u32 = 3903;
pub const XLINE_LICE_EO_EQ: u32 = 3904;
pub const XLINE_LICE_EO_FIN: u32 = 3905;
pub const XLINE_LICE_US_OPT_T10: u32 = 3906;
pub const XLINE_LICE_EO_IND_T10: u32 = 3907;
pub const XLINE_LICE_EU_EONI_T5: u32 = 3908;
pub const XLINE_LICE_US_MTL_T5: u32 = 3909;
pub const XLINE_LICE_US_EQTY_T5: u32 = 3910;
pub const XLINE_LICE_EU_AGS_T5: u32 = 3911;
pub const XLINE_LICE_EU_GCF_T5: u32 = 3912;
pub const XLINE_LICE_EU_STRS_T5: u32 = 3913;
pub const XLINE_LICE_EU_EQTY_T5: u32 = 3914;
pub const XLINE_LICE_EU_MLIR_T5: u32 = 3915;
pub const XLINE_LICE_EO_EQ_T10: u32 = 3916;
pub const XLINE_LICE_EO_FIN_T10: u32 = 3917;
pub const XLINE_LICEFI_USMTL_T5: u32 = 3918;
pub const XLINE_LICEFI_EUGCF_T5: u32 = 3919;
pub const XLINE_LICEFI_EUAGS_T5: u32 = 3920;
pub const XLINE_LICEFI_EUSTR_T5: u32 = 3921;
pub const XLINE_LICEFI_EUEON_T5: u32 = 3922;
pub const XLINE_LICEFI_EUMLI_T5: u32 = 3923;
pub const XLINE_LICEFI_EUEQ_T5: u32 = 3924;
pub const XLINE_ICE_RC_IND: u32 = 3925;
pub const XLINE_ICE_RC_IND_T5: u32 = 3926;
pub const XLINE_ICE_SING: u32 = 3927;
pub const XLINE_ICEFI_SING: u32 = 3928;
pub const XLINE_ICE_SING_T5: u32 = 3929;
pub const XLINE_ICEFI_SING_T5: u32 = 3930;
pub const XLINE_ICE_CDS_SWAP: u32 = 3931;
pub const XLINE_ICE_CDS_SWAP_T5: u32 = 3932;
pub const XLINE_ICE_US_FDRI: u32 = 3933;
pub const XLINE_ICE_US_TPRI_T5: u32 = 3934;
pub const XLINE_ICE_US_FDCS: u32 = 3935;
pub const XLINE_ICE_US_TPCS_T5: u32 = 3936;
pub const XLINE_ICE_EU_FDIS: u32 = 3937;
pub const XLINE_ICE_EU_TPIS_T5: u32 = 3938;
pub const XLINE_ICE_ENDEXFI: u32 = 3939;
pub const XLINE_ICE_ENDEXFI_T5: u32 = 3940;
pub const XLINE_ICE_DIGITAL: u32 = 3941;
pub const XLINE_ICE_DIGITAL_T5: u32 = 3942;
pub const XLINE_ICE_1: u32 = 4096;
pub const XLINE_ICE_2: u32 = 4097;
pub const XLINE_ICE_3: u32 = 4098;
pub const XLINE_ICE_4: u32 = 4099;
pub const XLINE_ICE_5: u32 = 4100;
pub const XLINE_ICE_6: u32 = 4101;
pub const XLINE_ICE_7: u32 = 4102;
pub const XLINE_ICE_8: u32 = 4103;
pub const XLINE_ICE_9: u32 = 4104;
pub const XLINE_ICE_10: u32 = 4105;
pub const XLINE_ICE_11: u32 = 4106;
pub const XLINE_ICE_12: u32 = 4107;
pub const XLINE_ICE_13: u32 = 4108;
pub const XLINE_ICE_14: u32 = 4109;
pub const XLINE_ICE_15: u32 = 4110;
pub const XLINE_ICE_16: u32 = 4111;
pub const XLINE_ICE_17: u32 = 4112;
pub const XLINE_ICE_18: u32 = 4113;
pub const XLINE_ICE_19: u32 = 4114;
pub const XLINE_ICE_20: u32 = 4115;
pub const XLINE_ICE_21: u32 = 4116;
pub const XLINE_ICE_22: u32 = 4117;
pub const XLINE_ICE_23: u32 = 4118;
pub const XLINE_ICE_24: u32 = 4119;
pub const XLINE_ICE_25: u32 = 4120;
pub const XLINE_ICE_26: u32 = 4121;
pub const XLINE_ICE_27: u32 = 4122;
pub const XLINE_ICE_28: u32 = 4123;
pub const XLINE_ICE_29: u32 = 4124;
pub const XLINE_ICE_30: u32 = 4125;
pub const XLINE_ICE_31: u32 = 4126;
pub const XLINE_ICE_32: u32 = 4127;
pub const XLINE_ICE_33: u32 = 4128;
pub const XLINE_ICE_34: u32 = 4129;
pub const XLINE_ICE_35: u32 = 4130;
pub const XLINE_ICE_36: u32 = 4131;
pub const XLINE_ICE_37: u32 = 4132;
pub const XLINE_ICE_38: u32 = 4133;
pub const XLINE_ICE_39: u32 = 4134;
pub const XLINE_ICE_40: u32 = 4135;
pub const XLINE_ICE_REF: u32 = 4136;
pub const XLINE_ICE_41: u32 = 4137;
pub const XLINE_ICE_42: u32 = 4138;
pub const XLINE_ICE_43: u32 = 4139;
pub const XLINE_ICE_44: u32 = 4140;
pub const XLINE_ICE_45: u32 = 4141;
pub const XLINE_ICE_46: u32 = 4142;
pub const XLINE_ICE_47: u32 = 4143;
pub const XLINE_ICE_48: u32 = 4144;
pub const XLINE_ICE_49: u32 = 4145;
pub const XLINE_ICE_50: u32 = 4146;
pub const XLINE_ICE_51: u32 = 4147;
pub const XLINE_ICE_52: u32 = 4148;
pub const XLINE_ICE_SYMMGR: u32 = 4149;
pub const XLINE_ICE_53: u32 = 4150;
pub const XLINE_ICE_54: u32 = 4151;
pub const XLINE_ICE_55: u32 = 4152;
pub const XLINE_ICE_56: u32 = 4153;
pub const XLINE_CME_17_SECDEF: u32 = 4172;
pub const XLINE_CME_17_FAST: u32 = 4173;
pub const XLINE_CME_109_ITC: u32 = 4180;
pub const XLINE_CME_6_SECDEF: u32 = 4192;
pub const XLINE_CME_307_FAST: u32 = 4196;
pub const XLINE_CME_307_SECDEF: u32 = 4197;
pub const XLINE_CME_309_FAST: u32 = 4198;
pub const XLINE_CME_309_SECDEF: u32 = 4199;
pub const XLINE_CME_310_FAST: u32 = 4200;
pub const XLINE_CME_310_SECDEF: u32 = 4201;
pub const XLINE_CME_311_FAST: u32 = 4202;
pub const XLINE_CME_311_SECDEF: u32 = 4203;
pub const XLINE_CME_330_FAST: u32 = 4204;
pub const XLINE_CME_330_SECDEF: u32 = 4205;
pub const XLINE_CME_150_FAST: u32 = 4214;
pub const XLINE_CME_151_FAST: u32 = 4215;
pub const XLINE_CME_6_RCV: u32 = 4216;
pub const XLINE_CME_22_RCV: u32 = 4230;
pub const XLINE_CME_23_RCV: u32 = 4231;
pub const XLINE_CME_120_RCV: u32 = 4256;
pub const XLINE_CME_121_RCV: u32 = 4257;
pub const XLINE_CME_801_RCV: u32 = 4258;
pub const XLINE_CME_MESOPT: u32 = 4260;
pub const XLINE_CMEC_MESOPT: u32 = 4261;
pub const XLINE_CME_BTEC: u32 = 4262;
pub const XLINE_CMEC_BTEC: u32 = 4263;
pub const XLINE_CBOE_ONECQLS: u32 = 4352;
pub const XLINE_CBOE_ONEBD_1: u32 = 4353;
pub const XLINE_CBOE_ONEBD_2: u32 = 4354;
pub const XLINE_CBOE_ONEBD_3: u32 = 4355;
pub const XLINE_CBOE_CFECQLS: u32 = 4356;
pub const XLINE_CBOE_CFEBD_1: u32 = 4357;
pub const XLINE_CBOE_CFEBD_2: u32 = 4358;
pub const XLINE_CBOE_CFEBD_3: u32 = 4359;
pub const XLINE_CSM_CBOE_1: u32 = 4360;
pub const XLINE_CSM_CBOE_2: u32 = 4361;
pub const XLINE_CSM_CBOE_3: u32 = 4362;
pub const XLINE_CSM_CBOE_4: u32 = 4363;
pub const XLINE_CSM_CBOE_5: u32 = 4364;
pub const XLINE_CSM_CBOE_6: u32 = 4365;
pub const XLINE_CSM_CBOE_7: u32 = 4366;
pub const XLINE_CSM_CBOE_8: u32 = 4367;
pub const XLINE_CSM_CBOE_9: u32 = 4368;
pub const XLINE_CSM_CBOE_10: u32 = 4369;
pub const XLINE_CSM_CBOE_11: u32 = 4370;
pub const XLINE_CSM_CBOE_12: u32 = 4371;
pub const XLINE_CSM_CBOE_13: u32 = 4372;
pub const XLINE_CSM_CBOE_14: u32 = 4373;
pub const XLINE_CSM_CBOE_15: u32 = 4374;
pub const XLINE_CSM_CBOE_SD: u32 = 4375;
pub const XLINE_CSM_CBOESTR_1: u32 = 4376;
pub const XLINE_CSM_CBOESTR_SD: u32 = 4377;
pub const XLINE_CSM_CFE_1: u32 = 4378;
pub const XLINE_CSM_CFE_SD: u32 = 4379;
pub const XLINE_CSM_CFESTR_1: u32 = 4380;
pub const XLINE_CSM_CFESTR_SD: u32 = 4381;
pub const XLINE_CSM_C2_1: u32 = 4382;
pub const XLINE_CSM_C2_2: u32 = 4383;
pub const XLINE_CSM_C2_3: u32 = 4384;
pub const XLINE_CSM_C2_4: u32 = 4385;
pub const XLINE_CSM_C2_5: u32 = 4386;
pub const XLINE_CSM_C2_6: u32 = 4387;
pub const XLINE_CSM_C2_7: u32 = 4388;
pub const XLINE_CSM_C2_8: u32 = 4389;
pub const XLINE_CSM_C2_9: u32 = 4390;
pub const XLINE_CSM_C2_10: u32 = 4391;
pub const XLINE_CSM_C2_11: u32 = 4392;
pub const XLINE_CSM_C2_12: u32 = 4393;
pub const XLINE_CSM_C2_13: u32 = 4394;
pub const XLINE_CSM_C2_14: u32 = 4395;
pub const XLINE_CSM_C2_15: u32 = 4396;
pub const XLINE_CSM_C2_SD: u32 = 4397;
pub const XLINE_CSM_C2STR_1: u32 = 4398;
pub const XLINE_CSM_C2STR_SD: u32 = 4399;
pub const XLINE_CSM_CBSX_1: u32 = 4400;
pub const XLINE_CSM_CBSX_SD: u32 = 4401;
pub const XLINE_CSM_ONE_1: u32 = 4402;
pub const XLINE_CSM_ONE_2: u32 = 4403;
pub const XLINE_CSM_ONE_SD: u32 = 4404;
pub const XLINE_CSM_ONESTR_1: u32 = 4405;
pub const XLINE_CSM_ONESTR_SD: u32 = 4406;
pub const XLINE_CSM_ONE_3: u32 = 4407;
pub const XLINE_CSM_CBOE_EX: u32 = 4408;
pub const XLINE_CSM_CBOE_EX_SD: u32 = 4409;
pub const XLINE_CBOE_EX_STR: u32 = 4410;
pub const XLINE_CBOE_EX_STR_SD: u32 = 4411;
pub const XLINE_CSMD_CBOE_EX: u32 = 4412;
pub const XLINE_CSMD_CBOE_EX_SD: u32 = 4413;
pub const XLINE_CBOE_EX_STRD: u32 = 4414;
pub const XLINE_CBOE_EX_STRD_SD: u32 = 4415;
pub const XLINE_CFEPITCH_SYMMGR: u32 = 4416;
pub const XLINE_CFEPITCH_RR: u32 = 4417;
pub const XLINE_CFEPITCH_1: u32 = 4418;
pub const XLINE_CFEPITCH_2: u32 = 4419;
pub const XLINE_CFEPITCC_SYMMGR: u32 = 4420;
pub const XLINE_CFEPITCC_RR: u32 = 4421;
pub const XLINE_CFEPITCC_1: u32 = 4422;
pub const XLINE_CFEPITCC_2: u32 = 4423;
pub const XLINE_CFETOP_SYMMGR: u32 = 4424;
pub const XLINE_CFETOP_RR: u32 = 4425;
pub const XLINE_CFETOP_1: u32 = 4426;
pub const XLINE_CFETOP_2: u32 = 4427;
pub const XLINE_CFETOPC_SYMMGR: u32 = 4428;
pub const XLINE_CFETOPC_RR: u32 = 4429;
pub const XLINE_CFETOPC_1: u32 = 4430;
pub const XLINE_CFETOPC_2: u32 = 4431;
pub const XLINE_CSMD_CBOE_1: u32 = 4608;
pub const XLINE_CSMD_CBOE_2: u32 = 4609;
pub const XLINE_CSMD_CBOE_3: u32 = 4610;
pub const XLINE_CSMD_CBOE_4: u32 = 4611;
pub const XLINE_CSMD_CBOE_5: u32 = 4612;
pub const XLINE_CSMD_CBOE_6: u32 = 4613;
pub const XLINE_CSMD_CBOE_7: u32 = 4614;
pub const XLINE_CSMD_CBOE_8: u32 = 4615;
pub const XLINE_CSMD_CBOE_9: u32 = 4616;
pub const XLINE_CSMD_CBOE_10: u32 = 4617;
pub const XLINE_CSMD_CBOE_11: u32 = 4618;
pub const XLINE_CSMD_CBOE_12: u32 = 4619;
pub const XLINE_CSMD_CBOE_13: u32 = 4620;
pub const XLINE_CSMD_CBOE_SD: u32 = 4621;
pub const XLINE_CSMD_CBOESTR_1: u32 = 4622;
pub const XLINE_CSMD_CBOESTR_SD: u32 = 4623;
pub const XLINE_CSMD_C2_1: u32 = 4624;
pub const XLINE_CSMD_C2_2: u32 = 4625;
pub const XLINE_CSMD_C2_3: u32 = 4626;
pub const XLINE_CSMD_C2_4: u32 = 4627;
pub const XLINE_CSMD_C2_5: u32 = 4628;
pub const XLINE_CSMD_C2_6: u32 = 4629;
pub const XLINE_CSMD_C2_7: u32 = 4630;
pub const XLINE_CSMD_C2_8: u32 = 4631;
pub const XLINE_CSMD_C2_9: u32 = 4632;
pub const XLINE_CSMD_C2_10: u32 = 4633;
pub const XLINE_CSMD_C2_11: u32 = 4634;
pub const XLINE_CSMD_C2_12: u32 = 4635;
pub const XLINE_CSMD_C2_13: u32 = 4636;
pub const XLINE_CSMD_C2_SD: u32 = 4637;
pub const XLINE_CSMD_C2STR_1: u32 = 4638;
pub const XLINE_CSMD_C2STR_SD: u32 = 4639;
pub const XLINE_CSMD_ONE_1: u32 = 4640;
pub const XLINE_CSMD_ONE_2: u32 = 4641;
pub const XLINE_CSMD_ONE_3: u32 = 4642;
pub const XLINE_CSMD_ONE_4: u32 = 4643;
pub const XLINE_CSMD_ONE_5: u32 = 4644;
pub const XLINE_CSMD_ONE_SD: u32 = 4645;
pub const XLINE_CSMD_ONESTR_1: u32 = 4646;
pub const XLINE_CSMD_ONESTR_SD: u32 = 4647;
pub const XLINE_CSMD_CFE_1: u32 = 4648;
pub const XLINE_CSMD_CFE_2: u32 = 4649;
pub const XLINE_CSMD_CFE_3: u32 = 4650;
pub const XLINE_CSMD_CFE_4: u32 = 4651;
pub const XLINE_CSMD_CFE_5: u32 = 4652;
pub const XLINE_CSMD_CFE_SD: u32 = 4653;
pub const XLINE_CSMD_CFESTR_1: u32 = 4654;
pub const XLINE_CSMD_CFESTR_SD: u32 = 4655;
pub const XLINE_CSMD_CBSX_1: u32 = 4656;
pub const XLINE_CSMD_CBSX_2: u32 = 4657;
pub const XLINE_CSMD_CBSX_3: u32 = 4658;
pub const XLINE_CSMD_CBSX_SD: u32 = 4659;
pub const XLINE_TCSM_CBOE_1: u32 = 4660;
pub const XLINE_TCSM_CBOE_2: u32 = 4661;
pub const XLINE_TCSM_CBOE_3: u32 = 4662;
pub const XLINE_TCSM_CBOE_4: u32 = 4663;
pub const XLINE_TCSM_CBOE_5: u32 = 4664;
pub const XLINE_TCSM_CBOE_6: u32 = 4665;
pub const XLINE_TCSM_CBOE_7: u32 = 4666;
pub const XLINE_TCSM_CBOE_8: u32 = 4667;
pub const XLINE_TCSM_CBOE_9: u32 = 4668;
pub const XLINE_TCSM_CBOE_10: u32 = 4669;
pub const XLINE_TCSM_CBOE_SD: u32 = 4670;
pub const XLINE_TCSM_CBOESTR_1: u32 = 4671;
pub const XLINE_TCSM_CBOESTR_SD: u32 = 4672;
pub const XLINE_TCSM_CFE_1: u32 = 4673;
pub const XLINE_TCSM_CFE_SD: u32 = 4674;
pub const XLINE_TCSM_CFESTR_1: u32 = 4675;
pub const XLINE_TCSM_CFESTR_SD: u32 = 4676;
pub const XLINE_TCSM_C2_1: u32 = 4677;
pub const XLINE_TCSM_C2_2: u32 = 4678;
pub const XLINE_TCSM_C2_3: u32 = 4679;
pub const XLINE_TCSM_C2_4: u32 = 4680;
pub const XLINE_TCSM_C2_5: u32 = 4681;
pub const XLINE_TCSM_C2_6: u32 = 4682;
pub const XLINE_TCSM_C2_7: u32 = 4683;
pub const XLINE_TCSM_C2_8: u32 = 4684;
pub const XLINE_TCSM_C2_9: u32 = 4685;
pub const XLINE_TCSM_C2_10: u32 = 4686;
pub const XLINE_TCSM_C2_SD: u32 = 4687;
pub const XLINE_TCSM_C2STR_1: u32 = 4688;
pub const XLINE_TCSM_C2STR_SD: u32 = 4689;
pub const XLINE_TCSM_CBSX_1: u32 = 4690;
pub const XLINE_TCSM_CBSX_SD: u32 = 4691;
pub const XLINE_TCSM_ONE_1: u32 = 4692;
pub const XLINE_TCSM_ONE_2: u32 = 4693;
pub const XLINE_TCSM_ONE_SD: u32 = 4694;
pub const XLINE_TCSM_ONESTR_1: u32 = 4695;
pub const XLINE_TCSM_ONESTR_SD: u32 = 4696;
pub const XLINE_TCSM_ONE_3: u32 = 4697;
pub const XLINE_TCSMD_CBOE_1: u32 = 4864;
pub const XLINE_TCSMD_CBOE_2: u32 = 4865;
pub const XLINE_TCSMD_CBOE_3: u32 = 4866;
pub const XLINE_TCSMD_CBOE_4: u32 = 4867;
pub const XLINE_TCSMD_CBOE_5: u32 = 4868;
pub const XLINE_TCSMD_CBOE_6: u32 = 4869;
pub const XLINE_TCSMD_CBOE_7: u32 = 4870;
pub const XLINE_TCSMD_CBOE_8: u32 = 4871;
pub const XLINE_TCSMD_CBOE_9: u32 = 4872;
pub const XLINE_TCSMD_CBOE_10: u32 = 4873;
pub const XLINE_TCSMD_CBOE_11: u32 = 4874;
pub const XLINE_TCSMD_CBOE_12: u32 = 4875;
pub const XLINE_TCSMD_CBOE_13: u32 = 4876;
pub const XLINE_TCSMD_CBOE_SD: u32 = 4877;
pub const XLINE_TCSMD_CBOESTR_1: u32 = 4878;
pub const XLINE_TCSMD_CBOESTRSD: u32 = 4879;
pub const XLINE_TCSMD_C2_1: u32 = 4880;
pub const XLINE_TCSMD_C2_2: u32 = 4881;
pub const XLINE_TCSMD_C2_3: u32 = 4882;
pub const XLINE_TCSMD_C2_4: u32 = 4883;
pub const XLINE_TCSMD_C2_5: u32 = 4884;
pub const XLINE_TCSMD_C2_6: u32 = 4885;
pub const XLINE_TCSMD_C2_7: u32 = 4886;
pub const XLINE_TCSMD_C2_8: u32 = 4887;
pub const XLINE_TCSMD_C2_9: u32 = 4888;
pub const XLINE_TCSMD_C2_10: u32 = 4889;
pub const XLINE_TCSMD_C2_11: u32 = 4890;
pub const XLINE_TCSMD_C2_12: u32 = 4891;
pub const XLINE_TCSMD_C2_13: u32 = 4892;
pub const XLINE_TCSMD_C2_SD: u32 = 4893;
pub const XLINE_TCSMD_C2STR_1: u32 = 4894;
pub const XLINE_TCSMD_C2STR_SD: u32 = 4895;
pub const XLINE_TCSMD_ONE_1: u32 = 4896;
pub const XLINE_TCSMD_ONE_2: u32 = 4897;
pub const XLINE_TCSMD_ONE_3: u32 = 4898;
pub const XLINE_TCSMD_ONE_SD: u32 = 4899;
pub const XLINE_TCSMD_ONESTR_1: u32 = 4900;
pub const XLINE_TCSMD_ONESTR_SD: u32 = 4901;
pub const XLINE_TCSMD_CFE_1: u32 = 4902;
pub const XLINE_TCSMD_CFE_SD: u32 = 4903;
pub const XLINE_TCSMD_CFESTR_1: u32 = 4904;
pub const XLINE_TCSMD_CFESTR_SD: u32 = 4905;
pub const XLINE_TCSMD_CBSX_1: u32 = 4906;
pub const XLINE_TCSMD_CBSX_SD: u32 = 4907;
pub const XLINE_SIP2_XTIGTWY_01: u32 = 4944;
pub const XLINE_SIP2_XTIGTWY_02: u32 = 4945;
pub const XLINE_SIP2_XTIGTWY_03: u32 = 4946;
pub const XLINE_SIP2_XTIGTWY_04: u32 = 4947;
pub const XLINE_SIP2_XTIGTWY_05: u32 = 4948;
pub const XLINE_SIP2_XTIGTWY_06: u32 = 4949;
pub const XLINE_SIP2_XTIGTWY_07: u32 = 4950;
pub const XLINE_SIP2_XTIGTWY_08: u32 = 4951;
pub const XLINE_SIP2_XTIGTWY_09: u32 = 4952;
pub const XLINE_SIP2_XTIGTWY_10: u32 = 4953;
pub const XLINE_SIP2_XTIGTWY_11: u32 = 4954;
pub const XLINE_SIP2_XTIGTWY_12: u32 = 4955;
pub const XLINE_SIP2_XTIGTWY_13: u32 = 4956;
pub const XLINE_SIP2_XTIGTWY_14: u32 = 4957;
pub const XLINE_SIP2_XTIGTWY_15: u32 = 4958;
pub const XLINE_SIP2_XTIGTWY_16: u32 = 4959;
pub const XLINE_SIP2_XTIGTWY_17: u32 = 4960;
pub const XLINE_SIP2_XTIGTWY_18: u32 = 4961;
pub const XLINE_SIP2_XTIGTWY_19: u32 = 4962;
pub const XLINE_SIP2_XTIGTWY_20: u32 = 4963;
pub const XLINE_SIP2_XTIGTWY_21: u32 = 4964;
pub const XLINE_SIP2_XTIGTWY_22: u32 = 4965;
pub const XLINE_SIP2_XTIGTWY_23: u32 = 4966;
pub const XLINE_SIP2_XTIGTWY_24: u32 = 4967;
pub const XLINE_SIP2_XTIGTWY_25: u32 = 4968;
pub const XLINE_SIP2_XTIGTWY_26: u32 = 4969;
pub const XLINE_SIP2_XTIGTWY_27: u32 = 4970;
pub const XLINE_SIP2_XTIGTWY_28: u32 = 4971;
pub const XLINE_SIP2_XTIGTWY_29: u32 = 4972;
pub const XLINE_SIP2_XTIGTWY_30: u32 = 4973;
pub const XLINE_CSM_CSMI: u32 = 5120;
pub const XLINE_CSMICSM: u32 = 5121;
pub const XLINE_CSMICSMC: u32 = 5122;
pub const XLINE_MSCICSM: u32 = 5123;
pub const XLINE_MSCICSMC: u32 = 5124;
pub const XLINE_FTSECSM: u32 = 5125;
pub const XLINE_FTSECSMC: u32 = 5126;
pub const XLINE_CCCYCSM: u32 = 5127;
pub const XLINE_CCCYCSMC: u32 = 5128;
pub const XLINE_INAVCSM: u32 = 5129;
pub const XLINE_INAVCSMC: u32 = 5130;
pub const XLINE_OPRA_PI_1: u32 = 5131;
pub const XLINE_OPRA_PI_2: u32 = 5132;
pub const XLINE_OPRA_PI_3: u32 = 5133;
pub const XLINE_OPRA_PI_4: u32 = 5134;
pub const XLINE_OPRA_PI_5: u32 = 5135;
pub const XLINE_OPRA_PI_6: u32 = 5136;
pub const XLINE_OPRA_PI_7: u32 = 5137;
pub const XLINE_OPRA_PI_8: u32 = 5138;
pub const XLINE_OPRA_PI_9: u32 = 5139;
pub const XLINE_OPRA_PI_10: u32 = 5140;
pub const XLINE_OPRA_PI_11: u32 = 5141;
pub const XLINE_OPRA_PI_12: u32 = 5142;
pub const XLINE_OPRA_PI_13: u32 = 5143;
pub const XLINE_OPRA_PI_14: u32 = 5144;
pub const XLINE_OPRA_PI_15: u32 = 5145;
pub const XLINE_OPRA_PI_16: u32 = 5146;
pub const XLINE_OPRA_PI_17: u32 = 5147;
pub const XLINE_OPRA_PI_18: u32 = 5148;
pub const XLINE_OPRA_PI_19: u32 = 5149;
pub const XLINE_OPRA_PI_20: u32 = 5150;
pub const XLINE_OPRA_PI_21: u32 = 5151;
pub const XLINE_OPRA_PI_22: u32 = 5152;
pub const XLINE_OPRA_PI_23: u32 = 5153;
pub const XLINE_OPRA_PI_24: u32 = 5154;
pub const XLINE_OPRA_PI_25: u32 = 5155;
pub const XLINE_OPRA_PI_26: u32 = 5156;
pub const XLINE_OPRA_PI_27: u32 = 5157;
pub const XLINE_OPRA_PI_28: u32 = 5158;
pub const XLINE_OPRA_PI_29: u32 = 5159;
pub const XLINE_OPRA_PI_30: u32 = 5160;
pub const XLINE_OPRA_PI_31: u32 = 5161;
pub const XLINE_OPRA_PI_32: u32 = 5162;
pub const XLINE_OPRA_PI_33: u32 = 5163;
pub const XLINE_OPRA_PI_34: u32 = 5164;
pub const XLINE_OPRA_PI_35: u32 = 5165;
pub const XLINE_OPRA_PI_36: u32 = 5166;
pub const XLINE_OPRA_PI_37: u32 = 5167;
pub const XLINE_OPRA_PI_38: u32 = 5168;
pub const XLINE_OPRA_PI_39: u32 = 5169;
pub const XLINE_OPRA_PI_40: u32 = 5170;
pub const XLINE_OPRA_PI_41: u32 = 5171;
pub const XLINE_OPRA_PI_42: u32 = 5172;
pub const XLINE_OPRA_PI_43: u32 = 5173;
pub const XLINE_OPRA_PI_44: u32 = 5174;
pub const XLINE_OPRA_PI_45: u32 = 5175;
pub const XLINE_OPRA_PI_46: u32 = 5176;
pub const XLINE_OPRA_PI_47: u32 = 5177;
pub const XLINE_OPRA_PI_48: u32 = 5178;
pub const XLINE_OPRA_PI_49: u32 = 5179;
pub const XLINE_OPRA_PI_50: u32 = 5180;
pub const XLINE_OPRA_PI_51: u32 = 5181;
pub const XLINE_OPRA_PI_52: u32 = 5182;
pub const XLINE_OPRA_PI_53: u32 = 5183;
pub const XLINE_OPRA_PI_54: u32 = 5184;
pub const XLINE_OPRA_PI_55: u32 = 5185;
pub const XLINE_OPRA_PI_56: u32 = 5186;
pub const XLINE_OPRA_PI_57: u32 = 5187;
pub const XLINE_OPRA_PI_58: u32 = 5188;
pub const XLINE_OPRA_PI_59: u32 = 5189;
pub const XLINE_OPRA_PI_60: u32 = 5190;
pub const XLINE_OPRA_PI_61: u32 = 5191;
pub const XLINE_OPRA_PI_62: u32 = 5192;
pub const XLINE_OPRA_PI_63: u32 = 5193;
pub const XLINE_OPRA_PI_64: u32 = 5194;
pub const XLINE_OPRA_PI_65: u32 = 5195;
pub const XLINE_OPRA_PI_66: u32 = 5196;
pub const XLINE_OPRA_PI_67: u32 = 5197;
pub const XLINE_OPRA_PI_68: u32 = 5198;
pub const XLINE_OPRA_PI_69: u32 = 5199;
pub const XLINE_OPRA_PI_70: u32 = 5200;
pub const XLINE_OPRA_PI_71: u32 = 5201;
pub const XLINE_OPRA_PI_72: u32 = 5202;
pub const XLINE_OPRA_PI_73: u32 = 5203;
pub const XLINE_OPRA_PI_74: u32 = 5204;
pub const XLINE_OPRA_PI_75: u32 = 5205;
pub const XLINE_OPRA_PI_76: u32 = 5206;
pub const XLINE_OPRA_PI_77: u32 = 5207;
pub const XLINE_OPRA_PI_78: u32 = 5208;
pub const XLINE_OPRA_PI_79: u32 = 5209;
pub const XLINE_OPRA_PI_80: u32 = 5210;
pub const XLINE_OPRA_PI_81: u32 = 5211;
pub const XLINE_OPRA_PI_82: u32 = 5212;
pub const XLINE_OPRA_PI_83: u32 = 5213;
pub const XLINE_OPRA_PI_84: u32 = 5214;
pub const XLINE_OPRA_PI_85: u32 = 5215;
pub const XLINE_OPRA_PI_86: u32 = 5216;
pub const XLINE_OPRA_PI_87: u32 = 5217;
pub const XLINE_OPRA_PI_88: u32 = 5218;
pub const XLINE_OPRA_PI_89: u32 = 5219;
pub const XLINE_OPRA_PI_90: u32 = 5220;
pub const XLINE_OPRA_PI_91: u32 = 5221;
pub const XLINE_OPRA_PI_92: u32 = 5222;
pub const XLINE_OPRA_PI_93: u32 = 5223;
pub const XLINE_OPRA_PI_94: u32 = 5224;
pub const XLINE_OPRA_PI_95: u32 = 5225;
pub const XLINE_OPRA_PI_96: u32 = 5226;
pub const XLINE_OPRAETH_PI_97: u32 = 5227;
pub const XLINE_OPRAETH_PI_98: u32 = 5228;
pub const XLINE_OPRAETH_PI_99: u32 = 5229;
pub const XLINE_OPRAETH_PI_100: u32 = 5230;
pub const XLINE_OPRAT_PI_1: u32 = 5235;
pub const XLINE_OPRAT_PI_2: u32 = 5236;
pub const XLINE_OPRAT_PI_3: u32 = 5237;
pub const XLINE_OPRAT_PI_4: u32 = 5238;
pub const XLINE_OPRAT_PI_5: u32 = 5239;
pub const XLINE_OPRAT_PI_6: u32 = 5240;
pub const XLINE_OPRAT_PI_7: u32 = 5241;
pub const XLINE_OPRAT_PI_8: u32 = 5242;
pub const XLINE_OPRAT_PI_9: u32 = 5243;
pub const XLINE_OPRAT_PI_10: u32 = 5244;
pub const XLINE_OPRAT_PI_11: u32 = 5245;
pub const XLINE_OPRAT_PI_12: u32 = 5246;
pub const XLINE_OPRAT_PI_13: u32 = 5247;
pub const XLINE_OPRAT_PI_14: u32 = 5248;
pub const XLINE_OPRAT_PI_15: u32 = 5249;
pub const XLINE_OPRAT_PI_16: u32 = 5250;
pub const XLINE_OPRAT_PI_17: u32 = 5251;
pub const XLINE_OPRAT_PI_18: u32 = 5252;
pub const XLINE_OPRAT_PI_19: u32 = 5253;
pub const XLINE_OPRAT_PI_20: u32 = 5254;
pub const XLINE_OPRAT_PI_21: u32 = 5255;
pub const XLINE_OPRAT_PI_22: u32 = 5256;
pub const XLINE_OPRAT_PI_23: u32 = 5257;
pub const XLINE_OPRAT_PI_24: u32 = 5258;
pub const XLINE_OPRAT_PI_25: u32 = 5259;
pub const XLINE_OPRAT_PI_26: u32 = 5260;
pub const XLINE_OPRAT_PI_27: u32 = 5261;
pub const XLINE_OPRAT_PI_28: u32 = 5262;
pub const XLINE_OPRAT_PI_29: u32 = 5263;
pub const XLINE_OPRAT_PI_30: u32 = 5264;
pub const XLINE_OPRAT_PI_31: u32 = 5265;
pub const XLINE_OPRAT_PI_32: u32 = 5266;
pub const XLINE_OPRAT_PI_33: u32 = 5267;
pub const XLINE_OPRAT_PI_34: u32 = 5268;
pub const XLINE_OPRAT_PI_35: u32 = 5269;
pub const XLINE_OPRAT_PI_36: u32 = 5270;
pub const XLINE_OPRAT_PI_37: u32 = 5271;
pub const XLINE_OPRAT_PI_38: u32 = 5272;
pub const XLINE_OPRAT_PI_39: u32 = 5273;
pub const XLINE_OPRAT_PI_40: u32 = 5274;
pub const XLINE_OPRAT_PI_41: u32 = 5275;
pub const XLINE_OPRAT_PI_42: u32 = 5276;
pub const XLINE_OPRAT_PI_43: u32 = 5277;
pub const XLINE_OPRAT_PI_44: u32 = 5278;
pub const XLINE_OPRAT_PI_45: u32 = 5279;
pub const XLINE_OPRAT_PI_46: u32 = 5280;
pub const XLINE_OPRAT_PI_47: u32 = 5281;
pub const XLINE_OPRAT_PI_48: u32 = 5282;
pub const XLINE_OPRAT_PI_49: u32 = 5283;
pub const XLINE_OPRAT_PI_50: u32 = 5284;
pub const XLINE_OPRAT_PI_51: u32 = 5285;
pub const XLINE_OPRAT_PI_52: u32 = 5286;
pub const XLINE_OPRAT_PI_53: u32 = 5287;
pub const XLINE_OPRAT_PI_54: u32 = 5288;
pub const XLINE_OPRAT_PI_55: u32 = 5289;
pub const XLINE_OPRAT_PI_56: u32 = 5290;
pub const XLINE_OPRAT_PI_57: u32 = 5291;
pub const XLINE_OPRAT_PI_58: u32 = 5292;
pub const XLINE_OPRAT_PI_59: u32 = 5293;
pub const XLINE_OPRAT_PI_60: u32 = 5294;
pub const XLINE_OPRAT_PI_61: u32 = 5295;
pub const XLINE_OPRAT_PI_62: u32 = 5296;
pub const XLINE_OPRAT_PI_63: u32 = 5297;
pub const XLINE_OPRAT_PI_64: u32 = 5298;
pub const XLINE_OPRAT_PI_65: u32 = 5299;
pub const XLINE_OPRAT_PI_66: u32 = 5300;
pub const XLINE_OPRAT_PI_67: u32 = 5301;
pub const XLINE_OPRAT_PI_68: u32 = 5302;
pub const XLINE_OPRAT_PI_69: u32 = 5303;
pub const XLINE_OPRAT_PI_70: u32 = 5304;
pub const XLINE_OPRAT_PI_71: u32 = 5305;
pub const XLINE_OPRAT_PI_72: u32 = 5306;
pub const XLINE_OPRAT_PI_73: u32 = 5307;
pub const XLINE_OPRAT_PI_74: u32 = 5308;
pub const XLINE_OPRAT_PI_75: u32 = 5309;
pub const XLINE_OPRAT_PI_76: u32 = 5310;
pub const XLINE_OPRAT_PI_77: u32 = 5311;
pub const XLINE_OPRAT_PI_78: u32 = 5312;
pub const XLINE_OPRAT_PI_79: u32 = 5313;
pub const XLINE_OPRAT_PI_80: u32 = 5314;
pub const XLINE_OPRAT_PI_81: u32 = 5315;
pub const XLINE_OPRAT_PI_82: u32 = 5316;
pub const XLINE_OPRAT_PI_83: u32 = 5317;
pub const XLINE_OPRAT_PI_84: u32 = 5318;
pub const XLINE_OPRAT_PI_85: u32 = 5319;
pub const XLINE_OPRAT_PI_86: u32 = 5320;
pub const XLINE_OPRAT_PI_87: u32 = 5321;
pub const XLINE_OPRAT_PI_88: u32 = 5322;
pub const XLINE_OPRAT_PI_89: u32 = 5323;
pub const XLINE_OPRAT_PI_90: u32 = 5324;
pub const XLINE_OPRAT_PI_91: u32 = 5325;
pub const XLINE_OPRAT_PI_92: u32 = 5326;
pub const XLINE_OPRAT_PI_93: u32 = 5327;
pub const XLINE_OPRAT_PI_94: u32 = 5328;
pub const XLINE_OPRAT_PI_95: u32 = 5329;
pub const XLINE_OPRAT_PI_96: u32 = 5330;
pub const XLINE_OPRAETHT_PI_97: u32 = 5331;
pub const XLINE_OPRAETHT_PI_98: u32 = 5332;
pub const XLINE_OPRAETHT_PI_99: u32 = 5333;
pub const XLINE_OPRAETHT_PI_100: u32 = 5334;
pub const XLINE_OPRA_1_CERT: u32 = 5339;
pub const XLINE_OPRA_2_CERT: u32 = 5340;
pub const XLINE_OPRA_3_CERT: u32 = 5341;
pub const XLINE_OPRA_4_CERT: u32 = 5342;
pub const XLINE_OPRA_5_CERT: u32 = 5343;
pub const XLINE_OPRA_6_CERT: u32 = 5344;
pub const XLINE_OPRA_7_CERT: u32 = 5345;
pub const XLINE_OPRA_8_CERT: u32 = 5346;
pub const XLINE_OPRA_9_CERT: u32 = 5347;
pub const XLINE_OPRA_10_CERT: u32 = 5348;
pub const XLINE_OPRA_11_CERT: u32 = 5349;
pub const XLINE_OPRA_12_CERT: u32 = 5350;
pub const XLINE_OPRAETH_1_CERT: u32 = 5351;
pub const XLINE_OPRAETH_2_CERT: u32 = 5352;
pub const XLINE_OPRAETH_3_CERT: u32 = 5353;
pub const XLINE_OPRAETH_4_CERT: u32 = 5354;
pub const XLINE_ISE_GEMINI: u32 = 5376;
pub const XLINE_GEM_DOM_S_1: u32 = 5377;
pub const XLINE_GEM_DOM_S_2: u32 = 5378;
pub const XLINE_GEM_DOM_S_3: u32 = 5379;
pub const XLINE_GEM_DOM_S_4: u32 = 5380;
pub const XLINE_GEM_DOM_S_5: u32 = 5381;
pub const XLINE_GEM_DOM_S_6: u32 = 5382;
pub const XLINE_GEM_DOM_S_7: u32 = 5383;
pub const XLINE_GEM_DOM_S_8: u32 = 5384;
pub const XLINE_GEM_DOM_S_9: u32 = 5385;
pub const XLINE_GEM_DOM_S_10: u32 = 5386;
pub const XLINE_GEM_DOM_S_11: u32 = 5387;
pub const XLINE_GEM_DOM_S_12: u32 = 5388;
pub const XLINE_GEM_DOM_S_13: u32 = 5389;
pub const XLINE_GEM_DOM_S_14: u32 = 5390;
pub const XLINE_GEM_DOM_S_15: u32 = 5391;
pub const XLINE_GEM_DOM_S_16: u32 = 5392;
pub const XLINE_GEM_DOM_S_17: u32 = 5393;
pub const XLINE_GEM_DOM_S_18: u32 = 5394;
pub const XLINE_GEM_DOM_S_19: u32 = 5395;
pub const XLINE_GEM_DOM_S_20: u32 = 5396;
pub const XLINE_GEM_DOM_S_21: u32 = 5397;
pub const XLINE_GEM_DOM_S_22: u32 = 5398;
pub const XLINE_GEM_DOM_S_23: u32 = 5399;
pub const XLINE_GEM_DOM_S_24: u32 = 5400;
pub const XLINE_GEM_DOM_S_25: u32 = 5401;
pub const XLINE_GEM_DOM_S_26: u32 = 5402;
pub const XLINE_GEM_DOM_S_27: u32 = 5403;
pub const XLINE_GEM_DOM_S_28: u32 = 5404;
pub const XLINE_GEM_DOM_S_29: u32 = 5405;
pub const XLINE_GEM_DOM_S_30: u32 = 5406;
pub const XLINE_GEM_DOM_S_31: u32 = 5407;
pub const XLINE_GEM_DOM_S_32: u32 = 5408;
pub const XLINE_GEM_DOM_S_33: u32 = 5409;
pub const XLINE_GEM_DOM_S_34: u32 = 5410;
pub const XLINE_GEM_DOM_S_35: u32 = 5411;
pub const XLINE_GEM_DOM_S_36: u32 = 5412;
pub const XLINE_GEM_DOM_S_37: u32 = 5413;
pub const XLINE_GEM_DOM_S_38: u32 = 5414;
pub const XLINE_GEM_DOM_S_39: u32 = 5415;
pub const XLINE_GEM_DOM_S_40: u32 = 5416;
pub const XLINE_GEM_DOM_S_41: u32 = 5417;
pub const XLINE_GEM_DOM_S_42: u32 = 5418;
pub const XLINE_GEM_DOM_S_43: u32 = 5419;
pub const XLINE_GEM_DOM_S_44: u32 = 5420;
pub const XLINE_GEM_DOM_S_45: u32 = 5421;
pub const XLINE_GEM_DOM_S_46: u32 = 5422;
pub const XLINE_GEM_DOM_S_47: u32 = 5423;
pub const XLINE_GEM_DOM_S_48: u32 = 5424;
pub const XLINE_GEM_DOM_S_49: u32 = 5425;
pub const XLINE_GEM_DOM_S_50: u32 = 5426;
pub const XLINE_GEM_DOM_S_51: u32 = 5427;
pub const XLINE_GEM_DOM_S_52: u32 = 5428;
pub const XLINE_GEM_DOM_S_53: u32 = 5429;
pub const XLINE_GEM_DOM_S_54: u32 = 5430;
pub const XLINE_GEM_DOM_S_55: u32 = 5431;
pub const XLINE_GEM_DOM_S_56: u32 = 5432;
pub const XLINE_GEM_DOM_S_57: u32 = 5433;
pub const XLINE_GEM_DOM_S_58: u32 = 5434;
pub const XLINE_GEM_DOM_S_59: u32 = 5435;
pub const XLINE_GEM_DOM_S_60: u32 = 5436;
pub const XLINE_GEM_DOM_S_101: u32 = 5437;
pub const XLINE_GEM_DOM_S_102: u32 = 5438;
pub const XLINE_GEM_DOM_S_103: u32 = 5439;
pub const XLINE_GEM_DOM_S_104: u32 = 5440;
pub const XLINE_GEM_DOM_S_105: u32 = 5441;
pub const XLINE_GEM_DOM_S_111: u32 = 5442;
pub const XLINE_GEM_DOM_S_112: u32 = 5443;
pub const XLINE_GEM_DOM_S_113: u32 = 5444;
pub const XLINE_GEM_DOM_S_114: u32 = 5445;
pub const XLINE_GEM_DOM_S_115: u32 = 5446;
pub const XLINE_GEM_DOM_S_121: u32 = 5447;
pub const XLINE_GEM_DOM_S_122: u32 = 5448;
pub const XLINE_GEM_DOM_S_123: u32 = 5449;
pub const XLINE_GEM_DOM_S_124: u32 = 5450;
pub const XLINE_GEM_DOM_S_125: u32 = 5451;
pub const XLINE_GEM_DOM_S_131: u32 = 5452;
pub const XLINE_GEM_DOM_S_132: u32 = 5453;
pub const XLINE_GEM_DOM_S_133: u32 = 5454;
pub const XLINE_GEM_DOM_S_134: u32 = 5455;
pub const XLINE_GEM_DOM_S_135: u32 = 5456;
pub const XLINE_GEM_DOM_S_141: u32 = 5457;
pub const XLINE_GEM_DOM_S_142: u32 = 5458;
pub const XLINE_GEM_DOM_S_143: u32 = 5459;
pub const XLINE_GEM_DOM_S_144: u32 = 5460;
pub const XLINE_GEM_DOM_S_145: u32 = 5461;
pub const XLINE_GEM_DOM_S_151: u32 = 5462;
pub const XLINE_GEM_DOM_S_152: u32 = 5463;
pub const XLINE_GEM_DOM_S_153: u32 = 5464;
pub const XLINE_GEM_DOM_S_154: u32 = 5465;
pub const XLINE_GEM_DOM_S_155: u32 = 5466;
pub const XLINE_GEM_TQ_S_1: u32 = 5467;
pub const XLINE_GEM_TQ_S_2: u32 = 5468;
pub const XLINE_GEM_TQ_S_3: u32 = 5469;
pub const XLINE_GEM_TQ_S_4: u32 = 5470;
pub const XLINE_GEM_TQ_S_5: u32 = 5471;
pub const XLINE_GEM_TQ_S_6: u32 = 5472;
pub const XLINE_GEM_TQ_S_7: u32 = 5473;
pub const XLINE_GEM_TQ_S_8: u32 = 5474;
pub const XLINE_GEM_TQ_S_9: u32 = 5475;
pub const XLINE_GEM_TQ_S_10: u32 = 5476;
pub const XLINE_GEM_TQ_S_11: u32 = 5477;
pub const XLINE_GEM_TQ_S_12: u32 = 5478;
pub const XLINE_GEM_TQ_S_13: u32 = 5479;
pub const XLINE_GEM_TQ_S_14: u32 = 5480;
pub const XLINE_GEM_TQ_S_15: u32 = 5481;
pub const XLINE_GEM_TQ_S_16: u32 = 5482;
pub const XLINE_GEM_TQ_S_17: u32 = 5483;
pub const XLINE_GEM_TQ_S_18: u32 = 5484;
pub const XLINE_GEM_TQ_S_19: u32 = 5485;
pub const XLINE_GEM_TQ_S_20: u32 = 5486;
pub const XLINE_GEM_TQ_S_21: u32 = 5487;
pub const XLINE_GEM_TQ_S_22: u32 = 5488;
pub const XLINE_GEM_TQ_S_23: u32 = 5489;
pub const XLINE_GEM_TQ_S_24: u32 = 5490;
pub const XLINE_GEM_TQ_S_25: u32 = 5491;
pub const XLINE_GEM_TQ_S_26: u32 = 5492;
pub const XLINE_GEM_TQ_S_27: u32 = 5493;
pub const XLINE_GEM_TQ_S_28: u32 = 5494;
pub const XLINE_GEM_TQ_S_29: u32 = 5495;
pub const XLINE_GEM_TQ_S_30: u32 = 5496;
pub const XLINE_GEM_TQ_S_31: u32 = 5497;
pub const XLINE_GEM_TQ_S_32: u32 = 5498;
pub const XLINE_GEM_TQ_S_33: u32 = 5499;
pub const XLINE_GEM_TQ_S_34: u32 = 5500;
pub const XLINE_GEM_TQ_S_35: u32 = 5501;
pub const XLINE_GEM_TQ_S_36: u32 = 5502;
pub const XLINE_GEM_TQ_S_37: u32 = 5503;
pub const XLINE_GEM_TQ_S_38: u32 = 5504;
pub const XLINE_GEM_TQ_S_39: u32 = 5505;
pub const XLINE_GEM_TQ_S_40: u32 = 5506;
pub const XLINE_GEM_TQ_S_41: u32 = 5507;
pub const XLINE_GEM_TQ_S_42: u32 = 5508;
pub const XLINE_GEM_TQ_S_43: u32 = 5509;
pub const XLINE_GEM_TQ_S_44: u32 = 5510;
pub const XLINE_GEM_TQ_S_45: u32 = 5511;
pub const XLINE_GEM_TQ_S_46: u32 = 5512;
pub const XLINE_GEM_TQ_S_47: u32 = 5513;
pub const XLINE_GEM_TQ_S_48: u32 = 5514;
pub const XLINE_GEM_TQ_S_49: u32 = 5515;
pub const XLINE_GEM_TQ_S_50: u32 = 5516;
pub const XLINE_GEM_TQ_S_51: u32 = 5517;
pub const XLINE_GEM_TQ_S_52: u32 = 5518;
pub const XLINE_GEM_TQ_S_53: u32 = 5519;
pub const XLINE_GEM_TQ_S_54: u32 = 5520;
pub const XLINE_GEM_TQ_S_55: u32 = 5521;
pub const XLINE_GEM_TQ_S_56: u32 = 5522;
pub const XLINE_GEM_TQ_S_57: u32 = 5523;
pub const XLINE_GEM_TQ_S_58: u32 = 5524;
pub const XLINE_GEM_TQ_S_59: u32 = 5525;
pub const XLINE_GEM_TQ_S_60: u32 = 5526;
pub const XLINE_GEM_TQ_S_101: u32 = 5527;
pub const XLINE_GEM_TQ_S_102: u32 = 5528;
pub const XLINE_GEM_TQ_S_103: u32 = 5529;
pub const XLINE_GEM_TQ_S_104: u32 = 5530;
pub const XLINE_GEM_TQ_S_105: u32 = 5531;
pub const XLINE_GEM_TQ_S_111: u32 = 5532;
pub const XLINE_GEM_TQ_S_112: u32 = 5533;
pub const XLINE_GEM_TQ_S_113: u32 = 5534;
pub const XLINE_GEM_TQ_S_114: u32 = 5535;
pub const XLINE_GEM_TQ_S_115: u32 = 5536;
pub const XLINE_GEM_TQ_S_121: u32 = 5537;
pub const XLINE_GEM_TQ_S_122: u32 = 5538;
pub const XLINE_GEM_TQ_S_123: u32 = 5539;
pub const XLINE_GEM_TQ_S_124: u32 = 5540;
pub const XLINE_GEM_TQ_S_125: u32 = 5541;
pub const XLINE_GEM_TQ_S_131: u32 = 5542;
pub const XLINE_GEM_TQ_S_132: u32 = 5543;
pub const XLINE_GEM_TQ_S_133: u32 = 5544;
pub const XLINE_GEM_TQ_S_134: u32 = 5545;
pub const XLINE_GEM_TQ_S_135: u32 = 5546;
pub const XLINE_GEM_TQ_S_141: u32 = 5547;
pub const XLINE_GEM_TQ_S_142: u32 = 5548;
pub const XLINE_GEM_TQ_S_143: u32 = 5549;
pub const XLINE_GEM_TQ_S_144: u32 = 5550;
pub const XLINE_GEM_TQ_S_145: u32 = 5551;
pub const XLINE_GEM_TQ_S_151: u32 = 5552;
pub const XLINE_GEM_TQ_S_152: u32 = 5553;
pub const XLINE_GEM_TQ_S_153: u32 = 5554;
pub const XLINE_GEM_TQ_S_154: u32 = 5555;
pub const XLINE_GEM_TQ_S_155: u32 = 5556;
pub const XLINE_GEM_ORD_S_1: u32 = 5557;
pub const XLINE_GEM_ORD_S_2: u32 = 5558;
pub const XLINE_GEM_ORD_S_3: u32 = 5559;
pub const XLINE_GEM_ORD_S_4: u32 = 5560;
pub const XLINE_GEM_ORD_S_5: u32 = 5561;
pub const XLINE_GEM_ORD_S_6: u32 = 5562;
pub const XLINE_GEM_ORD_S_7: u32 = 5563;
pub const XLINE_GEM_ORD_S_8: u32 = 5564;
pub const XLINE_GEM_ORD_S_9: u32 = 5565;
pub const XLINE_GEM_ORD_S_10: u32 = 5566;
pub const XLINE_GEM_ORD_S_11: u32 = 5567;
pub const XLINE_GEM_ORD_S_12: u32 = 5568;
pub const XLINE_GEM_ORD_S_13: u32 = 5569;
pub const XLINE_GEM_ORD_S_14: u32 = 5570;
pub const XLINE_GEM_ORD_S_15: u32 = 5571;
pub const XLINE_GEM_ORD_S_16: u32 = 5572;
pub const XLINE_GEM_ORD_S_17: u32 = 5573;
pub const XLINE_GEM_ORD_S_18: u32 = 5574;
pub const XLINE_GEM_ORD_S_19: u32 = 5575;
pub const XLINE_GEM_ORD_S_20: u32 = 5576;
pub const XLINE_GEM_ORD_S_21: u32 = 5577;
pub const XLINE_GEM_ORD_S_22: u32 = 5578;
pub const XLINE_GEM_ORD_S_23: u32 = 5579;
pub const XLINE_GEM_ORD_S_24: u32 = 5580;
pub const XLINE_GEM_ORD_S_25: u32 = 5581;
pub const XLINE_GEM_ORD_S_26: u32 = 5582;
pub const XLINE_GEM_ORD_S_27: u32 = 5583;
pub const XLINE_GEM_ORD_S_28: u32 = 5584;
pub const XLINE_GEM_ORD_S_29: u32 = 5585;
pub const XLINE_GEM_ORD_S_30: u32 = 5586;
pub const XLINE_GEM_ORD_S_31: u32 = 5587;
pub const XLINE_GEM_ORD_S_32: u32 = 5588;
pub const XLINE_GEM_ORD_S_33: u32 = 5589;
pub const XLINE_GEM_ORD_S_34: u32 = 5590;
pub const XLINE_GEM_ORD_S_35: u32 = 5591;
pub const XLINE_GEM_ORD_S_36: u32 = 5592;
pub const XLINE_GEM_ORD_S_37: u32 = 5593;
pub const XLINE_GEM_ORD_S_38: u32 = 5594;
pub const XLINE_GEM_ORD_S_39: u32 = 5595;
pub const XLINE_GEM_ORD_S_40: u32 = 5596;
pub const XLINE_GEM_ORD_S_41: u32 = 5597;
pub const XLINE_GEM_ORD_S_42: u32 = 5598;
pub const XLINE_GEM_ORD_S_43: u32 = 5599;
pub const XLINE_GEM_ORD_S_44: u32 = 5600;
pub const XLINE_GEM_ORD_S_45: u32 = 5601;
pub const XLINE_GEM_ORD_S_46: u32 = 5602;
pub const XLINE_GEM_ORD_S_47: u32 = 5603;
pub const XLINE_GEM_ORD_S_48: u32 = 5604;
pub const XLINE_GEM_ORD_S_49: u32 = 5605;
pub const XLINE_GEM_ORD_S_50: u32 = 5606;
pub const XLINE_GEM_ORD_S_51: u32 = 5607;
pub const XLINE_GEM_ORD_S_52: u32 = 5608;
pub const XLINE_GEM_ORD_S_53: u32 = 5609;
pub const XLINE_GEM_ORD_S_54: u32 = 5610;
pub const XLINE_GEM_ORD_S_55: u32 = 5611;
pub const XLINE_GEM_ORD_S_56: u32 = 5612;
pub const XLINE_GEM_ORD_S_57: u32 = 5613;
pub const XLINE_GEM_ORD_S_58: u32 = 5614;
pub const XLINE_GEM_ORD_S_59: u32 = 5615;
pub const XLINE_GEM_ORD_S_60: u32 = 5616;
pub const XLINE_GEM_ORD_S_101: u32 = 5617;
pub const XLINE_GEM_ORD_S_102: u32 = 5618;
pub const XLINE_GEM_ORD_S_103: u32 = 5619;
pub const XLINE_GEM_ORD_S_104: u32 = 5620;
pub const XLINE_GEM_ORD_S_105: u32 = 5621;
pub const XLINE_GEM_ORD_S_111: u32 = 5622;
pub const XLINE_GEM_ORD_S_112: u32 = 5623;
pub const XLINE_GEM_ORD_S_113: u32 = 5624;
pub const XLINE_GEM_ORD_S_114: u32 = 5625;
pub const XLINE_GEM_ORD_S_115: u32 = 5626;
pub const XLINE_GEM_ORD_S_121: u32 = 5627;
pub const XLINE_GEM_ORD_S_122: u32 = 5628;
pub const XLINE_GEM_ORD_S_123: u32 = 5629;
pub const XLINE_GEM_ORD_S_124: u32 = 5630;
pub const XLINE_GEM_ORD_S_125: u32 = 5631;
pub const XLINE_GEM_ORD_S_131: u32 = 5632;
pub const XLINE_GEM_ORD_S_132: u32 = 5633;
pub const XLINE_GEM_ORD_S_133: u32 = 5634;
pub const XLINE_GEM_ORD_S_134: u32 = 5635;
pub const XLINE_GEM_ORD_S_135: u32 = 5636;
pub const XLINE_GEM_ORD_S_141: u32 = 5637;
pub const XLINE_GEM_ORD_S_142: u32 = 5638;
pub const XLINE_GEM_ORD_S_143: u32 = 5639;
pub const XLINE_GEM_ORD_S_144: u32 = 5640;
pub const XLINE_GEM_ORD_S_145: u32 = 5641;
pub const XLINE_GEM_ORD_S_151: u32 = 5642;
pub const XLINE_GEM_ORD_S_152: u32 = 5643;
pub const XLINE_GEM_ORD_S_153: u32 = 5644;
pub const XLINE_GEM_ORD_S_154: u32 = 5645;
pub const XLINE_GEM_ORD_S_155: u32 = 5646;
pub const XLINE_GEM_POF_S_1: u32 = 5647;
pub const XLINE_GEM_POF_S_2: u32 = 5648;
pub const XLINE_GEM_POF_S_3: u32 = 5649;
pub const XLINE_GEM_POF_S_4: u32 = 5650;
pub const XLINE_GEM_POF_S_5: u32 = 5651;
pub const XLINE_GEM_POF_S_6: u32 = 5652;
pub const XLINE_GEM_POF_S_7: u32 = 5653;
pub const XLINE_GEM_POF_S_8: u32 = 5654;
pub const XLINE_GEM_POF_S_9: u32 = 5655;
pub const XLINE_GEM_POF_S_10: u32 = 5656;
pub const XLINE_GEM_POF_S_11: u32 = 5657;
pub const XLINE_GEM_POF_S_12: u32 = 5658;
pub const XLINE_GEM_POF_S_13: u32 = 5659;
pub const XLINE_GEM_POF_S_14: u32 = 5660;
pub const XLINE_GEM_POF_S_15: u32 = 5661;
pub const XLINE_GEM_POF_S_16: u32 = 5662;
pub const XLINE_GEM_POF_S_17: u32 = 5663;
pub const XLINE_GEM_POF_S_18: u32 = 5664;
pub const XLINE_GEM_POF_S_19: u32 = 5665;
pub const XLINE_GEM_POF_S_20: u32 = 5666;
pub const XLINE_GEM_POF_S_21: u32 = 5667;
pub const XLINE_GEM_POF_S_22: u32 = 5668;
pub const XLINE_GEM_POF_S_23: u32 = 5669;
pub const XLINE_GEM_POF_S_24: u32 = 5670;
pub const XLINE_GEM_POF_S_25: u32 = 5671;
pub const XLINE_GEM_POF_S_26: u32 = 5672;
pub const XLINE_GEM_POF_S_27: u32 = 5673;
pub const XLINE_GEM_POF_S_28: u32 = 5674;
pub const XLINE_GEM_POF_S_29: u32 = 5675;
pub const XLINE_GEM_POF_S_30: u32 = 5676;
pub const XLINE_GEM_POF_S_31: u32 = 5677;
pub const XLINE_GEM_POF_S_32: u32 = 5678;
pub const XLINE_GEM_POF_S_33: u32 = 5679;
pub const XLINE_GEM_POF_S_34: u32 = 5680;
pub const XLINE_GEM_POF_S_35: u32 = 5681;
pub const XLINE_GEM_POF_S_36: u32 = 5682;
pub const XLINE_GEM_POF_S_37: u32 = 5683;
pub const XLINE_GEM_POF_S_38: u32 = 5684;
pub const XLINE_GEM_POF_S_39: u32 = 5685;
pub const XLINE_GEM_POF_S_40: u32 = 5686;
pub const XLINE_GEM_POF_S_41: u32 = 5687;
pub const XLINE_GEM_POF_S_42: u32 = 5688;
pub const XLINE_GEM_POF_S_43: u32 = 5689;
pub const XLINE_GEM_POF_S_44: u32 = 5690;
pub const XLINE_GEM_POF_S_45: u32 = 5691;
pub const XLINE_GEM_POF_S_46: u32 = 5692;
pub const XLINE_GEM_POF_S_47: u32 = 5693;
pub const XLINE_GEM_POF_S_48: u32 = 5694;
pub const XLINE_GEM_POF_S_49: u32 = 5695;
pub const XLINE_GEM_POF_S_50: u32 = 5696;
pub const XLINE_GEM_POF_S_51: u32 = 5697;
pub const XLINE_GEM_POF_S_52: u32 = 5698;
pub const XLINE_GEM_POF_S_53: u32 = 5699;
pub const XLINE_GEM_POF_S_54: u32 = 5700;
pub const XLINE_GEM_POF_S_55: u32 = 5701;
pub const XLINE_GEM_POF_S_56: u32 = 5702;
pub const XLINE_GEM_POF_S_57: u32 = 5703;
pub const XLINE_GEM_POF_S_58: u32 = 5704;
pub const XLINE_GEM_POF_S_59: u32 = 5705;
pub const XLINE_GEM_POF_S_60: u32 = 5706;
pub const XLINE_GEM_POF_S_101: u32 = 5707;
pub const XLINE_GEM_POF_S_102: u32 = 5708;
pub const XLINE_GEM_POF_S_103: u32 = 5709;
pub const XLINE_GEM_POF_S_104: u32 = 5710;
pub const XLINE_GEM_POF_S_105: u32 = 5711;
pub const XLINE_GEM_POF_S_111: u32 = 5712;
pub const XLINE_GEM_POF_S_112: u32 = 5713;
pub const XLINE_GEM_POF_S_113: u32 = 5714;
pub const XLINE_GEM_POF_S_114: u32 = 5715;
pub const XLINE_GEM_POF_S_115: u32 = 5716;
pub const XLINE_GEM_POF_S_121: u32 = 5717;
pub const XLINE_GEM_POF_S_122: u32 = 5718;
pub const XLINE_GEM_POF_S_123: u32 = 5719;
pub const XLINE_GEM_POF_S_124: u32 = 5720;
pub const XLINE_GEM_POF_S_125: u32 = 5721;
pub const XLINE_GEM_POF_S_131: u32 = 5722;
pub const XLINE_GEM_POF_S_132: u32 = 5723;
pub const XLINE_GEM_POF_S_133: u32 = 5724;
pub const XLINE_GEM_POF_S_134: u32 = 5725;
pub const XLINE_GEM_POF_S_135: u32 = 5726;
pub const XLINE_GEM_POF_S_141: u32 = 5727;
pub const XLINE_GEM_POF_S_142: u32 = 5728;
pub const XLINE_GEM_POF_S_143: u32 = 5729;
pub const XLINE_GEM_POF_S_144: u32 = 5730;
pub const XLINE_GEM_POF_S_145: u32 = 5731;
pub const XLINE_GEM_POF_S_151: u32 = 5732;
pub const XLINE_GEM_POF_S_152: u32 = 5733;
pub const XLINE_GEM_POF_S_153: u32 = 5734;
pub const XLINE_GEM_POF_S_154: u32 = 5735;
pub const XLINE_GEM_POF_S_155: u32 = 5736;
pub const XLINE_GEM_TRD_S_1: u32 = 5737;
pub const XLINE_GEM_TRD_S_2: u32 = 5738;
pub const XLINE_GEM_TRD_S_3: u32 = 5739;
pub const XLINE_GEM_TRD_S_4: u32 = 5740;
pub const XLINE_GEM_TRD_S_5: u32 = 5741;
pub const XLINE_GEM_TRD_S_6: u32 = 5742;
pub const XLINE_GEM_TRD_S_7: u32 = 5743;
pub const XLINE_GEM_TRD_S_8: u32 = 5744;
pub const XLINE_GEM_TRD_S_9: u32 = 5745;
pub const XLINE_GEM_TRD_S_10: u32 = 5746;
pub const XLINE_GEM_TRD_S_11: u32 = 5747;
pub const XLINE_GEM_TRD_S_12: u32 = 5748;
pub const XLINE_GEM_TRD_S_13: u32 = 5749;
pub const XLINE_GEM_TRD_S_14: u32 = 5750;
pub const XLINE_GEM_TRD_S_15: u32 = 5751;
pub const XLINE_GEM_TRD_S_16: u32 = 5752;
pub const XLINE_GEM_TRD_S_17: u32 = 5753;
pub const XLINE_GEM_TRD_S_18: u32 = 5754;
pub const XLINE_GEM_TRD_S_19: u32 = 5755;
pub const XLINE_GEM_TRD_S_20: u32 = 5756;
pub const XLINE_GEM_TRD_S_21: u32 = 5757;
pub const XLINE_GEM_TRD_S_22: u32 = 5758;
pub const XLINE_GEM_TRD_S_23: u32 = 5759;
pub const XLINE_GEM_TRD_S_24: u32 = 5760;
pub const XLINE_GEM_TRD_S_25: u32 = 5761;
pub const XLINE_GEM_TRD_S_26: u32 = 5762;
pub const XLINE_GEM_TRD_S_27: u32 = 5763;
pub const XLINE_GEM_TRD_S_28: u32 = 5764;
pub const XLINE_GEM_TRD_S_29: u32 = 5765;
pub const XLINE_GEM_TRD_S_30: u32 = 5766;
pub const XLINE_GEM_TRD_S_31: u32 = 5767;
pub const XLINE_GEM_TRD_S_32: u32 = 5768;
pub const XLINE_GEM_TRD_S_33: u32 = 5769;
pub const XLINE_GEM_TRD_S_34: u32 = 5770;
pub const XLINE_GEM_TRD_S_35: u32 = 5771;
pub const XLINE_GEM_TRD_S_36: u32 = 5772;
pub const XLINE_GEM_TRD_S_37: u32 = 5773;
pub const XLINE_GEM_TRD_S_38: u32 = 5774;
pub const XLINE_GEM_TRD_S_39: u32 = 5775;
pub const XLINE_GEM_TRD_S_40: u32 = 5776;
pub const XLINE_GEM_TRD_S_41: u32 = 5777;
pub const XLINE_GEM_TRD_S_42: u32 = 5778;
pub const XLINE_GEM_TRD_S_43: u32 = 5779;
pub const XLINE_GEM_TRD_S_44: u32 = 5780;
pub const XLINE_GEM_TRD_S_45: u32 = 5781;
pub const XLINE_GEM_TRD_S_46: u32 = 5782;
pub const XLINE_GEM_TRD_S_47: u32 = 5783;
pub const XLINE_GEM_TRD_S_48: u32 = 5784;
pub const XLINE_GEM_TRD_S_49: u32 = 5785;
pub const XLINE_GEM_TRD_S_50: u32 = 5786;
pub const XLINE_GEM_TRD_S_51: u32 = 5787;
pub const XLINE_GEM_TRD_S_52: u32 = 5788;
pub const XLINE_GEM_TRD_S_53: u32 = 5789;
pub const XLINE_GEM_TRD_S_54: u32 = 5790;
pub const XLINE_GEM_TRD_S_55: u32 = 5791;
pub const XLINE_GEM_TRD_S_56: u32 = 5792;
pub const XLINE_GEM_TRD_S_57: u32 = 5793;
pub const XLINE_GEM_TRD_S_58: u32 = 5794;
pub const XLINE_GEM_TRD_S_59: u32 = 5795;
pub const XLINE_GEM_TRD_S_60: u32 = 5796;
pub const XLINE_GEM_TRD_S_101: u32 = 5797;
pub const XLINE_GEM_TRD_S_102: u32 = 5798;
pub const XLINE_GEM_TRD_S_103: u32 = 5799;
pub const XLINE_GEM_TRD_S_104: u32 = 5800;
pub const XLINE_GEM_TRD_S_105: u32 = 5801;
pub const XLINE_GEM_TRD_S_111: u32 = 5802;
pub const XLINE_GEM_TRD_S_112: u32 = 5803;
pub const XLINE_GEM_TRD_S_113: u32 = 5804;
pub const XLINE_GEM_TRD_S_114: u32 = 5805;
pub const XLINE_GEM_TRD_S_115: u32 = 5806;
pub const XLINE_GEM_TRD_S_121: u32 = 5807;
pub const XLINE_GEM_TRD_S_122: u32 = 5808;
pub const XLINE_GEM_TRD_S_123: u32 = 5809;
pub const XLINE_GEM_TRD_S_124: u32 = 5810;
pub const XLINE_GEM_TRD_S_125: u32 = 5811;
pub const XLINE_GEM_TRD_S_131: u32 = 5812;
pub const XLINE_GEM_TRD_S_132: u32 = 5813;
pub const XLINE_GEM_TRD_S_133: u32 = 5814;
pub const XLINE_GEM_TRD_S_134: u32 = 5815;
pub const XLINE_GEM_TRD_S_135: u32 = 5816;
pub const XLINE_GEM_TRD_S_141: u32 = 5817;
pub const XLINE_GEM_TRD_S_142: u32 = 5818;
pub const XLINE_GEM_TRD_S_143: u32 = 5819;
pub const XLINE_GEM_TRD_S_144: u32 = 5820;
pub const XLINE_GEM_TRD_S_145: u32 = 5821;
pub const XLINE_GEM_TRD_S_151: u32 = 5822;
pub const XLINE_GEM_TRD_S_152: u32 = 5823;
pub const XLINE_GEM_TRD_S_153: u32 = 5824;
pub const XLINE_GEM_TRD_S_154: u32 = 5825;
pub const XLINE_GEM_TRD_S_155: u32 = 5826;
pub const XLINE_GEM_ORD_C_1: u32 = 5827;
pub const XLINE_GEM_ORD_C_2: u32 = 5828;
pub const XLINE_GEM_ORD_C_3: u32 = 5829;
pub const XLINE_GEM_ORD_C_4: u32 = 5830;
pub const XLINE_GEM_ORD_C_5: u32 = 5831;
pub const XLINE_GEM_ORD_C_6: u32 = 5832;
pub const XLINE_GEM_ORD_C_7: u32 = 5833;
pub const XLINE_GEM_ORD_C_8: u32 = 5834;
pub const XLINE_GEM_ORD_C_9: u32 = 5835;
pub const XLINE_GEM_ORD_C_10: u32 = 5836;
pub const XLINE_GEM_ORD_C_11: u32 = 5837;
pub const XLINE_GEM_ORD_C_12: u32 = 5838;
pub const XLINE_GEM_ORD_C_13: u32 = 5839;
pub const XLINE_GEM_ORD_C_14: u32 = 5840;
pub const XLINE_GEM_ORD_C_15: u32 = 5841;
pub const XLINE_GEM_TQ_C_1: u32 = 5842;
pub const XLINE_GEM_TQ_C_2: u32 = 5843;
pub const XLINE_GEM_TQ_C_3: u32 = 5844;
pub const XLINE_GEM_TQ_C_4: u32 = 5845;
pub const XLINE_GEM_TQ_C_5: u32 = 5846;
pub const XLINE_GEM_TQ_C_6: u32 = 5847;
pub const XLINE_GEM_TQ_C_7: u32 = 5848;
pub const XLINE_GEM_TQ_C_8: u32 = 5849;
pub const XLINE_GEM_TQ_C_9: u32 = 5850;
pub const XLINE_GEM_TQ_C_10: u32 = 5851;
pub const XLINE_GEM_TQ_C_11: u32 = 5852;
pub const XLINE_GEM_TQ_C_12: u32 = 5853;
pub const XLINE_GEM_TQ_C_13: u32 = 5854;
pub const XLINE_GEM_TQ_C_14: u32 = 5855;
pub const XLINE_GEM_TQ_C_15: u32 = 5856;
pub const XLINE_GEM_TRD_C_2: u32 = 5857;
pub const XLINE_GEM_TRD_C_3: u32 = 5858;
pub const XLINE_GEM_TRD_C_4: u32 = 5859;
pub const XLINE_GEM_TRD_C_5: u32 = 5860;
pub const XLINE_GEM_TRD_C_6: u32 = 5861;
pub const XLINE_GEM_TRD_C_7: u32 = 5862;
pub const XLINE_GEM_TRD_C_8: u32 = 5863;
pub const XLINE_GEM_TRD_C_9: u32 = 5864;
pub const XLINE_GEM_TRD_C_10: u32 = 5865;
pub const XLINE_GEM_TRD_C_11: u32 = 5866;
pub const XLINE_GEM_TRD_C_12: u32 = 5867;
pub const XLINE_GEM_TRD_C_13: u32 = 5868;
pub const XLINE_GEM_TRD_C_14: u32 = 5869;
pub const XLINE_GEM_TRD_C_15: u32 = 5870;
pub const XLINE_GEM_DOM_C_2: u32 = 5871;
pub const XLINE_GEM_DOM_C_3: u32 = 5872;
pub const XLINE_GEM_DOM_C_4: u32 = 5873;
pub const XLINE_GEM_DOM_C_5: u32 = 5874;
pub const XLINE_GEM_DOM_C_6: u32 = 5875;
pub const XLINE_GEM_DOM_C_7: u32 = 5876;
pub const XLINE_GEM_DOM_C_8: u32 = 5877;
pub const XLINE_GEM_DOM_C_9: u32 = 5878;
pub const XLINE_GEM_DOM_C_10: u32 = 5879;
pub const XLINE_GEM_DOM_C_11: u32 = 5880;
pub const XLINE_GEM_DOM_C_12: u32 = 5881;
pub const XLINE_GEM_DOM_C_13: u32 = 5882;
pub const XLINE_GEM_DOM_C_14: u32 = 5883;
pub const XLINE_GEM_DOM_C_15: u32 = 5884;
pub const XLINE_GEM_POF_C_1: u32 = 5885;
pub const XLINE_GEM_POF_C_2: u32 = 5886;
pub const XLINE_GEM_POF_C_3: u32 = 5887;
pub const XLINE_GEM_POF_C_4: u32 = 5888;
pub const XLINE_GEM_POF_C_5: u32 = 5889;
pub const XLINE_GEM_POF_C_6: u32 = 5890;
pub const XLINE_GEM_POF_C_7: u32 = 5891;
pub const XLINE_GEM_POF_C_8: u32 = 5892;
pub const XLINE_GEM_POF_C_9: u32 = 5893;
pub const XLINE_GEM_POF_C_10: u32 = 5894;
pub const XLINE_GEM_POF_C_11: u32 = 5895;
pub const XLINE_GEM_POF_C_12: u32 = 5896;
pub const XLINE_GEM_POF_C_13: u32 = 5897;
pub const XLINE_GEM_POF_C_14: u32 = 5898;
pub const XLINE_GEM_POF_C_15: u32 = 5899;
pub const XLINE_GEM_REF_SNAP: u32 = 5900;
pub const XLINE_GEM_REF_INC: u32 = 5901;
pub const XLINE_GEM_TRD_C_1: u32 = 5902;
pub const XLINE_GEM_DOM_C_1: u32 = 5903;
pub const XLINE_SIP1_XTIGTWY_01: u32 = 5904;
pub const XLINE_SIP1_XTIGTWY_02: u32 = 5905;
pub const XLINE_SIP1_XTIGTWY_03: u32 = 5906;
pub const XLINE_SIP1_XTIGTWY_04: u32 = 5907;
pub const XLINE_SIP1_XTIGTWY_05: u32 = 5908;
pub const XLINE_SIP1_XTIGTWY_06: u32 = 5909;
pub const XLINE_SIP1_XTIGTWY_07: u32 = 5910;
pub const XLINE_SIP1_XTIGTWY_08: u32 = 5911;
pub const XLINE_SIP1_XTIGTWY_09: u32 = 5912;
pub const XLINE_SIP1_XTIGTWY_10: u32 = 5913;
pub const XLINE_SIP1_XTIGTWY_11: u32 = 5914;
pub const XLINE_SIP1_XTIGTWY_12: u32 = 5915;
pub const XLINE_SIP1_XTIGTWY_13: u32 = 5916;
pub const XLINE_SIP1_XTIGTWY_14: u32 = 5917;
pub const XLINE_SIP1_XTIGTWY_15: u32 = 5918;
pub const XLINE_SIP1_XTIGTWY_16: u32 = 5919;
pub const XLINE_SIP1_XTIGTWY_17: u32 = 5920;
pub const XLINE_SIP1_XTIGTWY_18: u32 = 5921;
pub const XLINE_SIP1_XTIGTWY_19: u32 = 5922;
pub const XLINE_SIP1_XTIGTWY_20: u32 = 5923;
pub const XLINE_SIP1_XTIGTWY_21: u32 = 5924;
pub const XLINE_SIP1_XTIGTWY_22: u32 = 5925;
pub const XLINE_SIP1_XTIGTWY_23: u32 = 5926;
pub const XLINE_SIP1_XTIGTWY_24: u32 = 5927;
pub const XLINE_SIP1_XTIGTWY_25: u32 = 5928;
pub const XLINE_SIP1_XTIGTWY_26: u32 = 5929;
pub const XLINE_SIP1_XTIGTWY_27: u32 = 5930;
pub const XLINE_SIP1_XTIGTWY_28: u32 = 5931;
pub const XLINE_SIP1_XTIGTWY_29: u32 = 5932;
pub const XLINE_SIP1_XTIGTWY_30: u32 = 5933;
pub const XLINE_GEM_POS: u32 = 5952;
pub const XLINE_GEM_POS2: u32 = 5953;
pub const XLINE_GEM_POC: u32 = 5954;
pub const XLINE_GEM_POC2: u32 = 5955;
pub const XLINE_GEM_TBS: u32 = 5956;
pub const XLINE_GEM_TBS2: u32 = 5957;
pub const XLINE_GEM_TBC: u32 = 5958;
pub const XLINE_GEM_TBC2: u32 = 5959;
pub const XLINE_GEM_TIS: u32 = 5960;
pub const XLINE_GEM_TIS2: u32 = 5961;
pub const XLINE_GEM_TIC: u32 = 5962;
pub const XLINE_GEM_TIC2: u32 = 5963;
pub const XLINE_GEM_PDS: u32 = 5964;
pub const XLINE_GEM_PDS2: u32 = 5965;
pub const XLINE_GEM_PDC: u32 = 5966;
pub const XLINE_GEM_PDC2: u32 = 5967;
pub const XLINE_GEM_OBS: u32 = 5968;
pub const XLINE_GEM_OBS2: u32 = 5969;
pub const XLINE_GEM_OBC: u32 = 5970;
pub const XLINE_GEM_OBC2: u32 = 5971;
pub const XLINE_PXTV_SYMMGR: u32 = 6400;
pub const XLINE_BXTV_SYMMGR: u32 = 6401;
pub const XLINE_TV_SYMMGR: u32 = 6402;
pub const XLINE_PXTV_50: u32 = 6403;
pub const XLINE_BXTV_50: u32 = 6404;
pub const XLINE_TV_50: u32 = 6405;
pub const XLINE_TV_50_SPLIT: u32 = 6406;
pub const XLINE_TV_50_SYM00: u32 = 6407;
pub const XLINE_TV_50_SYM01: u32 = 6408;
pub const XLINE_TV_50_SYM02: u32 = 6409;
pub const XLINE_TV_50_SYM03: u32 = 6410;
pub const XLINE_TV_50_SYM04: u32 = 6411;
pub const XLINE_TV_50_SYM05: u32 = 6412;
pub const XLINE_TV_50_SYM06: u32 = 6413;
pub const XLINE_TV_50_SYM07: u32 = 6414;
pub const XLINE_TV_50_SYM08: u32 = 6415;
pub const XLINE_TV_50_SYM09: u32 = 6416;
pub const XLINE_TV_50_SYM10: u32 = 6417;
pub const XLINE_TV_50_SYM11: u32 = 6418;
pub const XLINE_TV_50_SYM12: u32 = 6419;
pub const XLINE_TV_50_SYM13: u32 = 6420;
pub const XLINE_TV_50_SYM14: u32 = 6421;
pub const XLINE_TV_50_SYM15: u32 = 6422;
pub const XLINE_TV_50_SYM16: u32 = 6423;
pub const XLINE_TV_50_SYM17: u32 = 6424;
pub const XLINE_TV_50_SYM18: u32 = 6425;
pub const XLINE_TV_50_SYM19: u32 = 6426;
pub const XLINE_TV_50_SYM20: u32 = 6427;
pub const XLINE_TV_50_SYM21: u32 = 6428;
pub const XLINE_TV_50_SYM22: u32 = 6429;
pub const XLINE_TV_50_SYM23: u32 = 6430;
pub const XLINE_TV_50_SYM24: u32 = 6431;
pub const XLINE_TV_50_SYM25: u32 = 6432;
pub const XLINE_TV_50_SYM26: u32 = 6433;
pub const XLINE_TV_50_SYM27: u32 = 6434;
pub const XLINE_TV_50_SYM28: u32 = 6435;
pub const XLINE_TV_50_SYM29: u32 = 6436;
pub const XLINE_TV_50_SYM30: u32 = 6437;
pub const XLINE_TV_50_SYM31: u32 = 6438;
pub const XLINE_PXTV_50_SPLIT: u32 = 6439;
pub const XLINE_PXTV_50_SYM00: u32 = 6440;
pub const XLINE_PXTV_50_SYM01: u32 = 6441;
pub const XLINE_PXTV_50_SYM02: u32 = 6442;
pub const XLINE_PXTV_50_SYM03: u32 = 6443;
pub const XLINE_PXTV_50_SYM04: u32 = 6444;
pub const XLINE_PXTV_50_SYM05: u32 = 6445;
pub const XLINE_PXTV_50_SYM06: u32 = 6446;
pub const XLINE_PXTV_50_SYM07: u32 = 6447;
pub const XLINE_BXTV_50_SPLIT: u32 = 6448;
pub const XLINE_BXTV_50_SYM00: u32 = 6449;
pub const XLINE_BXTV_50_SYM01: u32 = 6450;
pub const XLINE_BXTV_50_SYM02: u32 = 6451;
pub const XLINE_BXTV_50_SYM03: u32 = 6452;
pub const XLINE_BXTV_50_SYM04: u32 = 6453;
pub const XLINE_BXTV_50_SYM05: u32 = 6454;
pub const XLINE_BXTV_50_SYM06: u32 = 6455;
pub const XLINE_BXTV_50_SYM07: u32 = 6456;
pub const XLINE_SIP3_XTIGTWY_01: u32 = 8192;
pub const XLINE_SIP3_XTIGTWY_02: u32 = 8193;
pub const XLINE_SIP3_XTIGTWY_03: u32 = 8194;
pub const XLINE_SIP3_XTIGTWY_04: u32 = 8195;
pub const XLINE_SIP3_XTIGTWY_05: u32 = 8196;
pub const XLINE_SIP3_XTIGTWY_06: u32 = 8197;
pub const XLINE_PUREL1: u32 = 16384;
pub const XLINE_PUREL2: u32 = 16385;
pub const XLINE_ALPHA: u32 = 16386;
pub const XLINE_MONTREAL_D2: u32 = 16387;
pub const XLINE_PBF: u32 = 16388;
pub const XLINE_TBF: u32 = 16389;
pub const XLINE_CBF: u32 = 16390;
pub const XLINE_BMF: u32 = 16392;
pub const XLINE_TQL1: u32 = 16393;
pub const XLINE_TQL2: u32 = 16394;
pub const XLINE_VQL1: u32 = 16395;
pub const XLINE_VQL2: u32 = 16396;
pub const XLINE_CDF_TL2P1: u32 = 16397;
pub const XLINE_CDF_CHX: u32 = 16398;
pub const XLINE_CDF_OMG: u32 = 16399;
pub const XLINE_CDF_PTX: u32 = 16400;
pub const XLINE_CDF_ALP: u32 = 16401;
pub const XLINE_CDF_LQN: u32 = 16402;
pub const XLINE_CDF_TCM: u32 = 16403;
pub const XLINE_CDF_TSXV: u32 = 16404;
pub const XLINE_SL2: u32 = 16405;
pub const XLINE_CANTL1_P2: u32 = 16406;
pub const XLINE_CANTL2_P2: u32 = 16407;
pub const XLINE_TBF_P2: u32 = 16408;
pub const XLINE_TQL1_P2: u32 = 16409;
pub const XLINE_TQL2_P2: u32 = 16410;
pub const XLINE_CBBO_TSX: u32 = 16411;
pub const XLINE_CLS_TSX: u32 = 16412;
pub const XLINE_CDB_TSX: u32 = 16413;
pub const XLINE_CBBO_TSXV: u32 = 16414;
pub const XLINE_CLS_TSXV: u32 = 16415;
pub const XLINE_CDB_TSXV: u32 = 16416;
pub const XLINE_CDF_CNSX: u32 = 16417;
pub const XLINE_CDF_ICX: u32 = 16418;
pub const XLINE_CDF_SELECT: u32 = 16419;
pub const XLINE_CDF_SIGMAX: u32 = 16420;
pub const XLINE_CDF_TL2P2: u32 = 16421;
pub const XLINE_SQL1: u32 = 16422;
pub const XLINE_SQL2: u32 = 16423;
pub const XLINE_CNSXL2: u32 = 16424;
pub const XLINE_AQL1: u32 = 16425;
pub const XLINE_AQL2: u32 = 16426;
pub const XLINE_CANTL1_REF: u32 = 16427;
pub const XLINE_CANTL1_REF_P2: u32 = 16428;
pub const XLINE_CANCL1_REF: u32 = 16429;
pub const XLINE_CANTL1_IND: u32 = 16430;
pub const XLINE_AL1: u32 = 16431;
pub const XLINE_AL2: u32 = 16432;
pub const XLINE_ABF: u32 = 16433;
pub const XLINE_CDF_CX2: u32 = 16434;
pub const XLINE_CX2_1: u32 = 16435;
pub const XLINE_CX2_2: u32 = 16436;
pub const XLINE_CX2_RET3: u32 = 16437;
pub const XLINE_LYNX: u32 = 16438;
pub const XLINE_CDF_LYNX: u32 = 16439;
pub const XLINE_CBBO_TSX_P1: u32 = 16440;
pub const XLINE_CBBO_TSX_P2: u32 = 16441;
pub const XLINE_CDF_AEQ: u32 = 16442;
pub const XLINE_CDF_NEO: u32 = 16443;
pub const XLINE_TMXMONMC_F2: u32 = 16444;
pub const XLINE_TMXMONMC_O2: u32 = 16445;
pub const XLINE_TMXMONMC_SYMMGR: u32 = 16446;
pub const XLINE_CDF_CHD: u32 = 16447;
pub const XLINE_CXD: u32 = 16448;
pub const XLINE_CXD_UAT: u32 = 16449;
pub const XLINE_LYNX_SYMMGR: u32 = 16450;
pub const XLINE_LYNXT_SYMMGR: u32 = 16451;
pub const XLINE_OMEGA_SYMMGR: u32 = 16452;
pub const XLINE_OMEGAT_SYMMGR: u32 = 16453;
pub const XLINE_CDF_TL2P3: u32 = 16454;
pub const XLINE_CDF_TL2P4: u32 = 16455;
pub const XLINE_CLS_TSXP1: u32 = 16456;
pub const XLINE_CLS_TSXP2: u32 = 16457;
pub const XLINE_AQUIS_SYM: u32 = 16458;
pub const XLINE_AQUIS_LSEDUB: u32 = 16459;
pub const XLINE_AQUIS_ENXT: u32 = 16460;
pub const XLINE_AQUIS_XET: u32 = 16461;
pub const XLINE_AQUIS_OTHERS: u32 = 16462;
pub const XLINE_AQUIS_TST_SYM: u32 = 16463;
pub const XLINE_AQUIS_LSE_TST: u32 = 16464;
pub const XLINE_AQUIS_ENX_TST: u32 = 16465;
pub const XLINE_AQUIS_XET_TST: u32 = 16466;
pub const XLINE_AQUIS_OTH_TST: u32 = 16467;
pub const XLINE_AQUISM_SYM: u32 = 16468;
pub const XLINE_AQUISM_LSEDUB: u32 = 16469;
pub const XLINE_AQUISM_ENXT: u32 = 16470;
pub const XLINE_AQUISM_XET: u32 = 16471;
pub const XLINE_AQUISM_OTHERS: u32 = 16472;
pub const XLINE_AQUISM_TST_SYM: u32 = 16473;
pub const XLINE_AQUISM_LSE_TST: u32 = 16474;
pub const XLINE_AQUISM_ENX_TST: u32 = 16475;
pub const XLINE_AQUISM_XET_TST: u32 = 16476;
pub const XLINE_AQUISM_OTH_TST: u32 = 16477;
pub const XLINE_AQUISM_UKSWS: u32 = 16478;
pub const XLINE_AQUISM_UKS_TST: u32 = 16479;
pub const XLINE_AQUISEU_SYM: u32 = 16480;
pub const XLINE_AQUISEU_ENXT: u32 = 16481;
pub const XLINE_AQUISEU_XET: u32 = 16482;
pub const XLINE_AQUISEU_OTHERS: u32 = 16483;
pub const XLINE_AQUISEU_TST_SYM: u32 = 16484;
pub const XLINE_AQUISEU_ENX_TST: u32 = 16485;
pub const XLINE_AQUISEU_XET_TST: u32 = 16486;
pub const XLINE_AQUISEU_OTH_TST: u32 = 16487;
pub const XLINE_AQUISM_EU: u32 = 16488;
pub const XLINE_AQUISM_EU_TST: u32 = 16489;
pub const XLINE_AQUIS_MAC_UKSW: u32 = 16490;
pub const XLINE_AQUIS_MAC_ENXT: u32 = 16491;
pub const XLINE_AQUIS_MAC_XET: u32 = 16492;
pub const XLINE_AQUIS_MAC_OTH: u32 = 16493;
pub const XLINE_AQUISMAC_SYMMGR: u32 = 16494;
pub const XLINE_AQUIST_MAC_UKSW: u32 = 16495;
pub const XLINE_AQUIST_MAC_ENXT: u32 = 16496;
pub const XLINE_AQUIST_MAC_XET: u32 = 16497;
pub const XLINE_AQUIST_MAC_OTH: u32 = 16498;
pub const XLINE_AQUISMCT_SYMMGR: u32 = 16499;
pub const XLINE_CX2_SYMMGR: u32 = 16512;
pub const XLINE_CX2T: u32 = 16513;
pub const XLINE_CX2T_SYMMGR: u32 = 16514;
pub const XLINE_CXD_SYMMGR: u32 = 16528;
pub const XLINE_CXDT: u32 = 16529;
pub const XLINE_CXDT_SYMMGR: u32 = 16530;
pub const XLINE_TQL1_GTE: u32 = 16640;
pub const XLINE_TQL1_P2_GTE: u32 = 16641;
pub const XLINE_TQL2_GTE: u32 = 16642;
pub const XLINE_TQL2_P2_GTE: u32 = 16643;
pub const XLINE_VQL1_GTE: u32 = 16644;
pub const XLINE_VQL2_GTE: u32 = 16645;
pub const XLINE_SQL1_GTE: u32 = 16646;
pub const XLINE_SQL2_GTE: u32 = 16647;
pub const XLINE_AQL1_GTE: u32 = 16648;
pub const XLINE_AQL2_GTE: u32 = 16649;
pub const XLINE_CANTL1_GTE: u32 = 16650;
pub const XLINE_CANTL1_P2_GTE: u32 = 16651;
pub const XLINE_CANTL2_GTE: u32 = 16652;
pub const XLINE_CANTL2_P2_GTE: u32 = 16653;
pub const XLINE_CANCL1_GTE: u32 = 16654;
pub const XLINE_CANCL2_GTE: u32 = 16655;
pub const XLINE_SL2_GTE: u32 = 16656;
pub const XLINE_AL1_GTE: u32 = 16657;
pub const XLINE_AL2_GTE: u32 = 16658;
pub const XLINE_CSEMC: u32 = 16688;
pub const XLINE_CSEMC_SYMMGR: u32 = 16689;
pub const XLINE_CSEMC_GTE: u32 = 16690;
pub const XLINE_CSEMC_GTE_SYMMG: u32 = 16691;
pub const XLINE_OMEGAMC: u32 = 16704;
pub const XLINE_LYNXMC: u32 = 16705;
pub const XLINE_OMEGAT: u32 = 16706;
pub const XLINE_LYNXT: u32 = 16707;
pub const XLINE_TMXMXF2_SYMMGR: u32 = 16720;
pub const XLINE_TMXMX_F2: u32 = 16721;
pub const XLINE_TMXMXO2_SYMMGR: u32 = 16722;
pub const XLINE_TMXMX_O2: u32 = 16723;
pub const XLINE_TMXMXTF2_SYMMGR: u32 = 16728;
pub const XLINE_TMXMXT_F2: u32 = 16729;
pub const XLINE_TMXMXTO2_SYMMGR: u32 = 16730;
pub const XLINE_TMXMXT_O2: u32 = 16731;
pub const XLINE_BIT: u32 = 32769;
pub const XLINE_CEF: u32 = 32772;
pub const XLINE_MAD: u32 = 32788;
pub const XLINE_OMX: u32 = 32790;
pub const XLINE_EUREXT_EMDI: u32 = 32799;
pub const XLINE_EBS_EUREX: u32 = 32800;
pub const XLINE_EBS_XETRA: u32 = 32801;
pub const XLINE_CEF_ULTRA_PLUS: u32 = 32802;
pub const XLINE_EQUIDUCT: u32 = 32803;
pub const XLINE_ARCA_EU: u32 = 32804;
pub const XLINE_NASDAQ_OMX_EU: u32 = 32805;
pub const XLINE_EBS_XETRA_INTL: u32 = 32806;
pub const XLINE_SWXESS_TRD: u32 = 32807;
pub const XLINE_SWXESS_OB: u32 = 32808;
pub const XLINE_SWXESS_PB: u32 = 32809;
pub const XLINE_EBS_DUBLIN: u32 = 32810;
pub const XLINE_EUREX_EMDI: u32 = 32811;
pub const XLINE_XETR_EMDI: u32 = 32812;
pub const XLINE_XETRT_EMDI: u32 = 32813;
pub const XLINE_XDUB_EMDI: u32 = 32814;
pub const XLINE_XDUBT_EMDI: u32 = 32815;
pub const XLINE_SWXM_COM_OB: u32 = 32816;
pub const XLINE_SWXM_100_OB: u32 = 32817;
pub const XLINE_SWXM_100_PB: u32 = 32818;
pub const XLINE_SWXM_200_OB: u32 = 32819;
pub const XLINE_SWXM_200_PB: u32 = 32820;
pub const XLINE_SWXM_110_PB: u32 = 32821;
pub const XLINE_SWXM_120_PB: u32 = 32822;
pub const XLINE_SWXM_130_PB: u32 = 32823;
pub const XLINE_SWXM_300_PB: u32 = 32824;
pub const XLINE_SWXM_TRDSESS: u32 = 32825;
pub const XLINE_SWXM_VALADD: u32 = 32826;
pub const XLINE_SWXM_ONBT_EQ: u32 = 32827;
pub const XLINE_SWXM_ONBT_NEQ: u32 = 32828;
pub const XLINE_SWXM_OFFBT: u32 = 32829;
pub const XLINE_SWXM_ONBTM_EQ: u32 = 32830;
pub const XLINE_SWXM_ONBTM_NEQ: u32 = 32831;
pub const XLINE_SWXM_OFFBTM: u32 = 32832;
pub const XLINE_SWXM_100_TOB: u32 = 32833;
pub const XLINE_SWXM_100_OBS: u32 = 32834;
pub const XLINE_SWXM_100_PBS: u32 = 32835;
pub const XLINE_SWXM_200_TOB: u32 = 32836;
pub const XLINE_SWXM_200_OBS: u32 = 32837;
pub const XLINE_SWXM_200_PBS: u32 = 32838;
pub const XLINE_SWXM_SYMMGR: u32 = 32839;
pub const XLINE_SWXMT_100_OB: u32 = 32848;
pub const XLINE_SWXMT_100_PB: u32 = 32849;
pub const XLINE_SWXMT_200_OB: u32 = 32850;
pub const XLINE_SWXMT_200_PB: u32 = 32851;
pub const XLINE_SWXMT_110_PB: u32 = 32852;
pub const XLINE_SWXMT_120_PB: u32 = 32853;
pub const XLINE_SWXMT_130_PB: u32 = 32854;
pub const XLINE_SWXMT_300_PB: u32 = 32855;
pub const XLINE_SWXMT_TRDSESS: u32 = 32856;
pub const XLINE_SWXMT_VALADD: u32 = 32857;
pub const XLINE_SWXMT_ONBT_EQ: u32 = 32858;
pub const XLINE_SWXMT_ONBT_NEQ: u32 = 32859;
pub const XLINE_SWXMT_OFFBT: u32 = 32860;
pub const XLINE_SWXMT_ONBTM_EQ: u32 = 32861;
pub const XLINE_SWXMT_ONBTM_NEQ: u32 = 32862;
pub const XLINE_SWXMT_OFFBTM: u32 = 32863;
pub const XLINE_SWXMT_100_TOB: u32 = 32864;
pub const XLINE_SWXMT_100_OBS: u32 = 32865;
pub const XLINE_SWXMT_100_PBS: u32 = 32866;
pub const XLINE_SWXMT_200_TOB: u32 = 32867;
pub const XLINE_SWXMT_200_OBS: u32 = 32868;
pub const XLINE_SWXMT_200_PBS: u32 = 32869;
pub const XLINE_SWXMT_SYMMGR: u32 = 32870;
pub const XLINE_CBOEUTR_SYMMGR: u32 = 32880;
pub const XLINE_CBOEUTR_GRP: u32 = 32881;
pub const XLINE_CBOEUTR_1: u32 = 32882;
pub const XLINE_CBOEUTR_2: u32 = 32883;
pub const XLINE_CBOEUTR_3: u32 = 32884;
pub const XLINE_CBOEUSI_SYMMGR: u32 = 32888;
pub const XLINE_CBOEUSI_GRP: u32 = 32889;
pub const XLINE_CBOEUSI_1: u32 = 32890;
pub const XLINE_CBOEUSI_2: u32 = 32891;
pub const XLINE_CBOEUSI_3: u32 = 32892;
pub const XLINE_CBOEUSI_4: u32 = 32893;
pub const XLINE_CBOEUSI_5: u32 = 32894;
pub const XLINE_CBOEUSI_6: u32 = 32895;
pub const XLINE_CBOEUSI_7: u32 = 32896;
pub const XLINE_CBOEUSI_8: u32 = 32897;
pub const XLINE_CBOEUSI_9: u32 = 32898;
pub const XLINE_CBOEUSI_10: u32 = 32899;
pub const XLINE_CBOEUSI_11: u32 = 32900;
pub const XLINE_CBOEUSI_12: u32 = 32901;
pub const XLINE_CBOEUTRT_SYMMGR: u32 = 32912;
pub const XLINE_CBOEUTRT_GRP: u32 = 32913;
pub const XLINE_CBOEUTRT_1: u32 = 32914;
pub const XLINE_CBOEUTRT_2: u32 = 32915;
pub const XLINE_CBOEUTRT_3: u32 = 32916;
pub const XLINE_CBOEUSIT_SYMMGR: u32 = 32920;
pub const XLINE_CBOEUSIT_GRP: u32 = 32921;
pub const XLINE_CBOEUSIT_1: u32 = 32922;
pub const XLINE_CBOEUSIT_2: u32 = 32923;
pub const XLINE_CBOEUSIT_3: u32 = 32924;
pub const XLINE_CBOEUSIT_4: u32 = 32925;
pub const XLINE_CBOEUSIT_5: u32 = 32926;
pub const XLINE_CBOEUSIT_6: u32 = 32927;
pub const XLINE_CBOEUSIT_7: u32 = 32928;
pub const XLINE_CBOEUSIT_8: u32 = 32929;
pub const XLINE_CBOEUSIT_9: u32 = 32930;
pub const XLINE_CBOEUSIT_10: u32 = 32931;
pub const XLINE_CBOEUSIT_11: u32 = 32932;
pub const XLINE_CBOEUSIT_12: u32 = 32933;
pub const XLINE_GTP_UMTF_SYMMGR: u32 = 33023;
pub const XLINE_TRECG_SYMMGR: u32 = 33024;
pub const XLINE_TRECG_ORD_1: u32 = 33025;
pub const XLINE_TRECG_ORD_2: u32 = 33026;
pub const XLINE_TRECG_TRD_1: u32 = 33027;
pub const XLINE_TRECG_TRD_2: u32 = 33028;
pub const XLINE_TRECGT_SYMMGR: u32 = 33032;
pub const XLINE_TRECGT_ORD_1: u32 = 33033;
pub const XLINE_TRECGT_ORD_2: u32 = 33034;
pub const XLINE_TRECGT_TRD_1: u32 = 33035;
pub const XLINE_TRECGT_TRD_2: u32 = 33036;
pub const XLINE_LSEG_SYMMGR: u32 = 33040;
pub const XLINE_LSEG_A: u32 = 33041;
pub const XLINE_LSEG_B: u32 = 33042;
pub const XLINE_LSEG_C: u32 = 33043;
pub const XLINE_LSEG_D: u32 = 33044;
pub const XLINE_LSEG_E: u32 = 33045;
pub const XLINE_LSEG_F: u32 = 33046;
pub const XLINE_LSEG_G: u32 = 33047;
pub const XLINE_LSEG_A_TOB: u32 = 33048;
pub const XLINE_LSEG_B_TOB: u32 = 33049;
pub const XLINE_LSEG_C_TOB: u32 = 33050;
pub const XLINE_LSEG_D_TOB: u32 = 33051;
pub const XLINE_LSEG_E_TOB: u32 = 33052;
pub const XLINE_LSEG_F_TOB: u32 = 33053;
pub const XLINE_LSEG_G_TOB: u32 = 33054;
pub const XLINE_LSEGT_SYMMGR: u32 = 33056;
pub const XLINE_LSEGT_A: u32 = 33057;
pub const XLINE_LSEGT_B: u32 = 33058;
pub const XLINE_LSEGT_C: u32 = 33059;
pub const XLINE_LSEGT_D: u32 = 33060;
pub const XLINE_LSEGT_E: u32 = 33061;
pub const XLINE_LSEGT_F: u32 = 33062;
pub const XLINE_LSEGT_G: u32 = 33063;
pub const XLINE_LSEGT_A_TOB: u32 = 33064;
pub const XLINE_LSEGT_B_TOB: u32 = 33065;
pub const XLINE_LSEGT_C_TOB: u32 = 33066;
pub const XLINE_LSEGT_D_TOB: u32 = 33067;
pub const XLINE_LSEGT_E_TOB: u32 = 33068;
pub const XLINE_LSEGT_F_TOB: u32 = 33069;
pub const XLINE_LSEGT_G_TOB: u32 = 33070;
pub const XLINE_TRQXG_SYMMGR: u32 = 33072;
pub const XLINE_TRQXG_T: u32 = 33073;
pub const XLINE_TRQXG_U: u32 = 33074;
pub const XLINE_TRQXG_V: u32 = 33075;
pub const XLINE_TRQXG_W: u32 = 33076;
pub const XLINE_TRQXG_X: u32 = 33077;
pub const XLINE_TRQXG_Y: u32 = 33078;
pub const XLINE_TRQXGT_SYMMGR: u32 = 33088;
pub const XLINE_TRQXGT_T: u32 = 33089;
pub const XLINE_TRQXGT_U: u32 = 33090;
pub const XLINE_TRQXGT_V: u32 = 33091;
pub const XLINE_TRQXGT_W: u32 = 33092;
pub const XLINE_TRQXGT_X: u32 = 33093;
pub const XLINE_TRQXGT_Y: u32 = 33094;
pub const XLINE_LSEG_L1_SYMMGR: u32 = 33104;
pub const XLINE_LSEG_L1_A: u32 = 33105;
pub const XLINE_LSEG_L1_B: u32 = 33106;
pub const XLINE_LSEG_L1_C: u32 = 33107;
pub const XLINE_LSEG_L1_D: u32 = 33108;
pub const XLINE_LSEG_L1_E: u32 = 33109;
pub const XLINE_LSEG_L1_F: u32 = 33110;
pub const XLINE_LSEG_L1_G: u32 = 33111;
pub const XLINE_LSEGT_L1_SYMMGR: u32 = 33120;
pub const XLINE_LSEGT_L1_A: u32 = 33121;
pub const XLINE_LSEGT_L1_B: u32 = 33122;
pub const XLINE_LSEGT_L1_C: u32 = 33123;
pub const XLINE_LSEGT_L1_D: u32 = 33124;
pub const XLINE_LSEGT_L1_E: u32 = 33125;
pub const XLINE_LSEGT_L1_F: u32 = 33126;
pub const XLINE_LSEGT_L1_G: u32 = 33127;
pub const XLINE_BITG_SYMMGR: u32 = 33136;
pub const XLINE_BITG_H: u32 = 33137;
pub const XLINE_BITG_I: u32 = 33138;
pub const XLINE_BITG_J: u32 = 33139;
pub const XLINE_BITG_K: u32 = 33140;
pub const XLINE_BITG_Z: u32 = 33141;
pub const XLINE_BITGT_SYMMGR: u32 = 33152;
pub const XLINE_BITGT_H: u32 = 33153;
pub const XLINE_BITGT_I: u32 = 33154;
pub const XLINE_BITGT_J: u32 = 33155;
pub const XLINE_BITGT_K: u32 = 33156;
pub const XLINE_BITGT_Z: u32 = 33157;
pub const XLINE_BITTOP_SYMMGR: u32 = 33168;
pub const XLINE_BITTOP_H: u32 = 33169;
pub const XLINE_BITTOP_I: u32 = 33170;
pub const XLINE_BITTOP_J: u32 = 33171;
pub const XLINE_BITTOP_K: u32 = 33172;
pub const XLINE_BITTOP_Z: u32 = 33173;
pub const XLINE_BITTOPT_SYMMGR: u32 = 33184;
pub const XLINE_BITTOPT_H: u32 = 33185;
pub const XLINE_BITTOPT_I: u32 = 33186;
pub const XLINE_BITTOPT_J: u32 = 33187;
pub const XLINE_BITTOPT_K: u32 = 33188;
pub const XLINE_BITTOPT_Z: u32 = 33189;
pub const XLINE_LSETOP_SYMMGR: u32 = 33200;
pub const XLINE_LSETOP_A: u32 = 33201;
pub const XLINE_LSETOP_B: u32 = 33202;
pub const XLINE_LSETOP_C: u32 = 33203;
pub const XLINE_LSETOP_D: u32 = 33204;
pub const XLINE_LSETOP_E: u32 = 33205;
pub const XLINE_LSETOP_F: u32 = 33206;
pub const XLINE_LSETOP_G: u32 = 33207;
pub const XLINE_LSETOPT_SYMMGR: u32 = 33216;
pub const XLINE_LSETOPT_A: u32 = 33217;
pub const XLINE_LSETOPT_B: u32 = 33218;
pub const XLINE_LSETOPT_C: u32 = 33219;
pub const XLINE_LSETOPT_D: u32 = 33220;
pub const XLINE_LSETOPT_E: u32 = 33221;
pub const XLINE_LSETOPT_F: u32 = 33222;
pub const XLINE_LSETOPT_G: u32 = 33223;
pub const XLINE_LSE: u32 = 33279;
pub const XLINE_TOWERSI_SYMMGR: u32 = 33296;
pub const XLINE_TOWERSI_0: u32 = 33297;
pub const XLINE_TOWERSI_1: u32 = 33298;
pub const XLINE_TOWERSI_2: u32 = 33299;
pub const XLINE_TOWERSI_3: u32 = 33300;
pub const XLINE_TOWERSI_4: u32 = 33301;
pub const XLINE_CBOESI_SYMMGR: u32 = 33312;
pub const XLINE_CBOESI_0: u32 = 33313;
pub const XLINE_CBOESI_1: u32 = 33314;
pub const XLINE_CBOESI_2: u32 = 33315;
pub const XLINE_CBOESI_3: u32 = 33316;
pub const XLINE_CBOESI_4: u32 = 33317;
pub const XLINE_JXSIBIN_SYMMGR: u32 = 33328;
pub const XLINE_JXSIBIN_0: u32 = 33329;
pub const XLINE_JXSIBIN_1: u32 = 33330;
pub const XLINE_JXSIBIN_2: u32 = 33331;
pub const XLINE_JXSIBIN_3: u32 = 33332;
pub const XLINE_JXSIBIN_4: u32 = 33333;
pub const XLINE_AQUISSI_SYMMGR: u32 = 33344;
pub const XLINE_AQUISSI_0: u32 = 33345;
pub const XLINE_AQUISSI_1: u32 = 33346;
pub const XLINE_AQUISSI_2: u32 = 33347;
pub const XLINE_AQUISSI_3: u32 = 33348;
pub const XLINE_AQUISSI_4: u32 = 33349;
pub const XLINE_AQUISSI_5: u32 = 33350;
pub const XLINE_AQUISSI_6: u32 = 33351;
pub const XLINE_AQUISSI_7: u32 = 33352;
pub const XLINE_AQUISSI_8: u32 = 33353;
pub const XLINE_AQUISSI_9: u32 = 33354;
pub const XLINE_AQUISSI_A: u32 = 33355;
pub const XLINE_AQUISSI_B: u32 = 33356;
pub const XLINE_CSEUIOI_SYMMGR: u32 = 33360;
pub const XLINE_CSEUIOI_0: u32 = 33361;
pub const XLINE_CSEUIOI_1: u32 = 33362;
pub const XLINE_CSEUIOI_2: u32 = 33363;
pub const XLINE_CSEUIOI_3: u32 = 33364;
pub const XLINE_CSEUIOI_4: u32 = 33365;
pub const XLINE_SIX_SYMMGR: u32 = 33376;
pub const XLINE_SIX_TRD: u32 = 33377;
pub const XLINE_SIX_VAL: u32 = 33378;
pub const XLINE_SIX_OB_BCE: u32 = 33379;
pub const XLINE_SIX_OB_SME: u32 = 33380;
pub const XLINE_SIX_PB_BCE: u32 = 33381;
pub const XLINE_SIX_PB_SME: u32 = 33382;
pub const XLINE_SIX_PB_ETX: u32 = 33383;
pub const XLINE_SIX_PB_SBO: u32 = 33384;
pub const XLINE_SIX_PB_FBO: u32 = 33385;
pub const XLINE_SIX_PB_SSP: u32 = 33386;
pub const XLINE_SIX_TOB_BCE: u32 = 33387;
pub const XLINE_SIX_TOB_SME: u32 = 33388;
pub const XLINE_SIX_TOB_ETX: u32 = 33389;
pub const XLINE_SIX_TOB_SBO: u32 = 33390;
pub const XLINE_SIX_TOB_FBO: u32 = 33391;
pub const XLINE_SIX_OB_EBBO: u32 = 33392;
pub const XLINE_SIX_PB_EBBO: u32 = 33393;
pub const XLINE_SIX_TOB_EBBO: u32 = 33394;
pub const XLINE_SIXT_SYMMGR: u32 = 33408;
pub const XLINE_SIXT_TRD: u32 = 33409;
pub const XLINE_SIXT_VAL: u32 = 33410;
pub const XLINE_SIXT_OB_BCE: u32 = 33411;
pub const XLINE_SIXT_OB_SME: u32 = 33412;
pub const XLINE_SIXT_PB_BCE: u32 = 33413;
pub const XLINE_SIXT_PB_SME: u32 = 33414;
pub const XLINE_SIXT_PB_ETX: u32 = 33415;
pub const XLINE_SIXT_PB_SBO: u32 = 33416;
pub const XLINE_SIXT_PB_FBO: u32 = 33417;
pub const XLINE_SIXT_PB_SSP: u32 = 33418;
pub const XLINE_SIXT_TOB_BCE: u32 = 33419;
pub const XLINE_SIXT_TOB_SME: u32 = 33420;
pub const XLINE_SIXT_TOB_ETX: u32 = 33421;
pub const XLINE_SIXT_TOB_SBO: u32 = 33422;
pub const XLINE_SIXT_TOB_FBO: u32 = 33423;
pub const XLINE_SIXT_OB_EBBO: u32 = 33424;
pub const XLINE_SIXT_PB_EBBO: u32 = 33425;
pub const XLINE_SIXT_TOB_EBBO: u32 = 33426;
pub const XLINE_COMRZSI_0: u32 = 33440;
pub const XLINE_COMRZSI_1: u32 = 33441;
pub const XLINE_COMRZSI_2: u32 = 33442;
pub const XLINE_COMRZSI_3: u32 = 33443;
pub const XLINE_COMRZSI_4: u32 = 33444;
pub const XLINE_AQSI_SYMMGR: u32 = 33472;
pub const XLINE_AQSI_0: u32 = 33473;
pub const XLINE_AQSI_1: u32 = 33474;
pub const XLINE_AQSI_2: u32 = 33475;
pub const XLINE_AQSI_3: u32 = 33476;
pub const XLINE_AQSI_4: u32 = 33477;
pub const XLINE_AQSI_5: u32 = 33478;
pub const XLINE_AQSI_6: u32 = 33479;
pub const XLINE_AQSI_7: u32 = 33480;
pub const XLINE_AQSI_8: u32 = 33481;
pub const XLINE_AQSI_9: u32 = 33482;
pub const XLINE_AQSI_10: u32 = 33483;
pub const XLINE_AQSI_11: u32 = 33484;
pub const XLINE_AQSI_12: u32 = 33485;
pub const XLINE_AQSI_13: u32 = 33486;
pub const XLINE_AQSI_14: u32 = 33487;
pub const XLINE_AQSI_15: u32 = 33488;
pub const XLINE_AQSI_16: u32 = 33489;
pub const XLINE_AQSI_17: u32 = 33490;
pub const XLINE_AQSI_18: u32 = 33491;
pub const XLINE_AQSI_19: u32 = 33492;
pub const XLINE_AQSI_20: u32 = 33493;
pub const XLINE_AQSI_21: u32 = 33494;
pub const XLINE_AQSI_22: u32 = 33495;
pub const XLINE_AQSI_23: u32 = 33496;
pub const XLINE_AQSI_24: u32 = 33497;
pub const XLINE_AQSI_25: u32 = 33498;
pub const XLINE_AQSI_26: u32 = 33499;
pub const XLINE_AQSI_27: u32 = 33500;
pub const XLINE_AQSI_28: u32 = 33501;
pub const XLINE_AQSI_29: u32 = 33502;
pub const XLINE_AQSI_30: u32 = 33503;
pub const XLINE_AQSI_31: u32 = 33504;
pub const XLINE_AQSI_32: u32 = 33505;
pub const XLINE_AQSI_33: u32 = 33506;
pub const XLINE_AQSI_34: u32 = 33507;
pub const XLINE_AQSI_35: u32 = 33508;
pub const XLINE_AQSI_36: u32 = 33509;
pub const XLINE_AQSI_37: u32 = 33510;
pub const XLINE_AQSI_38: u32 = 33511;
pub const XLINE_AQSI_39: u32 = 33512;
pub const XLINE_AQSI_40: u32 = 33513;
pub const XLINE_AQSI_41: u32 = 33514;
pub const XLINE_AQSI_42: u32 = 33515;
pub const XLINE_AQSI_43: u32 = 33516;
pub const XLINE_AQSI_44: u32 = 33517;
pub const XLINE_AQSI_45: u32 = 33518;
pub const XLINE_AQSI_46: u32 = 33519;
pub const XLINE_AQSI_47: u32 = 33520;
pub const XLINE_ERX_OB_31: u32 = 33536;
pub const XLINE_ERX_OB_32: u32 = 33537;
pub const XLINE_ERX_OB_33: u32 = 33538;
pub const XLINE_ERX_OB_34: u32 = 33539;
pub const XLINE_ERX_OB_35: u32 = 33540;
pub const XLINE_ERX_OB_36: u32 = 33541;
pub const XLINE_ERX_OB_37: u32 = 33542;
pub const XLINE_ERX_OB_38: u32 = 33543;
pub const XLINE_ERX_OB_39: u32 = 33544;
pub const XLINE_ERX_OB_40: u32 = 33545;
pub const XLINE_ENDXDP_701: u32 = 33792;
pub const XLINE_ENDXDP_751: u32 = 33793;
pub const XLINE_ENDXDP_702: u32 = 33794;
pub const XLINE_ENDXDP_752: u32 = 33795;
pub const XLINE_ENDXDP_703: u32 = 33796;
pub const XLINE_ENDXDP_753: u32 = 33797;
pub const XLINE_ENDXDP_704: u32 = 33798;
pub const XLINE_ENDXDP_754: u32 = 33799;
pub const XLINE_ENDXDP_705: u32 = 33800;
pub const XLINE_ENDXDP_755: u32 = 33801;
pub const XLINE_ENDXDP_706: u32 = 33802;
pub const XLINE_ENDXDP_756: u32 = 33803;
pub const XLINE_ENDXDP_721: u32 = 33804;
pub const XLINE_ENDXDP_771: u32 = 33805;
pub const XLINE_ENDXDP_722: u32 = 33806;
pub const XLINE_ENDXDP_772: u32 = 33807;
pub const XLINE_ENDXDP_723: u32 = 33808;
pub const XLINE_ENDXDP_773: u32 = 33809;
pub const XLINE_ENDXDP_728: u32 = 33810;
pub const XLINE_ENDXDP_778: u32 = 33811;
pub const XLINE_ENDXDP_729: u32 = 33812;
pub const XLINE_ENDXDP_779: u32 = 33813;
pub const XLINE_ENDXDP_730: u32 = 33814;
pub const XLINE_ENDXDP_780: u32 = 33815;
pub const XLINE_ENDXDP_731: u32 = 33816;
pub const XLINE_ENDXDP_781: u32 = 33817;
pub const XLINE_ENDXDP_732: u32 = 33818;
pub const XLINE_ENDXDP_782: u32 = 33819;
pub const XLINE_ENDXDP_736: u32 = 33820;
pub const XLINE_ENDXDP_786: u32 = 33821;
pub const XLINE_ENDXDP_711: u32 = 33822;
pub const XLINE_ENDXDP_712: u32 = 33823;
pub const XLINE_ENDXDP_713: u32 = 33824;
pub const XLINE_EURONEXT_113: u32 = 33825;
pub const XLINE_EURONEXT_UA_11: u32 = 33827;
pub const XLINE_EURONEXT_UA_12: u32 = 33828;
pub const XLINE_EURONEXT_UA_13: u32 = 33829;
pub const XLINE_EURONEXT_UA_20: u32 = 33830;
pub const XLINE_EURONEXT_UA_601: u32 = 33831;
pub const XLINE_EURONEXT_UA_602: u32 = 33832;
pub const XLINE_EURONEXT_UA_603: u32 = 33833;
pub const XLINE_EURONEXT_UA_14: u32 = 33834;
pub const XLINE_BATSMC_EU_SYM: u32 = 33845;
pub const XLINE_BATSMC_EU_1: u32 = 34048;
pub const XLINE_BATSMC_EU_2: u32 = 34049;
pub const XLINE_BATSMC_EU_3: u32 = 34050;
pub const XLINE_BATSMC_EU_4: u32 = 34051;
pub const XLINE_BATSMC_EU_5: u32 = 34052;
pub const XLINE_BATSMC_EU_6: u32 = 34053;
pub const XLINE_BATSMC_EU_7: u32 = 34054;
pub const XLINE_BATSMC_EU_8: u32 = 34055;
pub const XLINE_BATSMC_EU_9: u32 = 34056;
pub const XLINE_BATSMC_EU_10: u32 = 34057;
pub const XLINE_BATSMC_EU_11: u32 = 34058;
pub const XLINE_BATSMC_EU_12: u32 = 34059;
pub const XLINE_BATSMC_EU_RR: u32 = 34060;
pub const XLINE_TBATSMC_EU_1: u32 = 34061;
pub const XLINE_TBATSMC_EU_2: u32 = 34062;
pub const XLINE_TBATSMC_EU_3: u32 = 34063;
pub const XLINE_TBATSMC_EU_4: u32 = 34064;
pub const XLINE_TBATSMC_EU_5: u32 = 34065;
pub const XLINE_TBATSMC_EU_6: u32 = 34066;
pub const XLINE_TBATSMC_EU_7: u32 = 34067;
pub const XLINE_TBATSMC_EU_8: u32 = 34068;
pub const XLINE_TBATSMC_EU_9: u32 = 34069;
pub const XLINE_TBATSMC_EU_10: u32 = 34070;
pub const XLINE_TBATSMC_EU_11: u32 = 34071;
pub const XLINE_TBATSMC_EU_12: u32 = 34072;
pub const XLINE_TBATSMCEU_SYM: u32 = 34073;
pub const XLINE_TBATSMC_EU_SYM: u32 = 34074;
pub const XLINE_BATSMC_EU_UK_RR: u32 = 34075;
pub const XLINE_TBATSMC_EU_RR: u32 = 34076;
pub const XLINE_TBATSMC_EU_U_RR: u32 = 34077;
pub const XLINE_ERX_RD: u32 = 34144;
pub const XLINE_ERX_XD_SYMMGR: u32 = 34149;
pub const XLINE_ERX_XD_STL: u32 = 34150;
pub const XLINE_ERX_XD_STLUSR: u32 = 34151;
pub const XLINE_ERX_XD_OIN: u32 = 34152;
pub const XLINE_ERX_XD_OINUSR: u32 = 34153;
pub const XLINE_ERX_OB_SYMMGR: u32 = 34162;
pub const XLINE_ERX_OB_1: u32 = 34163;
pub const XLINE_ERX_OB_2: u32 = 34164;
pub const XLINE_ERX_OB_3: u32 = 34165;
pub const XLINE_ERX_OB_4: u32 = 34166;
pub const XLINE_ERX_OB_5: u32 = 34167;
pub const XLINE_ERX_OB_6: u32 = 34168;
pub const XLINE_ERX_OB_7: u32 = 34169;
pub const XLINE_ERX_OB_8: u32 = 34170;
pub const XLINE_ERX_OB_9: u32 = 34171;
pub const XLINE_ERX_OB_10: u32 = 34172;
pub const XLINE_ERX_OB_11: u32 = 34173;
pub const XLINE_ERX_OB_12: u32 = 34174;
pub const XLINE_ERX_OB_13: u32 = 34175;
pub const XLINE_ERX_OB_14: u32 = 34176;
pub const XLINE_ERX_OB_15: u32 = 34177;
pub const XLINE_ERX_OB_16: u32 = 34178;
pub const XLINE_ERX_OB_17: u32 = 34179;
pub const XLINE_ERX_OB_18: u32 = 34180;
pub const XLINE_ERX_OB_19: u32 = 34181;
pub const XLINE_ERX_OB_20: u32 = 34182;
pub const XLINE_ERX_OB_21: u32 = 34183;
pub const XLINE_ERX_OB_22: u32 = 34184;
pub const XLINE_ERX_OB_23: u32 = 34185;
pub const XLINE_ERX_OB_24: u32 = 34186;
pub const XLINE_ERX_OB_25: u32 = 34187;
pub const XLINE_ERX_OB_26: u32 = 34188;
pub const XLINE_ERX_OB_27: u32 = 34189;
pub const XLINE_ERX_OB_28: u32 = 34190;
pub const XLINE_ERX_OB_29: u32 = 34191;
pub const XLINE_ERX_OB_30: u32 = 34192;
pub const XLINE_ERX_PB_SYMMGR: u32 = 34193;
pub const XLINE_ERX_PB_1: u32 = 34194;
pub const XLINE_ERX_PB_2: u32 = 34195;
pub const XLINE_ERX_PB_3: u32 = 34196;
pub const XLINE_ERX_PB_4: u32 = 34197;
pub const XLINE_ERX_PB_5: u32 = 34198;
pub const XLINE_ERX_PB_6: u32 = 34199;
pub const XLINE_ERX_PB_7: u32 = 34200;
pub const XLINE_ERX_PB_8: u32 = 34201;
pub const XLINE_ERX_PB_9: u32 = 34202;
pub const XLINE_ERX_PB_10: u32 = 34203;
pub const XLINE_ERX_PB_11: u32 = 34204;
pub const XLINE_ERX_PB_12: u32 = 34205;
pub const XLINE_ERX_PB_13: u32 = 34206;
pub const XLINE_ERX_PB_14: u32 = 34207;
pub const XLINE_ERX_PB_15: u32 = 34208;
pub const XLINE_ERX_PB_16: u32 = 34209;
pub const XLINE_ERX_PB_17: u32 = 34210;
pub const XLINE_ERX_PB_18: u32 = 34211;
pub const XLINE_ERX_PB_19: u32 = 34212;
pub const XLINE_ERX_PB_20: u32 = 34213;
pub const XLINE_ERX_PB_21: u32 = 34214;
pub const XLINE_ERX_PB_22: u32 = 34215;
pub const XLINE_ERX_PB_23: u32 = 34216;
pub const XLINE_ERX_PB_24: u32 = 34217;
pub const XLINE_ERX_PB_25: u32 = 34218;
pub const XLINE_ERX_PB_26: u32 = 34219;
pub const XLINE_ERX_PB_27: u32 = 34220;
pub const XLINE_ERX_PB_28: u32 = 34221;
pub const XLINE_ERX_PB_29: u32 = 34222;
pub const XLINE_ERX_PB_30: u32 = 34223;
pub const XLINE_ERX_PB_31: u32 = 34224;
pub const XLINE_ERX_PB_32: u32 = 34225;
pub const XLINE_ERX_PB_33: u32 = 34226;
pub const XLINE_ERX_PB_34: u32 = 34227;
pub const XLINE_ERX_PB_35: u32 = 34228;
pub const XLINE_ERX_PB_36: u32 = 34229;
pub const XLINE_ERX_PB_37: u32 = 34230;
pub const XLINE_ERX_PB_38: u32 = 34231;
pub const XLINE_ERX_PB_39: u32 = 34232;
pub const XLINE_ERX_PB_40: u32 = 34233;
pub const XLINE_ERXT_RD: u32 = 34244;
pub const XLINE_ERXT_XD_SYMMGR: u32 = 34249;
pub const XLINE_ERXT_XD_STL: u32 = 34250;
pub const XLINE_ERXT_XD_STLUSR: u32 = 34251;
pub const XLINE_ERXT_XD_OIN: u32 = 34252;
pub const XLINE_ERXT_XD_OINUSR: u32 = 34253;
pub const XLINE_ERXT_OB_SYMMGR: u32 = 34262;
pub const XLINE_ERXT_OB_1: u32 = 34263;
pub const XLINE_ERXT_OB_2: u32 = 34264;
pub const XLINE_ERXT_OB_3: u32 = 34265;
pub const XLINE_ERXT_OB_4: u32 = 34266;
pub const XLINE_ERXT_OB_5: u32 = 34267;
pub const XLINE_ERXT_OB_6: u32 = 34268;
pub const XLINE_ERXT_OB_7: u32 = 34269;
pub const XLINE_ERXT_OB_8: u32 = 34270;
pub const XLINE_ERXT_OB_9: u32 = 34271;
pub const XLINE_ERXT_OB_10: u32 = 34272;
pub const XLINE_ERXT_OB_11: u32 = 34273;
pub const XLINE_ERXT_OB_12: u32 = 34274;
pub const XLINE_ERXT_OB_13: u32 = 34275;
pub const XLINE_ERXT_OB_14: u32 = 34276;
pub const XLINE_ERXT_OB_15: u32 = 34277;
pub const XLINE_ERXT_OB_16: u32 = 34278;
pub const XLINE_ERXT_OB_17: u32 = 34279;
pub const XLINE_ERXT_OB_18: u32 = 34280;
pub const XLINE_ERXT_OB_19: u32 = 34281;
pub const XLINE_ERXT_OB_20: u32 = 34282;
pub const XLINE_ERXT_PB_SYMMGR: u32 = 34283;
pub const XLINE_ERXT_PB_1: u32 = 34284;
pub const XLINE_ERXT_PB_2: u32 = 34285;
pub const XLINE_ERXT_PB_3: u32 = 34286;
pub const XLINE_ERXT_PB_4: u32 = 34287;
pub const XLINE_ERXT_PB_5: u32 = 34288;
pub const XLINE_ERXT_PB_6: u32 = 34289;
pub const XLINE_ERXT_PB_7: u32 = 34290;
pub const XLINE_ERXT_PB_8: u32 = 34291;
pub const XLINE_ERXT_PB_9: u32 = 34292;
pub const XLINE_ERXT_PB_10: u32 = 34293;
pub const XLINE_ERXT_PB_11: u32 = 34294;
pub const XLINE_ERXT_PB_12: u32 = 34295;
pub const XLINE_ERXT_PB_13: u32 = 34296;
pub const XLINE_ERXT_PB_14: u32 = 34297;
pub const XLINE_ERXT_PB_15: u32 = 34298;
pub const XLINE_CHIXMC_1: u32 = 34304;
pub const XLINE_CHIXMC_2: u32 = 34305;
pub const XLINE_CHIXMC_RET3: u32 = 34306;
pub const XLINE_CHIXMC_SYMMGR: u32 = 34307;
pub const XLINE_CXCT: u32 = 34308;
pub const XLINE_CXCT_SYMMGR: u32 = 34309;
pub const XLINE_CHIXAU_1: u32 = 34314;
pub const XLINE_CHIXAU_2: u32 = 34315;
pub const XLINE_CHIXAU: u32 = 34316;
pub const XLINE_LSE_M_C_SYMMGR: u32 = 34352;
pub const XLINE_LSE_M_CDS_A: u32 = 34353;
pub const XLINE_LSE_M_CDS_B: u32 = 34354;
pub const XLINE_LSE_M_CDS_C: u32 = 34355;
pub const XLINE_LSE_M_CDS_D: u32 = 34356;
pub const XLINE_LSE_M_CDS_E: u32 = 34357;
pub const XLINE_LSE_M_CDS_F: u32 = 34358;
pub const XLINE_LSE_M_CDS_G: u32 = 34359;
pub const XLINE_LSE_M_SYMMGR: u32 = 34383;
pub const XLINE_LSE_M: u32 = 34384;
pub const XLINE_LSE_M_A: u32 = 34385;
pub const XLINE_LSE_M_B: u32 = 34386;
pub const XLINE_LSE_M_C: u32 = 34387;
pub const XLINE_LSE_M_D: u32 = 34388;
pub const XLINE_LSE_M_E: u32 = 34389;
pub const XLINE_LSE_M_F: u32 = 34390;
pub const XLINE_LSE_M_G: u32 = 34391;
pub const XLINE_LSE_M_H: u32 = 34392;
pub const XLINE_LSE_M_I: u32 = 34393;
pub const XLINE_LSE_M_J: u32 = 34394;
pub const XLINE_LSE_M_K: u32 = 34395;
pub const XLINE_LSE_M_L: u32 = 34396;
pub const XLINE_LSE_M_M: u32 = 34397;
pub const XLINE_LSE_M_N: u32 = 34398;
pub const XLINE_LSE_M_O: u32 = 34399;
pub const XLINE_LSE_M_P: u32 = 34400;
pub const XLINE_LSE_M_Q: u32 = 34401;
pub const XLINE_LSE_M_R: u32 = 34402;
pub const XLINE_LSE_M_S: u32 = 34403;
pub const XLINE_LSE_M_T: u32 = 34404;
pub const XLINE_LSE_M_U: u32 = 34405;
pub const XLINE_LSE_M_V: u32 = 34406;
pub const XLINE_LSE_M_W: u32 = 34407;
pub const XLINE_LSE_M_X: u32 = 34408;
pub const XLINE_LSE_M_Y: u32 = 34409;
pub const XLINE_LSE_M_Z: u32 = 34410;
pub const XLINE_LSE_M_XL: u32 = 34411;
pub const XLINE_LSE_M_UKAL1: u32 = 34412;
pub const XLINE_LSE_M_UKBL1: u32 = 34413;
pub const XLINE_LSE_M_UKSL1: u32 = 34414;
pub const XLINE_LSE_M_EUL1: u32 = 34415;
pub const XLINE_LSE_M_ITL1: u32 = 34416;
pub const XLINE_LSE_M_IND: u32 = 34417;
pub const XLINE_TRQX_1: u32 = 34421;
pub const XLINE_TRQX_2: u32 = 34422;
pub const XLINE_TRQX_3: u32 = 34423;
pub const XLINE_TRQX_4: u32 = 34424;
pub const XLINE_TRQX_5: u32 = 34425;
pub const XLINE_TRQX_6: u32 = 34426;
pub const XLINE_TQD: u32 = 34427;
pub const XLINE_TQD_CDS: u32 = 34428;
pub const XLINE_TRQX_SYMMGR: u32 = 34429;
pub const XLINE_TRQXCDS_1: u32 = 34436;
pub const XLINE_TRQXCDS_2: u32 = 34437;
pub const XLINE_TRQXCDS_3: u32 = 34438;
pub const XLINE_TRQXCDS_4: u32 = 34439;
pub const XLINE_TRQXCDS_5: u32 = 34440;
pub const XLINE_TRQXCDS_6: u32 = 34441;
pub const XLINE_TRQXCDS_SYMMGR: u32 = 34442;
pub const XLINE_OSLO_M_A: u32 = 34448;
pub const XLINE_OSLO_M_B: u32 = 34449;
pub const XLINE_OSLO_M_C: u32 = 34450;
pub const XLINE_OSLO_M_D: u32 = 34451;
pub const XLINE_OSLO_M_E: u32 = 34452;
pub const XLINE_OSLO_M_F: u32 = 34453;
pub const XLINE_OSLO_M_P: u32 = 34460;
pub const XLINE_OSLO_M_SYMMGR: u32 = 34462;
pub const XLINE_OSLO_MT_SYMMGR: u32 = 34463;
pub const XLINE_OSLO_M_CDS_A: u32 = 34464;
pub const XLINE_OSLO_M_CDS_B: u32 = 34465;
pub const XLINE_OSLO_M_CDS_C: u32 = 34466;
pub const XLINE_OSLO_M_CDS_D: u32 = 34467;
pub const XLINE_OSLO_M_CDS_E: u32 = 34468;
pub const XLINE_OSLO_M_CDS_F: u32 = 34469;
pub const XLINE_OSLO_M_CDS_P: u32 = 34476;
pub const XLINE_OSLO_M_C_SYMMGR: u32 = 34478;
pub const XLINE_OSLO_MTC_SYMMGR: u32 = 34479;
pub const XLINE_HOTSPOTFX: u32 = 34560;
pub const XLINE_ICAPEBS: u32 = 34561;
pub const XLINE_CURRENEX: u32 = 34562;
pub const XLINE_UBSFX2B: u32 = 34563;
pub const XLINE_BARXFX: u32 = 34564;
pub const XLINE_ICAPAI: u32 = 34567;
pub const XLINE_FMFX: u32 = 34568;
pub const XLINE_FMFX_M0: u32 = 34569;
pub const XLINE_FMFX_M1: u32 = 34570;
pub const XLINE_FMFX_M2: u32 = 34571;
pub const XLINE_FMFX_M3: u32 = 34572;
pub const XLINE_FMFX_M4: u32 = 34573;
pub const XLINE_FMFX_M5: u32 = 34574;
pub const XLINE_FMFX_M6: u32 = 34575;
pub const XLINE_FMFX_M7: u32 = 34576;
pub const XLINE_FMFX_M8: u32 = 34577;
pub const XLINE_FMFX_M9: u32 = 34578;
pub const XLINE_FMCM: u32 = 34579;
pub const XLINE_FMCM_F0: u32 = 34580;
pub const XLINE_FMCM_F1: u32 = 34581;
pub const XLINE_FMCM_F2: u32 = 34582;
pub const XLINE_FMCM_F3: u32 = 34583;
pub const XLINE_FMCM_F4: u32 = 34584;
pub const XLINE_FMCM_F5: u32 = 34585;
pub const XLINE_FMCM_F6: u32 = 34586;
pub const XLINE_FMCM_F7: u32 = 34587;
pub const XLINE_FMCM_F8: u32 = 34588;
pub const XLINE_FMCM_F9: u32 = 34589;
pub const XLINE_FXALLAT: u32 = 34590;
pub const XLINE_FXALLAT_A0: u32 = 34591;
pub const XLINE_FXALLAT_A1: u32 = 34592;
pub const XLINE_FXALLAT_A2: u32 = 34593;
pub const XLINE_FXALLAT_A3: u32 = 34594;
pub const XLINE_FXALLAT_A4: u32 = 34595;
pub const XLINE_FXALLAT_A5: u32 = 34596;
pub const XLINE_FXALLAT_A6: u32 = 34597;
pub const XLINE_FXALLAT_A7: u32 = 34598;
pub const XLINE_FXALLAT_A8: u32 = 34599;
pub const XLINE_FXALLAT_A9: u32 = 34600;
pub const XLINE_CURRENEX_C0: u32 = 34601;
pub const XLINE_CURRENEX_C1: u32 = 34602;
pub const XLINE_CURRENEX_C2: u32 = 34603;
pub const XLINE_CURRENEX_C3: u32 = 34604;
pub const XLINE_CURRENEX_C4: u32 = 34605;
pub const XLINE_CURRENEX_C5: u32 = 34606;
pub const XLINE_CURRENEX_C6: u32 = 34607;
pub const XLINE_CURRENEX_C7: u32 = 34608;
pub const XLINE_CURRENEX_C8: u32 = 34609;
pub const XLINE_CURRENEX_C9: u32 = 34610;
pub const XLINE_HOTSPOTFX_H0: u32 = 34611;
pub const XLINE_HOTSPOTFX_H1: u32 = 34612;
pub const XLINE_HOTSPOTFX_H2: u32 = 34613;
pub const XLINE_HOTSPOTFX_H3: u32 = 34614;
pub const XLINE_HOTSPOTFX_H4: u32 = 34615;
pub const XLINE_HOTSPOTFX_H5: u32 = 34616;
pub const XLINE_HOTSPOTFX_H6: u32 = 34617;
pub const XLINE_HOTSPOTFX_H7: u32 = 34618;
pub const XLINE_HOTSPOTFX_H8: u32 = 34619;
pub const XLINE_HOTSPOTFX_H9: u32 = 34620;
pub const XLINE_GTXFX: u32 = 34621;
pub const XLINE_GTXFX_G0: u32 = 34622;
pub const XLINE_GTXFX_G1: u32 = 34623;
pub const XLINE_GTXFX_G2: u32 = 34624;
pub const XLINE_GTXFX_G3: u32 = 34625;
pub const XLINE_GTXFX_G4: u32 = 34626;
pub const XLINE_GTXFX_G5: u32 = 34627;
pub const XLINE_GTXFX_G6: u32 = 34628;
pub const XLINE_GTXFX_G7: u32 = 34629;
pub const XLINE_GTXFX_G8: u32 = 34630;
pub const XLINE_GTXFX_G9: u32 = 34631;
pub const XLINE_BNPFX: u32 = 34632;
pub const XLINE_RBSFX: u32 = 34633;
pub const XLINE_SEBFX: u32 = 34634;
pub const XLINE_DBRPDFX: u32 = 34635;
pub const XLINE_JPMFX: u32 = 34636;
pub const XLINE_EBSFIXFX_S5: u32 = 34637;
pub const XLINE_EBSFIXFX_S6: u32 = 34638;
pub const XLINE_EBSFIXFX_S7: u32 = 34639;
pub const XLINE_EBSFIXFX_S8: u32 = 34640;
pub const XLINE_EBSFIXFX_S9: u32 = 34641;
pub const XLINE_BBTBFX_B5: u32 = 34643;
pub const XLINE_BBTBFX_B6: u32 = 34644;
pub const XLINE_BBTBFX_B7: u32 = 34645;
pub const XLINE_BBTBFX_B8: u32 = 34646;
pub const XLINE_BBTBFX_B9: u32 = 34647;
pub const XLINE_ICAPEBS_XML: u32 = 34648;
pub const XLINE_CURRENEX_I0: u32 = 34649;
pub const XLINE_CURRENEX_I1: u32 = 34650;
pub const XLINE_CURRENEX_I2: u32 = 34651;
pub const XLINE_CURRENEX_I3: u32 = 34652;
pub const XLINE_CURRENEX_I4: u32 = 34653;
pub const XLINE_CURRENEX_I5: u32 = 34654;
pub const XLINE_CURRENEX_I6: u32 = 34655;
pub const XLINE_CURRENEX_I7: u32 = 34656;
pub const XLINE_CURRENEX_I8: u32 = 34657;
pub const XLINE_CURRENEX_I9: u32 = 34658;
pub const XLINE_CANTORFX: u32 = 34659;
pub const XLINE_FXINSIDE: u32 = 34660;
pub const XLINE_LMAXI: u32 = 34661;
pub const XLINE_LMAXP: u32 = 34662;
pub const XLINE_PARFX: u32 = 34663;
pub const XLINE_MSFX: u32 = 34664;
pub const XLINE_CITIFX: u32 = 34665;
pub const XLINE_BOAFX: u32 = 34666;
pub const XLINE_CSFX: u32 = 34667;
pub const XLINE_GSFX: u32 = 34668;
pub const XLINE_NOMURAFX: u32 = 34669;
pub const XLINE_GTSFX: u32 = 34670;
pub const XLINE_ICAPAI_A0: u32 = 34671;
pub const XLINE_ICAPAI_A1: u32 = 34672;
pub const XLINE_ICAPAI_A2: u32 = 34673;
pub const XLINE_ICAPAI_A3: u32 = 34674;
pub const XLINE_ICAPAI_A4: u32 = 34675;
pub const XLINE_EBSFIXFX_F5: u32 = 34676;
pub const XLINE_EBSFIXFX_F6: u32 = 34677;
pub const XLINE_EBSFIXFX_F7: u32 = 34678;
pub const XLINE_EBSFIXFX_F8: u32 = 34679;
pub const XLINE_EBSFIXFX_F9: u32 = 34680;
pub const XLINE_ICAPEB_I0: u32 = 34681;
pub const XLINE_ICAPEB_I1: u32 = 34682;
pub const XLINE_ICAPEB_I2: u32 = 34683;
pub const XLINE_ICAPEB_I3: u32 = 34684;
pub const XLINE_ICAPEB_I4: u32 = 34685;
pub const XLINE_ICAPEB_I5: u32 = 34686;
pub const XLINE_ICAPEB_I6: u32 = 34687;
pub const XLINE_ICAPEB_I7: u32 = 34688;
pub const XLINE_ICAPEB_I8: u32 = 34689;
pub const XLINE_ICAPEB_I9: u32 = 34690;
pub const XLINE_VIRTUFX: u32 = 34691;
pub const XLINE_VIRTUFX_V0: u32 = 34692;
pub const XLINE_VIRTUFX_V1: u32 = 34693;
pub const XLINE_VIRTUFX_V2: u32 = 34694;
pub const XLINE_VIRTUFX_V3: u32 = 34695;
pub const XLINE_VIRTUFX_V4: u32 = 34696;
pub const XLINE_VIRTUFX_V5: u32 = 34697;
pub const XLINE_VIRTUFX_V6: u32 = 34698;
pub const XLINE_VIRTUFX_V7: u32 = 34699;
pub const XLINE_VIRTUFX_V8: u32 = 34700;
pub const XLINE_VIRTUFX_V9: u32 = 34701;
pub const XLINE_CURRENEX_ITCH: u32 = 34702;
pub const XLINE_WPACBFX: u32 = 34703;
pub const XLINE_TDFX: u32 = 34704;
pub const XLINE_JMFX: u32 = 34705;
pub const XLINE_STSTFX: u32 = 34706;
pub const XLINE_MOEXFX: u32 = 34707;
pub const XLINE_MOEXFX_OBR: u32 = 34708;
pub const XLINE_MOEXFX_OBS: u32 = 34709;
pub const XLINE_MOEXFX_IDF: u32 = 34710;
pub const XLINE_MOEXFX_ISF: u32 = 34711;
pub const XLINE_MOEXFX_HIST: u32 = 34712;
pub const XLINE_EBSFIXFX_ES: u32 = 34714;
pub const XLINE_EBSFIXFX_S0: u32 = 34715;
pub const XLINE_EBSFIXFX_S1: u32 = 34716;
pub const XLINE_EBSFIXFX_S2: u32 = 34717;
pub const XLINE_EBSFIXFX_S3: u32 = 34718;
pub const XLINE_EBSFIXFX_S4: u32 = 34719;
pub const XLINE_EBSFIXFX_EF: u32 = 34720;
pub const XLINE_EBSFIXFX_F0: u32 = 34721;
pub const XLINE_EBSFIXFX_F1: u32 = 34722;
pub const XLINE_EBSFIXFX_F2: u32 = 34723;
pub const XLINE_EBSFIXFX_F3: u32 = 34724;
pub const XLINE_EBSFIXFX_F4: u32 = 34725;
pub const XLINE_ICAPAI_B0: u32 = 34726;
pub const XLINE_ICAPAI_B1: u32 = 34727;
pub const XLINE_ICAPAI_B2: u32 = 34728;
pub const XLINE_ICAPAI_B3: u32 = 34729;
pub const XLINE_ICAPAI_B4: u32 = 34730;
pub const XLINE_S2BXFX: u32 = 34731;
pub const XLINE_JPMFXMD: u32 = 34732;
pub const XLINE_EBS_ULTRA_1: u32 = 34733;
pub const XLINE_EBS_ULTRA_2: u32 = 34734;
pub const XLINE_EBS_ULTRA_3: u32 = 34735;
pub const XLINE_EBS_ULTRA_4: u32 = 34736;
pub const XLINE_EBS_ULTRA_5: u32 = 34737;
pub const XLINE_EBS_ULTRA_6: u32 = 34738;
pub const XLINE_EBS_ULTRA_7: u32 = 34739;
pub const XLINE_EBS_ULTRA_8: u32 = 34740;
pub const XLINE_EBS_ULTRA_9: u32 = 34741;
pub const XLINE_EBS_ULTRA_10: u32 = 34742;
pub const XLINE_EBS_ULTRA_T1: u32 = 34743;
pub const XLINE_EBS_ULTRA_T2: u32 = 34744;
pub const XLINE_EBS_ULTRA_T3: u32 = 34745;
pub const XLINE_EBS_ULTRA_T4: u32 = 34746;
pub const XLINE_EBS_ULTRA_T5: u32 = 34747;
pub const XLINE_EBS_ULTRA_T6: u32 = 34748;
pub const XLINE_EBS_ULTRA_T7: u32 = 34749;
pub const XLINE_EBS_ULTRA_T8: u32 = 34750;
pub const XLINE_EBS_ULTRA_T9: u32 = 34751;
pub const XLINE_EBS_ULTRA_T10: u32 = 34752;
pub const XLINE_HSBCFX: u32 = 34753;
pub const XLINE_HSBCFX0: u32 = 34754;
pub const XLINE_HSBCFX1: u32 = 34755;
pub const XLINE_HSBCFX2: u32 = 34756;
pub const XLINE_HSBCFX3: u32 = 34757;
pub const XLINE_HSBCFX4: u32 = 34758;
pub const XLINE_HSBCFX5: u32 = 34759;
pub const XLINE_HSBCFX6: u32 = 34760;
pub const XLINE_HSBCFX7: u32 = 34761;
pub const XLINE_HSBCFX8: u32 = 34762;
pub const XLINE_HSBCFX9: u32 = 34763;
pub const XLINE_JPTUS: u32 = 34764;
pub const XLINE_HOTSPOTFIXFX: u32 = 34765;
pub const XLINE_HOTSPOTFIXFX_H0: u32 = 34766;
pub const XLINE_HOTSPOTFIXFX_H1: u32 = 34767;
pub const XLINE_HOTSPOTFIXFX_H2: u32 = 34768;
pub const XLINE_HOTSPOTFIXFX_H3: u32 = 34769;
pub const XLINE_HOTSPOTFIXFX_H4: u32 = 34770;
pub const XLINE_HOTSPOTFIXFX_H5: u32 = 34771;
pub const XLINE_HOTSPOTFIXFX_H6: u32 = 34772;
pub const XLINE_HOTSPOTFIXFX_H7: u32 = 34773;
pub const XLINE_HOTSPOTFIXFX_H8: u32 = 34774;
pub const XLINE_HOTSPOTFIXFX_H9: u32 = 34775;
pub const XLINE_STSTFX0: u32 = 34776;
pub const XLINE_STSTFX1: u32 = 34777;
pub const XLINE_STSTFX2: u32 = 34778;
pub const XLINE_STSTFX3: u32 = 34779;
pub const XLINE_STSTFX4: u32 = 34780;
pub const XLINE_TRSBIN_INC: u32 = 34786;
pub const XLINE_TRSBIN_SEC: u32 = 34787;
pub const XLINE_TRSBIN_TRADE: u32 = 34788;
pub const XLINE_TRSBIN_DEMO_INC: u32 = 34789;
pub const XLINE_TRSBIN_DEMO_SEC: u32 = 34790;
pub const XLINE_TRSBIN_DEMO_TRA: u32 = 34791;
pub const XLINE_LMAXITCH: u32 = 34792;
pub const XLINE_LMAXH0: u32 = 34793;
pub const XLINE_LMAXH1: u32 = 34794;
pub const XLINE_LMAXH2: u32 = 34795;
pub const XLINE_LMAXH3: u32 = 34796;
pub const XLINE_LMAXH4: u32 = 34797;
pub const XLINE_LMAXH5: u32 = 34798;
pub const XLINE_LMAXH6: u32 = 34799;
pub const XLINE_LMAXH7: u32 = 34800;
pub const XLINE_LMAXH8: u32 = 34801;
pub const XLINE_LMAXH9: u32 = 34802;
pub const XLINE_LMESLT: u32 = 34803;
pub const XLINE_PARFX_P0: u32 = 34804;
pub const XLINE_PARFX_P1: u32 = 34805;
pub const XLINE_PARFX_P2: u32 = 34806;
pub const XLINE_PARFX_P3: u32 = 34807;
pub const XLINE_PARFX_P4: u32 = 34808;
pub const XLINE_PARFX_P5: u32 = 34809;
pub const XLINE_PARFX_P6: u32 = 34810;
pub const XLINE_PARFX_P7: u32 = 34811;
pub const XLINE_PARFX_P8: u32 = 34812;
pub const XLINE_PARFX_P9: u32 = 34813;
pub const XLINE_VIRTUFI: u32 = 34814;
pub const XLINE_CSFI: u32 = 34815;
pub const XLINE_ARINT_PUB_1: u32 = 34816;
pub const XLINE_ARINT_PUB_2: u32 = 34817;
pub const XLINE_ARINT_PUB_3: u32 = 34818;
pub const XLINE_ARINT_PUB_4: u32 = 34819;
pub const XLINE_ARINT_RET_1: u32 = 34820;
pub const XLINE_ARINT_RET_2: u32 = 34821;
pub const XLINE_ARINT_RET_3: u32 = 34822;
pub const XLINE_ARINT_RET_4: u32 = 34823;
pub const XLINE_ARINT_REF_1: u32 = 34824;
pub const XLINE_ARINT_REF_2: u32 = 34825;
pub const XLINE_ARINT_REF_3: u32 = 34826;
pub const XLINE_ARINT_REF_4: u32 = 34827;
pub const XLINE_AB_PUB_1: u32 = 34828;
pub const XLINE_AB_PUB_2: u32 = 34829;
pub const XLINE_AB_PUB_3: u32 = 34830;
pub const XLINE_AB_PUB_4: u32 = 34831;
pub const XLINE_AB_RET_1: u32 = 34832;
pub const XLINE_AB_RET_2: u32 = 34833;
pub const XLINE_AB_RET_3: u32 = 34834;
pub const XLINE_AB_RET_4: u32 = 34835;
pub const XLINE_AB_REF_1: u32 = 34836;
pub const XLINE_AB_REF_2: u32 = 34837;
pub const XLINE_AB_REF_3: u32 = 34838;
pub const XLINE_AB_REF_4: u32 = 34839;
pub const XLINE_ARBBO_PUB_1: u32 = 34852;
pub const XLINE_ARBBO_PUB_2: u32 = 34853;
pub const XLINE_ARBBO_RET_1: u32 = 34854;
pub const XLINE_ARBBO_RET_2: u32 = 34855;
pub const XLINE_ARBBO_REF_1: u32 = 34856;
pub const XLINE_ARBBO_REF_2: u32 = 34857;
pub const XLINE_ARTD_PUB_1: u32 = 34858;
pub const XLINE_ARTD_RET_1: u32 = 34859;
pub const XLINE_ARTD_REF_1: u32 = 34860;
pub const XLINE_ARRRP_PUB_1: u32 = 34861;
pub const XLINE_ARRRP_RET_1: u32 = 34862;
pub const XLINE_ARRRP_REF_1: u32 = 34863;
pub const XLINE_NYSUM_PUB_1: u32 = 34864;
pub const XLINE_ARINT_SYMMGR: u32 = 34865;
pub const XLINE_AMEXINT_SYMMGR: u32 = 34867;
pub const XLINE_NYSEINT_SYMMGR: u32 = 34868;
pub const XLINE_AMEXTD_SYMMGR: u32 = 34869;
pub const XLINE_AMOPTLS_SYMMGR: u32 = 34870;
pub const XLINE_ARTD_SYMMGR: u32 = 34871;
pub const XLINE_ABXDP_SYMMGR: u32 = 34872;
pub const XLINE_NYSE_INT_SYMMGR: u32 = 34880;
pub const XLINE_NYSE_INT_1: u32 = 34881;
pub const XLINE_NYSE_INT_2: u32 = 34882;
pub const XLINE_NYSE_INT_3: u32 = 34883;
pub const XLINE_NYSE_INT_4: u32 = 34884;
pub const XLINE_NYSE_BBO_SYMMGR: u32 = 34885;
pub const XLINE_NYSE_BBO_1: u32 = 34886;
pub const XLINE_NYSE_BBO_2: u32 = 34887;
pub const XLINE_NMKT_INT_SYMMGR: u32 = 34888;
pub const XLINE_NMKT_INT_1: u32 = 34889;
pub const XLINE_NMKT_INT_2: u32 = 34890;
pub const XLINE_NMKT_INT_3: u32 = 34891;
pub const XLINE_NMKT_INT_4: u32 = 34892;
pub const XLINE_NMKT_BBO_SYMMGR: u32 = 34893;
pub const XLINE_NMKT_BBO_1: u32 = 34894;
pub const XLINE_NYSE_TRF_1: u32 = 34895;
pub const XLINE_ARCA_INT_SYMMGR: u32 = 34896;
pub const XLINE_ARCA_INT_1: u32 = 34897;
pub const XLINE_ARCA_INT_2: u32 = 34898;
pub const XLINE_ARCA_INT_3: u32 = 34899;
pub const XLINE_ARCA_INT_4: u32 = 34900;
pub const XLINE_ARCA_BBO_SYMMGR: u32 = 34901;
pub const XLINE_ARCA_BBO_1: u32 = 34902;
pub const XLINE_ARCA_BBO_2: u32 = 34903;
pub const XLINE_NYSE_TRD_SYMMGR: u32 = 34904;
pub const XLINE_NYSE_TRD_1: u32 = 34905;
pub const XLINE_NYSE_IMB_SYMMGR: u32 = 34906;
pub const XLINE_NYSE_IMB_1: u32 = 34907;
pub const XLINE_NMKT_TRD_SYMMGR: u32 = 34908;
pub const XLINE_NMKT_TRD_1: u32 = 34909;
pub const XLINE_NMKT_IMB_SYMMGR: u32 = 34910;
pub const XLINE_NMKT_IMB_1: u32 = 34911;
pub const XLINE_ARCA_TRD_SYMMGR: u32 = 34912;
pub const XLINE_ARCA_TRD_1: u32 = 34913;
pub const XLINE_ARCA_IMB_SYMMGR: u32 = 34914;
pub const XLINE_ARCA_IMB_1: u32 = 34915;
pub const XLINE_BCHIX_EU_SYM: u32 = 34916;
pub const XLINE_DXE_SYMMGR: u32 = 35008;
pub const XLINE_DXE_RR: u32 = 35009;
pub const XLINE_DXE_1: u32 = 35010;
pub const XLINE_DXE_2: u32 = 35011;
pub const XLINE_DXE_3: u32 = 35012;
pub const XLINE_DXE_4: u32 = 35013;
pub const XLINE_DXE_5: u32 = 35014;
pub const XLINE_DXE_6: u32 = 35015;
pub const XLINE_DXE_7: u32 = 35016;
pub const XLINE_DXE_8: u32 = 35017;
pub const XLINE_DXE_9: u32 = 35018;
pub const XLINE_DXE_10: u32 = 35019;
pub const XLINE_DXE_11: u32 = 35020;
pub const XLINE_DXE_12: u32 = 35021;
pub const XLINE_DXET_SYMMGR: u32 = 35040;
pub const XLINE_DXET_RR: u32 = 35041;
pub const XLINE_DXET_1: u32 = 35042;
pub const XLINE_DXET_2: u32 = 35043;
pub const XLINE_DXET_3: u32 = 35044;
pub const XLINE_DXET_4: u32 = 35045;
pub const XLINE_DXET_5: u32 = 35046;
pub const XLINE_DXET_6: u32 = 35047;
pub const XLINE_DXET_7: u32 = 35048;
pub const XLINE_DXET_8: u32 = 35049;
pub const XLINE_DXET_9: u32 = 35050;
pub const XLINE_DXET_10: u32 = 35051;
pub const XLINE_DXET_11: u32 = 35052;
pub const XLINE_DXET_12: u32 = 35053;
pub const XLINE_BCHIX_EU_1: u32 = 35072;
pub const XLINE_BCHIX_EU_2: u32 = 35073;
pub const XLINE_BCHIX_EU_3: u32 = 35074;
pub const XLINE_BCHIX_EU_4: u32 = 35075;
pub const XLINE_BCHIX_EU_5: u32 = 35076;
pub const XLINE_BCHIX_EU_6: u32 = 35077;
pub const XLINE_BCHIX_EU_7: u32 = 35078;
pub const XLINE_BCHIX_EU_8: u32 = 35079;
pub const XLINE_BCHIX_EU_9: u32 = 35080;
pub const XLINE_BCHIX_EU_10: u32 = 35081;
pub const XLINE_BCHIX_EU_11: u32 = 35082;
pub const XLINE_BCHIX_EU_12: u32 = 35083;
pub const XLINE_BCHIX_EU_RR: u32 = 35084;
pub const XLINE_TBCHIX_EU_1: u32 = 35085;
pub const XLINE_TBCHIX_EU_2: u32 = 35086;
pub const XLINE_TBCHIX_EU_3: u32 = 35087;
pub const XLINE_TBCHIX_EU_4: u32 = 35088;
pub const XLINE_TBCHIX_EU_5: u32 = 35089;
pub const XLINE_TBCHIX_EU_6: u32 = 35090;
pub const XLINE_TBCHIX_EU_7: u32 = 35091;
pub const XLINE_TBCHIX_EU_8: u32 = 35092;
pub const XLINE_TBCHIX_EU_9: u32 = 35093;
pub const XLINE_TBCHIX_EU_10: u32 = 35094;
pub const XLINE_TBCHIX_EU_11: u32 = 35095;
pub const XLINE_TBCHIX_EU_12: u32 = 35096;
pub const XLINE_TBCHIXEU_SYM: u32 = 35097;
pub const XLINE_TBCHIX_EU_SYM: u32 = 35098;
pub const XLINE_BCHIX_EU_UK_RR: u32 = 35099;
pub const XLINE_TBCHIX_EU_RR: u32 = 35100;
pub const XLINE_TBCHIX_EU_UK_RR: u32 = 35101;
pub const XLINE_BIT_M_MTA_A: u32 = 35136;
pub const XLINE_BIT_M_MTA_B: u32 = 35137;
pub const XLINE_BIT_M_ETF_A: u32 = 35138;
pub const XLINE_BIT_M_ETF_B: u32 = 35139;
pub const XLINE_BIT_M_MOT: u32 = 35140;
pub const XLINE_BIT_M_SEDEX: u32 = 35141;
pub const XLINE_BIT_M_TAH: u32 = 35142;
pub const XLINE_BIT_M_ADMIN: u32 = 35143;
pub const XLINE_BIT_M_SYMMGR: u32 = 35167;
pub const XLINE_BIT_M_CDS_A: u32 = 35168;
pub const XLINE_BIT_M_CDS_B: u32 = 35169;
pub const XLINE_BIT_M_CDS_SYMM: u32 = 35183;
pub const XLINE_JSE_M_A: u32 = 35184;
pub const XLINE_JSE_M_B: u32 = 35185;
pub const XLINE_JSE_M_C: u32 = 35186;
pub const XLINE_JSE_M_D: u32 = 35187;
pub const XLINE_JSE_M_SYMMGR: u32 = 35199;
pub const XLINE_JSE_M_CDS_A: u32 = 35200;
pub const XLINE_JSE_M_CDS_B: u32 = 35201;
pub const XLINE_JSE_M_CDS_SYMM: u32 = 35215;
pub const XLINE_IEXTOPS: u32 = 35216;
pub const XLINE_IEXTOPS_EXCH: u32 = 35217;
pub const XLINE_IEXDEEP: u32 = 35218;
pub const XLINE_IEXTOPST: u32 = 35219;
pub const XLINE_IEXDEEPT: u32 = 35220;
pub const XLINE_TSE_RT_1: u32 = 35232;
pub const XLINE_TSE_RT_2: u32 = 35233;
pub const XLINE_TSE_RT_3: u32 = 35234;
pub const XLINE_TSE_RT_4: u32 = 35235;
pub const XLINE_TSE_RT_5: u32 = 35236;
pub const XLINE_TSE_RT_6: u32 = 35237;
pub const XLINE_TSE_RT_7: u32 = 35238;
pub const XLINE_TSE_RT_8: u32 = 35239;
pub const XLINE_TSE_RT_9: u32 = 35240;
pub const XLINE_TSE_RT_10: u32 = 35241;
pub const XLINE_TSE_RT_11: u32 = 35242;
pub const XLINE_TSE_RT_12: u32 = 35243;
pub const XLINE_TSE_BASE: u32 = 35244;
pub const XLINE_TSE_ISSUE: u32 = 35245;
pub const XLINE_TSE_MGN: u32 = 35246;
pub const XLINE_TSE_INDEX: u32 = 35247;
pub const XLINE_TSE_RT_DUM: u32 = 35248;
pub const XLINE_TSE_BASE_DUM: u32 = 35249;
pub const XLINE_TSE_MGN_DUM: u32 = 35250;
pub const XLINE_TSE_RR_1: u32 = 35251;
pub const XLINE_TSE_RR_2: u32 = 35252;
pub const XLINE_FSE_BASE: u32 = 35253;
pub const XLINE_FSE_ISSUE: u32 = 35254;
pub const XLINE_NSE_BASE: u32 = 35255;
pub const XLINE_NSE_ISSUE: u32 = 35256;
pub const XLINE_SSE_BASE: u32 = 35257;
pub const XLINE_SSE_ISSUE: u32 = 35258;
pub const XLINE_FSE_RT_1: u32 = 35259;
pub const XLINE_NSE_RT_1: u32 = 35260;
pub const XLINE_SSE_RT_1: u32 = 35261;
pub const XLINE_TSEREF_RR_1: u32 = 35262;
pub const XLINE_TSEREF_RR_2: u32 = 35263;
pub const XLINE_TSETST_RT_1: u32 = 35264;
pub const XLINE_TSETST_RT_2: u32 = 35265;
pub const XLINE_TSETST_RT_3: u32 = 35266;
pub const XLINE_TSETST_RT_4: u32 = 35267;
pub const XLINE_TSETST_RT_5: u32 = 35268;
pub const XLINE_TSETST_RT_6: u32 = 35269;
pub const XLINE_TSETST_RT_7: u32 = 35270;
pub const XLINE_TSETST_RT_8: u32 = 35271;
pub const XLINE_TSETST_RT_9: u32 = 35272;
pub const XLINE_TSETST_RT_10: u32 = 35273;
pub const XLINE_TSETST_RT_11: u32 = 35274;
pub const XLINE_TSETST_RT_12: u32 = 35275;
pub const XLINE_TSETST_BASE: u32 = 35276;
pub const XLINE_TSETST_ISSUE: u32 = 35277;
pub const XLINE_TSETST_MGN: u32 = 35278;
pub const XLINE_TSETST_INDEX: u32 = 35279;
pub const XLINE_TSETST_RT_DUM: u32 = 35280;
pub const XLINE_TSETST_BASE_DUM: u32 = 35281;
pub const XLINE_TSETST_MGN_DUM: u32 = 35282;
pub const XLINE_TSETST_RR_1: u32 = 35283;
pub const XLINE_TSETST_RR_2: u32 = 35284;
pub const XLINE_TSE_RT_WB_1: u32 = 35296;
pub const XLINE_TSE_RT_WB_2: u32 = 35297;
pub const XLINE_TSE_RT_WB_3: u32 = 35298;
pub const XLINE_TSE_RT_WB_4: u32 = 35299;
pub const XLINE_TSE_RT_WB_5: u32 = 35300;
pub const XLINE_TSE_RT_WB_6: u32 = 35301;
pub const XLINE_TSE_RT_WB_7: u32 = 35302;
pub const XLINE_TSE_RT_WB_8: u32 = 35303;
pub const XLINE_TSE_RT_WB_9: u32 = 35304;
pub const XLINE_TSE_RT_WB_10: u32 = 35305;
pub const XLINE_TSE_RT_WB_11: u32 = 35306;
pub const XLINE_TSE_RT_WB_12: u32 = 35307;
pub const XLINE_TSE_WB_BASE: u32 = 35308;
pub const XLINE_TSE_WB_ISSUE: u32 = 35309;
pub const XLINE_TSE_WB_MGN: u32 = 35310;
pub const XLINE_TSE_WB_INDEX: u32 = 35311;
pub const XLINE_TSE_RT_WB_DUM: u32 = 35312;
pub const XLINE_TSE_WB_BASE_DUM: u32 = 35313;
pub const XLINE_TSE_WB_MGN_DUM: u32 = 35314;
pub const XLINE_TSE_RR_WB_1: u32 = 35315;
pub const XLINE_TSE_RR_WB_2: u32 = 35316;
pub const XLINE_FSE_WB_BASE: u32 = 35317;
pub const XLINE_FSE_WB_ISSUE: u32 = 35318;
pub const XLINE_NSE_WB_BASE: u32 = 35319;
pub const XLINE_NSE_WB_ISSUE: u32 = 35320;
pub const XLINE_SSE_WB_BASE: u32 = 35321;
pub const XLINE_SSE_WB_ISSUE: u32 = 35322;
pub const XLINE_FSE_RT_WB_1: u32 = 35323;
pub const XLINE_NSE_RT_WB_1: u32 = 35324;
pub const XLINE_SSE_RT_WB_1: u32 = 35325;
pub const XLINE_TSEREFW_RR_1: u32 = 35326;
pub const XLINE_TSEREFW_RR_2: u32 = 35327;
pub const XLINE_EXEGY_COMP_1: u32 = 35328;
pub const XLINE_ICE_REF_1: u32 = 35696;
pub const XLINE_ICE_REF_2: u32 = 35697;
pub const XLINE_ICE_REF_3: u32 = 35698;
pub const XLINE_ICE_REF_4: u32 = 35699;
pub const XLINE_ICE_REF_5: u32 = 35700;
pub const XLINE_ICE_REF_6: u32 = 35701;
pub const XLINE_ICE_REF_7: u32 = 35702;
pub const XLINE_ICE_REF_8: u32 = 35703;
pub const XLINE_ICE_REF_9: u32 = 35704;
pub const XLINE_ICE_REF_10: u32 = 35705;
pub const XLINE_ICE_REF_11: u32 = 35706;
pub const XLINE_ICE_REF_12: u32 = 35707;
pub const XLINE_ICE_REF_13: u32 = 35708;
pub const XLINE_ICE_REF_14: u32 = 35709;
pub const XLINE_ICE_REF_15: u32 = 35710;
pub const XLINE_ICE_REF_16: u32 = 35711;
pub const XLINE_GFIFIXFX: u32 = 35712;
pub const XLINE_BGCFIXFX: u32 = 35713;
pub const XLINE_ESPEEDI_SYMMGR: u32 = 35714;
pub const XLINE_ESPEEDI_LONG: u32 = 35715;
pub const XLINE_ESPEEDI_BILL: u32 = 35716;
pub const XLINE_ESPEEDI_SHORT: u32 = 35717;
pub const XLINE_ESPEEDI_INTMD: u32 = 35718;
pub const XLINE_ESPEEDI_FIVE: u32 = 35719;
pub const XLINE_ESPEEDI: u32 = 35720;
pub const XLINE_EBSFIXFX_W0: u32 = 35721;
pub const XLINE_EBSFIXFX_W1: u32 = 35722;
pub const XLINE_EBSFIXFX_W2: u32 = 35723;
pub const XLINE_EBSFIXFX_W3: u32 = 35724;
pub const XLINE_EBSFIXFX_W4: u32 = 35725;
pub const XLINE_PEARLTOM_1: u32 = 36864;
pub const XLINE_PEARLTOM_2: u32 = 36865;
pub const XLINE_PEARLTOM_3: u32 = 36866;
pub const XLINE_PEARLTOM_4: u32 = 36867;
pub const XLINE_PEARLTOM_5: u32 = 36868;
pub const XLINE_PEARLTOM_6: u32 = 36869;
pub const XLINE_PEARLTOM_7: u32 = 36870;
pub const XLINE_PEARLTOM_8: u32 = 36871;
pub const XLINE_PEARLTOM_9: u32 = 36872;
pub const XLINE_PEARLTOM_10: u32 = 36873;
pub const XLINE_PEARLTOM_11: u32 = 36874;
pub const XLINE_PEARLTOM_12: u32 = 36875;
pub const XLINE_PEARLTOM_SYMMGR: u32 = 36876;
pub const XLINE_EMLDTOM_1: u32 = 36896;
pub const XLINE_EMLDTOM_2: u32 = 36897;
pub const XLINE_EMLDTOM_3: u32 = 36898;
pub const XLINE_EMLDTOM_4: u32 = 36899;
pub const XLINE_EMLDTOM_5: u32 = 36900;
pub const XLINE_EMLDTOM_6: u32 = 36901;
pub const XLINE_EMLDTOM_7: u32 = 36902;
pub const XLINE_EMLDTOM_8: u32 = 36903;
pub const XLINE_EMLDTOM_9: u32 = 36904;
pub const XLINE_EMLDTOM_10: u32 = 36905;
pub const XLINE_EMLDTOM_11: u32 = 36906;
pub const XLINE_EMLDTOM_12: u32 = 36907;
pub const XLINE_EMLDTOM_SYMMGR: u32 = 36908;
pub const XLINE_EMLDTOMT_1: u32 = 36928;
pub const XLINE_EMLDTOMT_2: u32 = 36929;
pub const XLINE_EMLDTOMT_SYMMGR: u32 = 36930;
pub const XLINE_MIAXEQD_1: u32 = 36944;
pub const XLINE_MIAXEQD_2: u32 = 36945;
pub const XLINE_MIAXEQD_3: u32 = 36946;
pub const XLINE_MIAXEQD_4: u32 = 36947;
pub const XLINE_MIAXEQD_5: u32 = 36948;
pub const XLINE_MIAXEQD_6: u32 = 36949;
pub const XLINE_MIAXEQD_7: u32 = 36950;
pub const XLINE_MIAXEQD_8: u32 = 36951;
pub const XLINE_MIAXEQD_9: u32 = 36952;
pub const XLINE_MIAXEQD_10: u32 = 36953;
pub const XLINE_MIAXEQD_11: u32 = 36954;
pub const XLINE_MIAXEQD_12: u32 = 36955;
pub const XLINE_MIAXEQD_13: u32 = 36956;
pub const XLINE_MIAXEQD_14: u32 = 36957;
pub const XLINE_MIAXEQD_15: u32 = 36958;
pub const XLINE_MIAXEQD_16: u32 = 36959;
pub const XLINE_MIAXEQD_17: u32 = 36960;
pub const XLINE_MIAXEQD_18: u32 = 36961;
pub const XLINE_MIAXEQD_19: u32 = 36962;
pub const XLINE_MIAXEQD_20: u32 = 36963;
pub const XLINE_MIAXEQD_21: u32 = 36964;
pub const XLINE_MIAXEQD_22: u32 = 36965;
pub const XLINE_MIAXEQD_23: u32 = 36966;
pub const XLINE_MIAXEQD_24: u32 = 36967;
pub const XLINE_MIAXEQD_SYMMGR: u32 = 36975;
pub const XLINE_MIAXEQDT1_1: u32 = 36976;
pub const XLINE_MIAXEQDT1_2: u32 = 36977;
pub const XLINE_MIAXEQDT1_SYM: u32 = 36984;
pub const XLINE_MIAXEQDT2_1: u32 = 36985;
pub const XLINE_MIAXEQDT2_2: u32 = 36986;
pub const XLINE_MIAXEQDT2_SYM: u32 = 36991;
pub const XLINE_MIAXEQTP_1: u32 = 36992;
pub const XLINE_MIAXEQTP_2: u32 = 36993;
pub const XLINE_MIAXEQTP_3: u32 = 36994;
pub const XLINE_MIAXEQTP_4: u32 = 36995;
pub const XLINE_MIAXEQTP_5: u32 = 36996;
pub const XLINE_MIAXEQTP_6: u32 = 36997;
pub const XLINE_MIAXEQTP_7: u32 = 36998;
pub const XLINE_MIAXEQTP_8: u32 = 36999;
pub const XLINE_MIAXEQTP_9: u32 = 37000;
pub const XLINE_MIAXEQTP_10: u32 = 37001;
pub const XLINE_MIAXEQTP_11: u32 = 37002;
pub const XLINE_MIAXEQTP_12: u32 = 37003;
pub const XLINE_MIAXEQTP_13: u32 = 37004;
pub const XLINE_MIAXEQTP_14: u32 = 37005;
pub const XLINE_MIAXEQTP_15: u32 = 37006;
pub const XLINE_MIAXEQTP_16: u32 = 37007;
pub const XLINE_MIAXEQTP_17: u32 = 37008;
pub const XLINE_MIAXEQTP_18: u32 = 37009;
pub const XLINE_MIAXEQTP_19: u32 = 37010;
pub const XLINE_MIAXEQTP_20: u32 = 37011;
pub const XLINE_MIAXEQTP_21: u32 = 37012;
pub const XLINE_MIAXEQTP_22: u32 = 37013;
pub const XLINE_MIAXEQTP_23: u32 = 37014;
pub const XLINE_MIAXEQTP_24: u32 = 37015;
pub const XLINE_MIAXEQTP_SYMMGR: u32 = 37023;
pub const XLINE_MIAXEQTPT1_1: u32 = 37024;
pub const XLINE_MIAXEQTPT1_2: u32 = 37025;
pub const XLINE_MIAXEQTPT1_SYM: u32 = 37032;
pub const XLINE_MIAXEQTPT2_1: u32 = 37033;
pub const XLINE_MIAXEQTPT2_2: u32 = 37034;
pub const XLINE_MIAXEQTPT2_SYM: u32 = 37039;
pub const XLINE_OQ_SYMMGR: u32 = 37120;
pub const XLINE_OT_SYMMGR: u32 = 37121;
pub const XLINE_OQBEEQ_FBMU_1: u32 = 37122;
pub const XLINE_OQBEEQ_FBMU_2: u32 = 37123;
pub const XLINE_OQBEEQ_FBMU_3: u32 = 37124;
pub const XLINE_OQBEEQ_FBMU_4: u32 = 37125;
pub const XLINE_OQBEEQ_FBOU_1: u32 = 37126;
pub const XLINE_OQBEEQ_FBOU_2: u32 = 37127;
pub const XLINE_OQBEEQ_FBOU_3: u32 = 37128;
pub const XLINE_OQBEEQ_FBOU_4: u32 = 37129;
pub const XLINE_OQBEEQ_REFT_1: u32 = 37130;
pub const XLINE_OQBEEQ_REFT_2: u32 = 37131;
pub const XLINE_OQBEEQ_REFT_3: u32 = 37132;
pub const XLINE_OQBEEQ_REFT_4: u32 = 37133;
pub const XLINE_OQBPEF_BBBO_1: u32 = 37134;
pub const XLINE_OQBPEF_BBBO_2: u32 = 37135;
pub const XLINE_OQBPEF_FBMU_1: u32 = 37136;
pub const XLINE_OQBPEF_FBMU_2: u32 = 37137;
pub const XLINE_OQBPEF_REFT_1: u32 = 37138;
pub const XLINE_OQBPEF_REFT_2: u32 = 37139;
pub const XLINE_OQBPED_BBBO_1: u32 = 37140;
pub const XLINE_OQBPED_BBBO_2: u32 = 37141;
pub const XLINE_OQBPED_FBMU_1: u32 = 37142;
pub const XLINE_OQBPED_FBMU_2: u32 = 37143;
pub const XLINE_OQBPED_REFT_1: u32 = 37144;
pub const XLINE_OQBPED_REFT_2: u32 = 37145;
pub const XLINE_OQBPID_BBBO_1: u32 = 37146;
pub const XLINE_OQBPID_BBBO_2: u32 = 37147;
pub const XLINE_OQBPID_FBMU_1: u32 = 37148;
pub const XLINE_OQBPID_FBMU_2: u32 = 37149;
pub const XLINE_OQBPID_REFT_1: u32 = 37150;
pub const XLINE_OQBPID_REFT_2: u32 = 37151;
pub const XLINE_OQEUAX_REFT_1: u32 = 37152;
pub const XLINE_OQEUBB_FBMU_1: u32 = 37153;
pub const XLINE_OQEUBB_FBMU_2: u32 = 37154;
pub const XLINE_OQEUBB_FBMU_3: u32 = 37155;
pub const XLINE_OQEUBB_FBMU_4: u32 = 37156;
pub const XLINE_OQEUBL_FBMU_1: u32 = 37157;
pub const XLINE_OQEUBL_FBOU_1: u32 = 37158;
pub const XLINE_OQEUBL_REFT_1: u32 = 37159;
pub const XLINE_OQEUCD_BBBO_1: u32 = 37160;
pub const XLINE_OQEUCD_FBMU_1: u32 = 37161;
pub const XLINE_OQEUCD_REFT_1: u32 = 37162;
pub const XLINE_OQEUCO_BBBO_1: u32 = 37169;
pub const XLINE_OQEUCO_BBBO_2: u32 = 37170;
pub const XLINE_OQEUCO_FBMU_1: u32 = 37171;
pub const XLINE_OQEUCO_FBMU_2: u32 = 37172;
pub const XLINE_OQEUCO_REFT_1: u32 = 37173;
pub const XLINE_OQEUCO_REFT_2: u32 = 37174;
pub const XLINE_OQEUEI_REFI_1: u32 = 37175;
pub const XLINE_OQEUEN_REFI_1: u32 = 37176;
pub const XLINE_OQEUFI_FBMU_1: u32 = 37177;
pub const XLINE_OQEUFI_FBOU_1: u32 = 37178;
pub const XLINE_OQEUFI_REFT_1: u32 = 37179;
pub const XLINE_OQEUFN_FBMU_1: u32 = 37180;
pub const XLINE_OQEUFN_FBOU_1: u32 = 37181;
pub const XLINE_OQEUFN_REFT_1: u32 = 37182;
pub const XLINE_OQEUSI_FBMU_1: u32 = 37183;
pub const XLINE_OQEUSI_FBMU_2: u32 = 37184;
pub const XLINE_OQEUSI_FBMU_3: u32 = 37185;
pub const XLINE_OQEUSI_FBMU_4: u32 = 37186;
pub const XLINE_OQEUTI_REFI_1: u32 = 37187;
pub const XLINE_OQEUTR_REFT_1: u32 = 37188;
pub const XLINE_OQEUWC_BBBO_1: u32 = 37189;
pub const XLINE_OQEUWC_FBMU_1: u32 = 37190;
pub const XLINE_OQEUWC_REFT_1: u32 = 37191;
pub const XLINE_OQFRIF_BBBO_1: u32 = 37192;
pub const XLINE_OQFRIF_BBBO_2: u32 = 37193;
pub const XLINE_OQFRIF_FBMU_1: u32 = 37194;
pub const XLINE_OQFRIF_FBMU_2: u32 = 37195;
pub const XLINE_OQFRIF_REFT_1: u32 = 37196;
pub const XLINE_OQFRIF_REFT_2: u32 = 37197;
pub const XLINE_OQFRED_BBBO_1: u32 = 37198;
pub const XLINE_OQFRED_BBBO_2: u32 = 37199;
pub const XLINE_OQFRED_FBMU_1: u32 = 37200;
pub const XLINE_OQFRED_FBMU_2: u32 = 37201;
pub const XLINE_OQFRED_REFT_1: u32 = 37202;
pub const XLINE_OQFRED_REFT_2: u32 = 37203;
pub const XLINE_OQFREQ_FBMU_1: u32 = 37204;
pub const XLINE_OQFREQ_FBMU_2: u32 = 37205;
pub const XLINE_OQFREQ_FBMU_3: u32 = 37206;
pub const XLINE_OQFREQ_FBMU_4: u32 = 37207;
pub const XLINE_OQFREQ_FBOU_1: u32 = 37208;
pub const XLINE_OQFREQ_FBOU_2: u32 = 37209;
pub const XLINE_OQFREQ_FBOU_3: u32 = 37210;
pub const XLINE_OQFREQ_FBOU_4: u32 = 37211;
pub const XLINE_OQFREQ_REFT_1: u32 = 37212;
pub const XLINE_OQFREQ_REFT_2: u32 = 37213;
pub const XLINE_OQFREQ_REFT_3: u32 = 37214;
pub const XLINE_OQFREQ_REFT_4: u32 = 37215;
pub const XLINE_OQFRIO_BBBO_1: u32 = 37216;
pub const XLINE_OQFRIO_BBBO_2: u32 = 37217;
pub const XLINE_OQFRIO_FBMU_1: u32 = 37218;
pub const XLINE_OQFRIO_FBMU_2: u32 = 37219;
pub const XLINE_OQFRIO_REFT_1: u32 = 37220;
pub const XLINE_OQFRIO_REFT_2: u32 = 37221;
pub const XLINE_OQNLIF_BBBO_1: u32 = 37222;
pub const XLINE_OQNLIF_BBBO_2: u32 = 37223;
pub const XLINE_OQNLIF_FBMU_1: u32 = 37224;
pub const XLINE_OQNLIF_FBMU_2: u32 = 37225;
pub const XLINE_OQNLIF_REFT_1: u32 = 37226;
pub const XLINE_OQNLIF_REFT_2: u32 = 37227;
pub const XLINE_OQNLED_BBBO_1: u32 = 37228;
pub const XLINE_OQNLED_BBBO_2: u32 = 37229;
pub const XLINE_OQNLED_FBMU_1: u32 = 37230;
pub const XLINE_OQNLED_FBMU_2: u32 = 37231;
pub const XLINE_OQNLED_REFT_1: u32 = 37232;
pub const XLINE_OQNLED_REFT_2: u32 = 37233;
pub const XLINE_OQNLEQ_FBMU_1: u32 = 37234;
pub const XLINE_OQNLEQ_FBMU_2: u32 = 37235;
pub const XLINE_OQNLEQ_FBMU_3: u32 = 37236;
pub const XLINE_OQNLEQ_FBMU_4: u32 = 37237;
pub const XLINE_OQNLEQ_FBOU_1: u32 = 37238;
pub const XLINE_OQNLEQ_FBOU_2: u32 = 37239;
pub const XLINE_OQNLEQ_FBOU_3: u32 = 37240;
pub const XLINE_OQNLEQ_FBOU_4: u32 = 37241;
pub const XLINE_OQNLEQ_REFT_1: u32 = 37242;
pub const XLINE_OQNLEQ_REFT_2: u32 = 37243;
pub const XLINE_OQNLEQ_REFT_3: u32 = 37244;
pub const XLINE_OQNLEQ_REFT_4: u32 = 37245;
pub const XLINE_OQNLIO_BBBO_1: u32 = 37246;
pub const XLINE_OQNLIO_BBBO_2: u32 = 37247;
pub const XLINE_OQNLIO_FBMU_1: u32 = 37248;
pub const XLINE_OQNLIO_FBMU_2: u32 = 37249;
pub const XLINE_OQNLIO_REFT_1: u32 = 37250;
pub const XLINE_OQNLIO_REFT_2: u32 = 37251;
pub const XLINE_OQPTEQ_FBMU_1: u32 = 37252;
pub const XLINE_OQPTEQ_FBMU_2: u32 = 37253;
pub const XLINE_OQPTEQ_FBMU_3: u32 = 37254;
pub const XLINE_OQPTEQ_FBMU_4: u32 = 37255;
pub const XLINE_OQPTEQ_FBOU_1: u32 = 37256;
pub const XLINE_OQPTEQ_FBOU_2: u32 = 37257;
pub const XLINE_OQPTEQ_FBOU_3: u32 = 37258;
pub const XLINE_OQPTEQ_FBOU_4: u32 = 37259;
pub const XLINE_OQPTEQ_REFT_1: u32 = 37260;
pub const XLINE_OQPTEQ_REFT_2: u32 = 37261;
pub const XLINE_OQPTEQ_REFT_3: u32 = 37262;
pub const XLINE_OQPTEQ_REFT_4: u32 = 37263;
pub const XLINE_OQUKEQ_FBMU_1: u32 = 37264;
pub const XLINE_OQUKEQ_FBMU_2: u32 = 37265;
pub const XLINE_OQUKEQ_FBMU_3: u32 = 37266;
pub const XLINE_OQUKEQ_FBMU_4: u32 = 37267;
pub const XLINE_OQUKEQ_FBOU_1: u32 = 37268;
pub const XLINE_OQUKEQ_FBOU_2: u32 = 37269;
pub const XLINE_OQUKEQ_FBOU_3: u32 = 37270;
pub const XLINE_OQUKEQ_FBOU_4: u32 = 37271;
pub const XLINE_OQUKEQ_REFT_1: u32 = 37272;
pub const XLINE_OQUKEQ_REFT_2: u32 = 37273;
pub const XLINE_OQUKEQ_REFT_3: u32 = 37274;
pub const XLINE_OQUKEQ_REFT_4: u32 = 37275;
pub const XLINE_OTBEEQ_FBMU_1: u32 = 37276;
pub const XLINE_OTBEEQ_FBMU_2: u32 = 37277;
pub const XLINE_OTBEEQ_FBMU_3: u32 = 37278;
pub const XLINE_OTBEEQ_FBMU_4: u32 = 37279;
pub const XLINE_OTBEEQ_FBOU_1: u32 = 37280;
pub const XLINE_OTBEEQ_FBOU_2: u32 = 37281;
pub const XLINE_OTBEEQ_FBOU_3: u32 = 37282;
pub const XLINE_OTBEEQ_FBOU_4: u32 = 37283;
pub const XLINE_OTBEEQ_REFT_1: u32 = 37284;
pub const XLINE_OTBEEQ_REFT_2: u32 = 37285;
pub const XLINE_OTBEEQ_REFT_3: u32 = 37286;
pub const XLINE_OTBEEQ_REFT_4: u32 = 37287;
pub const XLINE_OTBPEF_BBBO_1: u32 = 37288;
pub const XLINE_OTBPEF_BBBO_2: u32 = 37289;
pub const XLINE_OTBPEF_FBMU_1: u32 = 37290;
pub const XLINE_OTBPEF_FBMU_2: u32 = 37291;
pub const XLINE_OTBPEF_REFT_1: u32 = 37292;
pub const XLINE_OTBPEF_REFT_2: u32 = 37293;
pub const XLINE_OTBPED_BBBO_1: u32 = 37294;
pub const XLINE_OTBPED_BBBO_2: u32 = 37295;
pub const XLINE_OTBPED_FBMU_1: u32 = 37296;
pub const XLINE_OTBPED_FBMU_2: u32 = 37297;
pub const XLINE_OTBPED_REFT_1: u32 = 37298;
pub const XLINE_OTBPED_REFT_2: u32 = 37299;
pub const XLINE_OTBPID_BBBO_1: u32 = 37300;
pub const XLINE_OTBPID_BBBO_2: u32 = 37301;
pub const XLINE_OTBPID_FBMU_1: u32 = 37302;
pub const XLINE_OTBPID_FBMU_2: u32 = 37303;
pub const XLINE_OTBPID_REFT_1: u32 = 37304;
pub const XLINE_OTBPID_REFT_2: u32 = 37305;
pub const XLINE_OTEUAX_REFT_1: u32 = 37306;
pub const XLINE_OTEUAX_REFT_2: u32 = 37307;
pub const XLINE_OTEUBB_FBMU_1: u32 = 37308;
pub const XLINE_OTEUBB_FBMU_2: u32 = 37309;
pub const XLINE_OTEUBB_FBMU_3: u32 = 37310;
pub const XLINE_OTEUBB_FBMU_4: u32 = 37311;
pub const XLINE_OTEUBL_FBMU_1: u32 = 37312;
pub const XLINE_OTEUBL_FBOU_1: u32 = 37313;
pub const XLINE_OTEUBL_REFT_1: u32 = 37314;
pub const XLINE_OTEUCD_BBBO_1: u32 = 37315;
pub const XLINE_OTEUCD_FBMU_1: u32 = 37316;
pub const XLINE_OTEUCD_REFT_1: u32 = 37317;
pub const XLINE_OTEUCO_BBBO_1: u32 = 37324;
pub const XLINE_OTEUCO_BBBO_2: u32 = 37325;
pub const XLINE_OTEUCO_FBMU_1: u32 = 37326;
pub const XLINE_OTEUCO_FBMU_2: u32 = 37327;
pub const XLINE_OTEUCO_REFT_1: u32 = 37328;
pub const XLINE_OTEUCO_REFT_2: u32 = 37329;
pub const XLINE_OTEUEI_REFI_1: u32 = 37330;
pub const XLINE_OTEUEN_REFI_1: u32 = 37331;
pub const XLINE_OTEUFI_FBMU_1: u32 = 37332;
pub const XLINE_OTEUFI_FBOU_1: u32 = 37333;
pub const XLINE_OTEUFI_REFT_1: u32 = 37334;
pub const XLINE_OTEUFN_FBMU_1: u32 = 37335;
pub const XLINE_OTEUFN_FBOU_1: u32 = 37336;
pub const XLINE_OTEUFN_REFT_1: u32 = 37337;
pub const XLINE_OTEUSI_FBMU_1: u32 = 37338;
pub const XLINE_OTEUSI_FBMU_2: u32 = 37339;
pub const XLINE_OTEUSI_FBMU_3: u32 = 37340;
pub const XLINE_OTEUSI_FBMU_4: u32 = 37341;
pub const XLINE_OTEUTI_REFI_1: u32 = 37342;
pub const XLINE_OTEUTR_REFT_1: u32 = 37343;
pub const XLINE_OTEUWC_BBBO_1: u32 = 37344;
pub const XLINE_OTEUWC_FBMU_1: u32 = 37345;
pub const XLINE_OTEUWC_REFT_1: u32 = 37346;
pub const XLINE_OTFRIF_BBBO_1: u32 = 37347;
pub const XLINE_OTFRIF_BBBO_2: u32 = 37348;
pub const XLINE_OTFRIF_FBMU_1: u32 = 37349;
pub const XLINE_OTFRIF_FBMU_2: u32 = 37350;
pub const XLINE_OTFRIF_REFT_1: u32 = 37351;
pub const XLINE_OTFRIF_REFT_2: u32 = 37352;
pub const XLINE_OTFRED_BBBO_1: u32 = 37353;
pub const XLINE_OTFRED_BBBO_2: u32 = 37354;
pub const XLINE_OTFRED_FBMU_1: u32 = 37355;
pub const XLINE_OTFRED_FBMU_2: u32 = 37356;
pub const XLINE_OTFRED_REFT_1: u32 = 37357;
pub const XLINE_OTFRED_REFT_2: u32 = 37358;
pub const XLINE_OTFREQ_FBMU_1: u32 = 37359;
pub const XLINE_OTFREQ_FBMU_2: u32 = 37360;
pub const XLINE_OTFREQ_FBMU_3: u32 = 37361;
pub const XLINE_OTFREQ_FBMU_4: u32 = 37362;
pub const XLINE_OTFREQ_FBOU_1: u32 = 37363;
pub const XLINE_OTFREQ_FBOU_2: u32 = 37364;
pub const XLINE_OTFREQ_FBOU_3: u32 = 37365;
pub const XLINE_OTFREQ_FBOU_4: u32 = 37366;
pub const XLINE_OTFREQ_REFT_1: u32 = 37367;
pub const XLINE_OTFREQ_REFT_2: u32 = 37368;
pub const XLINE_OTFREQ_REFT_3: u32 = 37369;
pub const XLINE_OTFREQ_REFT_4: u32 = 37370;
pub const XLINE_OTFRIO_BBBO_1: u32 = 37371;
pub const XLINE_OTFRIO_BBBO_2: u32 = 37372;
pub const XLINE_OTFRIO_FBMU_1: u32 = 37373;
pub const XLINE_OTFRIO_FBMU_2: u32 = 37374;
pub const XLINE_OTFRIO_REFT_1: u32 = 37375;
pub const XLINE_OTFRIO_REFT_2: u32 = 37376;
pub const XLINE_OTNLIF_BBBO_1: u32 = 37377;
pub const XLINE_OTNLIF_BBBO_2: u32 = 37378;
pub const XLINE_OTNLIF_FBMU_1: u32 = 37379;
pub const XLINE_OTNLIF_FBMU_2: u32 = 37380;
pub const XLINE_OTNLIF_REFT_1: u32 = 37381;
pub const XLINE_OTNLIF_REFT_2: u32 = 37382;
pub const XLINE_OTNLED_BBBO_1: u32 = 37383;
pub const XLINE_OTNLED_BBBO_2: u32 = 37384;
pub const XLINE_OTNLED_FBMU_1: u32 = 37385;
pub const XLINE_OTNLED_FBMU_2: u32 = 37386;
pub const XLINE_OTNLED_REFT_1: u32 = 37387;
pub const XLINE_OTNLED_REFT_2: u32 = 37388;
pub const XLINE_OTNLEQ_FBMU_1: u32 = 37389;
pub const XLINE_OTNLEQ_FBMU_2: u32 = 37390;
pub const XLINE_OTNLEQ_FBMU_3: u32 = 37391;
pub const XLINE_OTNLEQ_FBMU_4: u32 = 37392;
pub const XLINE_OTNLEQ_FBOU_1: u32 = 37393;
pub const XLINE_OTNLEQ_FBOU_2: u32 = 37394;
pub const XLINE_OTNLEQ_FBOU_3: u32 = 37395;
pub const XLINE_OTNLEQ_FBOU_4: u32 = 37396;
pub const XLINE_OTNLEQ_REFT_1: u32 = 37397;
pub const XLINE_OTNLEQ_REFT_2: u32 = 37398;
pub const XLINE_OTNLEQ_REFT_3: u32 = 37399;
pub const XLINE_OTNLEQ_REFT_4: u32 = 37400;
pub const XLINE_OTNLIO_BBBO_1: u32 = 37401;
pub const XLINE_OTNLIO_BBBO_2: u32 = 37402;
pub const XLINE_OTNLIO_FBMU_1: u32 = 37403;
pub const XLINE_OTNLIO_FBMU_2: u32 = 37404;
pub const XLINE_OTNLIO_REFT_1: u32 = 37405;
pub const XLINE_OTNLIO_REFT_2: u32 = 37406;
pub const XLINE_OTPTEQ_FBMU_1: u32 = 37407;
pub const XLINE_OTPTEQ_FBMU_2: u32 = 37408;
pub const XLINE_OTPTEQ_FBMU_3: u32 = 37409;
pub const XLINE_OTPTEQ_FBMU_4: u32 = 37410;
pub const XLINE_OTPTEQ_FBOU_1: u32 = 37411;
pub const XLINE_OTPTEQ_FBOU_2: u32 = 37412;
pub const XLINE_OTPTEQ_FBOU_3: u32 = 37413;
pub const XLINE_OTPTEQ_FBOU_4: u32 = 37414;
pub const XLINE_OTPTEQ_REFT_1: u32 = 37415;
pub const XLINE_OTPTEQ_REFT_2: u32 = 37416;
pub const XLINE_OTPTEQ_REFT_3: u32 = 37417;
pub const XLINE_OTPTEQ_REFT_4: u32 = 37418;
pub const XLINE_OTUKEQ_FBMU_1: u32 = 37419;
pub const XLINE_OTUKEQ_FBMU_2: u32 = 37420;
pub const XLINE_OTUKEQ_FBMU_3: u32 = 37421;
pub const XLINE_OTUKEQ_FBMU_4: u32 = 37422;
pub const XLINE_OTUKEQ_FBOU_1: u32 = 37423;
pub const XLINE_OTUKEQ_FBOU_2: u32 = 37424;
pub const XLINE_OTUKEQ_FBOU_3: u32 = 37425;
pub const XLINE_OTUKEQ_FBOU_4: u32 = 37426;
pub const XLINE_OTUKEQ_REFT_1: u32 = 37427;
pub const XLINE_OTUKEQ_REFT_2: u32 = 37428;
pub const XLINE_OTUKEQ_REFT_3: u32 = 37429;
pub const XLINE_OTUKEQ_REFT_4: u32 = 37430;
pub const XLINE_OQDUEQ_FBMU_1: u32 = 37431;
pub const XLINE_OQDUEQ_FBMU_2: u32 = 37432;
pub const XLINE_OQDUEQ_FBMU_3: u32 = 37433;
pub const XLINE_OQDUEQ_FBMU_4: u32 = 37434;
pub const XLINE_OQDUEQ_FBOU_1: u32 = 37435;
pub const XLINE_OQDUEQ_FBOU_2: u32 = 37436;
pub const XLINE_OQDUEQ_FBOU_3: u32 = 37437;
pub const XLINE_OQDUEQ_FBOU_4: u32 = 37438;
pub const XLINE_OQDUEQ_REFT_1: u32 = 37439;
pub const XLINE_OQDUEQ_REFT_2: u32 = 37440;
pub const XLINE_OQDUEQ_REFT_3: u32 = 37441;
pub const XLINE_OQDUEQ_REFT_4: u32 = 37442;
pub const XLINE_OQDUID_REFI_1: u32 = 37443;
pub const XLINE_OTDUEQ_FBMU_1: u32 = 37444;
pub const XLINE_OTDUEQ_FBMU_2: u32 = 37445;
pub const XLINE_OTDUEQ_FBMU_3: u32 = 37446;
pub const XLINE_OTDUEQ_FBMU_4: u32 = 37447;
pub const XLINE_OTDUEQ_FBOU_1: u32 = 37448;
pub const XLINE_OTDUEQ_FBOU_2: u32 = 37449;
pub const XLINE_OTDUEQ_FBOU_3: u32 = 37450;
pub const XLINE_OTDUEQ_FBOU_4: u32 = 37451;
pub const XLINE_OTDUEQ_REFT_1: u32 = 37452;
pub const XLINE_OTDUEQ_REFT_2: u32 = 37453;
pub const XLINE_OTDUEQ_REFT_3: u32 = 37454;
pub const XLINE_OTDUEQ_REFT_4: u32 = 37455;
pub const XLINE_OTDUID_REFI_1: u32 = 37456;
pub const XLINE_OQBPED_BBBO_3: u32 = 37457;
pub const XLINE_OQBPED_FBMU_3: u32 = 37458;
pub const XLINE_OQBPED_REFT_3: u32 = 37459;
pub const XLINE_OQFRED_BBBO_3: u32 = 37460;
pub const XLINE_OQFRED_FBMU_3: u32 = 37461;
pub const XLINE_OQFRED_REFT_3: u32 = 37462;
pub const XLINE_OQNLED_BBBO_3: u32 = 37463;
pub const XLINE_OQNLED_FBMU_3: u32 = 37464;
pub const XLINE_OQNLED_REFT_3: u32 = 37465;
pub const XLINE_OTBPED_BBBO_3: u32 = 37466;
pub const XLINE_OTBPED_FBMU_3: u32 = 37467;
pub const XLINE_OTBPED_REFT_3: u32 = 37468;
pub const XLINE_OTFRED_BBBO_3: u32 = 37469;
pub const XLINE_OTFRED_FBMU_3: u32 = 37470;
pub const XLINE_OTFRED_REFT_3: u32 = 37471;
pub const XLINE_OTNLED_BBBO_3: u32 = 37472;
pub const XLINE_OTNLED_FBMU_3: u32 = 37473;
pub const XLINE_OTNLED_REFT_3: u32 = 37474;
pub const XLINE_OQNOEQ_FBMU_1: u32 = 37475;
pub const XLINE_OQNOEQ_FBMU_2: u32 = 37476;
pub const XLINE_OQNOEQ_FBMU_3: u32 = 37477;
pub const XLINE_OQNOEQ_FBMU_4: u32 = 37478;
pub const XLINE_OQNOEQ_FBOU_1: u32 = 37479;
pub const XLINE_OQNOEQ_FBOU_2: u32 = 37480;
pub const XLINE_OQNOEQ_FBOU_3: u32 = 37481;
pub const XLINE_OQNOEQ_FBOU_4: u32 = 37482;
pub const XLINE_OQNOEQ_REFT_1: u32 = 37483;
pub const XLINE_OQNOEQ_REFT_2: u32 = 37484;
pub const XLINE_OQNOEQ_REFT_3: u32 = 37485;
pub const XLINE_OQNOEQ_REFT_4: u32 = 37486;
pub const XLINE_OQNOFI_REFT_1: u32 = 37487;
pub const XLINE_OTNOEQ_FBMU_1: u32 = 37488;
pub const XLINE_OTNOEQ_FBMU_2: u32 = 37489;
pub const XLINE_OTNOEQ_FBMU_3: u32 = 37490;
pub const XLINE_OTNOEQ_FBMU_4: u32 = 37491;
pub const XLINE_OTNOEQ_FBOU_1: u32 = 37492;
pub const XLINE_OTNOEQ_FBOU_2: u32 = 37493;
pub const XLINE_OTNOEQ_FBOU_3: u32 = 37494;
pub const XLINE_OTNOEQ_FBOU_4: u32 = 37495;
pub const XLINE_OTNOEQ_REFT_1: u32 = 37496;
pub const XLINE_OTNOEQ_REFT_2: u32 = 37497;
pub const XLINE_OTNOEQ_REFT_3: u32 = 37498;
pub const XLINE_OTNOEQ_REFT_4: u32 = 37499;
pub const XLINE_OTNOFI_REFT_1: u32 = 37500;
pub const XLINE_OQEUWC_BBBO_2: u32 = 37501;
pub const XLINE_OQEUWC_FBMU_2: u32 = 37502;
pub const XLINE_OQEUWC_REFT_2: u32 = 37503;
pub const XLINE_OTEUWC_BBBO_2: u32 = 37504;
pub const XLINE_OTEUWC_FBMU_2: u32 = 37505;
pub const XLINE_OTEUWC_REFT_2: u32 = 37506;
pub const XLINE_BARXFX_B0: u32 = 40960;
pub const XLINE_BARXFX_B1: u32 = 40961;
pub const XLINE_BARXFX_B2: u32 = 40962;
pub const XLINE_BARXFX_B3: u32 = 40963;
pub const XLINE_BARXFX_B4: u32 = 40964;
pub const XLINE_BARXFX_B5: u32 = 40965;
pub const XLINE_BARXFX_B6: u32 = 40966;
pub const XLINE_BARXFX_B7: u32 = 40967;
pub const XLINE_BARXFX_B8: u32 = 40968;
pub const XLINE_BARXFX_B9: u32 = 40969;
pub const XLINE_CITIFX_C0: u32 = 40970;
pub const XLINE_CITIFX_C1: u32 = 40971;
pub const XLINE_CITIFX_C2: u32 = 40972;
pub const XLINE_CITIFX_C3: u32 = 40973;
pub const XLINE_CITIFX_C4: u32 = 40974;
pub const XLINE_CITIFX_C5: u32 = 40975;
pub const XLINE_CITIFX_C6: u32 = 40976;
pub const XLINE_CITIFX_C7: u32 = 40977;
pub const XLINE_CITIFX_C8: u32 = 40978;
pub const XLINE_CITIFX_C9: u32 = 40979;
pub const XLINE_DBAUTOFX: u32 = 40980;
pub const XLINE_DBAUTOFX_A0: u32 = 40981;
pub const XLINE_DBAUTOFX_A1: u32 = 40982;
pub const XLINE_DBAUTOFX_A2: u32 = 40983;
pub const XLINE_DBAUTOFX_A3: u32 = 40984;
pub const XLINE_DBAUTOFX_A4: u32 = 40985;
pub const XLINE_DBAUTOFX_A5: u32 = 40986;
pub const XLINE_DBAUTOFX_A6: u32 = 40987;
pub const XLINE_DBAUTOFX_A7: u32 = 40988;
pub const XLINE_DBAUTOFX_A8: u32 = 40989;
pub const XLINE_DBAUTOFX_A9: u32 = 40990;
pub const XLINE_DBRPDFX_R0: u32 = 40991;
pub const XLINE_DBRPDFX_R1: u32 = 40992;
pub const XLINE_DBRPDFX_R2: u32 = 40993;
pub const XLINE_DBRPDFX_R3: u32 = 40994;
pub const XLINE_DBRPDFX_R4: u32 = 40995;
pub const XLINE_DBRPDFX_R5: u32 = 40996;
pub const XLINE_DBRPDFX_R6: u32 = 40997;
pub const XLINE_DBRPDFX_R7: u32 = 40998;
pub const XLINE_DBRPDFX_R8: u32 = 40999;
pub const XLINE_DBRPDFX_R9: u32 = 41000;
pub const XLINE_MSFX_M0: u32 = 41001;
pub const XLINE_MSFX_M1: u32 = 41002;
pub const XLINE_MSFX_M2: u32 = 41003;
pub const XLINE_MSFX_M3: u32 = 41004;
pub const XLINE_MSFX_M4: u32 = 41005;
pub const XLINE_MSFX_M5: u32 = 41006;
pub const XLINE_MSFX_M6: u32 = 41007;
pub const XLINE_MSFX_M7: u32 = 41008;
pub const XLINE_MSFX_M8: u32 = 41009;
pub const XLINE_MSFX_M9: u32 = 41010;
pub const XLINE_SPOTSTREAMFX: u32 = 41011;
pub const XLINE_SPOTSTREAMFX_S0: u32 = 41012;
pub const XLINE_SPOTSTREAMFX_S1: u32 = 41013;
pub const XLINE_SPOTSTREAMFX_S2: u32 = 41014;
pub const XLINE_SPOTSTREAMFX_S3: u32 = 41015;
pub const XLINE_SPOTSTREAMFX_S4: u32 = 41016;
pub const XLINE_SPOTSTREAMFX_S5: u32 = 41017;
pub const XLINE_SPOTSTREAMFX_S6: u32 = 41018;
pub const XLINE_SPOTSTREAMFX_S7: u32 = 41019;
pub const XLINE_SPOTSTREAMFX_S8: u32 = 41020;
pub const XLINE_SPOTSTREAMFX_S9: u32 = 41021;
pub const XLINE_UBSFX2B_U0: u32 = 41022;
pub const XLINE_UBSFX2B_U1: u32 = 41023;
pub const XLINE_UBSFX2B_U2: u32 = 41024;
pub const XLINE_UBSFX2B_U3: u32 = 41025;
pub const XLINE_UBSFX2B_U4: u32 = 41026;
pub const XLINE_UBSFX2B_U5: u32 = 41027;
pub const XLINE_UBSFX2B_U6: u32 = 41028;
pub const XLINE_UBSFX2B_U7: u32 = 41029;
pub const XLINE_UBSFX2B_U8: u32 = 41030;
pub const XLINE_UBSFX2B_U9: u32 = 41031;
pub const XLINE_GTSFX0: u32 = 41032;
pub const XLINE_GTSFX1: u32 = 41033;
pub const XLINE_GTSFX2: u32 = 41034;
pub const XLINE_GTSFX3: u32 = 41035;
pub const XLINE_GTSFX4: u32 = 41036;
pub const XLINE_GTSFX5: u32 = 41037;
pub const XLINE_GTSFX6: u32 = 41038;
pub const XLINE_GTSFX7: u32 = 41039;
pub const XLINE_GTSFX8: u32 = 41040;
pub const XLINE_GTSFX9: u32 = 41041;
pub const XLINE_FXIN_0: u32 = 41042;
pub const XLINE_FXIN_1: u32 = 41043;
pub const XLINE_FXIN_2: u32 = 41044;
pub const XLINE_FXIN_3: u32 = 41045;
pub const XLINE_FXIN_4: u32 = 41046;
pub const XLINE_FXIN_5: u32 = 41047;
pub const XLINE_FXIN_6: u32 = 41048;
pub const XLINE_FXIN_7: u32 = 41049;
pub const XLINE_FXIN_8: u32 = 41050;
pub const XLINE_FXIN_9: u32 = 41051;
pub const XLINE_CANTORFX_C0: u32 = 41052;
pub const XLINE_CANTORFX_C1: u32 = 41053;
pub const XLINE_CANTORFX_C2: u32 = 41054;
pub const XLINE_CANTORFX_C3: u32 = 41055;
pub const XLINE_CANTORFX_C4: u32 = 41056;
pub const XLINE_CANTORFX_C5: u32 = 41057;
pub const XLINE_CANTORFX_C6: u32 = 41058;
pub const XLINE_CANTORFX_C7: u32 = 41059;
pub const XLINE_CANTORFX_C8: u32 = 41060;
pub const XLINE_CANTORFX_C9: u32 = 41061;
pub const XLINE_CUREXFX_0: u32 = 41062;
pub const XLINE_CUREXFX_1: u32 = 41063;
pub const XLINE_CUREXFX_2: u32 = 41064;
pub const XLINE_CUREXFX_3: u32 = 41065;
pub const XLINE_CUREXFX_4: u32 = 41066;
pub const XLINE_CUREXFX_5: u32 = 41067;
pub const XLINE_CUREXFX_6: u32 = 41068;
pub const XLINE_CUREXFX_7: u32 = 41069;
pub const XLINE_CUREXFX_8: u32 = 41070;
pub const XLINE_CUREXFX_9: u32 = 41071;
pub const XLINE_FENICSFX_0: u32 = 41072;
pub const XLINE_FENICSFX_1: u32 = 41073;
pub const XLINE_FENICSFX_2: u32 = 41074;
pub const XLINE_FENICSFX_3: u32 = 41075;
pub const XLINE_FENICSFX_4: u32 = 41076;
pub const XLINE_FENICSFX_5: u32 = 41077;
pub const XLINE_FENICSFX_6: u32 = 41078;
pub const XLINE_FENICSFX_7: u32 = 41079;
pub const XLINE_FENICSFX_8: u32 = 41080;
pub const XLINE_FENICSFX_9: u32 = 41081;
pub const XLINE_EBSAI_0: u32 = 41082;
pub const XLINE_EBSAI_1: u32 = 41083;
pub const XLINE_EBSAI_2: u32 = 41084;
pub const XLINE_EBSAI_3: u32 = 41085;
pub const XLINE_EBSAI_4: u32 = 41086;
pub const XLINE_EBSAI_5: u32 = 41087;
pub const XLINE_EBSAI_6: u32 = 41088;
pub const XLINE_EBSAI_7: u32 = 41089;
pub const XLINE_EBSAI_8: u32 = 41090;
pub const XLINE_EBSAI_9: u32 = 41091;
pub const XLINE_MSFXQNT_0: u32 = 41092;
pub const XLINE_MSFXQNT_1: u32 = 41093;
pub const XLINE_MSFXQNT_2: u32 = 41094;
pub const XLINE_MSFXQNT_3: u32 = 41095;
pub const XLINE_MSFXQNT_4: u32 = 41096;
pub const XLINE_MSFXQNT_5: u32 = 41097;
pub const XLINE_MSFXQNT_6: u32 = 41098;
pub const XLINE_MSFXQNT_7: u32 = 41099;
pub const XLINE_MSFXQNT_8: u32 = 41100;
pub const XLINE_MSFXQNT_9: u32 = 41101;
pub const XLINE_MSFXLDR_0: u32 = 41102;
pub const XLINE_MSFXLDR_1: u32 = 41103;
pub const XLINE_MSFXLDR_2: u32 = 41104;
pub const XLINE_MSFXLDR_3: u32 = 41105;
pub const XLINE_MSFXLDR_4: u32 = 41106;
pub const XLINE_MSFXLDR_5: u32 = 41107;
pub const XLINE_MSFXLDR_6: u32 = 41108;
pub const XLINE_MSFXLDR_7: u32 = 41109;
pub const XLINE_MSFXLDR_8: u32 = 41110;
pub const XLINE_MSFXLDR_9: u32 = 41111;
pub const XLINE_HKEXOMDC_SYM: u32 = 41216;
pub const XLINE_HKEXOMDC_S_1: u32 = 41217;
pub const XLINE_HKEXOMDC_S_2: u32 = 41218;
pub const XLINE_HKEXOMDC_S_3: u32 = 41219;
pub const XLINE_HKEXOMDC_S_4: u32 = 41220;
pub const XLINE_HKEXOMDC_S_5: u32 = 41221;
pub const XLINE_HKEXOMDC_S_6: u32 = 41222;
pub const XLINE_HKEXOMDC_S_7: u32 = 41223;
pub const XLINE_HKEXOMDC_S_8: u32 = 41224;
pub const XLINE_HKEXOMDC_S_9: u32 = 41225;
pub const XLINE_HKEXOMDC_S_10: u32 = 41226;
pub const XLINE_HKEXOMDC_S_11: u32 = 41227;
pub const XLINE_HKEXOMDC_S_12: u32 = 41228;
pub const XLINE_HKEXOMDC_S_13: u32 = 41229;
pub const XLINE_HKEXOMDC_S_14: u32 = 41230;
pub const XLINE_HKEXOMDC_S_15: u32 = 41231;
pub const XLINE_HKEXOMDC_S_16: u32 = 41232;
pub const XLINE_HKOMDCCDS_SYM: u32 = 41248;
pub const XLINE_HKOMDCCDS_S_1: u32 = 41249;
pub const XLINE_HKOMDCCDS_S_2: u32 = 41250;
pub const XLINE_HKOMDCCDS_S_3: u32 = 41251;
pub const XLINE_HKOMDCCDS_S_4: u32 = 41252;
pub const XLINE_HKOMDCCDS_S_5: u32 = 41253;
pub const XLINE_HKOMDCCDS_S_6: u32 = 41254;
pub const XLINE_HKOMDCCDS_S_7: u32 = 41255;
pub const XLINE_HKOMDCCDS_S_8: u32 = 41256;
pub const XLINE_HKOMDCCDS_S_9: u32 = 41257;
pub const XLINE_HKOMDCCDS_S_10: u32 = 41258;
pub const XLINE_HKOMDCCDS_S_11: u32 = 41259;
pub const XLINE_HKOMDCCDS_S_12: u32 = 41260;
pub const XLINE_HKOMDCCDS_S_13: u32 = 41261;
pub const XLINE_HKOMDCCDS_S_14: u32 = 41262;
pub const XLINE_HKOMDCCDS_S_15: u32 = 41263;
pub const XLINE_HKOMDCCDS_S_16: u32 = 41264;
pub const XLINE_HKEXOMIX_SYM: u32 = 41472;
pub const XLINE_HKEXOMIX_I_1: u32 = 41473;
pub const XLINE_HKEXOMIX_I_2: u32 = 41474;
pub const XLINE_HKEXOMIX_I_3: u32 = 41475;
pub const XLINE_HKEXOMIX_I_4: u32 = 41476;
pub const XLINE_HKEXOMIX_I_5: u32 = 41477;
pub const XLINE_HKEXOMCC_SYM: u32 = 41478;
pub const XLINE_HKEXOMCC_S_301: u32 = 41479;
pub const XLINE_HKEXOMCC_S_302: u32 = 41480;
pub const XLINE_HKEXOMCC_S_311: u32 = 41481;
pub const XLINE_HKEXOMCC_S_312: u32 = 41482;
pub const XLINE_HKEXOMCC_S_399: u32 = 41483;
pub const XLINE_HKOMCCCDS_SYM: u32 = 41484;
pub const XLINE_HKOMCCCDS_S_301: u32 = 41485;
pub const XLINE_HKOMCCCDS_S_302: u32 = 41486;
pub const XLINE_HKOMCCCDS_S_311: u32 = 41487;
pub const XLINE_HKOMCCCDS_S_312: u32 = 41488;
pub const XLINE_HKOMCCCDS_S_399: u32 = 41489;
pub const XLINE_HKOMIXCDS_SYM: u32 = 41504;
pub const XLINE_HKOMIXCDS_I_1: u32 = 41505;
pub const XLINE_HKOMIXCDS_I_2: u32 = 41506;
pub const XLINE_HKOMIXCDS_I_3: u32 = 41507;
pub const XLINE_HKOMIXCDS_I_4: u32 = 41508;
pub const XLINE_HKOMIXCDS_I_5: u32 = 41509;
pub const XLINE_HKEXOMDD_SYM: u32 = 41728;
pub const XLINE_HKEXOMDD_S_1: u32 = 41729;
pub const XLINE_HKEXOMDD_S_2: u32 = 41730;
pub const XLINE_HKEXOMDD_S_3: u32 = 41731;
pub const XLINE_HKEXOMDD_S_4: u32 = 41732;
pub const XLINE_HKEXOMDD_S_5: u32 = 41733;
pub const XLINE_HKEXOMDD_S_6: u32 = 41734;
pub const XLINE_HKEXOMDD_S_7: u32 = 41735;
pub const XLINE_HKEXOMDD_S_8: u32 = 41736;
pub const XLINE_HKEXOMDD_S_9: u32 = 41737;
pub const XLINE_HKEXOMDD_S_10: u32 = 41738;
pub const XLINE_HKEXOMDD_S_11: u32 = 41739;
pub const XLINE_HKEXOMDD_S_12: u32 = 41740;
pub const XLINE_HKEXOMDD_S_13: u32 = 41741;
pub const XLINE_HKEXOMDD_S_14: u32 = 41742;
pub const XLINE_HKOMDDCDS_SYM: u32 = 41744;
pub const XLINE_HKOMDDCDS_S_1: u32 = 41745;
pub const XLINE_HKOMDDCDS_S_2: u32 = 41746;
pub const XLINE_HKOMDDCDS_S_3: u32 = 41747;
pub const XLINE_HKOMDDCDS_S_4: u32 = 41748;
pub const XLINE_HKOMDDCDS_S_5: u32 = 41749;
pub const XLINE_HKOMDDCDS_S_6: u32 = 41750;
pub const XLINE_HKOMDDCDS_S_7: u32 = 41751;
pub const XLINE_HKOMDDCDS_S_8: u32 = 41752;
pub const XLINE_HKOMDDCDS_S_9: u32 = 41753;
pub const XLINE_HKOMDDCDS_S_10: u32 = 41754;
pub const XLINE_HKOMDDCDS_S_11: u32 = 41755;
pub const XLINE_HKOMDDCDS_S_12: u32 = 41756;
pub const XLINE_HKOMDDCDS_S_13: u32 = 41757;
pub const XLINE_HKOMDDCDS_S_14: u32 = 41758;
pub const XLINE_TSEF_RT_1: u32 = 41760;
pub const XLINE_TSEF_RT_2: u32 = 41761;
pub const XLINE_TSEF_RT_3: u32 = 41762;
pub const XLINE_TSEF_RT_4: u32 = 41763;
pub const XLINE_TSEF_RT_5: u32 = 41764;
pub const XLINE_TSEF_RT_6: u32 = 41765;
pub const XLINE_TSEF_RT_7: u32 = 41766;
pub const XLINE_TSEF_RT_8: u32 = 41767;
pub const XLINE_TSEF_RT_9: u32 = 41768;
pub const XLINE_TSEF_RT_10: u32 = 41769;
pub const XLINE_TSEF_RT_11: u32 = 41770;
pub const XLINE_TSEF_RT_12: u32 = 41771;
pub const XLINE_TSEF_BASE: u32 = 41772;
pub const XLINE_TSEF_ISSUE: u32 = 41773;
pub const XLINE_TSEF_MGN: u32 = 41774;
pub const XLINE_TSEF_RT_DUM: u32 = 41775;
pub const XLINE_TSEF_MGN_DUM: u32 = 41776;
pub const XLINE_TSEF_RR_1: u32 = 41777;
pub const XLINE_FSEF_RT_1: u32 = 41778;
pub const XLINE_NSEF_RT_1: u32 = 41779;
pub const XLINE_SSEF_RT_1: u32 = 41780;
pub const XLINE_OMCSCM_80: u32 = 41781;
pub const XLINE_OMCSCM_81: u32 = 41782;
pub const XLINE_OMCSCMT_80: u32 = 41783;
pub const XLINE_OMCSCMT_81: u32 = 41784;
pub const XLINE_TSEF_RT_WB_1: u32 = 41792;
pub const XLINE_TSEF_RT_WB_2: u32 = 41793;
pub const XLINE_TSEF_RT_WB_3: u32 = 41794;
pub const XLINE_TSEF_RT_WB_4: u32 = 41795;
pub const XLINE_TSEF_RT_WB_5: u32 = 41796;
pub const XLINE_TSEF_RT_WB_6: u32 = 41797;
pub const XLINE_TSEF_RT_WB_7: u32 = 41798;
pub const XLINE_TSEF_RT_WB_8: u32 = 41799;
pub const XLINE_TSEF_RT_WB_9: u32 = 41800;
pub const XLINE_TSEF_RT_WB_10: u32 = 41801;
pub const XLINE_TSEF_RT_WB_11: u32 = 41802;
pub const XLINE_TSEF_RT_WB_12: u32 = 41803;
pub const XLINE_TSEF_WB_BASE: u32 = 41804;
pub const XLINE_TSEF_WB_ISSUE: u32 = 41805;
pub const XLINE_TSEF_WB_MGN: u32 = 41806;
pub const XLINE_TSEF_RT_WB_DUM: u32 = 41807;
pub const XLINE_TSEF_WB_MGN_DUM: u32 = 41808;
pub const XLINE_TSEF_RR_WB_1: u32 = 41809;
pub const XLINE_FSEF_RT_WB_1: u32 = 41810;
pub const XLINE_NSEF_RT_WB_1: u32 = 41811;
pub const XLINE_SSEF_RT_WB_1: u32 = 41812;
pub const XLINE_JCHX_1: u32 = 41824;
pub const XLINE_JCHXT_1: u32 = 41825;
pub const XLINE_JCHXB_1: u32 = 41826;
pub const XLINE_JCHXBT_1: u32 = 41827;
pub const XLINE_JCHXB_SELECT_1: u32 = 41828;
pub const XLINE_JCHXBT_SELECT_1: u32 = 41829;
pub const XLINE_JNXT_1: u32 = 41840;
pub const XLINE_JNXT_SYMMGR: u32 = 41841;
pub const XLINE_OMDNRS_301: u32 = 41842;
pub const XLINE_OMDNRST_301: u32 = 41843;
pub const XLINE_OMDNRTF_321: u32 = 41844;
pub const XLINE_OMDNRTFT_321: u32 = 41845;
pub const XLINE_OMDNRTP_331: u32 = 41846;
pub const XLINE_OMDNRTPT_331: u32 = 41847;
pub const XLINE_OMCRS_SYM: u32 = 41856;
pub const XLINE_OMCRS_1: u32 = 41857;
pub const XLINE_OMCRS_2: u32 = 41858;
pub const XLINE_OMCRS_3: u32 = 41859;
pub const XLINE_OMCRS_4: u32 = 41860;
pub const XLINE_OMCRS_9: u32 = 41861;
pub const XLINE_OMCRST_SYM: u32 = 41862;
pub const XLINE_OMCRST_1: u32 = 41863;
pub const XLINE_OMCRST_2: u32 = 41864;
pub const XLINE_OMCRST_3: u32 = 41865;
pub const XLINE_OMCRST_4: u32 = 41866;
pub const XLINE_OMCRST_9: u32 = 41867;
pub const XLINE_OMCRTF_30: u32 = 41868;
pub const XLINE_OMCRTF_31: u32 = 41869;
pub const XLINE_OMCRTF_32: u32 = 41870;
pub const XLINE_OMCRTF_33: u32 = 41871;
pub const XLINE_OMCRTF_34: u32 = 41872;
pub const XLINE_OMCRTF_35: u32 = 41873;
pub const XLINE_OMCRTF_36: u32 = 41874;
pub const XLINE_OMCRTF_37: u32 = 41875;
pub const XLINE_OMCRTF_38: u32 = 41876;
pub const XLINE_OMCRTFT_30: u32 = 41877;
pub const XLINE_OMCRTFT_31: u32 = 41878;
pub const XLINE_OMCRTFT_32: u32 = 41879;
pub const XLINE_OMCRTFT_33: u32 = 41880;
pub const XLINE_OMCRTFT_34: u32 = 41881;
pub const XLINE_OMCRTFT_35: u32 = 41882;
pub const XLINE_OMCRTFT_36: u32 = 41883;
pub const XLINE_OMCRTFT_37: u32 = 41884;
pub const XLINE_OMCRTFT_38: u32 = 41885;
pub const XLINE_OMCRTP_20: u32 = 41886;
pub const XLINE_OMCRTP_21: u32 = 41887;
pub const XLINE_OMCRTP_22: u32 = 41888;
pub const XLINE_OMCRTP_23: u32 = 41889;
pub const XLINE_OMCRTP_24: u32 = 41890;
pub const XLINE_OMCRTP_25: u32 = 41891;
pub const XLINE_OMCRTP_26: u32 = 41892;
pub const XLINE_OMCRTP_27: u32 = 41893;
pub const XLINE_OMCRTP_28: u32 = 41894;
pub const XLINE_OMCRTPT_20: u32 = 41895;
pub const XLINE_OMCRTPT_21: u32 = 41896;
pub const XLINE_OMCRTPT_22: u32 = 41897;
pub const XLINE_OMCRTPT_23: u32 = 41898;
pub const XLINE_OMCRTPT_24: u32 = 41899;
pub const XLINE_OMCRTPT_25: u32 = 41900;
pub const XLINE_OMCRTPT_26: u32 = 41901;
pub const XLINE_OMCRTPT_27: u32 = 41902;
pub const XLINE_OMCRTPT_28: u32 = 41903;
pub const XLINE_OMDBASE_SYM: u32 = 41904;
pub const XLINE_OMDBASE_177: u32 = 41905;
pub const XLINE_OMDBASE_178: u32 = 41906;
pub const XLINE_OMDBASET_SYM: u32 = 41907;
pub const XLINE_OMDBASET_177: u32 = 41908;
pub const XLINE_OMDBASET_178: u32 = 41909;
pub const XLINE_OMDNRS_101: u32 = 41910;
pub const XLINE_OMDNRS_201: u32 = 41911;
pub const XLINE_OMDNRS_151: u32 = 41912;
pub const XLINE_OMDNRS_161: u32 = 41913;
pub const XLINE_OMDNRS_164: u32 = 41914;
pub const XLINE_OMDNRS_167: u32 = 41915;
pub const XLINE_OMDNRST_101: u32 = 41916;
pub const XLINE_OMDNRST_201: u32 = 41917;
pub const XLINE_OMDNRST_151: u32 = 41918;
pub const XLINE_OMDNRST_161: u32 = 41919;
pub const XLINE_OMDNRST_164: u32 = 41920;
pub const XLINE_OMDNRST_167: u32 = 41921;
pub const XLINE_OMDNRTF_121: u32 = 41922;
pub const XLINE_OMDNRTF_221: u32 = 41923;
pub const XLINE_OMDNRTFT_121: u32 = 41924;
pub const XLINE_OMDNRTFT_221: u32 = 41925;
pub const XLINE_OMDNRTP_191: u32 = 41926;
pub const XLINE_OMDNRTP_131: u32 = 41927;
pub const XLINE_OMDNRTP_231: u32 = 41928;
pub const XLINE_OMDNRTP_174: u32 = 41929;
pub const XLINE_OMDNRTP_199: u32 = 41930;
pub const XLINE_OMDNRTP_194: u32 = 41931;
pub const XLINE_OMDNRTPT_191: u32 = 41932;
pub const XLINE_OMDNRTPT_131: u32 = 41933;
pub const XLINE_OMDNRTPT_231: u32 = 41934;
pub const XLINE_OMDNRTPT_174: u32 = 41935;
pub const XLINE_OMDNRTPT_199: u32 = 41936;
pub const XLINE_OMDNRTPT_194: u32 = 41937;
pub const XLINE_OMDSRS_102: u32 = 41938;
pub const XLINE_OMDSRS_202: u32 = 41939;
pub const XLINE_OMDSRS_152: u32 = 41940;
pub const XLINE_OMDSRS_162: u32 = 41941;
pub const XLINE_OMDSRS_165: u32 = 41942;
pub const XLINE_OMDSRS_168: u32 = 41943;
pub const XLINE_OMDSRST_102: u32 = 41944;
pub const XLINE_OMDSRST_202: u32 = 41945;
pub const XLINE_OMDSRST_152: u32 = 41946;
pub const XLINE_OMDSRST_162: u32 = 41947;
pub const XLINE_OMDSRST_165: u32 = 41948;
pub const XLINE_OMDSRST_168: u32 = 41949;
pub const XLINE_OMDSRTF_122: u32 = 41950;
pub const XLINE_OMDSRTF_222: u32 = 41951;
pub const XLINE_OMDSRTFT_122: u32 = 41952;
pub const XLINE_OMDSRTFT_222: u32 = 41953;
pub const XLINE_OMDSRTP_192: u32 = 41954;
pub const XLINE_OMDSRTP_132: u32 = 41955;
pub const XLINE_OMDSRTP_232: u32 = 41956;
pub const XLINE_OMDSRTP_175: u32 = 41957;
pub const XLINE_OMDSRTP_199: u32 = 41958;
pub const XLINE_OMDSRTP_195: u32 = 41959;
pub const XLINE_OMDSRTPT_192: u32 = 41960;
pub const XLINE_OMDSRTPT_132: u32 = 41961;
pub const XLINE_OMDSRTPT_232: u32 = 41962;
pub const XLINE_OMDSRTPT_175: u32 = 41963;
pub const XLINE_OMDSRTPT_199: u32 = 41964;
pub const XLINE_OMDSRTPT_195: u32 = 41965;
pub const XLINE_OMCBQ_1: u32 = 41966;
pub const XLINE_OMCBQT_1: u32 = 41967;
pub const XLINE_ASXITCH_SYM: u32 = 41968;
pub const XLINE_ASXITCH_1: u32 = 41969;
pub const XLINE_ASXITCH_2: u32 = 41970;
pub const XLINE_ASXITCH_3: u32 = 41971;
pub const XLINE_ASXITCH_4: u32 = 41972;
pub const XLINE_ASXITCH_5: u32 = 41973;
pub const XLINE_ASXITCHTF_SYM: u32 = 41974;
pub const XLINE_ASXITCHTF_1: u32 = 41975;
pub const XLINE_ASXITCHTF_2: u32 = 41976;
pub const XLINE_ASXITCHTF_3: u32 = 41977;
pub const XLINE_ASXITCHTF_4: u32 = 41978;
pub const XLINE_ASXITCHTF_5: u32 = 41979;
pub const XLINE_ASXITCHTE_SYM: u32 = 41980;
pub const XLINE_ASXITCHTE_1: u32 = 41981;
pub const XLINE_ASXITCHTE_2: u32 = 41982;
pub const XLINE_ASXITCHTE_3: u32 = 41983;
pub const XLINE_ASXITCHTE_4: u32 = 41984;
pub const XLINE_ASXITCHTE_5: u32 = 41985;
pub const XLINE_YTEST_1: u32 = 45056;
pub const XLINE_YTEST_2: u32 = 45057;
pub const XLINE_YTEST_3: u32 = 45058;
pub const XLINE_YTEST_4: u32 = 45059;
pub const XLINE_YTEST_5: u32 = 45060;
pub const XLINE_YTEST_6: u32 = 45061;
pub const XLINE_YTEST_7: u32 = 45062;
pub const XLINE_YTEST_8: u32 = 45063;
pub const XLINE_YTEST_9: u32 = 45064;
pub const XLINE_YTEST_10: u32 = 45065;
pub const XLINE_YTEST_11: u32 = 45066;
pub const XLINE_YTEST_12: u32 = 45067;
pub const XLINE_YTEST_13: u32 = 45068;
pub const XLINE_YTEST_14: u32 = 45069;
pub const XLINE_YTEST_15: u32 = 45070;
pub const XLINE_YTEST_16: u32 = 45071;
pub const XLINE_YTEST_17: u32 = 45072;
pub const XLINE_YTEST_18: u32 = 45073;
pub const XLINE_YTEST_19: u32 = 45074;
pub const XLINE_YTEST_20: u32 = 45075;
pub const XLINE_YTEST_21: u32 = 45076;
pub const XLINE_YTEST_22: u32 = 45077;
pub const XLINE_YTEST_23: u32 = 45078;
pub const XLINE_YTEST_24: u32 = 45079;
pub const XLINE_YTEST_25: u32 = 45080;
pub const XLINE_YTEST_26: u32 = 45081;
pub const XLINE_YTEST_27: u32 = 45082;
pub const XLINE_YTEST_28: u32 = 45083;
pub const XLINE_YTEST_29: u32 = 45084;
pub const XLINE_YTEST_30: u32 = 45085;
pub const XLINE_ACKEQIOI_0: u32 = 53152;
pub const XLINE_ACKEQIOI_1: u32 = 53153;
pub const XLINE_ACKEQIOI_2: u32 = 53154;
pub const XLINE_ACKEQIOI_3: u32 = 53155;
pub const XLINE_ACKEQIOI_4: u32 = 53156;
pub const XLINE_CESIOI_0: u32 = 53168;
pub const XLINE_CESIOI_1: u32 = 53169;
pub const XLINE_CESIOI_2: u32 = 53170;
pub const XLINE_CESIOI_3: u32 = 53171;
pub const XLINE_CESIOI_4: u32 = 53172;
pub const XLINE_JXIOI_0: u32 = 53184;
pub const XLINE_JXIOI_1: u32 = 53185;
pub const XLINE_JXIOI_2: u32 = 53186;
pub const XLINE_JXIOI_3: u32 = 53187;
pub const XLINE_JXIOI_4: u32 = 53188;
pub const XLINE_VIRTUIOI_0: u32 = 53200;
pub const XLINE_VIRTUIOI_1: u32 = 53201;
pub const XLINE_VIRTUIOI_2: u32 = 53202;
pub const XLINE_VIRTUIOI_3: u32 = 53203;
pub const XLINE_VIRTUIOI_4: u32 = 53204;
pub const XLINE_VIRTUIOI_E_0: u32 = 53232;
pub const XLINE_VIRTUIOI_E_1: u32 = 53233;
pub const XLINE_VIRTUIOI_E_2: u32 = 53234;
pub const XLINE_VIRTUIOI_E_3: u32 = 53235;
pub const XLINE_VIRTUIOI_E_4: u32 = 53236;
pub const XLINE_SUNIOI: u32 = 53247;
pub const XLINE_ACKEQIOI: u32 = 53248;
pub const XLINE_CESIOI: u32 = 53249;
pub const XLINE_JXIOI: u32 = 53250;
pub const XLINE_VIRTUIOI: u32 = 53251;
pub const XLINE_LMAXP_P0: u32 = 53252;
pub const XLINE_LMAXP_P1: u32 = 53253;
pub const XLINE_LMAXP_P2: u32 = 53254;
pub const XLINE_LMAXP_P3: u32 = 53255;
pub const XLINE_LMAXP_P4: u32 = 53256;
pub const XLINE_LMAXP_P5: u32 = 53257;
pub const XLINE_LMAXP_P6: u32 = 53258;
pub const XLINE_LMAXP_P7: u32 = 53259;
pub const XLINE_LMAXP_P8: u32 = 53260;
pub const XLINE_LMAXP_P9: u32 = 53261;
pub const XLINE_NMINT_PI_SYMMGR: u32 = 53262;
pub const XLINE_NMINT_PI_1: u32 = 53263;
pub const XLINE_NMINT_PI_2: u32 = 53264;
pub const XLINE_NMINT_PI_3: u32 = 53265;
pub const XLINE_NMINT_PI_4: u32 = 53266;
pub const XLINE_NMINT_PI_5: u32 = 53267;
pub const XLINE_NMINT_PI_6: u32 = 53268;
pub const XLINE_IMCIOI_0: u32 = 53269;
pub const XLINE_IMCIOI_1: u32 = 53270;
pub const XLINE_IMCIOI_2: u32 = 53271;
pub const XLINE_IMCIOI_3: u32 = 53272;
pub const XLINE_IMCIOI_4: u32 = 53273;
pub const XLINE_FNCSFIX: u32 = 53278;
pub const XLINE_FNCSBLK: u32 = 53279;
pub const XLINE_NMIMB_PI_SYMMGR: u32 = 53280;
pub const XLINE_NMIMB_PI_1: u32 = 53281;
pub const XLINE_NMTRD_PI_SYMMGR: u32 = 53282;
pub const XLINE_NMTRD_PI_1: u32 = 53283;
pub const XLINE_NMBBO_PI_SYMMGR: u32 = 53284;
pub const XLINE_NMBBO_PI_1: u32 = 53285;
pub const XLINE_NMBBO_PI_2: u32 = 53286;
pub const XLINE_NAINT_PI_SYMMGR: u32 = 53287;
pub const XLINE_NAINT_PI_1: u32 = 53288;
pub const XLINE_NAINT_PI_2: u32 = 53289;
pub const XLINE_NAINT_PI_3: u32 = 53290;
pub const XLINE_NAINT_PI_4: u32 = 53291;
pub const XLINE_NAINT_PI_5: u32 = 53292;
pub const XLINE_NAINT_PI_6: u32 = 53293;
pub const XLINE_NAINT_PI_7: u32 = 53294;
pub const XLINE_NAINT_PI_8: u32 = 53295;
pub const XLINE_NATRD_PI_SYMMGR: u32 = 53296;
pub const XLINE_NATRD_PI_1: u32 = 53297;
pub const XLINE_NAIMB_PI_SYMMGR: u32 = 53298;
pub const XLINE_NAIMB_PI_1: u32 = 53299;
pub const XLINE_NAINT_PI_9: u32 = 53300;
pub const XLINE_NAINT_PI_10: u32 = 53301;
pub const XLINE_NAINT_PI_11: u32 = 53302;
pub const XLINE_NABBO_PI_SYMMGR: u32 = 53309;
pub const XLINE_NABBO_PI_1: u32 = 53310;
pub const XLINE_NABBO_PI_2: u32 = 53311;
pub const XLINE_NTLX_BBO_1: u32 = 53312;
pub const XLINE_NTLX_BBO_2: u32 = 53313;
pub const XLINE_NTLX_BBO_SYMMGR: u32 = 53314;
pub const XLINE_NTLX_INT_1: u32 = 53315;
pub const XLINE_NTLX_INT_2: u32 = 53316;
pub const XLINE_NTLX_INT_3: u32 = 53317;
pub const XLINE_NTLX_INT_4: u32 = 53318;
pub const XLINE_NTLX_INT_5: u32 = 53319;
pub const XLINE_NTLX_INT_6: u32 = 53320;
pub const XLINE_NTLX_INT_SYMMGR: u32 = 53323;
pub const XLINE_NTLX_INP_1: u32 = 53324;
pub const XLINE_NTLX_INP_2: u32 = 53325;
pub const XLINE_NTLX_INP_3: u32 = 53326;
pub const XLINE_NTLX_INP_4: u32 = 53327;
pub const XLINE_NTLX_INP_5: u32 = 53328;
pub const XLINE_NTLX_INP_6: u32 = 53329;
pub const XLINE_NTLX_INP_7: u32 = 53330;
pub const XLINE_NTLX_INP_8: u32 = 53331;
pub const XLINE_NTLX_INP_SYMMGR: u32 = 53332;
pub const XLINE_NTLX_TRD_1: u32 = 53333;
pub const XLINE_NTLX_TRD_SYMMGR: u32 = 53334;
pub const XLINE_IMCEUIOI_0: u32 = 53335;
pub const XLINE_IMCEUIOI_1: u32 = 53336;
pub const XLINE_IMCEUIOI_2: u32 = 53337;
pub const XLINE_IMCEUIOI_3: u32 = 53338;
pub const XLINE_IMCEUIOI_4: u32 = 53339;
pub const XLINE_IMCEUIOI_SYMMGR: u32 = 53340;
pub const XLINE_C2PITCH_1: u32 = 53348;
pub const XLINE_C2PITCH_2: u32 = 53349;
pub const XLINE_C2PITCH_3: u32 = 53350;
pub const XLINE_C2PITCH_4: u32 = 53351;
pub const XLINE_C2PITCH_5: u32 = 53352;
pub const XLINE_C2PITCH_6: u32 = 53353;
pub const XLINE_C2PITCH_7: u32 = 53354;
pub const XLINE_C2PITCH_8: u32 = 53355;
pub const XLINE_C2PITCH_9: u32 = 53356;
pub const XLINE_C2PITCH_10: u32 = 53357;
pub const XLINE_C2PITCH_11: u32 = 53358;
pub const XLINE_C2PITCH_12: u32 = 53359;
pub const XLINE_C2PITCH_13: u32 = 53360;
pub const XLINE_C2PITCH_14: u32 = 53361;
pub const XLINE_C2PITCH_15: u32 = 53362;
pub const XLINE_C2PITCH_16: u32 = 53363;
pub const XLINE_C2PITCH_17: u32 = 53364;
pub const XLINE_C2PITCH_18: u32 = 53365;
pub const XLINE_C2PITCH_19: u32 = 53366;
pub const XLINE_C2PITCH_20: u32 = 53367;
pub const XLINE_C2PITCH_21: u32 = 53368;
pub const XLINE_C2PITCH_22: u32 = 53369;
pub const XLINE_C2PITCH_23: u32 = 53370;
pub const XLINE_C2PITCH_24: u32 = 53371;
pub const XLINE_C2PITCH_25: u32 = 53372;
pub const XLINE_C2PITCH_26: u32 = 53373;
pub const XLINE_C2PITCH_27: u32 = 53374;
pub const XLINE_C2PITCH_28: u32 = 53375;
pub const XLINE_C2PITCH_29: u32 = 53376;
pub const XLINE_C2PITCH_30: u32 = 53377;
pub const XLINE_C2PITCH_31: u32 = 53378;
pub const XLINE_C2PITCH_32: u32 = 53379;
pub const XLINE_C2PITCH_33: u32 = 53380;
pub const XLINE_C2PITCH_RR: u32 = 53381;
pub const XLINE_C2PITCH_SYMMGR: u32 = 53382;
pub const XLINE_C2PITCC_1: u32 = 53383;
pub const XLINE_C2PITCC_2: u32 = 53384;
pub const XLINE_C2PITCC_3: u32 = 53385;
pub const XLINE_C2PITCC_4: u32 = 53386;
pub const XLINE_C2PITCC_5: u32 = 53387;
pub const XLINE_C2PITCC_6: u32 = 53388;
pub const XLINE_C2PITCC_7: u32 = 53389;
pub const XLINE_C2PITCC_8: u32 = 53390;
pub const XLINE_C2PITCC_9: u32 = 53391;
pub const XLINE_C2PITCC_10: u32 = 53392;
pub const XLINE_C2PITCC_11: u32 = 53393;
pub const XLINE_C2PITCC_12: u32 = 53394;
pub const XLINE_C2PITCC_13: u32 = 53395;
pub const XLINE_C2PITCC_14: u32 = 53396;
pub const XLINE_C2PITCC_15: u32 = 53397;
pub const XLINE_C2PITCC_16: u32 = 53398;
pub const XLINE_C2PITCC_17: u32 = 53399;
pub const XLINE_C2PITCC_18: u32 = 53400;
pub const XLINE_C2PITCC_19: u32 = 53401;
pub const XLINE_C2PITCC_20: u32 = 53402;
pub const XLINE_C2PITCC_21: u32 = 53403;
pub const XLINE_C2PITCC_22: u32 = 53404;
pub const XLINE_C2PITCC_23: u32 = 53405;
pub const XLINE_C2PITCC_24: u32 = 53406;
pub const XLINE_C2PITCC_25: u32 = 53407;
pub const XLINE_C2PITCC_26: u32 = 53408;
pub const XLINE_C2PITCC_27: u32 = 53409;
pub const XLINE_C2PITCC_28: u32 = 53410;
pub const XLINE_C2PITCC_29: u32 = 53411;
pub const XLINE_C2PITCC_30: u32 = 53412;
pub const XLINE_C2PITCC_31: u32 = 53413;
pub const XLINE_C2PITCC_32: u32 = 53414;
pub const XLINE_C2PITCC_33: u32 = 53415;
pub const XLINE_C2PITCC_RR: u32 = 53416;
pub const XLINE_C2PITCC_SYMMGR: u32 = 53417;
pub const XLINE_C2CPITCH_1: u32 = 53418;
pub const XLINE_C2CPITCH_2: u32 = 53419;
pub const XLINE_C2CPITCH_3: u32 = 53420;
pub const XLINE_C2CPITCH_4: u32 = 53421;
pub const XLINE_C2CPITCH_5: u32 = 53422;
pub const XLINE_C2CPITCH_6: u32 = 53423;
pub const XLINE_C2CPITCH_7: u32 = 53424;
pub const XLINE_C2CPITCH_8: u32 = 53425;
pub const XLINE_C2CPITCH_9: u32 = 53426;
pub const XLINE_C2CPITCH_10: u32 = 53427;
pub const XLINE_C2CPITCH_11: u32 = 53428;
pub const XLINE_C2CPITCH_12: u32 = 53429;
pub const XLINE_C2CPITCH_13: u32 = 53430;
pub const XLINE_C2CPITCH_14: u32 = 53431;
pub const XLINE_C2CPITCH_15: u32 = 53432;
pub const XLINE_C2CPITCH_16: u32 = 53433;
pub const XLINE_C2CPITCH_17: u32 = 53434;
pub const XLINE_C2CPITCH_18: u32 = 53435;
pub const XLINE_C2CPITCH_19: u32 = 53436;
pub const XLINE_C2CPITCH_20: u32 = 53437;
pub const XLINE_C2CPITCH_21: u32 = 53438;
pub const XLINE_C2CPITCH_22: u32 = 53439;
pub const XLINE_C2CPITCH_23: u32 = 53440;
pub const XLINE_C2CPITCH_24: u32 = 53441;
pub const XLINE_C2CPITCH_25: u32 = 53442;
pub const XLINE_C2CPITCH_26: u32 = 53443;
pub const XLINE_C2CPITCH_27: u32 = 53444;
pub const XLINE_C2CPITCH_28: u32 = 53445;
pub const XLINE_C2CPITCH_29: u32 = 53446;
pub const XLINE_C2CPITCH_30: u32 = 53447;
pub const XLINE_C2CPITCH_31: u32 = 53448;
pub const XLINE_C2CPITCH_32: u32 = 53449;
pub const XLINE_C2CPITCH_33: u32 = 53450;
pub const XLINE_C2CPITCH_RR: u32 = 53451;
pub const XLINE_C2CPITCH_SYMMGR: u32 = 53452;
pub const XLINE_C2CPITCC_1: u32 = 53453;
pub const XLINE_C2CPITCC_2: u32 = 53454;
pub const XLINE_C2CPITCC_3: u32 = 53455;
pub const XLINE_C2CPITCC_4: u32 = 53456;
pub const XLINE_C2CPITCC_5: u32 = 53457;
pub const XLINE_C2CPITCC_6: u32 = 53458;
pub const XLINE_C2CPITCC_7: u32 = 53459;
pub const XLINE_C2CPITCC_8: u32 = 53460;
pub const XLINE_C2CPITCC_9: u32 = 53461;
pub const XLINE_C2CPITCC_10: u32 = 53462;
pub const XLINE_C2CPITCC_11: u32 = 53463;
pub const XLINE_C2CPITCC_12: u32 = 53464;
pub const XLINE_C2CPITCC_13: u32 = 53465;
pub const XLINE_C2CPITCC_14: u32 = 53466;
pub const XLINE_C2CPITCC_15: u32 = 53467;
pub const XLINE_C2CPITCC_16: u32 = 53468;
pub const XLINE_C2CPITCC_17: u32 = 53469;
pub const XLINE_C2CPITCC_18: u32 = 53470;
pub const XLINE_C2CPITCC_19: u32 = 53471;
pub const XLINE_C2CPITCC_20: u32 = 53472;
pub const XLINE_C2CPITCC_21: u32 = 53473;
pub const XLINE_C2CPITCC_22: u32 = 53474;
pub const XLINE_C2CPITCC_23: u32 = 53475;
pub const XLINE_C2CPITCC_24: u32 = 53476;
pub const XLINE_C2CPITCC_25: u32 = 53477;
pub const XLINE_C2CPITCC_26: u32 = 53478;
pub const XLINE_C2CPITCC_27: u32 = 53479;
pub const XLINE_C2CPITCC_28: u32 = 53480;
pub const XLINE_C2CPITCC_29: u32 = 53481;
pub const XLINE_C2CPITCC_30: u32 = 53482;
pub const XLINE_C2CPITCC_31: u32 = 53483;
pub const XLINE_C2CPITCC_32: u32 = 53484;
pub const XLINE_C2CPITCC_33: u32 = 53485;
pub const XLINE_C2CPITCC_RR: u32 = 53486;
pub const XLINE_C2CPITCC_SYMMGR: u32 = 53487;
pub const XLINE_C2APITCH_1: u32 = 53488;
pub const XLINE_C2APITCH_2: u32 = 53489;
pub const XLINE_C2APITCH_3: u32 = 53490;
pub const XLINE_C2APITCH_4: u32 = 53491;
pub const XLINE_C2APITCH_5: u32 = 53492;
pub const XLINE_C2APITCH_6: u32 = 53493;
pub const XLINE_C2APITCH_7: u32 = 53494;
pub const XLINE_C2APITCH_8: u32 = 53495;
pub const XLINE_C2APITCH_9: u32 = 53496;
pub const XLINE_C2APITCH_10: u32 = 53497;
pub const XLINE_C2APITCH_11: u32 = 53498;
pub const XLINE_C2APITCH_12: u32 = 53499;
pub const XLINE_C2APITCH_13: u32 = 53500;
pub const XLINE_C2APITCH_14: u32 = 53501;
pub const XLINE_C2APITCH_15: u32 = 53502;
pub const XLINE_C2APITCH_16: u32 = 53503;
pub const XLINE_C2APITCH_17: u32 = 53504;
pub const XLINE_C2APITCH_18: u32 = 53505;
pub const XLINE_C2APITCH_19: u32 = 53506;
pub const XLINE_C2APITCH_20: u32 = 53507;
pub const XLINE_C2APITCH_21: u32 = 53508;
pub const XLINE_C2APITCH_22: u32 = 53509;
pub const XLINE_C2APITCH_23: u32 = 53510;
pub const XLINE_C2APITCH_24: u32 = 53511;
pub const XLINE_C2APITCH_25: u32 = 53512;
pub const XLINE_C2APITCH_26: u32 = 53513;
pub const XLINE_C2APITCH_27: u32 = 53514;
pub const XLINE_C2APITCH_28: u32 = 53515;
pub const XLINE_C2APITCH_29: u32 = 53516;
pub const XLINE_C2APITCH_30: u32 = 53517;
pub const XLINE_C2APITCH_31: u32 = 53518;
pub const XLINE_C2APITCH_32: u32 = 53519;
pub const XLINE_C2APITCH_33: u32 = 53520;
pub const XLINE_C2APITCH_SYMMGR: u32 = 53521;
pub const XLINE_C2APITCC_1: u32 = 53522;
pub const XLINE_C2APITCC_2: u32 = 53523;
pub const XLINE_C2APITCC_3: u32 = 53524;
pub const XLINE_C2APITCC_4: u32 = 53525;
pub const XLINE_C2APITCC_5: u32 = 53526;
pub const XLINE_C2APITCC_6: u32 = 53527;
pub const XLINE_C2APITCC_7: u32 = 53528;
pub const XLINE_C2APITCC_8: u32 = 53529;
pub const XLINE_C2APITCC_9: u32 = 53530;
pub const XLINE_C2APITCC_10: u32 = 53531;
pub const XLINE_C2APITCC_11: u32 = 53532;
pub const XLINE_C2APITCC_12: u32 = 53533;
pub const XLINE_C2APITCC_13: u32 = 53534;
pub const XLINE_C2APITCC_14: u32 = 53535;
pub const XLINE_C2APITCC_15: u32 = 53536;
pub const XLINE_C2APITCC_16: u32 = 53537;
pub const XLINE_C2APITCC_17: u32 = 53538;
pub const XLINE_C2APITCC_18: u32 = 53539;
pub const XLINE_C2APITCC_19: u32 = 53540;
pub const XLINE_C2APITCC_20: u32 = 53541;
pub const XLINE_C2APITCC_21: u32 = 53542;
pub const XLINE_C2APITCC_22: u32 = 53543;
pub const XLINE_C2APITCC_23: u32 = 53544;
pub const XLINE_C2APITCC_24: u32 = 53545;
pub const XLINE_C2APITCC_25: u32 = 53546;
pub const XLINE_C2APITCC_26: u32 = 53547;
pub const XLINE_C2APITCC_27: u32 = 53548;
pub const XLINE_C2APITCC_28: u32 = 53549;
pub const XLINE_C2APITCC_29: u32 = 53550;
pub const XLINE_C2APITCC_30: u32 = 53551;
pub const XLINE_C2APITCC_31: u32 = 53552;
pub const XLINE_C2APITCC_32: u32 = 53553;
pub const XLINE_C2APITCC_33: u32 = 53554;
pub const XLINE_C2APITCC_SYMMGR: u32 = 53555;
pub const XLINE_CITIIOI_0: u32 = 53556;
pub const XLINE_CITIIOI_1: u32 = 53557;
pub const XLINE_CITIIOI_2: u32 = 53558;
pub const XLINE_CITIIOI_3: u32 = 53559;
pub const XLINE_CITIIOI_4: u32 = 53560;
pub const XLINE_HRTIOI_0: u32 = 53561;
pub const XLINE_HRTIOI_1: u32 = 53562;
pub const XLINE_HRTIOI_2: u32 = 53563;
pub const XLINE_HRTIOI_3: u32 = 53564;
pub const XLINE_HRTIOI_4: u32 = 53565;
pub const XLINE_CITIEUIOI_0: u32 = 53566;
pub const XLINE_CITIEUIOI_1: u32 = 53567;
pub const XLINE_CITIEUIOI_2: u32 = 53568;
pub const XLINE_CITIEUIOI_3: u32 = 53569;
pub const XLINE_CITIEUIOI_4: u32 = 53570;
pub const XLINE_GTSIOI_0: u32 = 53571;
pub const XLINE_GTSIOI_1: u32 = 53572;
pub const XLINE_GTSIOI_2: u32 = 53573;
pub const XLINE_GTSIOI_3: u32 = 53574;
pub const XLINE_GTSIOI_4: u32 = 53575;
pub const XLINE_TRCXIOI_0: u32 = 53576;
pub const XLINE_TRCXIOI_1: u32 = 53577;
pub const XLINE_TRCXIOI_2: u32 = 53578;
pub const XLINE_TRCXIOI_3: u32 = 53579;
pub const XLINE_TRCXIOI_4: u32 = 53580;
pub const XLINE_HWKOP_RS_1_AC: u32 = 53622;
pub const XLINE_HWKOP_RS_1_DK: u32 = 53623;
pub const XLINE_HWKOP_RS_1_LR: u32 = 53624;
pub const XLINE_HWKOP_RS_1_SZ: u32 = 53625;
pub const XLINE_HWKOP_RS_2_AC: u32 = 53626;
pub const XLINE_HWKOP_RS_2_DK: u32 = 53627;
pub const XLINE_HWKOP_RS_2_LR: u32 = 53628;
pub const XLINE_HWKOP_RS_2_SZ: u32 = 53629;
pub const XLINE_HWKOP_RS_3_AC: u32 = 53630;
pub const XLINE_HWKOP_RS_3_DK: u32 = 53631;
pub const XLINE_HWKOP_RS_3_LR: u32 = 53632;
pub const XLINE_HWKOP_RS_3_SZ: u32 = 53633;
pub const XLINE_HWKOP_RS_4_AZ: u32 = 53634;
pub const XLINE_HWKOP_RS_5_AZ: u32 = 53635;
pub const XLINE_HWKOP_RS_6_AZ: u32 = 53636;
pub const XLINE_HWKOP_RS_9_AZ: u32 = 53637;
pub const XLINE_HWKOP_RS_30_AJ: u32 = 53638;
pub const XLINE_HWKOP_RS_30_KZ: u32 = 53639;
pub const XLINE_OATS_SYM_REF_1: u32 = 53648;
pub const XLINE_INTLCRS: u32 = 53649;
pub const XLINE_INTCRST: u32 = 53650;
pub const XLINE_INTLCRS_M: u32 = 53651;
pub const XLINE_INTCRST_M: u32 = 53652;
pub const XLINE_INTLCRS_T: u32 = 53653;
pub const XLINE_INTCRST_T: u32 = 53654;
pub const XLINE_TSE_RT_001: u32 = 53664;
pub const XLINE_TSE_RT_002: u32 = 53665;
pub const XLINE_TSE_RT_003: u32 = 53666;
pub const XLINE_TSE_RT_004: u32 = 53667;
pub const XLINE_TSE_RT_005: u32 = 53668;
pub const XLINE_TSE_RT_006: u32 = 53669;
pub const XLINE_TSE_RT_007: u32 = 53670;
pub const XLINE_TSE_RT_008: u32 = 53671;
pub const XLINE_TSE_RT_009: u32 = 53672;
pub const XLINE_TSE_RT_010: u32 = 53673;
pub const XLINE_TSE_RT_011: u32 = 53674;
pub const XLINE_TSE_RT_012: u32 = 53675;
pub const XLINE_TSE_RT_013: u32 = 53676;
pub const XLINE_TSE_RT_014: u32 = 53677;
pub const XLINE_TSE_RT_015: u32 = 53678;
pub const XLINE_TSE_RT_016: u32 = 53679;
pub const XLINE_TSE_RT_017: u32 = 53680;
pub const XLINE_TSE_RT_018: u32 = 53681;
pub const XLINE_NSE_RT_022: u32 = 53682;
pub const XLINE_FSE_RT_024: u32 = 53683;
pub const XLINE_SSE_RT_026: u32 = 53684;
pub const XLINE_TSE_INDEX_042: u32 = 53685;
pub const XLINE_TSE_RT_DUM_101: u32 = 53686;
pub const XLINE_TSE_RT_WB_001: u32 = 53687;
pub const XLINE_TSE_RT_WB_002: u32 = 53688;
pub const XLINE_TSE_RT_WB_003: u32 = 53689;
pub const XLINE_TSE_RT_WB_004: u32 = 53690;
pub const XLINE_TSE_RT_WB_005: u32 = 53691;
pub const XLINE_TSE_RT_WB_006: u32 = 53692;
pub const XLINE_TSE_RT_WB_007: u32 = 53693;
pub const XLINE_TSE_RT_WB_008: u32 = 53694;
pub const XLINE_TSE_RT_WB_009: u32 = 53695;
pub const XLINE_TSE_RT_WB_010: u32 = 53696;
pub const XLINE_TSE_RT_WB_011: u32 = 53697;
pub const XLINE_TSE_RT_WB_012: u32 = 53698;
pub const XLINE_TSE_RT_WB_013: u32 = 53699;
pub const XLINE_TSE_RT_WB_014: u32 = 53700;
pub const XLINE_TSE_RT_WB_015: u32 = 53701;
pub const XLINE_TSE_RT_WB_016: u32 = 53702;
pub const XLINE_TSE_RT_WB_017: u32 = 53703;
pub const XLINE_TSE_RT_WB_018: u32 = 53704;
pub const XLINE_NSE_RT_WB_022: u32 = 53705;
pub const XLINE_FSE_RT_WB_024: u32 = 53706;
pub const XLINE_SSE_RT_WB_026: u32 = 53707;
pub const XLINE_TSE_RT_WB_042: u32 = 53708;
pub const XLINE_TSE_RT_WB_101: u32 = 53709;
pub const XLINE_TSE_T_RT_001: u32 = 53710;
pub const XLINE_TSE_T_RT_002: u32 = 53711;
pub const XLINE_TSE_T_RT_003: u32 = 53712;
pub const XLINE_TSE_T_RT_004: u32 = 53713;
pub const XLINE_TSE_T_RT_005: u32 = 53714;
pub const XLINE_TSE_T_RT_006: u32 = 53715;
pub const XLINE_TSE_T_RT_007: u32 = 53716;
pub const XLINE_TSE_T_RT_008: u32 = 53717;
pub const XLINE_TSE_T_RT_009: u32 = 53718;
pub const XLINE_TSE_T_RT_010: u32 = 53719;
pub const XLINE_TSE_T_RT_011: u32 = 53720;
pub const XLINE_TSE_T_RT_012: u32 = 53721;
pub const XLINE_NSE_T_RT_022: u32 = 53722;
pub const XLINE_FSE_T_RT_024: u32 = 53723;
pub const XLINE_SSE_T_RT_026: u32 = 53724;
pub const XLINE_TSE_T_RT_042: u32 = 53725;
pub const XLINE_TSE_T_RT_101: u32 = 53726;
pub const XLINE_TSE_TA_RT_001: u32 = 53727;
pub const XLINE_TSE_TA_RT_002: u32 = 53728;
pub const XLINE_TSE_TA_RT_003: u32 = 53729;
pub const XLINE_TSE_TA_RT_004: u32 = 53730;
pub const XLINE_TSE_TA_RT_005: u32 = 53731;
pub const XLINE_TSE_TA_RT_006: u32 = 53732;
pub const XLINE_TSE_TA_RT_007: u32 = 53733;
pub const XLINE_TSE_TA_RT_008: u32 = 53734;
pub const XLINE_TSE_TA_RT_009: u32 = 53735;
pub const XLINE_TSE_TA_RT_010: u32 = 53736;
pub const XLINE_TSE_TA_RT_011: u32 = 53737;
pub const XLINE_TSE_TA_RT_012: u32 = 53738;
pub const XLINE_TSE_TA_RT_013: u32 = 53739;
pub const XLINE_TSE_TA_RT_014: u32 = 53740;
pub const XLINE_TSE_TA_RT_015: u32 = 53741;
pub const XLINE_TSE_TA_RT_016: u32 = 53742;
pub const XLINE_TSE_TA_RT_017: u32 = 53743;
pub const XLINE_TSE_TA_RT_018: u32 = 53744;
pub const XLINE_NSE_TA_RT_022: u32 = 53745;
pub const XLINE_FSE_TA_RT_024: u32 = 53746;
pub const XLINE_SSE_TA_RT_026: u32 = 53747;
pub const XLINE_TSE_TA_RT_041: u32 = 53748;
pub const XLINE_TSE_TA_IDX_042: u32 = 53749;
pub const XLINE_TSE_TA_DUM_101: u32 = 53750;
pub const XLINE_TSE_TB_RT_001: u32 = 53751;
pub const XLINE_TSE_TB_RT_002: u32 = 53752;
pub const XLINE_TSE_TB_RT_003: u32 = 53753;
pub const XLINE_TSE_TB_RT_004: u32 = 53754;
pub const XLINE_TSE_TB_RT_005: u32 = 53755;
pub const XLINE_TSE_TB_RT_006: u32 = 53756;
pub const XLINE_TSE_TB_RT_007: u32 = 53757;
pub const XLINE_TSE_TB_RT_008: u32 = 53758;
pub const XLINE_FSE_TB_RT_024: u32 = 53759;
pub const XLINE_TSE_TB_RT_101: u32 = 53760;
pub const XLINE_TSEF_RT_051: u32 = 53761;
pub const XLINE_TSEF_RT_052: u32 = 53762;
pub const XLINE_TSEF_RT_053: u32 = 53763;
pub const XLINE_TSEF_RT_054: u32 = 53764;
pub const XLINE_TSEF_RT_055: u32 = 53765;
pub const XLINE_TSEF_RT_056: u32 = 53766;
pub const XLINE_TSEF_RT_057: u32 = 53767;
pub const XLINE_TSEF_RT_058: u32 = 53768;
pub const XLINE_TSEF_RT_059: u32 = 53769;
pub const XLINE_TSEF_RT_060: u32 = 53770;
pub const XLINE_TSEF_RT_061: u32 = 53771;
pub const XLINE_TSEF_RT_062: u32 = 53772;
pub const XLINE_TSEF_RT_063: u32 = 53773;
pub const XLINE_TSEF_RT_064: u32 = 53774;
pub const XLINE_TSEF_RT_065: u32 = 53775;
pub const XLINE_TSEF_RT_066: u32 = 53776;
pub const XLINE_TSEF_RT_067: u32 = 53777;
pub const XLINE_TSEF_RT_068: u32 = 53778;
pub const XLINE_NSEF_RT_072: u32 = 53779;
pub const XLINE_FSEF_RT_074: u32 = 53780;
pub const XLINE_SSEF_RT_076: u32 = 53781;
pub const XLINE_TSEF_RT_DUM_111: u32 = 53782;
pub const XLINE_TSEF_RT_WB_051: u32 = 53783;
pub const XLINE_TSEF_RT_WB_052: u32 = 53784;
pub const XLINE_TSEF_RT_WB_053: u32 = 53785;
pub const XLINE_TSEF_RT_WB_054: u32 = 53786;
pub const XLINE_TSEF_RT_WB_055: u32 = 53787;
pub const XLINE_TSEF_RT_WB_056: u32 = 53788;
pub const XLINE_TSEF_RT_WB_057: u32 = 53789;
pub const XLINE_TSEF_RT_WB_058: u32 = 53790;
pub const XLINE_TSEF_RT_WB_059: u32 = 53791;
pub const XLINE_TSEF_RT_WB_060: u32 = 53792;
pub const XLINE_TSEF_RT_WB_061: u32 = 53793;
pub const XLINE_TSEF_RT_WB_062: u32 = 53794;
pub const XLINE_TSEF_RT_WB_063: u32 = 53795;
pub const XLINE_TSEF_RT_WB_064: u32 = 53796;
pub const XLINE_TSEF_RT_WB_065: u32 = 53797;
pub const XLINE_TSEF_RT_WB_066: u32 = 53798;
pub const XLINE_TSEF_RT_WB_067: u32 = 53799;
pub const XLINE_TSEF_RT_WB_068: u32 = 53800;
pub const XLINE_NSEF_RT_WB_072: u32 = 53801;
pub const XLINE_FSEF_RT_WB_074: u32 = 53802;
pub const XLINE_SSEF_RT_WB_076: u32 = 53803;
pub const XLINE_TSEF_RT_WB_111: u32 = 53804;
pub const XLINE_TSEF_T_RT_051: u32 = 53805;
pub const XLINE_TSEF_T_RT_052: u32 = 53806;
pub const XLINE_TSEF_T_RT_053: u32 = 53807;
pub const XLINE_TSEF_T_RT_054: u32 = 53808;
pub const XLINE_TSEF_T_RT_055: u32 = 53809;
pub const XLINE_TSEF_T_RT_056: u32 = 53810;
pub const XLINE_TSEF_T_RT_057: u32 = 53811;
pub const XLINE_TSEF_T_RT_058: u32 = 53812;
pub const XLINE_TSEF_T_RT_059: u32 = 53813;
pub const XLINE_TSEF_T_RT_060: u32 = 53814;
pub const XLINE_TSEF_T_RT_061: u32 = 53815;
pub const XLINE_TSEF_T_RT_062: u32 = 53816;
pub const XLINE_NSEF_T_RT_072: u32 = 53817;
pub const XLINE_FSEF_T_RT_074: u32 = 53818;
pub const XLINE_SSEF_T_RT_076: u32 = 53819;
pub const XLINE_TSEF_T_RT_111: u32 = 53820;
pub const XLINE_TSEF_TA_RT_051: u32 = 53821;
pub const XLINE_TSEF_TA_RT_052: u32 = 53822;
pub const XLINE_TSEF_TA_RT_053: u32 = 53823;
pub const XLINE_TSEF_TA_RT_054: u32 = 53824;
pub const XLINE_TSEF_TA_RT_055: u32 = 53825;
pub const XLINE_TSEF_TA_RT_056: u32 = 53826;
pub const XLINE_TSEF_TA_RT_057: u32 = 53827;
pub const XLINE_TSEF_TA_RT_058: u32 = 53828;
pub const XLINE_TSEF_TA_RT_059: u32 = 53829;
pub const XLINE_TSEF_TA_RT_060: u32 = 53830;
pub const XLINE_TSEF_TA_RT_061: u32 = 53831;
pub const XLINE_TSEF_TA_RT_062: u32 = 53832;
pub const XLINE_TSEF_TA_RT_063: u32 = 53833;
pub const XLINE_TSEF_TA_RT_064: u32 = 53834;
pub const XLINE_TSEF_TA_RT_065: u32 = 53835;
pub const XLINE_TSEF_TA_RT_066: u32 = 53836;
pub const XLINE_TSEF_TA_RT_067: u32 = 53837;
pub const XLINE_TSEF_TA_RT_068: u32 = 53838;
pub const XLINE_NSEF_TA_RT_072: u32 = 53839;
pub const XLINE_FSEF_TA_RT_074: u32 = 53840;
pub const XLINE_SSEF_TA_RT_076: u32 = 53841;
pub const XLINE_TSEF_TA_RT_111: u32 = 53842;
pub const XLINE_TSEF_TB_RT_051: u32 = 53843;
pub const XLINE_TSEF_TB_RT_052: u32 = 53844;
pub const XLINE_TSEF_TB_RT_053: u32 = 53845;
pub const XLINE_TSEF_TB_RT_054: u32 = 53846;
pub const XLINE_TSEF_TB_RT_055: u32 = 53847;
pub const XLINE_TSEF_TB_RT_056: u32 = 53848;
pub const XLINE_TSEF_TB_RT_057: u32 = 53849;
pub const XLINE_TSEF_TB_RT_058: u32 = 53850;
pub const XLINE_FSEF_TB_RT_074: u32 = 53851;
pub const XLINE_TSEF_TB_RT_111: u32 = 53852;
pub const XLINE_TSE_BASE_021: u32 = 53853;
pub const XLINE_NSE_BASE_023: u32 = 53854;
pub const XLINE_FSE_BASE_025: u32 = 53855;
pub const XLINE_SSE_BASE_027: u32 = 53856;
pub const XLINE_TSE_ISSU_032: u32 = 53857;
pub const XLINE_NSE_ISSU_033: u32 = 53858;
pub const XLINE_FSE_ISSU_034: u32 = 53859;
pub const XLINE_SSE_ISSU_035: u32 = 53860;
pub const XLINE_TSE_BASE_102: u32 = 53861;
pub const XLINE_TSE_T_BASE_021: u32 = 53862;
pub const XLINE_NSE_T_BASE_023: u32 = 53863;
pub const XLINE_FSE_T_BASE_025: u32 = 53864;
pub const XLINE_SSE_T_BASE_027: u32 = 53865;
pub const XLINE_TSE_T_ISSU_032: u32 = 53866;
pub const XLINE_NSE_T_ISSU_033: u32 = 53867;
pub const XLINE_FSE_T_ISSU_034: u32 = 53868;
pub const XLINE_SSE_T_ISSU_035: u32 = 53869;
pub const XLINE_TSE_T_BASE_102: u32 = 53870;
pub const XLINE_TSE_TA_BASE_021: u32 = 53871;
pub const XLINE_NSE_TA_BASE_023: u32 = 53872;
pub const XLINE_FSE_TA_BASE_025: u32 = 53873;
pub const XLINE_SSE_TA_BASE_027: u32 = 53874;
pub const XLINE_TSE_TA_ISSU_032: u32 = 53875;
pub const XLINE_NSE_TA_ISSU_033: u32 = 53876;
pub const XLINE_FSE_TA_ISSU_034: u32 = 53877;
pub const XLINE_SSE_TA_ISSU_035: u32 = 53878;
pub const XLINE_TSE_TA_BASE_102: u32 = 53879;
pub const XLINE_TSE_TB_BASE_021: u32 = 53880;
pub const XLINE_FSE_TB_BASE_025: u32 = 53881;
pub const XLINE_TSE_TB_BASE_102: u32 = 53882;
pub const XLINE_TSE_BASE_WB_021: u32 = 53883;
pub const XLINE_NSE_BASE_WB_023: u32 = 53884;
pub const XLINE_FSE_BASE_WB_025: u32 = 53885;
pub const XLINE_SSE_BASE_WB_027: u32 = 53886;
pub const XLINE_TSE_ISSU_WB_032: u32 = 53887;
pub const XLINE_NSE_ISSU_WB_033: u32 = 53888;
pub const XLINE_FSE_ISSU_WB_034: u32 = 53889;
pub const XLINE_SSE_ISSU_WB_035: u32 = 53890;
pub const XLINE_TSE_BASE_WB_102: u32 = 53891;
pub const XLINE_EBSFIXFX_R0: u32 = 53894;
pub const XLINE_EBSFIXFX_R1: u32 = 53895;
pub const XLINE_EBSFIXFX_R2: u32 = 53896;
pub const XLINE_EBSFIXFX_R3: u32 = 53897;
pub const XLINE_EBSFIXFX_R4: u32 = 53898;
pub const XLINE_CURRENEX_CA: u32 = 53899;
pub const XLINE_CURRENEX_CB: u32 = 53900;
pub const XLINE_CURRENEX_CC: u32 = 53901;
pub const XLINE_CURRENEX_CD: u32 = 53902;
pub const XLINE_CURRENEX_CE: u32 = 53903;
pub const XLINE_CURRENEX_CF: u32 = 53904;
pub const XLINE_CURRENEX_CG: u32 = 53905;
pub const XLINE_CURRENEX_CH: u32 = 53906;
pub const XLINE_CURRENEX_CI: u32 = 53907;
pub const XLINE_CURRENEX_CJ: u32 = 53908;
pub const XLINE_SPOTSTREAMFX_SA: u32 = 53909;
pub const XLINE_SPOTSTREAMFX_SB: u32 = 53910;
pub const XLINE_SPOTSTREAMFX_SC: u32 = 53911;
pub const XLINE_SPOTSTREAMFX_SD: u32 = 53912;
pub const XLINE_SPOTSTREAMFX_SE: u32 = 53913;
pub const XLINE_SPOTSTREAMFX_SF: u32 = 53914;
pub const XLINE_SPOTSTREAMFX_SG: u32 = 53915;
pub const XLINE_SPOTSTREAMFX_SH: u32 = 53916;
pub const XLINE_SPOTSTREAMFX_SI: u32 = 53917;
pub const XLINE_SPOTSTREAMFX_SJ: u32 = 53918;
pub const XLINE_HOTSPOTFX_HA: u32 = 53919;
pub const XLINE_HOTSPOTFX_HB: u32 = 53920;
pub const XLINE_HOTSPOTFX_HC: u32 = 53921;
pub const XLINE_HOTSPOTFX_HD: u32 = 53922;
pub const XLINE_HOTSPOTFX_HE: u32 = 53923;
pub const XLINE_HOTSPOTFX_HF: u32 = 53924;
pub const XLINE_HOTSPOTFX_HG: u32 = 53925;
pub const XLINE_HOTSPOTFX_HH: u32 = 53926;
pub const XLINE_HOTSPOTFX_HI: u32 = 53927;
pub const XLINE_HOTSPOTFX_HJ: u32 = 53928;
pub const XLINE_FMFX_MA: u32 = 53929;
pub const XLINE_FMFX_MB: u32 = 53930;
pub const XLINE_FMFX_MC: u32 = 53931;
pub const XLINE_FMFX_MD: u32 = 53932;
pub const XLINE_FMFX_ME: u32 = 53933;
pub const XLINE_FMFX_MF: u32 = 53934;
pub const XLINE_FMFX_MG: u32 = 53935;
pub const XLINE_FMFX_MH: u32 = 53936;
pub const XLINE_FMFX_MI: u32 = 53937;
pub const XLINE_FMFX_MJ: u32 = 53938;
pub const XLINE_MSMTF: u32 = 53939;
pub const XLINE_MSMTFT: u32 = 53940;
pub const XLINE_QY_CME_EQ: u32 = 53943;
pub const XLINE_QYT_CME_EQ: u32 = 53944;
pub const XLINE_QY_CBT_EQ: u32 = 53945;
pub const XLINE_QYT_CBT_EQ: u32 = 53946;
pub const XLINE_QY_REF: u32 = 53947;
pub const XLINE_QYT_REF: u32 = 53948;
pub const XLINE_XETR_RDI: u32 = 53949;
pub const XLINE_XETR_EMDI_01: u32 = 53950;
pub const XLINE_XETR_EMDI_02: u32 = 53951;
pub const XLINE_XETR_EMDI_03: u32 = 53952;
pub const XLINE_XETR_EMDI_04: u32 = 53953;
pub const XLINE_XETR_EMDI_05: u32 = 53954;
pub const XLINE_XETR_EMDI_06: u32 = 53955;
pub const XLINE_XETR_EMDI_07: u32 = 53956;
pub const XLINE_XETR_EMDI_08: u32 = 53957;
pub const XLINE_XETR_EMDI_09: u32 = 53958;
pub const XLINE_XETR_EMDI_10: u32 = 53959;
pub const XLINE_XETR_EMDI_11: u32 = 53960;
pub const XLINE_XETR_EMDI_12: u32 = 53961;
pub const XLINE_XETR_EMDI_13: u32 = 53962;
pub const XLINE_XETR_EMDI_14: u32 = 53963;
pub const XLINE_XETR_EMDI_15: u32 = 53964;
pub const XLINE_XETR_EMDI_16: u32 = 53965;
pub const XLINE_XETR_EMDI_17: u32 = 53966;
pub const XLINE_XETR_EMDI_18: u32 = 53967;
pub const XLINE_XETR_EMDI_19: u32 = 53968;
pub const XLINE_XETR_EMDI_20: u32 = 53969;
pub const XLINE_XETR_EMDI_21: u32 = 53970;
pub const XLINE_XETR_EMDI_22: u32 = 53971;
pub const XLINE_XETR_EMDI_23: u32 = 53972;
pub const XLINE_XETR_EMDI_24: u32 = 53973;
pub const XLINE_XETR_EMDI_25: u32 = 53974;
pub const XLINE_XETR_EMDI_26: u32 = 53975;
pub const XLINE_XETR_EMDI_27: u32 = 53976;
pub const XLINE_XETR_EMDI_28: u32 = 53977;
pub const XLINE_XETR_EMDI_29: u32 = 53978;
pub const XLINE_XETR_EMDI_30: u32 = 53979;
pub const XLINE_XETR_EMDI_31: u32 = 53980;
pub const XLINE_XETR_EMDI_32: u32 = 53981;
pub const XLINE_XETRT_RDI: u32 = 53982;
pub const XLINE_XETRT_EMDI_01: u32 = 53983;
pub const XLINE_XETRT_EMDI_02: u32 = 53984;
pub const XLINE_XETRT_EMDI_03: u32 = 53985;
pub const XLINE_XETRT_EMDI_04: u32 = 53986;
pub const XLINE_XETRT_EMDI_05: u32 = 53987;
pub const XLINE_XETRT_EMDI_06: u32 = 53988;
pub const XLINE_XETRT_EMDI_07: u32 = 53989;
pub const XLINE_XETRT_EMDI_08: u32 = 53990;
pub const XLINE_XETRT_EMDI_09: u32 = 53991;
pub const XLINE_XETRT_EMDI_10: u32 = 53992;
pub const XLINE_XETRT_EMDI_11: u32 = 53993;
pub const XLINE_XETRT_EMDI_12: u32 = 53994;
pub const XLINE_XETRT_EMDI_13: u32 = 53995;
pub const XLINE_XETRT_EMDI_14: u32 = 53996;
pub const XLINE_XETRT_EMDI_15: u32 = 53997;
pub const XLINE_XETRT_EMDI_16: u32 = 53998;
pub const XLINE_XETRT_EMDI_17: u32 = 53999;
pub const XLINE_XETRT_EMDI_18: u32 = 54000;
pub const XLINE_XETRT_EMDI_19: u32 = 54001;
pub const XLINE_XETRT_EMDI_20: u32 = 54002;
pub const XLINE_XETRT_EMDI_21: u32 = 54003;
pub const XLINE_XETRT_EMDI_22: u32 = 54004;
pub const XLINE_XETRT_EMDI_23: u32 = 54005;
pub const XLINE_XETRT_EMDI_24: u32 = 54006;
pub const XLINE_XETRT_EMDI_25: u32 = 54007;
pub const XLINE_XETRT_EMDI_26: u32 = 54008;
pub const XLINE_XETRT_EMDI_27: u32 = 54009;
pub const XLINE_XETRT_EMDI_28: u32 = 54010;
pub const XLINE_XETRT_EMDI_29: u32 = 54011;
pub const XLINE_XETRT_EMDI_30: u32 = 54012;
pub const XLINE_XETRT_EMDI_31: u32 = 54013;
pub const XLINE_XETRT_EMDI_32: u32 = 54014;
pub const XLINE_XBUD_RDI: u32 = 54015;
pub const XLINE_XBUD_EMDI_01: u32 = 54016;
pub const XLINE_XBUD_EMDI_02: u32 = 54017;
pub const XLINE_XBUD_EMDI_03: u32 = 54018;
pub const XLINE_XBUD_EMDI_04: u32 = 54019;
pub const XLINE_XBUD_EMDI_05: u32 = 54020;
pub const XLINE_XBUD_EMDI_06: u32 = 54021;
pub const XLINE_XBUD_EMDI_07: u32 = 54022;
pub const XLINE_XBUD_EMDI_08: u32 = 54023;
pub const XLINE_XBUD_EMDI_09: u32 = 54024;
pub const XLINE_XBUD_EMDI_10: u32 = 54025;
pub const XLINE_XBUD_EMDI_11: u32 = 54026;
pub const XLINE_XBUD_EMDI_12: u32 = 54027;
pub const XLINE_XBUD_EMDI_13: u32 = 54028;
pub const XLINE_XBUD_EMDI_14: u32 = 54029;
pub const XLINE_XBUD_EMDI_15: u32 = 54030;
pub const XLINE_XBUD_EMDI_16: u32 = 54031;
pub const XLINE_XBUD_EMDI_17: u32 = 54032;
pub const XLINE_XBUD_EMDI_18: u32 = 54033;
pub const XLINE_XBUD_EMDI_19: u32 = 54034;
pub const XLINE_XBUD_EMDI_20: u32 = 54035;
pub const XLINE_XBUD_EMDI_21: u32 = 54036;
pub const XLINE_XBUD_EMDI_22: u32 = 54037;
pub const XLINE_XBUD_EMDI_23: u32 = 54038;
pub const XLINE_XBUD_EMDI_24: u32 = 54039;
pub const XLINE_XBUD_EMDI_25: u32 = 54040;
pub const XLINE_XBUD_EMDI_26: u32 = 54041;
pub const XLINE_XBUD_EMDI_27: u32 = 54042;
pub const XLINE_XBUD_EMDI_28: u32 = 54043;
pub const XLINE_XBUD_EMDI_29: u32 = 54044;
pub const XLINE_XBUD_EMDI_30: u32 = 54045;
pub const XLINE_XBUD_EMDI_31: u32 = 54046;
pub const XLINE_XBUD_EMDI_32: u32 = 54047;
pub const XLINE_XBUDT_RDI: u32 = 54048;
pub const XLINE_XBUDT_EMDI_01: u32 = 54049;
pub const XLINE_XBUDT_EMDI_02: u32 = 54050;
pub const XLINE_XBUDT_EMDI_03: u32 = 54051;
pub const XLINE_XBUDT_EMDI_04: u32 = 54052;
pub const XLINE_XBUDT_EMDI_05: u32 = 54053;
pub const XLINE_XBUDT_EMDI_06: u32 = 54054;
pub const XLINE_XBUDT_EMDI_07: u32 = 54055;
pub const XLINE_XBUDT_EMDI_08: u32 = 54056;
pub const XLINE_XBUDT_EMDI_09: u32 = 54057;
pub const XLINE_XBUDT_EMDI_10: u32 = 54058;
pub const XLINE_XBUDT_EMDI_11: u32 = 54059;
pub const XLINE_XBUDT_EMDI_12: u32 = 54060;
pub const XLINE_XBUDT_EMDI_13: u32 = 54061;
pub const XLINE_XBUDT_EMDI_14: u32 = 54062;
pub const XLINE_XBUDT_EMDI_15: u32 = 54063;
pub const XLINE_XBUDT_EMDI_16: u32 = 54064;
pub const XLINE_XBUDT_EMDI_17: u32 = 54065;
pub const XLINE_XBUDT_EMDI_18: u32 = 54066;
pub const XLINE_XBUDT_EMDI_19: u32 = 54067;
pub const XLINE_XBUDT_EMDI_20: u32 = 54068;
pub const XLINE_XBUDT_EMDI_21: u32 = 54069;
pub const XLINE_XBUDT_EMDI_22: u32 = 54070;
pub const XLINE_XBUDT_EMDI_23: u32 = 54071;
pub const XLINE_XBUDT_EMDI_24: u32 = 54072;
pub const XLINE_XBUDT_EMDI_25: u32 = 54073;
pub const XLINE_XBUDT_EMDI_26: u32 = 54074;
pub const XLINE_XBUDT_EMDI_27: u32 = 54075;
pub const XLINE_XBUDT_EMDI_28: u32 = 54076;
pub const XLINE_XBUDT_EMDI_29: u32 = 54077;
pub const XLINE_XBUDT_EMDI_30: u32 = 54078;
pub const XLINE_XBUDT_EMDI_31: u32 = 54079;
pub const XLINE_XBUDT_EMDI_32: u32 = 54080;
pub const XLINE_XPRA_RDI: u32 = 54081;
pub const XLINE_XPRA_EMDI_01: u32 = 54082;
pub const XLINE_XPRA_EMDI_02: u32 = 54083;
pub const XLINE_XPRA_EMDI_03: u32 = 54084;
pub const XLINE_XPRA_EMDI_04: u32 = 54085;
pub const XLINE_XPRA_EMDI_05: u32 = 54086;
pub const XLINE_XPRA_EMDI_06: u32 = 54087;
pub const XLINE_XPRA_EMDI_07: u32 = 54088;
pub const XLINE_XPRA_EMDI_08: u32 = 54089;
pub const XLINE_XPRA_EMDI_09: u32 = 54090;
pub const XLINE_XPRA_EMDI_10: u32 = 54091;
pub const XLINE_XPRA_EMDI_11: u32 = 54092;
pub const XLINE_XPRA_EMDI_12: u32 = 54093;
pub const XLINE_XPRA_EMDI_13: u32 = 54094;
pub const XLINE_XPRA_EMDI_14: u32 = 54095;
pub const XLINE_XPRA_EMDI_15: u32 = 54096;
pub const XLINE_XPRA_EMDI_16: u32 = 54097;
pub const XLINE_XPRA_EMDI_17: u32 = 54098;
pub const XLINE_XPRA_EMDI_18: u32 = 54099;
pub const XLINE_XPRA_EMDI_19: u32 = 54100;
pub const XLINE_XPRA_EMDI_20: u32 = 54101;
pub const XLINE_XPRA_EMDI_21: u32 = 54102;
pub const XLINE_XPRA_EMDI_22: u32 = 54103;
pub const XLINE_XPRA_EMDI_23: u32 = 54104;
pub const XLINE_XPRA_EMDI_24: u32 = 54105;
pub const XLINE_XPRA_EMDI_25: u32 = 54106;
pub const XLINE_XPRA_EMDI_26: u32 = 54107;
pub const XLINE_XPRA_EMDI_27: u32 = 54108;
pub const XLINE_XPRA_EMDI_28: u32 = 54109;
pub const XLINE_XPRA_EMDI_29: u32 = 54110;
pub const XLINE_XPRA_EMDI_30: u32 = 54111;
pub const XLINE_XPRA_EMDI_31: u32 = 54112;
pub const XLINE_XPRA_EMDI_32: u32 = 54113;
pub const XLINE_XPRAT_RDI: u32 = 54114;
pub const XLINE_XPRAT_EMDI_01: u32 = 54115;
pub const XLINE_XPRAT_EMDI_02: u32 = 54116;
pub const XLINE_XPRAT_EMDI_03: u32 = 54117;
pub const XLINE_XPRAT_EMDI_04: u32 = 54118;
pub const XLINE_XPRAT_EMDI_05: u32 = 54119;
pub const XLINE_XPRAT_EMDI_06: u32 = 54120;
pub const XLINE_XPRAT_EMDI_07: u32 = 54121;
pub const XLINE_XPRAT_EMDI_08: u32 = 54122;
pub const XLINE_XPRAT_EMDI_09: u32 = 54123;
pub const XLINE_XPRAT_EMDI_10: u32 = 54124;
pub const XLINE_XPRAT_EMDI_11: u32 = 54125;
pub const XLINE_XPRAT_EMDI_12: u32 = 54126;
pub const XLINE_XPRAT_EMDI_13: u32 = 54127;
pub const XLINE_XPRAT_EMDI_14: u32 = 54128;
pub const XLINE_XPRAT_EMDI_15: u32 = 54129;
pub const XLINE_XPRAT_EMDI_16: u32 = 54130;
pub const XLINE_XPRAT_EMDI_17: u32 = 54131;
pub const XLINE_XPRAT_EMDI_18: u32 = 54132;
pub const XLINE_XPRAT_EMDI_19: u32 = 54133;
pub const XLINE_XPRAT_EMDI_20: u32 = 54134;
pub const XLINE_XPRAT_EMDI_21: u32 = 54135;
pub const XLINE_XPRAT_EMDI_22: u32 = 54136;
pub const XLINE_XPRAT_EMDI_23: u32 = 54137;
pub const XLINE_XPRAT_EMDI_24: u32 = 54138;
pub const XLINE_XPRAT_EMDI_25: u32 = 54139;
pub const XLINE_XPRAT_EMDI_26: u32 = 54140;
pub const XLINE_XPRAT_EMDI_27: u32 = 54141;
pub const XLINE_XPRAT_EMDI_28: u32 = 54142;
pub const XLINE_XPRAT_EMDI_29: u32 = 54143;
pub const XLINE_XPRAT_EMDI_30: u32 = 54144;
pub const XLINE_XPRAT_EMDI_31: u32 = 54145;
pub const XLINE_XPRAT_EMDI_32: u32 = 54146;
pub const XLINE_XWBO_RDI: u32 = 54147;
pub const XLINE_XWBO_EMDI_01: u32 = 54148;
pub const XLINE_XWBO_EMDI_02: u32 = 54149;
pub const XLINE_XWBO_EMDI_03: u32 = 54150;
pub const XLINE_XWBO_EMDI_04: u32 = 54151;
pub const XLINE_XWBO_EMDI_05: u32 = 54152;
pub const XLINE_XWBO_EMDI_06: u32 = 54153;
pub const XLINE_XWBO_EMDI_07: u32 = 54154;
pub const XLINE_XWBO_EMDI_08: u32 = 54155;
pub const XLINE_XWBO_EMDI_09: u32 = 54156;
pub const XLINE_XWBO_EMDI_10: u32 = 54157;
pub const XLINE_XWBO_EMDI_11: u32 = 54158;
pub const XLINE_XWBO_EMDI_12: u32 = 54159;
pub const XLINE_XWBO_EMDI_13: u32 = 54160;
pub const XLINE_XWBO_EMDI_14: u32 = 54161;
pub const XLINE_XWBO_EMDI_15: u32 = 54162;
pub const XLINE_XWBO_EMDI_16: u32 = 54163;
pub const XLINE_XWBO_EMDI_17: u32 = 54164;
pub const XLINE_XWBO_EMDI_18: u32 = 54165;
pub const XLINE_XWBO_EMDI_19: u32 = 54166;
pub const XLINE_XWBO_EMDI_20: u32 = 54167;
pub const XLINE_XWBO_EMDI_21: u32 = 54168;
pub const XLINE_XWBO_EMDI_22: u32 = 54169;
pub const XLINE_XWBO_EMDI_23: u32 = 54170;
pub const XLINE_XWBO_EMDI_24: u32 = 54171;
pub const XLINE_XWBO_EMDI_25: u32 = 54172;
pub const XLINE_XWBO_EMDI_26: u32 = 54173;
pub const XLINE_XWBO_EMDI_27: u32 = 54174;
pub const XLINE_XWBO_EMDI_28: u32 = 54175;
pub const XLINE_XWBO_EMDI_29: u32 = 54176;
pub const XLINE_XWBO_EMDI_30: u32 = 54177;
pub const XLINE_XWBO_EMDI_31: u32 = 54178;
pub const XLINE_XWBO_EMDI_32: u32 = 54179;
pub const XLINE_XWBOT_RDI: u32 = 54180;
pub const XLINE_XWBOT_EMDI_01: u32 = 54181;
pub const XLINE_XWBOT_EMDI_02: u32 = 54182;
pub const XLINE_XWBOT_EMDI_03: u32 = 54183;
pub const XLINE_XWBOT_EMDI_04: u32 = 54184;
pub const XLINE_XWBOT_EMDI_05: u32 = 54185;
pub const XLINE_XWBOT_EMDI_06: u32 = 54186;
pub const XLINE_XWBOT_EMDI_07: u32 = 54187;
pub const XLINE_XWBOT_EMDI_08: u32 = 54188;
pub const XLINE_XWBOT_EMDI_09: u32 = 54189;
pub const XLINE_XWBOT_EMDI_10: u32 = 54190;
pub const XLINE_XWBOT_EMDI_11: u32 = 54191;
pub const XLINE_XWBOT_EMDI_12: u32 = 54192;
pub const XLINE_XWBOT_EMDI_13: u32 = 54193;
pub const XLINE_XWBOT_EMDI_14: u32 = 54194;
pub const XLINE_XWBOT_EMDI_15: u32 = 54195;
pub const XLINE_XWBOT_EMDI_16: u32 = 54196;
pub const XLINE_XWBOT_EMDI_17: u32 = 54197;
pub const XLINE_XWBOT_EMDI_18: u32 = 54198;
pub const XLINE_XWBOT_EMDI_19: u32 = 54199;
pub const XLINE_XWBOT_EMDI_20: u32 = 54200;
pub const XLINE_XWBOT_EMDI_21: u32 = 54201;
pub const XLINE_XWBOT_EMDI_22: u32 = 54202;
pub const XLINE_XWBOT_EMDI_23: u32 = 54203;
pub const XLINE_XWBOT_EMDI_24: u32 = 54204;
pub const XLINE_XWBOT_EMDI_25: u32 = 54205;
pub const XLINE_XWBOT_EMDI_26: u32 = 54206;
pub const XLINE_XWBOT_EMDI_27: u32 = 54207;
pub const XLINE_XWBOT_EMDI_28: u32 = 54208;
pub const XLINE_XWBOT_EMDI_29: u32 = 54209;
pub const XLINE_XWBOT_EMDI_30: u32 = 54210;
pub const XLINE_XWBOT_EMDI_31: u32 = 54211;
pub const XLINE_XWBOT_EMDI_32: u32 = 54212;
pub const XLINE_HRTSI_SYMMGR: u32 = 54213;
pub const XLINE_HRTSI_0: u32 = 54214;
pub const XLINE_HRTSI_1: u32 = 54215;
pub const XLINE_HRTSI_2: u32 = 54216;
pub const XLINE_HRTSI_3: u32 = 54217;
pub const XLINE_HRTSI_4: u32 = 54218;
pub const XLINE_RMBFX_INC_1: u32 = 54219;
pub const XLINE_RMBFX_SEC_1: u32 = 54220;
pub const XLINE_RMBFX_INC_2: u32 = 54221;
pub const XLINE_RMBFX_SEC_2: u32 = 54222;
pub const XLINE_RMBFX_INC_3: u32 = 54223;
pub const XLINE_RMBFX_SEC_3: u32 = 54224;
pub const XLINE_RMBFX_INC_4: u32 = 54225;
pub const XLINE_RMBFX_SEC_4: u32 = 54226;
pub const XLINE_RMBFX_INC_5: u32 = 54227;
pub const XLINE_RMBFX_SEC_5: u32 = 54228;
pub const XLINE_RMBFX_INC_6: u32 = 54229;
pub const XLINE_RMBFX_SEC_6: u32 = 54230;
pub const XLINE_RMBFX_INC_7: u32 = 54231;
pub const XLINE_RMBFX_SEC_7: u32 = 54232;
pub const XLINE_RMBFXT_INC_1: u32 = 54233;
pub const XLINE_RMBFXT_SEC_1: u32 = 54234;
pub const XLINE_RMBFXT_INC_2: u32 = 54235;
pub const XLINE_RMBFXT_SEC_2: u32 = 54236;
pub const XLINE_XTXSI_0: u32 = 54237;
pub const XLINE_XTXSI_1: u32 = 54238;
pub const XLINE_XTXSI_2: u32 = 54239;
pub const XLINE_XTXSI_3: u32 = 54240;
pub const XLINE_XTXSI_4: u32 = 54241;
pub const XLINE_OCEANIOI_0: u32 = 54242;
pub const XLINE_OCEANIOI_1: u32 = 54243;
pub const XLINE_OCEANIOI_2: u32 = 54244;
pub const XLINE_OCEANIOI_3: u32 = 54245;
pub const XLINE_OCEANIOI_4: u32 = 54246;
pub const XLINE_CBOEFXNDF_N0: u32 = 54247;
pub const XLINE_CBOEFXNDF_N1: u32 = 54248;
pub const XLINE_CBOEFXNDF_N2: u32 = 54249;
pub const XLINE_CBOEFXNDF_N3: u32 = 54250;
pub const XLINE_CBOEFXNDF_N4: u32 = 54251;
pub const XLINE_WSE_FULL: u32 = 54252;
pub const XLINE_WSE_FULT: u32 = 54253;
pub const XLINE_WSE_FULL_SYMMGR: u32 = 54254;
pub const XLINE_WSE_FULT_SYMMGR: u32 = 54255;
pub const XLINE_WSE_BEST: u32 = 54256;
pub const XLINE_WSE_BSTT: u32 = 54257;
pub const XLINE_WSE_BEST_SYMMGR: u32 = 54258;
pub const XLINE_WSE_BSTT_SYMMGR: u32 = 54259;
pub const XLINE_WSE_REF: u32 = 54260;
pub const XLINE_WSE_REFT: u32 = 54261;
pub const XLINE_BISTTOP: u32 = 54262;
pub const XLINE_BISTTOPT: u32 = 54263;
pub const XLINE_WSE_SHRE: u32 = 54266;
pub const XLINE_WSE_SHRT: u32 = 54267;
pub const XLINE_WSE_SHRE_SYMMGR: u32 = 54268;
pub const XLINE_WSE_SHRT_SYMMGR: u32 = 54269;
pub const XLINE_UBSMTF: u32 = 54270;
pub const XLINE_UBSMTF_SYMMGR: u32 = 54271;
pub const XLINE_CME_EBSCS_NY_0: u32 = 54272;
pub const XLINE_CME_EBSCS_NY_1: u32 = 54273;
pub const XLINE_CME_EBSCS_NY_2: u32 = 54274;
pub const XLINE_CME_EBSCS_NY_3: u32 = 54275;
pub const XLINE_CME_EBSCS_NY_4: u32 = 54276;
pub const XLINE_CME_EBSCS_LN_0: u32 = 54277;
pub const XLINE_CME_EBSCS_LN_1: u32 = 54278;
pub const XLINE_CME_EBSCS_LN_2: u32 = 54279;
pub const XLINE_CME_EBSCS_LN_3: u32 = 54280;
pub const XLINE_CME_EBSCS_LN_4: u32 = 54281;
pub const XLINE_CME_EBSCS_ND_0: u32 = 54282;
pub const XLINE_CME_EBSCS_ND_1: u32 = 54283;
pub const XLINE_CME_EBSCS_ND_2: u32 = 54284;
pub const XLINE_CME_EBSCS_ND_3: u32 = 54285;
pub const XLINE_CME_EBSCS_ND_4: u32 = 54286;
pub const XLINE_CME_EBSCS_SF_0: u32 = 54287;
pub const XLINE_CME_EBSCS_SF_1: u32 = 54288;
pub const XLINE_CME_EBSCS_SF_2: u32 = 54289;
pub const XLINE_CME_EBSCS_SF_3: u32 = 54290;
pub const XLINE_CME_EBSCS_SF_4: u32 = 54291;
pub const XLINE_NAEC_XTIGTWY_0: u32 = 61440;
pub const XLINE_NAEC_XTIGTWY_1: u32 = 61441;
pub const XLINE_NAEC_XTIGTWY_2: u32 = 61442;
pub const XLINE_NAEC_XTIGTWY_3: u32 = 61443;
pub const XLINE_NAEC_XTIGTWY_4: u32 = 61444;
pub const XLINE_NAEC_XTIGTWY_5: u32 = 61445;
pub const XLINE_NAEC_XTIGTWY_6: u32 = 61446;
pub const XLINE_NAEC_XTIGTWY_7: u32 = 61447;
pub const XLINE_NAEC_XTIGTWY_8: u32 = 61448;
pub const XLINE_NAEC_XTIGTWY_9: u32 = 61449;
pub const XLINE_SIGMAX: u32 = 61450;
pub const XLINE_SIGMAXT: u32 = 61451;
pub const XLINE_SIGMAX_EU: u32 = 61452;
pub const XLINE_SIGMAXT_EU: u32 = 61453;
pub const XLINE_NASDAQFI: u32 = 61454;
pub const XLINE_NASDAQFIT: u32 = 61455;
pub const XLINE_XTXSI_5: u32 = 61456;
pub const XLINE_XTXSI_6: u32 = 61457;
pub const XLINE_XTXSI_7: u32 = 61458;
pub const XLINE_XTXSI_8: u32 = 61459;
pub const XLINE_XTXSI_9: u32 = 61460;
pub const XLINE_NASDAQFI_SYMMGR: u32 = 61465;
pub const XLINE_NASDAQFT_SYMMGR: u32 = 61466;
pub const XLINE_FLOWIOI_0: u32 = 61467;
pub const XLINE_FLOWIOI_1: u32 = 61468;
pub const XLINE_FLOWIOI_2: u32 = 61469;
pub const XLINE_FLOWIOI_3: u32 = 61470;
pub const XLINE_FLOWIOI_4: u32 = 61471;
pub const XLINE_OPRAGTH_PI_201: u32 = 61472;
pub const XLINE_OPRAGTH_PI_202: u32 = 61473;
pub const XLINE_OPRAGTH_PI_203: u32 = 61474;
pub const XLINE_OPRAGTH_PI_204: u32 = 61475;
pub const XLINE_OPRAGTHT_PI_201: u32 = 61476;
pub const XLINE_OPRAGTHT_PI_202: u32 = 61477;
pub const XLINE_OPRAGTHT_PI_203: u32 = 61478;
pub const XLINE_OPRAGTHT_PI_204: u32 = 61479;
pub const XLINE_OPRAGTH_1_CERT: u32 = 61480;
pub const XLINE_OPRAGTH_2_CERT: u32 = 61481;
pub const XLINE_OPRAGTH_3_CERT: u32 = 61482;
pub const XLINE_OPRAGTH_4_CERT: u32 = 61483;
pub const XLINE_BMEEQ_FULL: u32 = 61484;
pub const XLINE_BMEEQFD_SYMMGR: u32 = 61485;
pub const XLINE_BMEEQ_FULLT: u32 = 61486;
pub const XLINE_BMEEQFDT_SYMMGR: u32 = 61487;
pub const XLINE_BMEED_TOP5: u32 = 61488;
pub const XLINE_BMEEDT5_SYMMGR: u32 = 61489;
pub const XLINE_BMEED_TOP5T: u32 = 61490;
pub const XLINE_BMEEDT5T_SYMMGR: u32 = 61491;
pub const XLINE_BME_PB_EQ: u32 = 61492;
pub const XLINE_BMET_PB_EQ: u32 = 61493;
pub const XLINE_BME_TRD: u32 = 61494;
pub const XLINE_BMET_TRD: u32 = 61495;
pub const XLINE_BME_VAL: u32 = 61496;
pub const XLINE_BMET_VAL: u32 = 61497;
pub const XLINE_BME_TOB_EQ: u32 = 61498;
pub const XLINE_BMET_TOB_EQ: u32 = 61499;
pub const XLINE_BME_XIND: u32 = 61500;
pub const XLINE_BMET_XIND: u32 = 61501;
pub const XLINE_BME_XIRG: u32 = 61502;
pub const XLINE_BMET_XIRG: u32 = 61503;
pub const XLINE_BME_REF: u32 = 61504;
pub const XLINE_BMET_REF: u32 = 61505;
pub const XLINE_BME_SYMMGR: u32 = 61506;
pub const XLINE_BMET_SYMMGR: u32 = 61507;
pub const XLINE_EUREX_EMDI_01: u32 = 61508;
pub const XLINE_EUREX_EMDI_02: u32 = 61509;
pub const XLINE_EUREX_EMDI_03: u32 = 61510;
pub const XLINE_EUREX_EMDI_04: u32 = 61511;
pub const XLINE_EUREX_EMDI_05: u32 = 61512;
pub const XLINE_EUREX_EMDI_06: u32 = 61513;
pub const XLINE_EUREX_EMDI_07: u32 = 61514;
pub const XLINE_EUREX_EMDI_08: u32 = 61515;
pub const XLINE_EUREX_EMDI_09: u32 = 61516;
pub const XLINE_EUREX_EMDI_10: u32 = 61517;
pub const XLINE_EUREX_EMDI_11: u32 = 61518;
pub const XLINE_EUREX_EMDI_12: u32 = 61519;
pub const XLINE_EUREX_EMDI_13: u32 = 61520;
pub const XLINE_EUREX_EMDI_14: u32 = 61521;
pub const XLINE_EUREX_EMDI_15: u32 = 61522;
pub const XLINE_EUREX_EMDI_16: u32 = 61523;
pub const XLINE_EUREX_EMDI_17: u32 = 61524;
pub const XLINE_EUREX_EMDI_18: u32 = 61525;
pub const XLINE_EUREX_EMDI_19: u32 = 61526;
pub const XLINE_EUREX_EMDI_20: u32 = 61527;
pub const XLINE_EUREX_EMDI_21: u32 = 61528;
pub const XLINE_EUREX_EMDI_22: u32 = 61529;
pub const XLINE_EUREX_EMDI_23: u32 = 61530;
pub const XLINE_EUREX_EMDI_24: u32 = 61531;
pub const XLINE_EUREX_EMDI_25: u32 = 61532;
pub const XLINE_EUREX_EMDI_26: u32 = 61533;
pub const XLINE_EUREX_EMDI_27: u32 = 61534;
pub const XLINE_EUREX_EMDI_28: u32 = 61535;
pub const XLINE_EUREX_EMDI_29: u32 = 61536;
pub const XLINE_EUREX_EMDI_30: u32 = 61537;
pub const XLINE_EUREX_EMDI_31: u32 = 61538;
pub const XLINE_EUREX_EMDI_32: u32 = 61539;
pub const XLINE_EUREX_EMDI_33: u32 = 61540;
pub const XLINE_EUREX_EMDI_34: u32 = 61541;
pub const XLINE_EUREX_EMDI_35: u32 = 61542;
pub const XLINE_EUREX_EMDI_36: u32 = 61543;
pub const XLINE_EUREX_EMDI_37: u32 = 61544;
pub const XLINE_EUREX_EMDI_38: u32 = 61545;
pub const XLINE_EUREX_EMDI_39: u32 = 61546;
pub const XLINE_EUREX_EMDI_40: u32 = 61547;
pub const XLINE_EUREX_EMDI_41: u32 = 61548;
pub const XLINE_EUREX_EMDI_42: u32 = 61549;
pub const XLINE_EUREX_EMDI_43: u32 = 61550;
pub const XLINE_EUREX_EMDI_44: u32 = 61551;
pub const XLINE_EUREX_EMDI_45: u32 = 61552;
pub const XLINE_EUREXT_EMDI_01: u32 = 61553;
pub const XLINE_EUREXT_EMDI_02: u32 = 61554;
pub const XLINE_EUREXT_EMDI_03: u32 = 61555;
pub const XLINE_EUREXT_EMDI_04: u32 = 61556;
pub const XLINE_EUREXT_EMDI_05: u32 = 61557;
pub const XLINE_EUREXT_EMDI_06: u32 = 61558;
pub const XLINE_EUREXT_EMDI_07: u32 = 61559;
pub const XLINE_EUREXT_EMDI_08: u32 = 61560;
pub const XLINE_EUREXT_EMDI_09: u32 = 61561;
pub const XLINE_EUREXT_EMDI_10: u32 = 61562;
pub const XLINE_EUREXT_EMDI_11: u32 = 61563;
pub const XLINE_EUREXT_EMDI_12: u32 = 61564;
pub const XLINE_EUREXT_EMDI_13: u32 = 61565;
pub const XLINE_EUREXT_EMDI_14: u32 = 61566;
pub const XLINE_EUREXT_EMDI_15: u32 = 61567;
pub const XLINE_EUREXT_EMDI_16: u32 = 61568;
pub const XLINE_EUREXT_EMDI_17: u32 = 61569;
pub const XLINE_EUREXT_EMDI_18: u32 = 61570;
pub const XLINE_EUREXT_EMDI_19: u32 = 61571;
pub const XLINE_EUREXT_EMDI_20: u32 = 61572;
pub const XLINE_EUREXT_EMDI_21: u32 = 61573;
pub const XLINE_EUREXT_EMDI_22: u32 = 61574;
pub const XLINE_EUREXT_EMDI_23: u32 = 61575;
pub const XLINE_EUREXT_EMDI_24: u32 = 61576;
pub const XLINE_EUREXT_EMDI_25: u32 = 61577;
pub const XLINE_EUREXT_EMDI_26: u32 = 61578;
pub const XLINE_EUREXT_EMDI_27: u32 = 61579;
pub const XLINE_EUREXT_EMDI_28: u32 = 61580;
pub const XLINE_EUREXT_EMDI_29: u32 = 61581;
pub const XLINE_EUREXT_EMDI_30: u32 = 61582;
pub const XLINE_EUREXT_EMDI_31: u32 = 61583;
pub const XLINE_EUREXT_EMDI_32: u32 = 61584;
pub const XLINE_EUREXT_EMDI_33: u32 = 61585;
pub const XLINE_EUREXT_EMDI_34: u32 = 61586;
pub const XLINE_EUREXT_EMDI_35: u32 = 61587;
pub const XLINE_EUREXT_EMDI_36: u32 = 61588;
pub const XLINE_EUREXT_EMDI_37: u32 = 61589;
pub const XLINE_EUREXT_EMDI_38: u32 = 61590;
pub const XLINE_EUREXT_EMDI_39: u32 = 61591;
pub const XLINE_EUREXT_EMDI_40: u32 = 61592;
pub const XLINE_EUREXT_EMDI_41: u32 = 61593;
pub const XLINE_EUREXT_EMDI_42: u32 = 61594;
pub const XLINE_EUREXT_EMDI_43: u32 = 61595;
pub const XLINE_EUREXT_EMDI_44: u32 = 61596;
pub const XLINE_EUREXT_EMDI_45: u32 = 61597;
pub const XLINE_LQEDGE_0: u32 = 61598;
pub const XLINE_LQEDGE_1: u32 = 61599;
pub const XLINE_LQEDGE_2: u32 = 61600;
pub const XLINE_LQEDGE_3: u32 = 61601;
pub const XLINE_LQEDGE_4: u32 = 61602;
pub const XLINE_XTXFX_0: u32 = 61603;
pub const XLINE_XTXFX_1: u32 = 61604;
pub const XLINE_XTXFX_2: u32 = 61605;
pub const XLINE_XTXFX_3: u32 = 61606;
pub const XLINE_XTXFX_4: u32 = 61607;
pub const XLINE_XTXFX_5: u32 = 61608;
pub const XLINE_XTXFX_6: u32 = 61609;
pub const XLINE_XTXFX_7: u32 = 61610;
pub const XLINE_XTXFX_8: u32 = 61611;
pub const XLINE_XTXFX_9: u32 = 61612;
pub const XLINE_HRTSI_5: u32 = 61613;
pub const XLINE_HRTSI_6: u32 = 61614;
pub const XLINE_HRTSI_7: u32 = 61615;
pub const XLINE_HRTSI_8: u32 = 61616;
pub const XLINE_HRTSI_9: u32 = 61617;
pub const XLINE_HRTSI_10: u32 = 61618;
pub const XLINE_HRTSI_11: u32 = 61619;
pub const XLINE_HRTSI_12: u32 = 61620;
pub const XLINE_HRTSI_13: u32 = 61621;
pub const XLINE_HRTSI_14: u32 = 61622;
pub const XLINE_HRTSI_15: u32 = 61623;
pub const XLINE_HRTSI_16: u32 = 61624;
pub const XLINE_HRTSI_17: u32 = 61625;
pub const XLINE_HRTSI_18: u32 = 61626;
pub const XLINE_HRTSI_19: u32 = 61627;
pub const XLINE_RBCSI_0: u32 = 61628;
pub const XLINE_RBCSI_1: u32 = 61629;
pub const XLINE_RBCSI_2: u32 = 61630;
pub const XLINE_RBCSI_3: u32 = 61631;
pub const XLINE_RBCSI_4: u32 = 61632;
pub const XLINE_RBCSI_5: u32 = 61633;
pub const XLINE_RBCSI_6: u32 = 61634;
pub const XLINE_RBCSI_7: u32 = 61635;
pub const XLINE_RBCSI_8: u32 = 61636;
pub const XLINE_RBCSI_9: u32 = 61637;
pub const XLINE_NASDQ_BBO_1: u32 = 61648;
pub const XLINE_NASDQ_BBO_2: u32 = 61649;
pub const XLINE_NASDQ_BBO_3: u32 = 61650;
pub const XLINE_NASDQBX_BBO_1: u32 = 61651;
pub const XLINE_NASDQBX_BBO_2: u32 = 61652;
pub const XLINE_NASDQBX_BBO_3: u32 = 61653;
pub const XLINE_NASDQPSX_BBO_1: u32 = 61654;
pub const XLINE_NASDQPSX_BBO_2: u32 = 61655;
pub const XLINE_NASDQPSX_BBO_3: u32 = 61656;
pub const XLINE_NASDQ_NLS: u32 = 61657;
pub const XLINE_NASDQBX_NLS: u32 = 61658;
pub const XLINE_NASDQPSX_NLS: u32 = 61659;
pub const XLINE_SIP0_XTIGTWY_01: u32 = 61664;
pub const XLINE_SIP0_XTIGTWY_02: u32 = 61665;
pub const XLINE_SIP0_XTIGTWY_03: u32 = 61666;
pub const XLINE_SIP0_XTIGTWY_04: u32 = 61667;
pub const XLINE_SIP0_XTIGTWY_05: u32 = 61668;
pub const XLINE_SIP0_XTIGTWY_06: u32 = 61669;
pub const XLINE_SIP0_XTIGTWY_07: u32 = 61670;
pub const XLINE_SIP0_XTIGTWY_08: u32 = 61671;
pub const XLINE_SIP0_XTIGTWY_09: u32 = 61672;
pub const XLINE_SIP0_XTIGTWY_10: u32 = 61673;
pub const XLINE_SIP0_XTIGTWY_11: u32 = 61674;
pub const XLINE_SIP0_XTIGTWY_12: u32 = 61675;
pub const XLINE_SIP0_XTIGTWY_13: u32 = 61676;
pub const XLINE_SIP0_XTIGTWY_14: u32 = 61677;
pub const XLINE_SIP0_XTIGTWY_15: u32 = 61678;
pub const XLINE_SIP0_XTIGTWY_16: u32 = 61679;
pub const XLINE_SIP0_XTIGTWY_17: u32 = 61680;
pub const XLINE_SIP0_XTIGTWY_18: u32 = 61681;
pub const XLINE_SIP0_XTIGTWY_19: u32 = 61682;
pub const XLINE_SIP0_XTIGTWY_20: u32 = 61683;
pub const XLINE_SIP0_XTIGTWY_21: u32 = 61684;
pub const XLINE_SIP0_XTIGTWY_22: u32 = 61685;
pub const XLINE_SIP0_XTIGTWY_23: u32 = 61686;
pub const XLINE_SIP0_XTIGTWY_24: u32 = 61687;
pub const XLINE_SIP0_XTIGTWY_25: u32 = 61688;
pub const XLINE_SIP0_XTIGTWY_26: u32 = 61689;
pub const XLINE_SIP0_XTIGTWY_27: u32 = 61690;
pub const XLINE_SPOTSTREAMFX_F0: u32 = 61691;
pub const XLINE_SPOTSTREAMFX_F1: u32 = 61692;
pub const XLINE_SPOTSTREAMFX_F2: u32 = 61693;
pub const XLINE_SPOTSTREAMFX_F3: u32 = 61694;
pub const XLINE_SPOTSTREAMFX_F4: u32 = 61695;
pub const XLINE_SPOTSTREAMFX_F5: u32 = 61696;
pub const XLINE_SPOTSTREAMFX_F6: u32 = 61697;
pub const XLINE_SPOTSTREAMFX_F7: u32 = 61698;
pub const XLINE_SPOTSTREAMFX_F8: u32 = 61699;
pub const XLINE_SPOTSTREAMFX_F9: u32 = 61700;
pub const XLINE_SPOTSTREAMFX_SK: u32 = 61701;
pub const XLINE_SPOTSTREAMFX_SL: u32 = 61702;
pub const XLINE_SPOTSTREAMFX_SM: u32 = 61703;
pub const XLINE_SPOTSTREAMFX_SN: u32 = 61704;
pub const XLINE_SPOTSTREAMFX_SO: u32 = 61705;
pub const XLINE_SPOTSTREAMFX_T0: u32 = 61706;
pub const XLINE_SPOTSTREAMFX_T1: u32 = 61707;
pub const XLINE_SPOTSTREAMFX_T2: u32 = 61708;
pub const XLINE_SPOTSTREAMFX_T3: u32 = 61709;
pub const XLINE_SPOTSTREAMFX_T4: u32 = 61710;
pub const XLINE_SPOTSTREAMFX_T5: u32 = 61711;
pub const XLINE_SPOTSTREAMFX_T6: u32 = 61712;
pub const XLINE_SPOTSTREAMFX_T7: u32 = 61713;
pub const XLINE_SPOTSTREAMFX_T8: u32 = 61714;
pub const XLINE_SPOTSTREAMFX_T9: u32 = 61715;
pub const XLINE_NASDQ_NLS_FV: u32 = 61728;
pub const XLINE_NASDQ_NLS_TRFV: u32 = 61729;
pub const XLINE_FNCS_GLOBAL: u32 = 61744;
pub const XLINE_MRX_DOM_1: u32 = 61760;
pub const XLINE_MRX_DOM_2: u32 = 61761;
pub const XLINE_MRX_DOM_3: u32 = 61762;
pub const XLINE_MRX_DOM_4: u32 = 61763;
pub const XLINE_MRX_DOM_SYMMGR: u32 = 61764;
pub const XLINE_MRX_DOMT: u32 = 61765;
pub const XLINE_MRX_DOMT_SYM: u32 = 61766;
pub const XLINE_CSEUIOI_S0: u32 = 61776;
pub const XLINE_CSEUIOI_S1: u32 = 61777;
pub const XLINE_CSEUIOI_S2: u32 = 61778;
pub const XLINE_CSEUIOI_S3: u32 = 61779;
pub const XLINE_CSEUIOI_S4: u32 = 61780;
pub const XLINE_CSEUIOI_S5: u32 = 61781;
pub const XLINE_CSEUIOI_S6: u32 = 61782;
pub const XLINE_CSEUIOI_S7: u32 = 61783;
pub const XLINE_CSEUIOI_S8: u32 = 61784;
pub const XLINE_CSEUIOI_S9: u32 = 61785;
pub const XLINE_CSEUIOI_SA: u32 = 61786;
pub const XLINE_CSEUIOI_SB: u32 = 61787;
pub const XLINE_CSEUIOI_SC: u32 = 61788;
pub const XLINE_CSEUIOI_SD: u32 = 61789;
pub const XLINE_CSEUIOI_SE: u32 = 61790;
pub const XLINE_CSEUIOI_SF: u32 = 61791;
pub const XLINE_CSEUIOI_SG: u32 = 61792;
pub const XLINE_CSEUIOI_SH: u32 = 61793;
pub const XLINE_CSEUIOI_SI: u32 = 61794;
pub const XLINE_CSEUIOI_SJ: u32 = 61795;
pub const XLINE_CSE2: u32 = 61808;
pub const XLINE_CSE2_SYMMGR: u32 = 61809;
pub const XLINE_CSE2_GTE: u32 = 61810;
pub const XLINE_CSE2_GTE_SYMMGR: u32 = 61811;
pub const XLINE_CDF_CSE2: u32 = 61812;
pub const XLINE_DWEB_0: u32 = 61824;
pub const XLINE_DWEB_1: u32 = 61825;
pub const XLINE_DWEB_2: u32 = 61826;
pub const XLINE_DWEB_3: u32 = 61827;
pub const XLINE_DWEB_4: u32 = 61828;
pub const XLINE_DWEB_5: u32 = 61829;
pub const XLINE_DWEB_6: u32 = 61830;
pub const XLINE_DWEB_7: u32 = 61831;
pub const XLINE_DWEB_8: u32 = 61832;
pub const XLINE_DWEB_9: u32 = 61833;
pub const XLINE_DWEB_SEC_0: u32 = 61834;
pub const XLINE_DWEB_SEC_1: u32 = 61835;
pub const XLINE_DWEB_SEC_2: u32 = 61836;
pub const XLINE_DWEB_SEC_3: u32 = 61837;
pub const XLINE_DWEB_SEC_4: u32 = 61838;
pub const XLINE_DWEB_SEC_5: u32 = 61839;
pub const XLINE_DWEB_SEC_6: u32 = 61840;
pub const XLINE_DWEB_SEC_7: u32 = 61841;
pub const XLINE_DWEB_SEC_8: u32 = 61842;
pub const XLINE_DWEB_SEC_9: u32 = 61843;
pub const XLINE_SIX_IMI_1: u32 = 61856;
pub const XLINE_SIX_IMI_2: u32 = 61857;
pub const XLINE_SIX_IMI_SYMMGR: u32 = 61858;
pub const XLINE_SIXT_IMI_1: u32 = 61859;
pub const XLINE_SIXT_IMI_2: u32 = 61860;
pub const XLINE_SIXT_IMI_SYMMGR: u32 = 61861;
pub const XLINE_FNCSPCLOB_0: u32 = 61872;
pub const XLINE_FNCSPCLOB_1: u32 = 61873;
pub const XLINE_FNCSPCLOB_2: u32 = 61874;
pub const XLINE_FNCSPCLOB_3: u32 = 61875;
pub const XLINE_FNCSPCLOB_4: u32 = 61876;
pub const XLINE_BME_PB_DE: u32 = 61888;
pub const XLINE_BMET_PB_DE: u32 = 61889;
pub const XLINE_BME_TRD_DE: u32 = 61890;
pub const XLINE_BMET_TRD_DE: u32 = 61891;
pub const XLINE_BME_VAL_DE: u32 = 61892;
pub const XLINE_BMET_VAL_DE: u32 = 61893;
pub const XLINE_BME_TOB_DE: u32 = 61894;
pub const XLINE_BMET_TOB_DE: u32 = 61895;
pub const XLINE_BME_REF_DE: u32 = 61896;
pub const XLINE_BMET_REF_DE: u32 = 61897;
pub const XLINE_BMEDE_SYMMGR: u32 = 61898;
pub const XLINE_BMEDET_SYMMGR: u32 = 61899;
pub const XLINE_FINRA_TDDS: u32 = 61904;
pub const XLINE_FINRAT_TDDS: u32 = 61905;
pub const XLINE_NAINT_PI_12: u32 = 61920;
pub const XLINE_NAINT_PI_13: u32 = 61921;
pub const XLINE_NAINT_PI_14: u32 = 61922;
pub const XLINE_AQMAC_DELAYED: u32 = 61936;
pub const XLINE_AQMACT_DELAYED: u32 = 61937;
pub const XLINE_DWEBCSL_0: u32 = 61938;
pub const XLINE_DWEBCSL_SEC_0: u32 = 61939;
pub const XLINE_CME_BTEC_EU: u32 = 61952;
pub const XLINE_CMEC_BTEC_EU: u32 = 61953;
pub const XLINE_OQITEQ_REFT_1: u32 = 61968;
pub const XLINE_OQITEQ_REFT_2: u32 = 61969;
pub const XLINE_OQITEQ_REFT_3: u32 = 61970;
pub const XLINE_OQITEQ_REFT_4: u32 = 61971;
pub const XLINE_OQITEQ_FBOU_1: u32 = 61972;
pub const XLINE_OQITEQ_FBOU_2: u32 = 61973;
pub const XLINE_OQITEQ_FBOU_3: u32 = 61974;
pub const XLINE_OQITEQ_FBOU_4: u32 = 61975;
pub const XLINE_OQITEQ_FBMU_1: u32 = 61976;
pub const XLINE_OQITEQ_FBMU_2: u32 = 61977;
pub const XLINE_OQITEQ_FBMU_3: u32 = 61978;
pub const XLINE_OQITEQ_FBMU_4: u32 = 61979;
pub const XLINE_OQITEQ_BBBO_1: u32 = 61980;
pub const XLINE_OQITEQ_BBBO_2: u32 = 61981;
pub const XLINE_OQITEQ_BBBO_3: u32 = 61982;
pub const XLINE_OQITEQ_BBBO_4: u32 = 61983;
pub const XLINE_OQIGEQ_REFT_1: u32 = 61984;
pub const XLINE_OQIGEQ_REFT_2: u32 = 61985;
pub const XLINE_OQIGEQ_REFT_3: u32 = 61986;
pub const XLINE_OQIGEQ_REFT_4: u32 = 61987;
pub const XLINE_OQIGEQ_FBOU_1: u32 = 61988;
pub const XLINE_OQIGEQ_FBOU_2: u32 = 61989;
pub const XLINE_OQIGEQ_FBOU_3: u32 = 61990;
pub const XLINE_OQIGEQ_FBOU_4: u32 = 61991;
pub const XLINE_OQIGEQ_FBMU_1: u32 = 61992;
pub const XLINE_OQIGEQ_FBMU_2: u32 = 61993;
pub const XLINE_OQIGEQ_FBMU_3: u32 = 61994;
pub const XLINE_OQIGEQ_FBMU_4: u32 = 61995;
pub const XLINE_OQIGEQ_BBBO_1: u32 = 61996;
pub const XLINE_OQIGEQ_BBBO_2: u32 = 61997;
pub const XLINE_OQIGEQ_BBBO_3: u32 = 61998;
pub const XLINE_OQIGEQ_BBBO_4: u32 = 61999;
pub const XLINE_OQIFFN_REFT_1: u32 = 62000;
pub const XLINE_OQIFFN_FBOU_1: u32 = 62001;
pub const XLINE_OQIFFN_FBMU_1: u32 = 62002;
pub const XLINE_OQIFFN_BBBO_1: u32 = 62003;
pub const XLINE_OQIABK_REFT_1: u32 = 62004;
pub const XLINE_OQIABK_FBOU_1: u32 = 62005;
pub const XLINE_OQIABK_FBMU_1: u32 = 62006;
pub const XLINE_OQIABK_BBBO_1: u32 = 62007;
pub const XLINE_OTITEQ_REFT_1: u32 = 62008;
pub const XLINE_OTITEQ_REFT_2: u32 = 62009;
pub const XLINE_OTITEQ_REFT_3: u32 = 62010;
pub const XLINE_OTITEQ_REFT_4: u32 = 62011;
pub const XLINE_OTITEQ_FBOU_1: u32 = 62012;
pub const XLINE_OTITEQ_FBOU_2: u32 = 62013;
pub const XLINE_OTITEQ_FBOU_3: u32 = 62014;
pub const XLINE_OTITEQ_FBOU_4: u32 = 62015;
pub const XLINE_OTITEQ_FBMU_1: u32 = 62016;
pub const XLINE_OTITEQ_FBMU_2: u32 = 62017;
pub const XLINE_OTITEQ_FBMU_3: u32 = 62018;
pub const XLINE_OTITEQ_FBMU_4: u32 = 62019;
pub const XLINE_OTITEQ_BBBO_1: u32 = 62020;
pub const XLINE_OTITEQ_BBBO_2: u32 = 62021;
pub const XLINE_OTITEQ_BBBO_3: u32 = 62022;
pub const XLINE_OTITEQ_BBBO_4: u32 = 62023;
pub const XLINE_OTIGEQ_REFT_1: u32 = 62024;
pub const XLINE_OTIGEQ_REFT_2: u32 = 62025;
pub const XLINE_OTIGEQ_REFT_3: u32 = 62026;
pub const XLINE_OTIGEQ_REFT_4: u32 = 62027;
pub const XLINE_OTIGEQ_FBOU_1: u32 = 62028;
pub const XLINE_OTIGEQ_FBOU_2: u32 = 62029;
pub const XLINE_OTIGEQ_FBOU_3: u32 = 62030;
pub const XLINE_OTIGEQ_FBOU_4: u32 = 62031;
pub const XLINE_OTIGEQ_FBMU_1: u32 = 62032;
pub const XLINE_OTIGEQ_FBMU_2: u32 = 62033;
pub const XLINE_OTIGEQ_FBMU_3: u32 = 62034;
pub const XLINE_OTIGEQ_FBMU_4: u32 = 62035;
pub const XLINE_OTIGEQ_BBBO_1: u32 = 62036;
pub const XLINE_OTIGEQ_BBBO_2: u32 = 62037;
pub const XLINE_OTIGEQ_BBBO_3: u32 = 62038;
pub const XLINE_OTIGEQ_BBBO_4: u32 = 62039;
pub const XLINE_OTIFFN_REFT_1: u32 = 62040;
pub const XLINE_OTIFFN_FBOU_1: u32 = 62041;
pub const XLINE_OTIFFN_FBMU_1: u32 = 62042;
pub const XLINE_OTIFFN_BBBO_1: u32 = 62043;
pub const XLINE_OTIABK_REFT_1: u32 = 62044;
pub const XLINE_OTIABK_FBOU_1: u32 = 62045;
pub const XLINE_OTIABK_FBMU_1: u32 = 62046;
pub const XLINE_OTIABK_BBBO_1: u32 = 62047;
pub const XLINE_EUREX_SYMMGR: u32 = 62048;
pub const XLINE_EUREXT_SYMMGR: u32 = 62049;
pub const XLINE_AQEUMAC_DELAY: u32 = 62064;
pub const XLINE_AQEUMACT_DELAY: u32 = 62065;
pub const XLINE_NYABBO_PI_1: u32 = 62080;
pub const XLINE_NYABBO_PI_2: u32 = 62081;
pub const XLINE_NYABBO_PI_3: u32 = 62082;
pub const XLINE_NYABBO_PI_4: u32 = 62083;
pub const XLINE_NYABBO_PI_5: u32 = 62084;
pub const XLINE_NYABBO_PI_6: u32 = 62085;
pub const XLINE_NYABBO_PI_7: u32 = 62086;
pub const XLINE_NYABBO_PI_8: u32 = 62087;
pub const XLINE_NYABBO_PI_9: u32 = 62088;
pub const XLINE_NYABBO_PI_10: u32 = 62089;
pub const XLINE_NYABBO_PI_11: u32 = 62090;
pub const XLINE_NYABBO_PI_12: u32 = 62091;
pub const XLINE_NYABBO_PI_13: u32 = 62092;
pub const XLINE_NYABBO_PI_14: u32 = 62093;
pub const XLINE_NYATRD_PI_1: u32 = 62094;
pub const XLINE_NYATRD_PI_2: u32 = 62095;
pub const XLINE_NYATRD_PI_3: u32 = 62096;
pub const XLINE_NYATRD_PI_4: u32 = 62097;
pub const XLINE_NYATRD_PI_5: u32 = 62098;
pub const XLINE_NYATRD_PI_6: u32 = 62099;
pub const XLINE_NYATRD_PI_7: u32 = 62100;
pub const XLINE_NYATRD_PI_8: u32 = 62101;
pub const XLINE_NYATRD_PI_9: u32 = 62102;
pub const XLINE_NYATRD_PI_10: u32 = 62103;
pub const XLINE_NYATRD_PI_11: u32 = 62104;
pub const XLINE_NYATRD_PI_12: u32 = 62105;
pub const XLINE_NYATRD_PI_13: u32 = 62106;
pub const XLINE_NYATRD_PI_14: u32 = 62107;
pub const XLINE_CDF_TCMP1: u32 = 62112;
pub const XLINE_CDF_TCMP2: u32 = 62113;
pub const XLINE_CDF_TCMP3: u32 = 62114;
pub const XLINE_CDF_TCMP4: u32 = 62115;
pub const XLINE_AQUISEU_MAC: u32 = 62128;
pub const XLINE_AQUISEUT_MAC: u32 = 62129;
pub const XLINE_ERX_EMDI_01: u32 = 62144;
pub const XLINE_ERX_EMDI_02: u32 = 62145;
pub const XLINE_ERX_EMDI_03: u32 = 62146;
pub const XLINE_ERX_EMDI_04: u32 = 62147;
pub const XLINE_ERX_EMDI_05: u32 = 62148;
pub const XLINE_ERX_EMDI_06: u32 = 62149;
pub const XLINE_ERX_EMDI_07: u32 = 62150;
pub const XLINE_ERX_EMDI_08: u32 = 62151;
pub const XLINE_ERX_EMDI_09: u32 = 62152;
pub const XLINE_ERX_EMDI_10: u32 = 62153;
pub const XLINE_ERX_EMDI_11: u32 = 62154;
pub const XLINE_ERX_EMDI_12: u32 = 62155;
pub const XLINE_ERX_EMDI_13: u32 = 62156;
pub const XLINE_ERX_EMDI_14: u32 = 62157;
pub const XLINE_ERX_EMDI_15: u32 = 62158;
pub const XLINE_ERX_EMDI_16: u32 = 62159;
pub const XLINE_ERX_EMDI_17: u32 = 62160;
pub const XLINE_ERX_EMDI_18: u32 = 62161;
pub const XLINE_ERX_EMDI_19: u32 = 62162;
pub const XLINE_ERX_EMDI_20: u32 = 62163;
pub const XLINE_ERX_EMDI_21: u32 = 62164;
pub const XLINE_ERX_EMDI_22: u32 = 62165;
pub const XLINE_ERX_EMDI_23: u32 = 62166;
pub const XLINE_ERX_EMDI_24: u32 = 62167;
pub const XLINE_ERX_EMDI_25: u32 = 62168;
pub const XLINE_ERX_EMDI_26: u32 = 62169;
pub const XLINE_ERX_EMDI_27: u32 = 62170;
pub const XLINE_ERX_EMDI_28: u32 = 62171;
pub const XLINE_ERX_EMDI_29: u32 = 62172;
pub const XLINE_ERX_EMDI_30: u32 = 62173;
pub const XLINE_ERX_EMDI_31: u32 = 62174;
pub const XLINE_ERX_EMDI_32: u32 = 62175;
pub const XLINE_ERX_EMDI_33: u32 = 62176;
pub const XLINE_ERX_EMDI_34: u32 = 62177;
pub const XLINE_ERX_EMDI_35: u32 = 62178;
pub const XLINE_ERX_EMDI_36: u32 = 62179;
pub const XLINE_ERX_EMDI_37: u32 = 62180;
pub const XLINE_ERX_EMDI_38: u32 = 62181;
pub const XLINE_ERX_EMDI_39: u32 = 62182;
pub const XLINE_ERX_EMDI_40: u32 = 62183;
pub const XLINE_ERX_EMDI_41: u32 = 62184;
pub const XLINE_ERX_EMDI_42: u32 = 62185;
pub const XLINE_ERX_EMDI_43: u32 = 62186;
pub const XLINE_ERX_EMDI_44: u32 = 62187;
pub const XLINE_ERX_EMDI_45: u32 = 62188;
pub const XLINE_ERXEMDI_SYMMGR: u32 = 62189;
pub const XLINE_ERXT_EMDI_01: u32 = 62190;
pub const XLINE_ERXT_EMDI_02: u32 = 62191;
pub const XLINE_ERXT_EMDI_03: u32 = 62192;
pub const XLINE_ERXT_EMDI_04: u32 = 62193;
pub const XLINE_ERXT_EMDI_05: u32 = 62194;
pub const XLINE_ERXT_EMDI_06: u32 = 62195;
pub const XLINE_ERXT_EMDI_07: u32 = 62196;
pub const XLINE_ERXT_EMDI_08: u32 = 62197;
pub const XLINE_ERXT_EMDI_09: u32 = 62198;
pub const XLINE_ERXT_EMDI_10: u32 = 62199;
pub const XLINE_ERXT_EMDI_11: u32 = 62200;
pub const XLINE_ERXT_EMDI_12: u32 = 62201;
pub const XLINE_ERXT_EMDI_13: u32 = 62202;
pub const XLINE_ERXT_EMDI_14: u32 = 62203;
pub const XLINE_ERXT_EMDI_15: u32 = 62204;
pub const XLINE_ERXT_EMDI_16: u32 = 62205;
pub const XLINE_ERXT_EMDI_17: u32 = 62206;
pub const XLINE_ERXT_EMDI_18: u32 = 62207;
pub const XLINE_ERXT_EMDI_19: u32 = 62208;
pub const XLINE_ERXT_EMDI_20: u32 = 62209;
pub const XLINE_ERXT_EMDI_21: u32 = 62210;
pub const XLINE_ERXT_EMDI_22: u32 = 62211;
pub const XLINE_ERXT_EMDI_23: u32 = 62212;
pub const XLINE_ERXT_EMDI_24: u32 = 62213;
pub const XLINE_ERXT_EMDI_25: u32 = 62214;
pub const XLINE_ERXT_EMDI_26: u32 = 62215;
pub const XLINE_ERXT_EMDI_27: u32 = 62216;
pub const XLINE_ERXT_EMDI_28: u32 = 62217;
pub const XLINE_ERXT_EMDI_29: u32 = 62218;
pub const XLINE_ERXT_EMDI_30: u32 = 62219;
pub const XLINE_ERXT_EMDI_31: u32 = 62220;
pub const XLINE_ERXT_EMDI_32: u32 = 62221;
pub const XLINE_ERXT_EMDI_33: u32 = 62222;
pub const XLINE_ERXT_EMDI_34: u32 = 62223;
pub const XLINE_ERXT_EMDI_35: u32 = 62224;
pub const XLINE_ERXT_EMDI_36: u32 = 62225;
pub const XLINE_ERXT_EMDI_37: u32 = 62226;
pub const XLINE_ERXT_EMDI_38: u32 = 62227;
pub const XLINE_ERXT_EMDI_39: u32 = 62228;
pub const XLINE_ERXT_EMDI_40: u32 = 62229;
pub const XLINE_ERXT_EMDI_41: u32 = 62230;
pub const XLINE_ERXT_EMDI_42: u32 = 62231;
pub const XLINE_ERXT_EMDI_43: u32 = 62232;
pub const XLINE_ERXT_EMDI_44: u32 = 62233;
pub const XLINE_ERXT_EMDI_45: u32 = 62234;
pub const XLINE_ERXTEMDI_SYMMGR: u32 = 62235;
pub const XLINE_ERX_RDI: u32 = 62272;
pub const XLINE_ERXT_RDI: u32 = 62273;
pub const XLINE_ERX_EOBI_01: u32 = 62280;
pub const XLINE_ERX_EOBI_02: u32 = 62281;
pub const XLINE_ERX_EOBI_03: u32 = 62282;
pub const XLINE_ERX_EOBI_04: u32 = 62283;
pub const XLINE_ERX_EOBI_05: u32 = 62284;
pub const XLINE_ERX_EOBI_06: u32 = 62285;
pub const XLINE_ERX_EOBI_07: u32 = 62286;
pub const XLINE_ERX_EOBI_08: u32 = 62287;
pub const XLINE_ERX_EOBI_09: u32 = 62288;
pub const XLINE_ERX_EOBI_10: u32 = 62289;
pub const XLINE_ERX_EOBI_11: u32 = 62290;
pub const XLINE_ERX_EOBI_12: u32 = 62291;
pub const XLINE_ERX_EOBI_13: u32 = 62292;
pub const XLINE_ERX_EOBI_14: u32 = 62293;
pub const XLINE_ERX_EOBI_15: u32 = 62294;
pub const XLINE_ERX_EOBI_16: u32 = 62295;
pub const XLINE_ERX_EOBI_17: u32 = 62296;
pub const XLINE_ERX_EOBI_18: u32 = 62297;
pub const XLINE_ERX_EOBI_19: u32 = 62298;
pub const XLINE_ERX_EOBI_20: u32 = 62299;
pub const XLINE_ERX_EOBI_21: u32 = 62300;
pub const XLINE_ERX_EOBI_22: u32 = 62301;
pub const XLINE_ERX_EOBI_23: u32 = 62302;
pub const XLINE_ERX_EOBI_24: u32 = 62303;
pub const XLINE_ERX_EOBI_25: u32 = 62304;
pub const XLINE_ERX_EOBI_26: u32 = 62305;
pub const XLINE_ERX_EOBI_27: u32 = 62306;
pub const XLINE_ERX_EOBI_28: u32 = 62307;
pub const XLINE_ERX_EOBI_29: u32 = 62308;
pub const XLINE_ERX_EOBI_30: u32 = 62309;
pub const XLINE_ERX_EOBI_31: u32 = 62310;
pub const XLINE_ERX_EOBI_32: u32 = 62311;
pub const XLINE_ERX_EOBI_33: u32 = 62312;
pub const XLINE_ERX_EOBI_34: u32 = 62313;
pub const XLINE_ERX_EOBI_35: u32 = 62314;
pub const XLINE_ERX_EOBI_36: u32 = 62315;
pub const XLINE_ERX_EOBI_37: u32 = 62316;
pub const XLINE_ERX_EOBI_38: u32 = 62317;
pub const XLINE_ERX_EOBI_39: u32 = 62318;
pub const XLINE_ERX_EOBI_40: u32 = 62319;
pub const XLINE_ERX_EOBI_41: u32 = 62320;
pub const XLINE_ERX_EOBI_42: u32 = 62321;
pub const XLINE_ERX_EOBI_43: u32 = 62322;
pub const XLINE_ERX_EOBI_44: u32 = 62323;
pub const XLINE_ERX_EOBI_45: u32 = 62324;
pub const XLINE_ERXEOBI_SYMMGR: u32 = 62325;
pub const XLINE_ERXT_EOBI_01: u32 = 62326;
pub const XLINE_ERXT_EOBI_02: u32 = 62327;
pub const XLINE_ERXT_EOBI_03: u32 = 62328;
pub const XLINE_ERXT_EOBI_04: u32 = 62329;
pub const XLINE_ERXT_EOBI_05: u32 = 62330;
pub const XLINE_ERXT_EOBI_06: u32 = 62331;
pub const XLINE_ERXT_EOBI_07: u32 = 62332;
pub const XLINE_ERXT_EOBI_08: u32 = 62333;
pub const XLINE_ERXT_EOBI_09: u32 = 62334;
pub const XLINE_ERXT_EOBI_10: u32 = 62335;
pub const XLINE_ERXT_EOBI_11: u32 = 62336;
pub const XLINE_ERXT_EOBI_12: u32 = 62337;
pub const XLINE_ERXT_EOBI_13: u32 = 62338;
pub const XLINE_ERXT_EOBI_14: u32 = 62339;
pub const XLINE_ERXT_EOBI_15: u32 = 62340;
pub const XLINE_ERXT_EOBI_16: u32 = 62341;
pub const XLINE_ERXT_EOBI_17: u32 = 62342;
pub const XLINE_ERXT_EOBI_18: u32 = 62343;
pub const XLINE_ERXT_EOBI_19: u32 = 62344;
pub const XLINE_ERXT_EOBI_20: u32 = 62345;
pub const XLINE_ERXT_EOBI_21: u32 = 62346;
pub const XLINE_ERXT_EOBI_22: u32 = 62347;
pub const XLINE_ERXT_EOBI_23: u32 = 62348;
pub const XLINE_ERXT_EOBI_24: u32 = 62349;
pub const XLINE_ERXT_EOBI_25: u32 = 62350;
pub const XLINE_ERXT_EOBI_26: u32 = 62351;
pub const XLINE_ERXT_EOBI_27: u32 = 62352;
pub const XLINE_ERXT_EOBI_28: u32 = 62353;
pub const XLINE_ERXT_EOBI_29: u32 = 62354;
pub const XLINE_ERXT_EOBI_30: u32 = 62355;
pub const XLINE_ERXT_EOBI_31: u32 = 62356;
pub const XLINE_ERXT_EOBI_32: u32 = 62357;
pub const XLINE_ERXT_EOBI_33: u32 = 62358;
pub const XLINE_ERXT_EOBI_34: u32 = 62359;
pub const XLINE_ERXT_EOBI_35: u32 = 62360;
pub const XLINE_ERXT_EOBI_36: u32 = 62361;
pub const XLINE_ERXT_EOBI_37: u32 = 62362;
pub const XLINE_ERXT_EOBI_38: u32 = 62363;
pub const XLINE_ERXT_EOBI_39: u32 = 62364;
pub const XLINE_ERXT_EOBI_40: u32 = 62365;
pub const XLINE_ERXT_EOBI_41: u32 = 62366;
pub const XLINE_ERXT_EOBI_42: u32 = 62367;
pub const XLINE_ERXT_EOBI_43: u32 = 62368;
pub const XLINE_ERXT_EOBI_44: u32 = 62369;
pub const XLINE_ERXT_EOBI_45: u32 = 62370;
pub const XLINE_ERXTEOBI_SYMMGR: u32 = 62371;
pub const XLINE_ERX_EMDS_STL: u32 = 62408;
pub const XLINE_ERX_EMDS_STUSR: u32 = 62409;
pub const XLINE_ERX_EMDS_OI: u32 = 62410;
pub const XLINE_ERX_EMDS_OIUSR: u32 = 62411;
pub const XLINE_ERXEMDS_SYMMGR: u32 = 62412;
pub const XLINE_ERXT_EMDS_STL: u32 = 62413;
pub const XLINE_ERXT_EMDS_STUSR: u32 = 62414;
pub const XLINE_ERXT_EMDS_OI: u32 = 62415;
pub const XLINE_ERXT_EMDS_OIUSR: u32 = 62416;
pub const XLINE_ERXTEMDS_SYMMGR: u32 = 62417;
pub const XLINE_BOX_MC_9: u32 = 62432;
pub const XLINE_BOX_MC_10: u32 = 62433;
pub const XLINE_BOX_MC_11: u32 = 62434;
pub const XLINE_BOX_MC_12: u32 = 62435;
pub const XLINE_CXAPITCH_1: u32 = 62448;
pub const XLINE_CXAPITCH_2: u32 = 62449;
pub const XLINE_CXAPITCH_SYMMGR: u32 = 62450;
pub const XLINE_CXAPITCH_RR: u32 = 62451;
pub const XLINE_CXAPITCC_1: u32 = 62452;
pub const XLINE_CXAPITCC_2: u32 = 62453;
pub const XLINE_CXAPITCC_SYMMGR: u32 = 62454;
pub const XLINE_CXAPITCC_RR: u32 = 62455;
pub const XLINE_CTA_RR: u32 = 62464;
pub const XLINE_CTA_A_1: u32 = 62465;
pub const XLINE_CTA_A_2: u32 = 62466;
pub const XLINE_CTA_A_3: u32 = 62467;
pub const XLINE_CTA_A_4: u32 = 62468;
pub const XLINE_CTA_A_5: u32 = 62469;
pub const XLINE_CTA_A_6: u32 = 62470;
pub const XLINE_CTA_A_7: u32 = 62471;
pub const XLINE_CTA_A_8: u32 = 62472;
pub const XLINE_CTA_A_9: u32 = 62473;
pub const XLINE_CTA_A_10: u32 = 62474;
pub const XLINE_CTA_A_11: u32 = 62475;
pub const XLINE_CTA_A_12: u32 = 62476;
pub const XLINE_CTA_B_1: u32 = 62477;
pub const XLINE_CTA_B_2: u32 = 62478;
pub const XLINE_CTA_B_3: u32 = 62479;
pub const XLINE_CTA_B_4: u32 = 62480;
pub const XLINE_CTA_B_5: u32 = 62481;
pub const XLINE_CTA_B_6: u32 = 62482;
pub const XLINE_CTA_B_7: u32 = 62483;
pub const XLINE_CTA_B_8: u32 = 62484;
pub const XLINE_CTA_B_9: u32 = 62485;
pub const XLINE_CTA_B_10: u32 = 62486;
pub const XLINE_CTA_B_11: u32 = 62487;
pub const XLINE_CTA_B_12: u32 = 62488;
pub const XLINE_CTA_INDEX_1: u32 = 62489;
pub const XLINE_CTA_INDEX_2: u32 = 62490;
pub const XLINE_UTP_1: u32 = 62496;
pub const XLINE_UTP_2: u32 = 62497;
pub const XLINE_UTP_3: u32 = 62498;
pub const XLINE_UTP_4: u32 = 62499;
pub const XLINE_UTP_5: u32 = 62500;
pub const XLINE_UTP_6: u32 = 62501;
pub const XLINE_XTXSI_A: u32 = 62512;
pub const XLINE_XTXSI_B: u32 = 62513;
pub const XLINE_XTXSI_C: u32 = 62514;
pub const XLINE_XTXSI_D: u32 = 62515;
pub const XLINE_XTXSI_E: u32 = 62516;
pub const XLINE_XTXSI_F: u32 = 62517;
pub const XLINE_XTXSI_G: u32 = 62518;
pub const XLINE_XTXSI_H: u32 = 62519;
pub const XLINE_XTXSI_I: u32 = 62520;
pub const XLINE_XTXSI_J: u32 = 62521;
pub const XLINE_XTXIOI_0: u32 = 62528;
pub const XLINE_XTXIOI_1: u32 = 62529;
pub const XLINE_XTXIOI_2: u32 = 62530;
pub const XLINE_XTXIOI_3: u32 = 62531;
pub const XLINE_XTXIOI_4: u32 = 62532;
pub const XLINE_XTXIOI_5: u32 = 62533;
pub const XLINE_XTXIOI_6: u32 = 62534;
pub const XLINE_XTXIOI_7: u32 = 62535;
pub const XLINE_XTXIOI_8: u32 = 62536;
pub const XLINE_XTXIOI_9: u32 = 62537;
pub const XLINE_TX1: u32 = 62544;
pub const XLINE_AL2_GTE_SYMMGR: u32 = 62560;
pub const XLINE_AL2_SYMMGR: u32 = 62561;
pub const XLINE_CANCL2_SYMMGR: u32 = 62562;
pub const XLINE_CANTL2_SYMMGR: u32 = 62563;
pub const XLINE_CL2_GTE_SYMMGR: u32 = 62564;
pub const XLINE_TL2_GTE_SYMMGR: u32 = 62565;
pub const XLINE_OQITFI_REFT_1: u32 = 62576;
pub const XLINE_OQITFI_FBOU_1: u32 = 62577;
pub const XLINE_OQITFI_FBMU_1: u32 = 62578;
pub const XLINE_OQITFI_BBBO_1: u32 = 62579;
pub const XLINE_OQITWC_REFT_1: u32 = 62580;
pub const XLINE_OQITWC_REFT_2: u32 = 62581;
pub const XLINE_OQITWC_FBMU_1: u32 = 62582;
pub const XLINE_OQITWC_FBMU_2: u32 = 62583;
pub const XLINE_OQITWC_BBBO_1: u32 = 62584;
pub const XLINE_OQITWC_BBBO_2: u32 = 62585;
pub const XLINE_OTITFI_REFT_1: u32 = 62586;
pub const XLINE_OTITFI_FBOU_1: u32 = 62587;
pub const XLINE_OTITFI_FBMU_1: u32 = 62588;
pub const XLINE_OTITFI_BBBO_1: u32 = 62589;
pub const XLINE_OTITWC_REFT_1: u32 = 62590;
pub const XLINE_OTITWC_REFT_2: u32 = 62591;
pub const XLINE_OTITWC_FBMU_1: u32 = 62592;
pub const XLINE_OTITWC_FBMU_2: u32 = 62593;
pub const XLINE_OTITWC_BBBO_1: u32 = 62594;
pub const XLINE_OTITWC_BBBO_2: u32 = 62595;
pub const XLINE_TASE_OTC: u32 = 62608;
pub const XLINE_TASE_OTCT: u32 = 62609;
pub const XLINE_MEMXO_D_1: u32 = 62624;
pub const XLINE_MEMXO_D_2: u32 = 62625;
pub const XLINE_MEMXO_D_3: u32 = 62626;
pub const XLINE_MEMXO_D_4: u32 = 62627;
pub const XLINE_MEMXO_D_5: u32 = 62628;
pub const XLINE_MEMXO_D_6: u32 = 62629;
pub const XLINE_MEMXO_D_7: u32 = 62630;
pub const XLINE_MEMXO_D_8: u32 = 62631;
pub const XLINE_MEMXO_D_SYMMGR: u32 = 62632;
pub const XLINE_MEMXOT_D_1: u32 = 62633;
pub const XLINE_MEMXOT_D_2: u32 = 62634;
pub const XLINE_MEMXOT_D_3: u32 = 62635;
pub const XLINE_MEMXOT_D_4: u32 = 62636;
pub const XLINE_MEMXOT_D_5: u32 = 62637;
pub const XLINE_MEMXOT_D_6: u32 = 62638;
pub const XLINE_MEMXOT_D_7: u32 = 62639;
pub const XLINE_MEMXOT_D_8: u32 = 62640;
pub const XLINE_MEMXOT_D_SYMMGR: u32 = 62641;
pub const XLINE_NYS_BBO_1: u32 = 62656;
pub const XLINE_NYS_BBO_2: u32 = 62657;
pub const XLINE_NYS_BBO_3: u32 = 62658;
pub const XLINE_NYS_BBO_4: u32 = 62659;
pub const XLINE_NYS_BBO_5: u32 = 62660;
pub const XLINE_NYS_BBO_6: u32 = 62661;
pub const XLINE_NYS_BBO_7: u32 = 62662;
pub const XLINE_NYS_BBO_8: u32 = 62663;
pub const XLINE_NYS_BBO_9: u32 = 62664;
pub const XLINE_NYS_BBO_10: u32 = 62665;
pub const XLINE_NYS_BBO_11: u32 = 62666;
pub const XLINE_NYS_BBO_12: u32 = 62667;
pub const XLINE_NYS_BBO_13: u32 = 62668;
pub const XLINE_NYS_BBO_14: u32 = 62669;
pub const XLINE_NYS_TRD_1: u32 = 62688;
pub const XLINE_NYS_TRD_2: u32 = 62689;
pub const XLINE_NYS_TRD_3: u32 = 62690;
pub const XLINE_NYS_TRD_4: u32 = 62691;
pub const XLINE_NYS_TRD_5: u32 = 62692;
pub const XLINE_NYS_TRD_6: u32 = 62693;
pub const XLINE_NYS_TRD_7: u32 = 62694;
pub const XLINE_NYS_TRD_8: u32 = 62695;
pub const XLINE_NYS_TRD_9: u32 = 62696;
pub const XLINE_NYS_TRD_10: u32 = 62697;
pub const XLINE_NYS_TRD_11: u32 = 62698;
pub const XLINE_NYS_TRD_12: u32 = 62699;
pub const XLINE_NYS_TRD_13: u32 = 62700;
pub const XLINE_NYS_TRD_14: u32 = 62701;
pub const XLINE_NYNA_BBO_1: u32 = 62720;
pub const XLINE_NYNA_BBO_2: u32 = 62721;
pub const XLINE_NYNA_BBO_3: u32 = 62722;
pub const XLINE_NYNA_BBO_4: u32 = 62723;
pub const XLINE_NYNA_BBO_5: u32 = 62724;
pub const XLINE_NYNA_BBO_6: u32 = 62725;
pub const XLINE_NYNA_TRD_1: u32 = 62736;
pub const XLINE_NYNA_TRD_2: u32 = 62737;
pub const XLINE_NYNA_TRD_3: u32 = 62738;
pub const XLINE_NYNA_TRD_4: u32 = 62739;
pub const XLINE_NYNA_TRD_5: u32 = 62740;
pub const XLINE_NYNA_TRD_6: u32 = 62741;
pub const XLINE_NYAM_BBO_1: u32 = 62752;
pub const XLINE_NYAM_BBO_2: u32 = 62753;
pub const XLINE_NYAM_BBO_3: u32 = 62754;
pub const XLINE_NYAM_BBO_4: u32 = 62755;
pub const XLINE_NYAM_BBO_5: u32 = 62756;
pub const XLINE_NYAM_BBO_6: u32 = 62757;
pub const XLINE_NYAM_TRD_1: u32 = 62768;
pub const XLINE_NYAM_TRD_2: u32 = 62769;
pub const XLINE_NYAM_TRD_3: u32 = 62770;
pub const XLINE_NYAM_TRD_4: u32 = 62771;
pub const XLINE_NYAM_TRD_5: u32 = 62772;
pub const XLINE_NYAM_TRD_6: u32 = 62773;
pub const XLINE_NYCH_BBO_1: u32 = 62784;
pub const XLINE_NYCH_BBO_2: u32 = 62785;
pub const XLINE_NYCH_BBO_3: u32 = 62786;
pub const XLINE_NYCH_BBO_4: u32 = 62787;
pub const XLINE_NYCH_BBO_5: u32 = 62788;
pub const XLINE_NYCH_BBO_6: u32 = 62789;
pub const XLINE_NYCH_TRD_1: u32 = 62800;
pub const XLINE_NYCH_TRD_2: u32 = 62801;
pub const XLINE_NYCH_TRD_3: u32 = 62802;
pub const XLINE_NYCH_TRD_4: u32 = 62803;
pub const XLINE_NYCH_TRD_5: u32 = 62804;
pub const XLINE_NYCH_TRD_6: u32 = 62805;
pub const XLINE_NYCHT_BBO_1: u32 = 62816;
pub const XLINE_NYCHT_BBO_2: u32 = 62817;
pub const XLINE_NYCHT_BBO_3: u32 = 62818;
pub const XLINE_NYCHT_TRD_1: u32 = 62824;
pub const XLINE_NYCHT_TRD_2: u32 = 62825;
pub const XLINE_NYCHT_TRD_3: u32 = 62826;
pub const XLINE_NYAROPT_TRD_1: u32 = 62832;
pub const XLINE_NYAROPT_TRD_2: u32 = 62833;
pub const XLINE_NYAROPT_TRD_3: u32 = 62834;
pub const XLINE_NYAROPT_TRD_4: u32 = 62835;
pub const XLINE_NYAROPT_TRD_5: u32 = 62836;
pub const XLINE_NYAROPT_TRD_6: u32 = 62837;
pub const XLINE_NYAROPT_TRD_7: u32 = 62838;
pub const XLINE_NYAROPT_TRD_8: u32 = 62839;
pub const XLINE_NYAROPT_TRD_9: u32 = 62840;
pub const XLINE_NYAROPT_TRD_10: u32 = 62841;
pub const XLINE_NYAROPT_TRD_11: u32 = 62842;
pub const XLINE_NYAROPT_TRD_12: u32 = 62843;
pub const XLINE_NYAROPT_TRD_13: u32 = 62844;
pub const XLINE_NYAROPT_TRD_14: u32 = 62845;
pub const XLINE_NYAROPTT_TRD_1: u32 = 62864;
pub const XLINE_NYAROPTT_TRD_2: u32 = 62865;
pub const XLINE_NYAROPTT_TRD_3: u32 = 62866;
pub const XLINE_CXJPITCH_1: u32 = 62880;
pub const XLINE_CXJPITCH_2: u32 = 62881;
pub const XLINE_CXJPITCH_RR: u32 = 62882;
pub const XLINE_CXJSPTCH_1: u32 = 62883;
pub const XLINE_CXJSPTCH_2: u32 = 62884;
pub const XLINE_CXJSPTCH_RR: u32 = 62885;
pub const XLINE_CXJPITCC_1: u32 = 62886;
pub const XLINE_CXJPITCC_2: u32 = 62887;
pub const XLINE_CXJPITCC_RR: u32 = 62888;
pub const XLINE_CXJSPTCC_1: u32 = 62889;
pub const XLINE_CXJSPTCC_2: u32 = 62890;
pub const XLINE_CXJSPTCC_RR: u32 = 62891;
pub const XLINE_PL2: u32 = 62896;
pub const XLINE_PL2_SYMMGR: u32 = 62897;
pub const XLINE_PL2_GTE: u32 = 62898;
pub const XLINE_PL2_GTE_SYMMGR: u32 = 62899;
pub const XLINE_PL1: u32 = 62900;
pub const XLINE_PL1_GTE: u32 = 62901;
pub const XLINE_PQL2: u32 = 62902;
pub const XLINE_PQL2_SYMMGR: u32 = 62903;
pub const XLINE_PQL2_GTE: u32 = 62904;
pub const XLINE_PQL2_GTE_SYMMGR: u32 = 62905;
pub const XLINE_PQL1: u32 = 62906;
pub const XLINE_PQL1_SYMMGR: u32 = 62907;
pub const XLINE_PQL1_GTE: u32 = 62908;
pub const XLINE_PQL1_GTE_SYMMGR: u32 = 62909;
pub const XLINE_CDF_ALPX: u32 = 62910;
pub const XLINE_AQL1_SYMMGR: u32 = 62912;
pub const XLINE_AQL2_SYMMGR: u32 = 62913;
pub const XLINE_TQL1_SYMMGR: u32 = 62914;
pub const XLINE_TQL2_SYMMGR: u32 = 62915;
pub const XLINE_VQL1_SYMMGR: u32 = 62916;
pub const XLINE_VQL2_SYMMGR: u32 = 62917;
pub const XLINE_AQL1_GTE_SYMMGR: u32 = 62918;
pub const XLINE_AQL2_GTE_SYMMGR: u32 = 62919;
pub const XLINE_TQL1_GTE_SYMMGR: u32 = 62920;
pub const XLINE_TQL2_GTE_SYMMGR: u32 = 62921;
pub const XLINE_VQL1_GTE_SYMMGR: u32 = 62922;
pub const XLINE_VQL2_GTE_SYMMGR: u32 = 62923;
pub const XLINE_AMO_D_SYMMGR: u32 = 62928;
pub const XLINE_AMEXOPT_D_1: u32 = 62929;
pub const XLINE_AMEXOPT_D_2: u32 = 62930;
pub const XLINE_AMEXOPT_D_3: u32 = 62931;
pub const XLINE_AMEXOPT_D_4: u32 = 62932;
pub const XLINE_AMEXOPT_D_5: u32 = 62933;
pub const XLINE_AMEXOPT_D_6: u32 = 62934;
pub const XLINE_AMEXOPT_D_7: u32 = 62935;
pub const XLINE_AMEXOPT_D_8: u32 = 62936;
pub const XLINE_AMEXOPT_D_9: u32 = 62937;
pub const XLINE_AMEXOPT_D_10: u32 = 62938;
pub const XLINE_AMEXOPT_D_11: u32 = 62939;
pub const XLINE_AMEXOPT_D_12: u32 = 62940;
pub const XLINE_AMEXOPT_D_13: u32 = 62941;
pub const XLINE_AMEXOPT_D_14: u32 = 62942;
pub const XLINE_AMEXOPT_BBO_1: u32 = 62944;
pub const XLINE_AMEXOPT_BBO_2: u32 = 62945;
pub const XLINE_AMEXOPT_BBO_3: u32 = 62946;
pub const XLINE_AMEXOPT_BBO_4: u32 = 62947;
pub const XLINE_AMEXOPT_BBO_5: u32 = 62948;
pub const XLINE_AMEXOPT_BBO_6: u32 = 62949;
pub const XLINE_AMEXOPT_BBO_7: u32 = 62950;
pub const XLINE_AMEXOPT_BBO_8: u32 = 62951;
pub const XLINE_AMEXOPT_BBO_9: u32 = 62952;
pub const XLINE_AMEXOPT_BBO_10: u32 = 62953;
pub const XLINE_AMEXOPT_BBO_11: u32 = 62954;
pub const XLINE_AMEXOPT_BBO_12: u32 = 62955;
pub const XLINE_AMEXOPT_BBO_13: u32 = 62956;
pub const XLINE_AMEXOPT_BBO_14: u32 = 62957;
pub const XLINE_AMEXOPT_TRD_1: u32 = 62959;
pub const XLINE_AMEXOPT_TRD_2: u32 = 62960;
pub const XLINE_AMEXOPT_TRD_3: u32 = 62961;
pub const XLINE_AMEXOPT_TRD_4: u32 = 62962;
pub const XLINE_AMEXOPT_TRD_5: u32 = 62963;
pub const XLINE_AMEXOPT_TRD_6: u32 = 62964;
pub const XLINE_AMEXOPT_TRD_7: u32 = 62965;
pub const XLINE_AMEXOPT_TRD_8: u32 = 62966;
pub const XLINE_AMEXOPT_TRD_9: u32 = 62967;
pub const XLINE_AMEXOPT_TRD_10: u32 = 62968;
pub const XLINE_AMEXOPT_TRD_11: u32 = 62969;
pub const XLINE_AMEXOPT_TRD_12: u32 = 62970;
pub const XLINE_AMEXOPT_TRD_13: u32 = 62971;
pub const XLINE_AMEXOPT_TRD_14: u32 = 62972;
pub const XLINE_AMEXOPT_IMB_1: u32 = 62974;
pub const XLINE_AMO_C_SYMMGR: u32 = 62975;
pub const XLINE_AMEXOPT_C_1: u32 = 62976;
pub const XLINE_AMEXOPT_C_2: u32 = 62977;
pub const XLINE_AMEXOPT_C_3: u32 = 62978;
pub const XLINE_AMEXOPT_C_4: u32 = 62979;
pub const XLINE_AMEXOPT_C_5: u32 = 62980;
pub const XLINE_AMEXOPT_C_6: u32 = 62981;
pub const XLINE_AMEXOPT_C_7: u32 = 62982;
pub const XLINE_AMEXOPT_C_8: u32 = 62983;
pub const XLINE_AMEXOPT_C_9: u32 = 62984;
pub const XLINE_AMEXOPT_C_10: u32 = 62985;
pub const XLINE_AMEXOPT_C_11: u32 = 62986;
pub const XLINE_AMEXOPT_C_12: u32 = 62987;
pub const XLINE_AMEXOPT_C_13: u32 = 62988;
pub const XLINE_AMEXOPT_C_14: u32 = 62989;
pub const XLINE_AMOT_D_SYMMGR: u32 = 62990;
pub const XLINE_AMEXOPTT_D_1: u32 = 62991;
pub const XLINE_AMEXOPTT_D_2: u32 = 62992;
pub const XLINE_AMEXOPTT_D_3: u32 = 62993;
pub const XLINE_AMEXOPTT_BBO_1: u32 = 62995;
pub const XLINE_AMEXOPTT_BBO_2: u32 = 62996;
pub const XLINE_AMEXOPTT_BBO_3: u32 = 62997;
pub const XLINE_AMEXOPTT_TRD_1: u32 = 62999;
pub const XLINE_AMEXOPTT_TRD_2: u32 = 63000;
pub const XLINE_AMEXOPTT_TRD_3: u32 = 63001;
pub const XLINE_AMEXOPTT_IMB_1: u32 = 63003;
pub const XLINE_AMOT_C_SYMMGR: u32 = 63004;
pub const XLINE_AMEXOPTT_C_1: u32 = 63005;
pub const XLINE_AMEXOPTT_C_2: u32 = 63006;
pub const XLINE_AMEXOPTT_C_3: u32 = 63007;
pub const XLINE_GEMX_DOM_SYMMGR: u32 = 63008;
pub const XLINE_GEMX_DOM_1: u32 = 63009;
pub const XLINE_GEMX_DOM_2: u32 = 63010;
pub const XLINE_GEMX_DOM_3: u32 = 63011;
pub const XLINE_GEMX_DOM_4: u32 = 63012;
pub const XLINE_GEMX_TOP_SYMMGR: u32 = 63013;
pub const XLINE_GEMX_TOP_1: u32 = 63014;
pub const XLINE_GEMX_TOP_2: u32 = 63015;
pub const XLINE_GEMX_TOP_3: u32 = 63016;
pub const XLINE_GEMX_TOP_4: u32 = 63017;
pub const XLINE_GEMX_DOMT_SYM: u32 = 63018;
pub const XLINE_GEMX_DOMT: u32 = 63019;
pub const XLINE_GEMX_TOPT_SYM: u32 = 63020;
pub const XLINE_GEMX_TOPT: u32 = 63021;
pub const XLINE_BME_PB_BO: u32 = 63024;
pub const XLINE_BMET_PB_BO: u32 = 63025;
pub const XLINE_BME_VAL_BO: u32 = 63026;
pub const XLINE_BMET_VAL_BO: u32 = 63027;
pub const XLINE_BME_REF_BO: u32 = 63028;
pub const XLINE_BMET_REF_BO: u32 = 63029;
pub const XLINE_BMEBO_SYMMGR: u32 = 63030;
pub const XLINE_BMEBOT_SYMMGR: u32 = 63031;
pub const XLINE_AMEXOPT_SYMMGR: u32 = 63032;
pub const XLINE_AMEXOPTT_SYMMGR: u32 = 63033;
pub const XLINE_BME_TRD_BO: u32 = 63034;
pub const XLINE_BMET_TRD_BO: u32 = 63035;
pub const XLINE_JXSIBIN_5: u32 = 63040;
pub const XLINE_JXSIBIN_6: u32 = 63041;
pub const XLINE_JXSIBIN_7: u32 = 63042;
pub const XLINE_JXSIBIN_8: u32 = 63043;
pub const XLINE_JXSIBIN_9: u32 = 63044;
pub const XLINE_NSEMTBT_CM_1: u32 = 63056;
pub const XLINE_NSEMTBT_CM_2: u32 = 63057;
pub const XLINE_NSEMTBT_CM_3: u32 = 63058;
pub const XLINE_NSEMTBT_CM_4: u32 = 63059;
pub const XLINE_NSEMTBT_CM_RR: u32 = 63060;
pub const XLINE_NSEMTBT_CM_SYM: u32 = 63061;
pub const XLINE_SAPHTOM_SYMMGR: u32 = 63072;
pub const XLINE_SAPHTOM_1: u32 = 63073;
pub const XLINE_SAPHTOM_2: u32 = 63074;
pub const XLINE_SAPHTOM_3: u32 = 63075;
pub const XLINE_SAPHTOM_4: u32 = 63076;
pub const XLINE_SAPHTOM_5: u32 = 63077;
pub const XLINE_SAPHTOM_6: u32 = 63078;
pub const XLINE_SAPHTOM_7: u32 = 63079;
pub const XLINE_SAPHTOM_8: u32 = 63080;
pub const XLINE_SAPHTOMT_1: u32 = 63081;
pub const XLINE_SAPHTOMT_2: u32 = 63082;
pub const XLINE_SAPHTOMT_SYMMGR: u32 = 63083;
pub const XLINE_CSMICGI: u32 = 63084;
pub const XLINE_CSMICGIC: u32 = 63085;
pub const XLINE_BSENF_EQ: u32 = 63088;
pub const XLINE_BSENF_EQ_SYM: u32 = 63089;
pub const XLINE_BSENFT_EQ: u32 = 63090;
pub const XLINE_BSENFT_EQ_SYM: u32 = 63091;
pub const XLINE_SGXST_OM: u32 = 63104;
pub const XLINE_SGXST_OMT: u32 = 63105;
pub const XLINE_OQITIF_REFT_1: u32 = 63120;
pub const XLINE_OQITIF_BBBO_1: u32 = 63121;
pub const XLINE_OQITIF_FBMU_1: u32 = 63122;
pub const XLINE_OQITIO_REFT_1: u32 = 63123;
pub const XLINE_OQITIO_BBBO_1: u32 = 63124;
pub const XLINE_OQITIO_FBMU_1: u32 = 63125;
pub const XLINE_OQITED_REFT_1: u32 = 63126;
pub const XLINE_OQITED_REFT_2: u32 = 63127;
pub const XLINE_OQITED_REFT_3: u32 = 63128;
pub const XLINE_OQITED_BBBO_1: u32 = 63129;
pub const XLINE_OQITED_BBBO_2: u32 = 63130;
pub const XLINE_OQITED_BBBO_3: u32 = 63131;
pub const XLINE_OQITED_FBMU_1: u32 = 63132;
pub const XLINE_OQITED_FBMU_2: u32 = 63133;
pub const XLINE_OQITED_FBMU_3: u32 = 63134;
pub const XLINE_OTITIF_REFT_1: u32 = 63135;
pub const XLINE_OTITIF_BBBO_1: u32 = 63136;
pub const XLINE_OTITIF_FBMU_1: u32 = 63137;
pub const XLINE_OTITIO_REFT_1: u32 = 63138;
pub const XLINE_OTITIO_BBBO_1: u32 = 63139;
pub const XLINE_OTITIO_FBMU_1: u32 = 63140;
pub const XLINE_OTITED_REFT_1: u32 = 63141;
pub const XLINE_OTITED_REFT_2: u32 = 63142;
pub const XLINE_OTITED_REFT_3: u32 = 63143;
pub const XLINE_OTITED_BBBO_1: u32 = 63144;
pub const XLINE_OTITED_BBBO_2: u32 = 63145;
pub const XLINE_OTITED_BBBO_3: u32 = 63146;
pub const XLINE_OTITED_FBMU_1: u32 = 63147;
pub const XLINE_OTITED_FBMU_2: u32 = 63148;
pub const XLINE_OTITED_FBMU_3: u32 = 63149;
pub const XLINE_OTC_QIX_SYMMGR: u32 = 63152;
pub const XLINE_OTC_QINX: u32 = 63153;
pub const XLINE_OTC_QIXG_SYMMGR: u32 = 63154;
pub const XLINE_OTC_QINX_G: u32 = 63155;
pub const XLINE_PINK_QX_SYMMGR: u32 = 63156;
pub const XLINE_PINK_QUOTEX: u32 = 63157;
pub const XLINE_PINK_QXG_SYMMGR: u32 = 63158;
pub const XLINE_PINK_QUOTEX_G: u32 = 63159;
pub const XLINE_PINK_TX_SYMMGR: u32 = 63160;
pub const XLINE_PINK_TRADEX: u32 = 63161;
pub const XLINE_LSEG_H: u32 = 63162;
pub const XLINE_LSEG_J: u32 = 63163;
pub const XLINE_LSETOP_H: u32 = 63164;
pub const XLINE_LSETOP_J: u32 = 63165;
pub const XLINE_LSEGT_H: u32 = 63166;
pub const XLINE_LSEGT_J: u32 = 63167;
pub const XLINE_LSETOPT_H: u32 = 63168;
pub const XLINE_LSETOPT_J: u32 = 63169;
pub const XLINE_LSEUK_SYMMGR: u32 = 63170;
pub const XLINE_LSEEU_SYMMGR: u32 = 63171;
pub const XLINE_LSEIN_SYMMGR: u32 = 63172;
pub const XLINE_LSEUKT_SYMMGR: u32 = 63173;
pub const XLINE_LSEEUT_SYMMGR: u32 = 63174;
pub const XLINE_LSEINT_SYMMGR: u32 = 63175;
pub const XLINE_LSETUK_SYMMGR: u32 = 63176;
pub const XLINE_LSETEU_SYMMGR: u32 = 63177;
pub const XLINE_LSETIN_SYMMGR: u32 = 63178;
pub const XLINE_LSETUKT_SYMMGR: u32 = 63179;
pub const XLINE_LSETEUT_SYMMGR: u32 = 63180;
pub const XLINE_LSETINT_SYMMGR: u32 = 63181;
pub const XLINE_JUMPIOI_0: u32 = 63184;
pub const XLINE_JUMPIOI_1: u32 = 63185;
pub const XLINE_JUMPIOI_2: u32 = 63186;
pub const XLINE_JUMPIOI_3: u32 = 63187;
pub const XLINE_JUMPIOI_4: u32 = 63188;
pub const XLINE_JUMPIOI_5: u32 = 63189;
pub const XLINE_JUMPIOI_6: u32 = 63190;
pub const XLINE_JUMPIOI_7: u32 = 63191;
pub const XLINE_JUMPIOI_8: u32 = 63192;
pub const XLINE_JUMPIOI_9: u32 = 63193;
pub const XLINE_ISE_DOM_1: u32 = 63200;
pub const XLINE_ISE_DOM_2: u32 = 63201;
pub const XLINE_ISE_DOM_3: u32 = 63202;
pub const XLINE_ISE_DOM_4: u32 = 63203;
pub const XLINE_ISE_DOM_SYMMGR: u32 = 63204;
pub const XLINE_ISE_DOMT: u32 = 63205;
pub const XLINE_ISE_DOMT_SYM: u32 = 63206;
pub const XLINE_ISE_TOP_1: u32 = 63207;
pub const XLINE_ISE_TOP_2: u32 = 63208;
pub const XLINE_ISE_TOP_3: u32 = 63209;
pub const XLINE_ISE_TOP_4: u32 = 63210;
pub const XLINE_ISE_TOP_SYMMGR: u32 = 63211;
pub const XLINE_ISE_TOPT: u32 = 63212;
pub const XLINE_ISE_TOPT_SYM: u32 = 63213;
pub const XLINE_LTSE_DOM: u32 = 63216;
pub const XLINE_LTSE_DOM_SYMMGR: u32 = 63217;
pub const XLINE_LTSE_DOMT: u32 = 63218;
pub const XLINE_LTSE_DOMT_SYM: u32 = 63219;
pub const XLINE_LTSE_TRD: u32 = 63232;
pub const XLINE_LTSE_TRDT: u32 = 63233;
pub const XLINE_LTSE_TRD_SYMMGR: u32 = 63234;
pub const XLINE_LTSE_TRDT_SYM: u32 = 63235;
pub const XLINE_LTSE_TOP: u32 = 63236;
pub const XLINE_LTSE_TOPT: u32 = 63237;
pub const XLINE_LTSE_TOP_SYMMGR: u32 = 63238;
pub const XLINE_LTSE_TOPT_SYM: u32 = 63239;
pub const XLINE_A2X: u32 = 63248;
pub const XLINE_A2XT: u32 = 63249;
pub const XLINE_A2X_SYMMGR: u32 = 63250;
pub const XLINE_A2XT_SYMMGR: u32 = 63251;
pub const XLINE_AMEXOPT_BBO_15: u32 = 63264;
pub const XLINE_AMEXOPT_BBO_16: u32 = 63265;
pub const XLINE_AMEXOPT_BBO_17: u32 = 63266;
pub const XLINE_AMEXOPT_D_15: u32 = 63267;
pub const XLINE_AMEXOPT_D_16: u32 = 63268;
pub const XLINE_AMEXOPT_D_17: u32 = 63269;
pub const XLINE_AMEXOPT_C_15: u32 = 63270;
pub const XLINE_AMEXOPT_C_16: u32 = 63271;
pub const XLINE_AMEXOPT_C_17: u32 = 63272;
pub const XLINE_AMEXOPT_TRD_15: u32 = 63273;
pub const XLINE_AMEXOPT_TRD_16: u32 = 63274;
pub const XLINE_AMEXOPT_TRD_17: u32 = 63275;
pub const XLINE_ARCAOPT_BBO_15: u32 = 63276;
pub const XLINE_ARCAOPT_BBO_16: u32 = 63277;
pub const XLINE_ARCAOPT_BBO_17: u32 = 63278;
pub const XLINE_ARCAOPT_C_15: u32 = 63279;
pub const XLINE_ARCAOPT_C_16: u32 = 63280;
pub const XLINE_ARCAOPT_C_17: u32 = 63281;
pub const XLINE_ARCAOPT_D_15: u32 = 63282;
pub const XLINE_ARCAOPT_D_16: u32 = 63283;
pub const XLINE_ARCAOPT_D_17: u32 = 63284;
pub const XLINE_NYAROPT_TRD_15: u32 = 63285;
pub const XLINE_NYAROPT_TRD_16: u32 = 63286;
pub const XLINE_NYAROPT_TRD_17: u32 = 63287;
pub const XLINE_TSEMBO_051: u32 = 63296;
pub const XLINE_TSEMBO_052: u32 = 63297;
pub const XLINE_TSEMBO_053: u32 = 63298;
pub const XLINE_TSEMBO_054: u32 = 63299;
pub const XLINE_TSEMBO_055: u32 = 63300;
pub const XLINE_TSEMBO_056: u32 = 63301;
pub const XLINE_TSEMBO_057: u32 = 63302;
pub const XLINE_TSEMBO_058: u32 = 63303;
pub const XLINE_TSEMBO_059: u32 = 63304;
pub const XLINE_TSEMBO_060: u32 = 63305;
pub const XLINE_TSEMBO_061: u32 = 63306;
pub const XLINE_TSEMBO_062: u32 = 63307;
pub const XLINE_TSEMBO_063: u32 = 63308;
pub const XLINE_TSEMBO_064: u32 = 63309;
pub const XLINE_TSEMBO_065: u32 = 63310;
pub const XLINE_TSEMBO_066: u32 = 63311;
pub const XLINE_TSEMBO_067: u32 = 63312;
pub const XLINE_TSEMBO_068: u32 = 63313;
pub const XLINE_NSEMBO_072: u32 = 63314;
pub const XLINE_FSEMBO_074: u32 = 63315;
pub const XLINE_SSEMBO_076: u32 = 63316;
pub const XLINE_TSEMBO_D_111: u32 = 63317;
pub const XLINE_TSEMBO_BC_051: u32 = 63318;
pub const XLINE_TSEMBO_BC_052: u32 = 63319;
pub const XLINE_TSEMBO_BC_053: u32 = 63320;
pub const XLINE_TSEMBO_BC_054: u32 = 63321;
pub const XLINE_TSEMBO_BC_055: u32 = 63322;
pub const XLINE_TSEMBO_BC_056: u32 = 63323;
pub const XLINE_TSEMBO_BC_057: u32 = 63324;
pub const XLINE_TSEMBO_BC_058: u32 = 63325;
pub const XLINE_TSEMBO_BC_059: u32 = 63326;
pub const XLINE_TSEMBO_BC_060: u32 = 63327;
pub const XLINE_TSEMBO_BC_061: u32 = 63328;
pub const XLINE_TSEMBO_BC_062: u32 = 63329;
pub const XLINE_TSEMBO_BC_063: u32 = 63330;
pub const XLINE_TSEMBO_BC_064: u32 = 63331;
pub const XLINE_TSEMBO_BC_065: u32 = 63332;
pub const XLINE_TSEMBO_BC_066: u32 = 63333;
pub const XLINE_TSEMBO_BC_067: u32 = 63334;
pub const XLINE_TSEMBO_BC_068: u32 = 63335;
pub const XLINE_NSEMBO_BC_072: u32 = 63336;
pub const XLINE_FSEMBO_BC_074: u32 = 63337;
pub const XLINE_SSEMBO_BC_076: u32 = 63338;
pub const XLINE_TSEMBO_BC_D_111: u32 = 63339;
pub const XLINE_TSEMBO_TA_051: u32 = 63340;
pub const XLINE_TSEMBO_TA_052: u32 = 63341;
pub const XLINE_TSEMBO_TA_053: u32 = 63342;
pub const XLINE_TSEMBO_TA_054: u32 = 63343;
pub const XLINE_TSEMBO_TA_055: u32 = 63344;
pub const XLINE_TSEMBO_TA_056: u32 = 63345;
pub const XLINE_TSEMBO_TA_057: u32 = 63346;
pub const XLINE_TSEMBO_TA_058: u32 = 63347;
pub const XLINE_TSEMBO_TA_059: u32 = 63348;
pub const XLINE_TSEMBO_TA_060: u32 = 63349;
pub const XLINE_TSEMBO_TA_061: u32 = 63350;
pub const XLINE_TSEMBO_TA_062: u32 = 63351;
pub const XLINE_TSEMBO_TA_063: u32 = 63352;
pub const XLINE_TSEMBO_TA_064: u32 = 63353;
pub const XLINE_TSEMBO_TA_065: u32 = 63354;
pub const XLINE_TSEMBO_TA_066: u32 = 63355;
pub const XLINE_TSEMBO_TA_067: u32 = 63356;
pub const XLINE_TSEMBO_TA_068: u32 = 63357;
pub const XLINE_NSEMBO_TA_072: u32 = 63358;
pub const XLINE_FSEMBO_TA_074: u32 = 63359;
pub const XLINE_SSEMBO_TA_076: u32 = 63360;
pub const XLINE_TSEMBO_TA_D_111: u32 = 63361;
pub const XLINE_TSEMBO_TB_051: u32 = 63362;
pub const XLINE_TSEMBO_TB_052: u32 = 63363;
pub const XLINE_FSEMBO_TB_074: u32 = 63364;
pub const XLINE_TSEMBO_TB_D_111: u32 = 63365;
pub const XLINE_TSE_TB_ISSU_032: u32 = 63376;
pub const XLINE_FSE_TB_ISSU_034: u32 = 63377;
pub const XLINE_ATHX_T5: u32 = 63378;
pub const XLINE_ATHX_T5_SYMMGR: u32 = 63379;
pub const XLINE_ATHX_T5T: u32 = 63380;
pub const XLINE_ATHX_T5T_SYMMGR: u32 = 63381;
pub const XLINE_JXSIBIN_A: u32 = 63392;
pub const XLINE_JXSIBIN_B: u32 = 63393;
pub const XLINE_JXSIBIN_C: u32 = 63394;
pub const XLINE_JXSIBIN_D: u32 = 63395;
pub const XLINE_JXSIBIN_E: u32 = 63396;
pub const XLINE_JXSIBIN_F: u32 = 63397;
pub const XLINE_JXSIBIN_G: u32 = 63398;
pub const XLINE_JXSIBIN_H: u32 = 63399;
pub const XLINE_JXSIBIN_I: u32 = 63400;
pub const XLINE_JXSIBIN_J: u32 = 63401;
pub const XLINE_SIP0_XTIGTWY_31: u32 = 63402;
pub const XLINE_SIP0_XTIGTWY_32: u32 = 63403;
pub const XLINE_SIP0_XTIGTWY_33: u32 = 63404;
pub const XLINE_SIP0_XTIGTWY_34: u32 = 63405;
pub const XLINE_SIP0_XTIGTWY_35: u32 = 63406;
pub const XLINE_SIP0_XTIGTWY_36: u32 = 63407;
pub const XLINE_SIP0_XTIGTWY_37: u32 = 63408;
pub const XLINE_SIP0_XTIGTWY_38: u32 = 63409;
pub const XLINE_SIP0_XTIGTWY_39: u32 = 63410;
pub const XLINE_SIP0_XTIGTWY_40: u32 = 63411;
pub const XLINE_SIP0_XTIGTWY_41: u32 = 63412;
pub const XLINE_SIP0_XTIGTWY_42: u32 = 63413;
pub const XLINE_SIP0_XTIGTWY_43: u32 = 63414;
pub const XLINE_SIP0_XTIGTWY_44: u32 = 63415;
pub const XLINE_SIP0_XTIGTWY_45: u32 = 63416;
pub const XLINE_SIP0_XTIGTWY_46: u32 = 63417;
pub const XLINE_SIP0_XTIGTWY_47: u32 = 63418;
pub const XLINE_SIP0_XTIGTWY_48: u32 = 63419;
pub const XLINE_SIP0_XTIGTWY_49: u32 = 63420;
pub const XLINE_SIP0_XTIGTWY_50: u32 = 63421;
pub const XLINE_SIP0_XTIGTWY_51: u32 = 63422;
pub const XLINE_SIP0_XTIGTWY_52: u32 = 63423;
pub const XLINE_SIP0_XTIGTWY_53: u32 = 63424;
pub const XLINE_SIP0_XTIGTWY_54: u32 = 63425;
pub const XLINE_SIP0_XTIGTWY_55: u32 = 63426;
pub const XLINE_SIP0_XTIGTWY_56: u32 = 63427;
pub const XLINE_SIP0_XTIGTWY_57: u32 = 63428;
pub const XLINE_SIP0_XTIGTWY_58: u32 = 63429;
pub const XLINE_SIP0_XTIGTWY_59: u32 = 63430;
pub const XLINE_SIP0_XTIGTWY_60: u32 = 63431;
pub const XLINE_SIP0_XTIGTWY_61: u32 = 63432;
pub const XLINE_SIP0_XTIGTWY_62: u32 = 63433;
pub const XLINE_SIP0_XTIGTWY_63: u32 = 63434;
pub const XLINE_SIP0_XTIGTWY_64: u32 = 63435;
pub const XLINE_SIP0_XTIGTWY_65: u32 = 63436;
pub const XLINE_SIP0_XTIGTWY_66: u32 = 63437;
pub const XLINE_SIP0_XTIGTWY_67: u32 = 63438;
pub const XLINE_SIP0_XTIGTWY_68: u32 = 63439;
pub const XLINE_SIP0_XTIGTWY_69: u32 = 63440;
pub const XLINE_SIP0_XTIGTWY_70: u32 = 63441;
pub const XLINE_SIP0_XTIGTWY_71: u32 = 63442;
pub const XLINE_SIP0_XTIGTWY_72: u32 = 63443;
pub const XLINE_SIP0_XTIGTWY_73: u32 = 63444;
pub const XLINE_SIP0_XTIGTWY_74: u32 = 63445;
pub const XLINE_SIP0_XTIGTWY_75: u32 = 63446;
pub const XLINE_SIP0_XTIGTWY_76: u32 = 63447;
pub const XLINE_SIP0_XTIGTWY_77: u32 = 63448;
pub const XLINE_SIP0_XTIGTWY_78: u32 = 63449;
pub const XLINE_SIP0_XTIGTWY_79: u32 = 63450;
pub const XLINE_SIP0_XTIGTWY_80: u32 = 63451;
pub const XLINE_SIP0_XTIGTWY_81: u32 = 63452;
pub const XLINE_SIP0_XTIGTWY_82: u32 = 63453;
pub const XLINE_SIP0_XTIGTWY_83: u32 = 63454;
pub const XLINE_SIP0_XTIGTWY_84: u32 = 63455;
pub const XLINE_SIP0_XTIGTWY_85: u32 = 63456;
pub const XLINE_SIP0_XTIGTWY_86: u32 = 63457;
pub const XLINE_SIP0_XTIGTWY_87: u32 = 63458;
pub const XLINE_SIP0_XTIGTWY_88: u32 = 63459;
pub const XLINE_SIP0_XTIGTWY_89: u32 = 63460;
pub const XLINE_SIP0_XTIGTWY_90: u32 = 63461;
pub const XLINE_SIP0_XTIGTWY_91: u32 = 63462;
pub const XLINE_SIP0_XTIGTWY_92: u32 = 63463;
pub const XLINE_SIP0_XTIGTWY_93: u32 = 63464;
pub const XLINE_SIP0_XTIGTWY_94: u32 = 63465;
pub const XLINE_SIP0_XTIGTWY_95: u32 = 63466;
pub const XLINE_SIP0_XTIGTWY_96: u32 = 63467;
pub const XLINE_OUTBOUND_MSG: u32 = 65535;
pub const OBTT_INVALID: u32 = 0;
pub const OBTT_ADD: u32 = 1;
pub const OBTT_MODIFY: u32 = 2;
pub const OBTT_DELETE: u32 = 3;
pub const OBTT_REPLACE: u32 = 4;
pub const OBUT_INSERT: u32 = 0;
pub const OBUT_OVERWRITE: u32 = 1;
pub const OBUT_MOVE: u32 = 2;
pub const OBUT_DELETE: u32 = 3;
pub const XEXSIDE_UNDEFINED: u32 = 0;
pub const XEXSIDE_BID: u32 = 1;
pub const XEXSIDE_ASK: u32 = 2;
pub const XBAT_INVALID: u32 = 0;
pub const XBAT_BID: u32 = 1;
pub const XBAT_ASK: u32 = 2;
pub const XBAT_TRADE: u32 = 3;
pub const XMSEG_INVALID: u32 = 0;
pub const XMSEG_CQS: u32 = 1;
pub const XMSEG_NASDAQ_GLOBAL: u32 = 2;
pub const XMSEG_NASDAQ_GLOBAL_SELECT: u32 = 3;
pub const XMSEG_NASDAQ_CAPITAL: u32 = 4;
pub const XMSEG_NYSE: u32 = 5;
pub const XMSEG_ARCA: u32 = 6;
pub const XMSEG_AMEX: u32 = 7;
pub const XMSEG_AIM3: u32 = 8;
pub const XMSEG_AIMI: u32 = 9;
pub const XMSEG_AMSM: u32 = 10;
pub const XMSEG_ASQ1: u32 = 11;
pub const XMSEG_ASQ2: u32 = 12;
pub const XMSEG_ASQN: u32 = 13;
pub const XMSEG_ASX1: u32 = 14;
pub const XMSEG_ASX2: u32 = 15;
pub const XMSEG_ASXN: u32 = 16;
pub const XMSEG_CNVE: u32 = 17;
pub const XMSEG_CRNR: u32 = 18;
pub const XMSEG_CRTR: u32 = 19;
pub const XMSEG_CWNR: u32 = 20;
pub const XMSEG_CWNU: u32 = 21;
pub const XMSEG_CWTR: u32 = 22;
pub const XMSEG_CWTS: u32 = 23;
pub const XMSEG_CWTU: u32 = 24;
pub const XMSEG_EQS: u32 = 25;
pub const XMSEG_ESET: u32 = 26;
pub const XMSEG_ESIOB: u32 = 27;
pub const XMSEG_ESQX: u32 = 28;
pub const XMSEG_ETC2: u32 = 29;
pub const XMSEG_ETCS: u32 = 30;
pub const XMSEG_ETCU: u32 = 31;
pub const XMSEG_ETF2: u32 = 32;
pub const XMSEG_ETFS: u32 = 33;
pub const XMSEG_ETFU: u32 = 34;
pub const XMSEG_GILT: u32 = 35;
pub const XMSEG_INSD: u32 = 36;
pub const XMSEG_IOB: u32 = 37;
pub const XMSEG_IOBE: u32 = 38;
pub const XMSEG_IOBU: u32 = 39;
pub const XMSEG_IRSQ: u32 = 40;
pub const XMSEG_IRSU: u32 = 41;
pub const XMSEG_ITBB: u32 = 42;
pub const XMSEG_ITBU: u32 = 43;
pub const XMSEG_ITR: u32 = 44;
pub const XMSEG_LVSD: u32 = 45;
pub const XMSEG_MISC: u32 = 46;
pub const XMSEG_MISL: u32 = 47;
pub const XMSEG_NSTS: u32 = 48;
pub const XMSEG_ODTT: u32 = 49;
pub const XMSEG_PSNR: u32 = 50;
pub const XMSEG_PSTR: u32 = 51;
pub const XMSEG_SEAQ: u32 = 52;
pub const XMSEG_SEQ1: u32 = 53;
pub const XMSEG_SEQ2: u32 = 54;
pub const XMSEG_SET0: u32 = 55;
pub const XMSEG_SET1: u32 = 56;
pub const XMSEG_SET2: u32 = 57;
pub const XMSEG_SET3: u32 = 58;
pub const XMSEG_SFM1: u32 = 59;
pub const XMSEG_SFM2: u32 = 60;
pub const XMSEG_SFM3: u32 = 61;
pub const XMSEG_SFM4: u32 = 62;
pub const XMSEG_SSMM: u32 = 63;
pub const XMSEG_SSMU: u32 = 64;
pub const XMSEG_SSQ3: u32 = 65;
pub const XMSEG_SSQ4: u32 = 66;
pub const XMSEG_SSX3: u32 = 67;
pub const XMSEG_SSX4: u32 = 68;
pub const XMSEG_STBS: u32 = 69;
pub const XMSEG_STMM: u32 = 70;
pub const XMSEG_TEST: u32 = 71;
pub const XMSEG_UKCP: u32 = 72;
pub const XMSEG_UKGT: u32 = 73;
pub const XMSEG_ZA01: u32 = 74;
pub const XMSEG_ZA02: u32 = 75;
pub const XMSEG_ZA03: u32 = 76;
pub const XMSEG_ZA04: u32 = 77;
pub const XMSEG_ZA11: u32 = 78;
pub const XMSEG_XLON: u32 = 79;
pub const XMSEG_MTAA: u32 = 80;
pub const XMSEG_XOSL: u32 = 81;
pub const XMSEG_XAMS: u32 = 82;
pub const XMSEG_XBRU: u32 = 83;
pub const XMSEG_XLIS: u32 = 84;
pub const XMSEG_XPAR: u32 = 85;
pub const XMSEG_WBAH: u32 = 86;
pub const XMSEG_XDUB: u32 = 87;
pub const XMSEG_XETR: u32 = 88;
pub const XMSEG_XBUD: u32 = 89;
pub const XMSEG_XCSE: u32 = 90;
pub const XMSEG_XHEL: u32 = 91;
pub const XMSEG_XLUX: u32 = 92;
pub const XMSEG_XMCE: u32 = 93;
pub const XMSEG_XPRA: u32 = 94;
pub const XMSEG_XSTO: u32 = 95;
pub const XMSEG_XSWX: u32 = 96;
pub const XMSEG_XVTX: u32 = 97;
pub const XMSEG_TSX: u32 = 98;
pub const XMSEG_VENTURE: u32 = 99;
pub const XMSEG_CNSX: u32 = 100;
pub const XMSEG_OMEGA: u32 = 101;
pub const XMSEG_INCP: u32 = 102;
pub const XMSEG_ALPHA: u32 = 103;
pub const XMSEG_ALPHA_VP: u32 = 104;
pub const XMSEG_IT_ETF: u32 = 105;
pub const XMSEG_IT_MOT: u32 = 106;
pub const XMSEG_WQUO: u32 = 107;
pub const XMSEG_IT_MAC: u32 = 108;
pub const XMSEG_IT_SEDEX: u32 = 109;
pub const XMSEG_IT_OPA: u32 = 110;
pub const XMSEG_IT_TAH: u32 = 111;
pub const XMSEG_JSE_BLUE_CHIP: u32 = 112;
pub const XMSEG_JSE_MID_CAP: u32 = 113;
pub const XMSEG_JSE_SMALL_CAP: u32 = 114;
pub const XMSEG_JSE_SPECIALIST: u32 = 115;
pub const XMSEG_JSE_AFRICA_BD: u32 = 116;
pub const XMSEG_JSE_ETF: u32 = 117;
pub const XMSEG_IBSG: u32 = 118;
pub const XMSEG_OSLO_OBMA: u32 = 119;
pub const XMSEG_OSLO_OBST: u32 = 120;
pub const XMSEG_OSLO_OBNW: u32 = 121;
pub const XMSEG_OSLO_OBPC: u32 = 122;
pub const XMSEG_OSLO_OBWR: u32 = 123;
pub const XMSEG_OSLO_OBEF: u32 = 124;
pub const XMSEG_OSLO_OBEN: u32 = 125;
pub const XMSEG_OSLO_OAX: u32 = 126;
pub const XMSEG_OSLO_MERK: u32 = 127;
pub const XMSEG_FNEE: u32 = 128;
pub const XMSEG_XTAL: u32 = 129;
pub const XMSEG_FNLT: u32 = 130;
pub const XMSEG_XRIS: u32 = 131;
pub const XMSEG_XSAT: u32 = 132;
pub const XMSEG_FNFI: u32 = 133;
pub const XMSEG_XLIT: u32 = 134;
pub const XMSEG_FNIS: u32 = 135;
pub const XMSEG_FNDK: u32 = 136;
pub const XMSEG_XICE: u32 = 137;
pub const XMSEG_FNLV: u32 = 138;
pub const XMSEG_FNSE: u32 = 139;
pub const XMSEG_MWNU: u32 = 140;
pub const XMSEG_EUET: u32 = 141;
pub const XMSEG_IECR: u32 = 142;
pub const XMSEG_HGS1: u32 = 143;
pub const XMSEG_HGS2: u32 = 144;
pub const XMSEG_HGS3: u32 = 145;
pub const XMSEG_RCNT: u32 = 146;
pub const XMSEG_REOD: u32 = 147;
pub const XMSEG_EXCQ: u32 = 148;
pub const XMSEG_EXED: u32 = 149;
pub const XMSEG_EXPQ: u32 = 150;
pub const XMSEG_EXPE: u32 = 151;
pub const XMSEG_AIM: u32 = 152;
pub const XMSEG_MWNM: u32 = 153;
pub const XMSEG_SUNM: u32 = 154;
pub const XMSEG_IECF: u32 = 155;
pub const XMSEG_EUE2: u32 = 156;
pub const XMSEG_AEQUITAS: u32 = 157;
pub const XMSEG_GRNC: u32 = 158;
pub const XMSEG_GRNE: u32 = 159;
pub const XMSEG_GRPQ: u32 = 160;
pub const XMSEG_GRPE: u32 = 161;
pub const XMSEG_XWAR: u32 = 162;
pub const XMSEG_SUKM: u32 = 163;
pub const XMSEG_SUKP: u32 = 164;
pub const XMSEG_MXPQ: u32 = 165;
pub const XMSEG_MXPE: u32 = 166;
pub const XMSEG_GRMQ: u32 = 167;
pub const XMSEG_MXPM: u32 = 168;
pub const XMSEG_CWNM: u32 = 169;
pub const XMSEG_RCNM: u32 = 170;
pub const XMSEG_CWAT: u32 = 171;
pub const XMSEG_EUE3: u32 = 172;
pub const XMSEG_NASDAQ_CA: u32 = 173;
pub const XMSEG_IOBS: u32 = 174;
pub const XMSEG_IOBT: u32 = 175;
pub const XMSEG_ECE1: u32 = 176;
pub const XMSEG_ECE2: u32 = 177;
pub const XMSEG_ECE3: u32 = 178;
pub const XMSEG_IT_GEM: u32 = 179;
pub const XMSEG_IT_AIM: u32 = 180;
pub const XMSEG_IT_MIV: u32 = 181;
pub const XMSEG_MWTU: u32 = 182;
pub const XMSEG_GES1: u32 = 183;
pub const XMSEG_TSET: u32 = 184;
pub const XMSEG_ECPR: u32 = 185;
pub const XMSEG_ETPR: u32 = 186;
pub const XOIMBT_INVALID: u32 = 0;
pub const XOIMBT_NONE: u32 = 1;
pub const XOIMBT_BUY: u32 = 2;
pub const XOIMBT_SELL: u32 = 3;
pub const XOIMBT_HIDDEN: u32 = 4;
pub const XOIMBT_CROSS: u32 = 5;
pub const XOIMBT_SHORT: u32 = 6;
pub const XOIMBAT_INVALID: u32 = 0;
pub const XOIMBAT_OPEN: u32 = 1;
pub const XOIMBAT_CLOSE: u32 = 2;
pub const XOIMBAT_HALT: u32 = 3;
pub const XOIMBAT_MARKET: u32 = 4;
pub const XOIMBAT_IPO: u32 = 5;
pub const XOIMBAT_INTRADAY: u32 = 6;
pub const XOIMBAT_BLOCK: u32 = 7;
pub const XOIMBAT_DIRECTED: u32 = 8;
pub const XOIMBAT_DIRECTED_PIM: u32 = 9;
pub const XOIMBAT_FLASH: u32 = 10;
pub const XOIMBAT_EXPOSURE: u32 = 11;
pub const XOIMBAT_COLLAR: u32 = 12;
pub const XOIMBAT_FACILITATED: u32 = 13;
pub const XOIMBAT_VOLATILITY: u32 = 14;
pub const XOIMBAT_SOLICITED: u32 = 15;
pub const XOIMBAT_PIM: u32 = 17;
pub const XOIMBAT_ROUTE: u32 = 19;
pub const XOIMBAT_LIQUIDITY_REFRESH: u32 = 20;
pub const XOIMBAT_COA: u32 = 21;
pub const XOIMBAT_RFQ: u32 = 22;
pub const XOIMBAT_SUM: u32 = 23;
pub const XOIMBAT_BAM: u32 = 24;
pub const XOIMBAT_RFC: u32 = 25;
pub const XOIMBAT_EARLY: u32 = 26;
pub const XOIMBAT_ETC: u32 = 27;
pub const XTRST_INVALID: u32 = 0;
pub const XTRST_OPEN: u32 = 1;
pub const XTRST_CLOSED: u32 = 2;
pub const XTRST_HALTED: u32 = 3;
pub const XTRST_ACTIVE: u32 = 4;
pub const XTRST_INACTIVE: u32 = 5;
pub const XTRST_AUCTION: u32 = 6;
pub const XTRST_MAX: u32 = 7;
pub const XTRSST_REGULAR: u32 = 0;
pub const XTRSST_OPEN_REGULAR: u32 = 0;
pub const XTRSST_OPEN_AUCTION: u32 = 4;
pub const XTRSST_OPEN_FAST: u32 = 5;
pub const XTRSST_OPEN_SLOW: u32 = 6;
pub const XTRSST_OPEN_MORNING: u32 = 7;
pub const XTRSST_OPEN_AFTERNOON: u32 = 8;
pub const XTRSST_OPEN_PRE_MARKET: u32 = 9;
pub const XTRSST_OPEN_POST_MARKET: u32 = 10;
pub const XTRSST_CLOSED_REGULAR: u32 = 0;
pub const XTRSST_CLOSED_PRE_MARKET: u32 = 4;
pub const XTRSST_CLOSED_POST_MARKET: u32 = 5;
pub const XTRSST_CLOSED_AUCTION: u32 = 6;
pub const XTRSST_CLOSED_IMBALANCE: u32 = 7;
pub const XTRSST_CLOSED_ROTATION: u32 = 8;
pub const XTRSST_CLOSED_REGULAR_CNCL: u32 = 9;
pub const XTRSST_CLOSED_PRE_MARKET_NOCNL: u32 = 10;
pub const XTRSST_CLOSED_MORNING: u32 = 11;
pub const XTRSST_CLOSED_PRE_MARKET_AFTERNOON: u32 = 12;
pub const XTRSST_CLOSED_TRADING_AT_LAST: u32 = 13;
pub const XTRSST_HALTED_REGULAR: u32 = 0;
pub const XTRSST_HALTED_QUOTING_ALLOWED: u32 = 4;
pub const XTRSST_HALTED_REGULATORY: u32 = 5;
pub const XTRSST_HALTED_QUOTING_ALLOWED_REGULATORY: u32 = 6;
pub const XTRSST_ACTIVE_REGULAR: u32 = 0;
pub const XTRSST_ACTIVE_CLOSING_ORDERS_ONLY: u32 = 4;
pub const XTRSST_INACTIVE_REGULAR: u32 = 0;
pub const XTRSST_INACTIVE_SUSPENDED: u32 = 4;
pub const XTRSST_INACTIVE_DELISTED: u32 = 5;
pub const XTRSST_INACTIVE_EXPIRED: u32 = 6;
pub const XTRSST_AUCTION_REGULAR: u32 = 0;
pub const XTRSST_AUCTION_OPENING: u32 = 4;
pub const XTRSST_AUCTION_CALL_OPENING: u32 = 5;
pub const XTRSST_AUCTION_CLOSING: u32 = 6;
pub const XTRSST_AUCTION_CALL_CLOSING: u32 = 7;
pub const XTRSST_AUCTION_INTRADAY: u32 = 8;
pub const XTRSST_AUCTION_VOLATILITY: u32 = 9;
pub const XTRSST_AUCTION_CALL_INTRADAY: u32 = 10;
pub const XTRSST_AUCTION_CALL_VOLATILITY: u32 = 11;
pub const XTRSST_AUCTION_CALL_CLOSING_POST: u32 = 12;
pub const XTRSST_AUCTION_CALL_CLOSING_NOCNL: u32 = 13;
pub const XTRSST_AUCTION_CALL_CLOSING_RANDOM: u32 = 14;
pub const XTRSST_AUCTION_CALL_OPENING_NOCNL: u32 = 15;
pub const XLNST_INVALID: u32 = 0;
pub const XLNST_UP: u32 = 1;
pub const XLNST_DOWN: u32 = 2;
pub const XLNST_PAUSED: u32 = 3;
pub const XLNST_IN_RECOVERY: u32 = 4;
pub const XDRMA_INVALID: u32 = 0;
pub const XDRMA_PRICE_TIME: u32 = 1;
pub const XDRMA_PRO_RATE: u32 = 2;
pub const XSIDE_UNDEFINED: u32 = 0;
pub const XSIDE_BID: u32 = 1;
pub const XSIDE_ASK: u32 = 2;
pub const XSIDE_BID_AND_ASK: u32 = 3;
pub const XFLD_SESS_CLIENT_AFFINITY_MASK: u64 = 72057697117143040;
pub const XFLD_SESS_CLIENT_BG_THREAD_AFFINITY_MASK: u64 = 72057731476881408;
pub const XFLD_SESS_CLIENT_BG_THREAD_PRIORITY: u64 = 72057735771848704;
pub const XFLD_SESS_CLIENT_BUILD: u64 = 72057624102699008;
pub const XFLD_SESS_CLIENT_CPU_COUNT: u64 = 72057692822175744;
pub const XFLD_SESS_CLIENT_HB_THREAD_AFFINITY_MASK: u64 = 72057744361783296;
pub const XFLD_SESS_CLIENT_HB_THREAD_PRIORITY: u64 = 72057748656750592;
pub const XFLD_SESS_CLIENT_MAJOR_VERSION: u64 = 72057611217797120;
pub const XFLD_SESS_CLIENT_MINOR_VERSION: u64 = 72057615512764416;
pub const XFLD_SESS_CLIENT_REVISION: u64 = 72057619807731712;
pub const XFLD_SESS_CLIENT_THREAD_PRIORITY: u64 = 72057701412110336;
pub const XFLD_SESS_CLIENT_VERSION_STRING: u64 = 72057654167470080;
pub const XFLD_SESS_DISABLE_RECONNECT: u64 = 72057667052371968;
pub const XFLD_SESS_REPLAY_EXCHANGE_OFFSET: u64 = 72057718591979520;
pub const XFLD_SESS_REPLAY_L2_COMPOSITE: u64 = 72057727181914112;
pub const XFLD_SESS_REPLAY_QUOTE_MONTAGE: u64 = 72057722886946816;
pub const XFLD_SESS_REPLAY_START: u64 = 72057714297012224;
pub const XFLD_SESS_REPLAY_UBBO: u64 = 72057740066816000;
pub const XFLD_SESS_SERVER_BUILD: u64 = 72057641282568192;
pub const XFLD_SESS_SERVER_MAJOR_VERSION: u64 = 72057628397666304;
pub const XFLD_SESS_SERVER_MINOR_VERSION: u64 = 72057632692633600;
pub const XFLD_SESS_SERVER_NAME: u64 = 72057606922829824;
pub const XFLD_SESS_SERVER_REVISION: u64 = 72057636987600896;
pub const XFLD_SESS_SERVER_VERSION_STRING: u64 = 72057658462437376;
pub const XFLD_SESS_SESSION_TYPE: u64 = 72057662757404672;
pub const XFLD_SESS_SET_INDEX: u64 = 72057705707077632;
pub const XFLD_SESS_STATUS: u64 = 72057602627862528;
pub const XFLD_SESS_TURNKEY: u64 = 72057649872502784;
pub const XFLD_SESS_TKR_MARKET_STATUS_CALLBACKS: u64 = 72339081899540480;
pub const XFLD_SESS_TKR_MAX_PB_ROW_LEVEL: u64 = 72339086194507776;
pub const XFLD_SESS_TKR_MAX_PRICE_BOOK_DEPTH: u64 = 72339077604573184;
pub const XFLD_RT_CONTAINER_TYPE: u64 = 144115205255725056;
pub const XFLD_RT_SLOT_COUNT: u64 = 144115209550692352;
pub const XFLD_RT_TURNKEY: u64 = 144115200960757760;
pub const XFLD_RT_EQTY_ALTERNATE_ID1: u64 = 144396680232435712;
pub const XFLD_RT_EQTY_ALTERNATE_ID2: u64 = 144396684527403008;
pub const XFLD_RT_EQTY_ASK_CUSTOMER_SIZE: u64 = 144397045304655872;
pub const XFLD_RT_EQTY_ASK_EXCHANGE: u64 = 144396688822370304;
pub const XFLD_RT_EQTY_ASK_HITIME: u64 = 144397487686287360;
pub const XFLD_RT_EQTY_ASK_MARKET_MAKER_SIZE: u64 = 144397053894590464;
pub const XFLD_RT_EQTY_ASK_PRICE: u64 = 144396693117337600;
pub const XFLD_RT_EQTY_ASK_PROFESSIONAL_SIZE: u64 = 144397049599623168;
pub const XFLD_RT_EQTY_ASK_SIZE: u64 = 144396697412304896;
pub const XFLD_RT_EQTY_ASK_TRADE_VENUE: u64 = 144397401786941440;
pub const XFLD_RT_EQTY_BID_CUSTOMER_SIZE: u64 = 144397058189557760;
pub const XFLD_RT_EQTY_BID_EXCHANGE: u64 = 144396714592174080;
pub const XFLD_RT_EQTY_BID_HITIME: u64 = 144397491981254656;
pub const XFLD_RT_EQTY_BID_MARKET_MAKER_SIZE: u64 = 144397066779492352;
pub const XFLD_RT_EQTY_BID_PRICE: u64 = 144396718887141376;
pub const XFLD_RT_EQTY_BID_PROFESSIONAL_SIZE: u64 = 144397062484525056;
pub const XFLD_RT_EQTY_BID_SIZE: u64 = 144396723182108672;
pub const XFLD_RT_EQTY_BID_TRADE_VENUE: u64 = 144397406081908736;
pub const XFLD_RT_EQTY_CLOSE_EXCH: u64 = 144396744656945152;
pub const XFLD_RT_EQTY_CLOSE_HITIME: u64 = 144397513456091136;
pub const XFLD_RT_EQTY_CLOSE_PRICE: u64 = 144396748951912448;
pub const XFLD_RT_EQTY_CLOSE_SIZE: u64 = 144397036714721280;
pub const XFLD_RT_EQTY_CLOSE_TRADE_VENUE: u64 = 144397410376876032;
pub const XFLD_RT_EQTY_CURRENCY: u64 = 144396761836814336;
pub const XFLD_RT_EQTY_EXCH_TIME_OFFSET: u64 = 144397019534852096;
pub const XFLD_RT_EQTY_GROUP_ID: u64 = 144397191333543936;
pub const XFLD_RT_EQTY_HIGH_EXCH: u64 = 144396779016683520;
pub const XFLD_RT_EQTY_HIGH_HITIME: u64 = 144397504866156544;
pub const XFLD_RT_EQTY_HIGH_PRICE: u64 = 144396783311650816;
pub const XFLD_RT_EQTY_HIGH_TRADE_VENUE: u64 = 144397414671843328;
pub const XFLD_RT_EQTY_IMBALANCE_AUCTION_END_HITIME: u64 = 144397161268772864;
pub const XFLD_RT_EQTY_IMBALANCE_AUCTION_ID: u64 = 144397152678838272;
pub const XFLD_RT_EQTY_IMBALANCE_AUCTION_OWNER: u64 = 144397165563740160;
pub const XFLD_RT_EQTY_IMBALANCE_AUCTION_START_HITIME: u64 = 144397156973805568;
pub const XFLD_RT_EQTY_IMBALANCE_AUCTION_TYPE: u64 = 144397126909034496;
pub const XFLD_RT_EQTY_IMBALANCE_FAR_PRICE: u64 = 144397148383870976;
pub const XFLD_RT_EQTY_IMBALANCE_MARKET_ORDER_TYPE: u64 = 144397474801385472;
pub const XFLD_RT_EQTY_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 144397470506418176;
pub const XFLD_RT_EQTY_IMBALANCE_NEAR_PRICE: u64 = 144397144088903680;
pub const XFLD_RT_EQTY_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 144397290117791744;
pub const XFLD_RT_EQTY_IMBALANCE_PAIRED_VOLUME: u64 = 144397135498969088;
pub const XFLD_RT_EQTY_IMBALANCE_QUALS: u64 = 144397109729165312;
pub const XFLD_RT_EQTY_IMBALANCE_RECEIVE_HITIME: u64 = 144397118319099904;
pub const XFLD_RT_EQTY_IMBALANCE_REFERENCE_PRICE: u64 = 144397139793936384;
pub const XFLD_RT_EQTY_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 144397294412759040;
pub const XFLD_RT_EQTY_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 144397320182562816;
pub const XFLD_RT_EQTY_IMBALANCE_REG_PAIRED_VOLUME: u64 = 144397311592628224;
pub const XFLD_RT_EQTY_IMBALANCE_REG_TYPE: u64 = 144397298707726336;
pub const XFLD_RT_EQTY_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 144397303002693632;
pub const XFLD_RT_EQTY_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 144397315887595520;
pub const XFLD_RT_EQTY_IMBALANCE_REG_VOLUME: u64 = 144397307297660928;
pub const XFLD_RT_EQTY_IMBALANCE_SEQUENCE: u64 = 144397114024132608;
pub const XFLD_RT_EQTY_IMBALANCE_TYPE: u64 = 144397122614067200;
pub const XFLD_RT_EQTY_IMBALANCE_UNPAIRED_TYPE: u64 = 144397281527857152;
pub const XFLD_RT_EQTY_IMBALANCE_UNPAIRED_VOLUME: u64 = 144397285822824448;
pub const XFLD_RT_EQTY_IMBALANCE_VOLUME: u64 = 144397131204001792;
pub const XFLD_RT_EQTY_INSTRUMENT_STATUS: u64 = 144396929340538880;
pub const XFLD_RT_EQTY_IOI_ASK_OFFSET_PRICE: u64 = 144397380312104960;
pub const XFLD_RT_EQTY_IOI_ASK_ORDER_REF: u64 = 144397358837268480;
pub const XFLD_RT_EQTY_IOI_ASK_QUALS: u64 = 144397367427203072;
pub const XFLD_RT_EQTY_IOI_BID_OFFSET_PRICE: u64 = 144397376017137664;
pub const XFLD_RT_EQTY_IOI_BID_ORDER_REF: u64 = 144397354542301184;
pub const XFLD_RT_EQTY_IOI_BID_QUALS: u64 = 144397363132235776;
pub const XFLD_RT_EQTY_IOI_OFFSET_PRICE_TYPE: u64 = 144397371722170368;
pub const XFLD_RT_EQTY_IOI_ORDER_REF_TYPE: u64 = 144397350247333888;
pub const XFLD_RT_EQTY_KEY: u64 = 144396903570735104;
pub const XFLD_RT_EQTY_KEY_STRING: u64 = 144396920750604288;
pub const XFLD_RT_EQTY_LAST_EXCH: u64 = 144396787606618112;
pub const XFLD_RT_EQTY_LAST_HITIME: u64 = 144397496276221952;
pub const XFLD_RT_EQTY_LAST_PRICE: u64 = 144396791901585408;
pub const XFLD_RT_EQTY_LAST_QUALS: u64 = 144397436146679808;
pub const XFLD_RT_EQTY_LAST_SEQUENCE: u64 = 144397440441647104;
pub const XFLD_RT_EQTY_LAST_SIZE: u64 = 144396796196552704;
pub const XFLD_RT_EQTY_LAST_TRADE_VENUE: u64 = 144397418966810624;
pub const XFLD_RT_EQTY_LIMIT_PRICE_HITIME: u64 = 144397522046025728;
pub const XFLD_RT_EQTY_LOT_SIZE: u64 = 144397023829819392;
pub const XFLD_RT_EQTY_LOWER_LIMIT_PRICE: u64 = 144397075369426944;
pub const XFLD_RT_EQTY_LOW_EXCH: u64 = 144396809081454592;
pub const XFLD_RT_EQTY_LOW_HITIME: u64 = 144397509161123840;
pub const XFLD_RT_EQTY_LOW_PRICE: u64 = 144396813376421888;
pub const XFLD_RT_EQTY_LOW_TRADE_VENUE: u64 = 144397423261777920;
pub const XFLD_RT_EQTY_MARKET_STATUS: u64 = 144396937930473472;
pub const XFLD_RT_EQTY_MAX_QUOTE_RATE: u64 = 144397028124786688;
pub const XFLD_RT_EQTY_OPEN_EXCH: u64 = 144396817671389184;
pub const XFLD_RT_EQTY_OPEN_HITIME: u64 = 144397517751058432;
pub const XFLD_RT_EQTY_OPEN_INTEREST: u64 = 144396821966356480;
pub const XFLD_RT_EQTY_OPEN_PRICE: u64 = 144396826261323776;
pub const XFLD_RT_EQTY_OPEN_TRADE_VENUE: u64 = 144397427556745216;
pub const XFLD_RT_EQTY_ORDER_REF_ID_TYPE: u64 = 144397032419753984;
pub const XFLD_RT_EQTY_PREV_CLOSE: u64 = 144396907865702400;
pub const XFLD_RT_EQTY_PRICE_TYPE: u64 = 144396834851258368;
pub const XFLD_RT_EQTY_PRIME_COUNTRY: u64 = 144397384607072256;
pub const XFLD_RT_EQTY_PRIME_EXCH: u64 = 144396946520408064;
pub const XFLD_RT_EQTY_PRIME_TRADE_VENUE: u64 = 144397431851712512;
pub const XFLD_RT_EQTY_QUOTE_QUALS: u64 = 144397083959361536;
pub const XFLD_RT_EQTY_QUOTE_SEQUENCE: u64 = 144397088254328832;
pub const XFLD_RT_EQTY_REF_CLOSE_PRICE: u64 = 144396847736160256;
pub const XFLD_RT_EQTY_RELATIVE_LIMIT_HITIME: u64 = 144397526340993024;
pub const XFLD_RT_EQTY_RELATIVE_LIMIT_PRICE: u64 = 144397174153674752;
pub const XFLD_RT_EQTY_RELATIVE_LIMIT_PRICE_TYPE: u64 = 144397178448642048;
pub const XFLD_RT_EQTY_RELATIVE_LIMIT_TYPE: u64 = 144397182743609344;
pub const XFLD_RT_EQTY_SHORT_SALE_RESTRICTED: u64 = 144396950815375360;
pub const XFLD_RT_EQTY_SIGLL_ASK_DARK: u64 = 144397393197006848;
pub const XFLD_RT_EQTY_SIGLL_BID_DARK: u64 = 144397397491974144;
pub const XFLD_RT_EQTY_SIGLL_STATUS: u64 = 144397388902039552;
pub const XFLD_RT_EQTY_SIGNUM_EXCH_ASK_COUNT: u64 = 144397534930927616;
pub const XFLD_RT_EQTY_SIGNUM_EXCH_BID_COUNT: u64 = 144397530635960320;
pub const XFLD_RT_EQTY_SIGQF_ASK_SHORT_FUSE: u64 = 144397328772497408;
pub const XFLD_RT_EQTY_SIGQF_BID_SHORT_FUSE: u64 = 144397333067464704;
pub const XFLD_RT_EQTY_SIGQF_STATUS: u64 = 144397324477530112;
pub const XFLD_RT_EQTY_SIGQV_ASK_UP_NEXT: u64 = 144397341657399296;
pub const XFLD_RT_EQTY_SIGQV_BID_UP_NEXT: u64 = 144397345952366592;
pub const XFLD_RT_EQTY_SIGQV_STATUS: u64 = 144397337362432000;
pub const XFLD_RT_EQTY_SYMBOL_TYPE: u64 = 144396912160669696;
pub const XFLD_RT_EQTY_TOTAL_CHANGE: u64 = 144396856326094848;
pub const XFLD_RT_EQTY_TOTAL_VOLUME: u64 = 144397479096352768;
pub const XFLD_RT_EQTY_TOTAL_VOLUME_FILTERED: u64 = 144397483391320064;
pub const XFLD_RT_EQTY_TRADED_VALUE: u64 = 144396869210996736;
pub const XFLD_RT_EQTY_TRADE_EXCH: u64 = 144397453326548992;
pub const XFLD_RT_EQTY_TRADE_HITIME: u64 = 144397500571189248;
pub const XFLD_RT_EQTY_TRADE_PRICE: u64 = 144397444736614400;
pub const XFLD_RT_EQTY_TRADE_QUALS: u64 = 144397092549296128;
pub const XFLD_RT_EQTY_TRADE_SEQUENCE: u64 = 144397096844263424;
pub const XFLD_RT_EQTY_TRADE_SIZE: u64 = 144397449031581696;
pub const XFLD_RT_EQTY_TRADE_TICK_FLAGS: u64 = 144396864916029440;
pub const XFLD_RT_EQTY_TRADE_TRADE_VENUE: u64 = 144397466211450880;
pub const XFLD_RT_EQTY_TRADING_SESSION_DATE: u64 = 144397169858707456;
pub const XFLD_RT_EQTY_UPDATE_RECEIVE_HITIME: u64 = 144397101139230720;
pub const XFLD_RT_EQTY_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 144397105434198016;
pub const XFLD_RT_EQTY_UPPER_LIMIT_PRICE: u64 = 144397071074459648;
pub const XFLD_RT_EQTY_VWAP_VOLUME: u64 = 144396886390865920;
pub const XFLD_RT_XS_ALTERNATE_ID1: u64 = 144678150914179072;
pub const XFLD_RT_XS_ALTERNATE_ID2: u64 = 144678155209146368;
pub const XFLD_RT_XS_ITEM_KEY: u64 = 144678146619211776;
pub const XFLD_RT_XS_ITEM_KEY_STRING: u64 = 144678168094048256;
pub const XFLD_RT_XS_KEY: u64 = 144678159504113664;
pub const XFLD_RT_XS_KEY_STRING: u64 = 144678172389015552;
pub const XFLD_RT_XS_SYMBOL_COUNT: u64 = 144678142324244480;
pub const XFLD_RT_XS_UPDATE_RECEIVE_HITIME: u64 = 144678176683982848;
pub const XFLD_RT_XS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 144678180978950144;
pub const XFLD_RT_OBS_ALTERNATE_ID1: u64 = 144959741855006720;
pub const XFLD_RT_OBS_ALTERNATE_ID2: u64 = 144959746149974016;
pub const XFLD_RT_OBS_ASK_COUNT: u64 = 144959690315399168;
pub const XFLD_RT_OBS_ASK_COUNTRY: u64 = 144959621595922432;
pub const XFLD_RT_OBS_ASK_EXCH: u64 = 144959617300955136;
pub const XFLD_RT_OBS_ASK_IMPLIED: u64 = 144959754739908608;
pub const XFLD_RT_OBS_ASK_MMID: u64 = 144959643070758912;
pub const XFLD_RT_OBS_ASK_ORDER_PRIORITY: u64 = 144959836344287232;
pub const XFLD_RT_OBS_ASK_ORDER_REF: u64 = 144959681725464576;
pub const XFLD_RT_OBS_ASK_ORIGIN_HITIME: u64 = 144959874998992896;
pub const XFLD_RT_OBS_ASK_PRICE: u64 = 144959625890889728;
pub const XFLD_RT_OBS_ASK_SIGLL_DARK: u64 = 144959857819123712;
pub const XFLD_RT_OBS_ASK_SIZE: u64 = 144959630185857024;
pub const XFLD_RT_OBS_ASK_TRADE_VENUE: u64 = 144959844934221824;
pub const XFLD_RT_OBS_BID_COUNT: u64 = 144959694610366464;
pub const XFLD_RT_OBS_BID_COUNTRY: u64 = 144959651660693504;
pub const XFLD_RT_OBS_BID_EXCH: u64 = 144959647365726208;
pub const XFLD_RT_OBS_BID_IMPLIED: u64 = 144959759034875904;
pub const XFLD_RT_OBS_BID_MMID: u64 = 144959673135529984;
pub const XFLD_RT_OBS_BID_ORDER_PRIORITY: u64 = 144959840639254528;
pub const XFLD_RT_OBS_BID_ORDER_REF: u64 = 144959686020431872;
pub const XFLD_RT_OBS_BID_ORIGIN_HITIME: u64 = 144959879293960192;
pub const XFLD_RT_OBS_BID_PRICE: u64 = 144959655955660800;
pub const XFLD_RT_OBS_BID_SIGLL_DARK: u64 = 144959862114091008;
pub const XFLD_RT_OBS_BID_SIZE: u64 = 144959660250628096;
pub const XFLD_RT_OBS_BID_TRADE_VENUE: u64 = 144959849229189120;
pub const XFLD_RT_OBS_BOOK_CROSSED: u64 = 144959720380170240;
pub const XFLD_RT_OBS_DEPTH: u64 = 144959883588927488;
pub const XFLD_RT_OBS_EXCH_TIME_OFFSET: u64 = 144959797689581568;
pub const XFLD_RT_OBS_INCLUDE_IMPLIED: u64 = 144959767624810496;
pub const XFLD_RT_OBS_INSTRUMENT_STATUS: u64 = 144959771919777792;
pub const XFLD_RT_OBS_KEY: u64 = 144959716085202944;
pub const XFLD_RT_OBS_KEY_STRING: u64 = 144959733265072128;
pub const XFLD_RT_OBS_LOT_SIZE: u64 = 144959784804679680;
pub const XFLD_RT_OBS_MARKET_STATUS: u64 = 144959776214745088;
pub const XFLD_RT_OBS_ORDER_REF_ID_TYPE: u64 = 144959724675137536;
pub const XFLD_RT_OBS_PRICE_TYPE: u64 = 144959703200301056;
pub const XFLD_RT_OBS_PRIME_COUNTRY: u64 = 144959853524156416;
pub const XFLD_RT_OBS_PRIME_EXCH: u64 = 144959806279516160;
pub const XFLD_RT_OBS_PRIME_TRADE_VENUE: u64 = 144959870704025600;
pub const XFLD_RT_OBS_SHORT_SALE_RESTRICTED: u64 = 144959780509712384;
pub const XFLD_RT_OBS_SIGLL_STATUS: u64 = 144959866409058304;
pub const XFLD_RT_OBS_SYMBOL_TYPE: u64 = 144959750444941312;
pub const XFLD_RT_OBS_UPDATE_RECEIVE_HITIME: u64 = 144959827754352640;
pub const XFLD_RT_OBS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 144959832049319936;
pub const XFLD_RT_OBXS_ALTERNATE_ID1: u64 = 145241135227338752;
pub const XFLD_RT_OBXS_ALTERNATE_ID2: u64 = 145241139522306048;
pub const XFLD_RT_OBXS_ITEM_KEY: u64 = 145241096572633088;
pub const XFLD_RT_OBXS_ITEM_KEY_STRING: u64 = 145241113752502272;
pub const XFLD_RT_OBXS_KEY: u64 = 145241105162567680;
pub const XFLD_RT_OBXS_KEY_STRING: u64 = 145241126637404160;
pub const XFLD_RT_OBXS_ORDER_REF_ID_TYPE: u64 = 145241109457534976;
pub const XFLD_RT_OBXS_PRICE_TYPE: u64 = 145241100867600384;
pub const XFLD_RT_OBXS_SYMBOL_COUNT: u64 = 145241092277665792;
pub const XFLD_RT_OBXS_UPDATE_RECEIVE_HITIME: u64 = 145241143817273344;
pub const XFLD_RT_OBXS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 145241148112240640;
pub const XFLD_RT_PBS_ALTERNATE_ID1: u64 = 145522666038624256;
pub const XFLD_RT_PBS_ALTERNATE_ID2: u64 = 145522670333591552;
pub const XFLD_RT_PBS_ASK_COUNT: u64 = 145522614499016704;
pub const XFLD_RT_PBS_ASK_COUNTRY: u64 = 145522571549343744;
pub const XFLD_RT_PBS_ASK_CUSTOMER_VOLUME: u64 = 145522773412806656;
pub const XFLD_RT_PBS_ASK_EXCH: u64 = 145522567254376448;
pub const XFLD_RT_PBS_ASK_HITIME: u64 = 145523151369928704;
pub const XFLD_RT_PBS_ASK_IMPLIED: u64 = 145522678923526144;
pub const XFLD_RT_PBS_ASK_IMPLIED_VOLUME: u64 = 145522700398362624;
pub const XFLD_RT_PBS_ASK_MARKET_MAKER_VOLUME: u64 = 145522782002741248;
pub const XFLD_RT_PBS_ASK_ORDER_COUNT: u64 = 145522635973853184;
pub const XFLD_RT_PBS_ASK_PRICE: u64 = 145522575844311040;
pub const XFLD_RT_PBS_ASK_PROFESSIONAL_VOLUME: u64 = 145522777707773952;
pub const XFLD_RT_PBS_ASK_SIGLL_DARK: u64 = 145523125600124928;
pub const XFLD_RT_PBS_ASK_STATUS_INDEX: u64 = 145522824952414208;
pub const XFLD_RT_PBS_ASK_TRADE_VENUE: u64 = 145523112715223040;
pub const XFLD_RT_PBS_ASK_VOLUME: u64 = 145522717578231808;
pub const XFLD_RT_PBS_BID_COUNT: u64 = 145522618793984000;
pub const XFLD_RT_PBS_BID_COUNTRY: u64 = 145522593024180224;
pub const XFLD_RT_PBS_BID_CUSTOMER_VOLUME: u64 = 145522786297708544;
pub const XFLD_RT_PBS_BID_EXCH: u64 = 145522588729212928;
pub const XFLD_RT_PBS_BID_HITIME: u64 = 145523155664896000;
pub const XFLD_RT_PBS_BID_IMPLIED: u64 = 145522683218493440;
pub const XFLD_RT_PBS_BID_IMPLIED_VOLUME: u64 = 145522704693329920;
pub const XFLD_RT_PBS_BID_MARKET_MAKER_VOLUME: u64 = 145522794887643136;
pub const XFLD_RT_PBS_BID_ORDER_COUNT: u64 = 145522640268820480;
pub const XFLD_RT_PBS_BID_PRICE: u64 = 145522597319147520;
pub const XFLD_RT_PBS_BID_PROFESSIONAL_VOLUME: u64 = 145522790592675840;
pub const XFLD_RT_PBS_BID_SIGLL_DARK: u64 = 145523129895092224;
pub const XFLD_RT_PBS_BID_STATUS_INDEX: u64 = 145522829247381504;
pub const XFLD_RT_PBS_BID_TRADE_VENUE: u64 = 145523117010190336;
pub const XFLD_RT_PBS_BID_VOLUME: u64 = 145522721873199104;
pub const XFLD_RT_PBS_BOOK_CROSSED: u64 = 145522644563787776;
pub const XFLD_RT_PBS_DEPTH: u64 = 145522610204049408;
pub const XFLD_RT_PBS_DISABLE_UPDATE_DEPTH_LIMIT: u64 = 145522936621563904;
pub const XFLD_RT_PBS_EXCH_TIME_OFFSET: u64 = 145522751937970176;
pub const XFLD_RT_PBS_GROUP_ID: u64 = 145522932326596608;
pub const XFLD_RT_PBS_IMBALANCE_AUCTION_END_HITIME: u64 = 145522893671890944;
pub const XFLD_RT_PBS_IMBALANCE_AUCTION_ID: u64 = 145522885081956352;
pub const XFLD_RT_PBS_IMBALANCE_AUCTION_OWNER: u64 = 145522897966858240;
pub const XFLD_RT_PBS_IMBALANCE_AUCTION_START_HITIME: u64 = 145522889376923648;
pub const XFLD_RT_PBS_IMBALANCE_AUCTION_TYPE: u64 = 145522859312152576;
pub const XFLD_RT_PBS_IMBALANCE_FAR_PRICE: u64 = 145522880786989056;
pub const XFLD_RT_PBS_IMBALANCE_MARKET_ORDER_TYPE: u64 = 145523147074961408;
pub const XFLD_RT_PBS_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 145523142779994112;
pub const XFLD_RT_PBS_IMBALANCE_NEAR_PRICE: u64 = 145522876492021760;
pub const XFLD_RT_PBS_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 145523078355484672;
pub const XFLD_RT_PBS_IMBALANCE_PAIRED_VOLUME: u64 = 145522867902087168;
pub const XFLD_RT_PBS_IMBALANCE_QUALS: u64 = 145522842132283392;
pub const XFLD_RT_PBS_IMBALANCE_RECEIVE_HITIME: u64 = 145522850722217984;
pub const XFLD_RT_PBS_IMBALANCE_REFERENCE_PRICE: u64 = 145522872197054464;
pub const XFLD_RT_PBS_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 145523082650451968;
pub const XFLD_RT_PBS_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 145523108420255744;
pub const XFLD_RT_PBS_IMBALANCE_REG_PAIRED_VOLUME: u64 = 145523099830321152;
pub const XFLD_RT_PBS_IMBALANCE_REG_TYPE: u64 = 145523086945419264;
pub const XFLD_RT_PBS_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 145523091240386560;
pub const XFLD_RT_PBS_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 145523104125288448;
pub const XFLD_RT_PBS_IMBALANCE_REG_VOLUME: u64 = 145523095535353856;
pub const XFLD_RT_PBS_IMBALANCE_SEQUENCE: u64 = 145522846427250688;
pub const XFLD_RT_PBS_IMBALANCE_TYPE: u64 = 145522855017185280;
pub const XFLD_RT_PBS_IMBALANCE_UNPAIRED_TYPE: u64 = 145523069765550080;
pub const XFLD_RT_PBS_IMBALANCE_UNPAIRED_VOLUME: u64 = 145523074060517376;
pub const XFLD_RT_PBS_IMBALANCE_VOLUME: u64 = 145522863607119872;
pub const XFLD_RT_PBS_INCLUDE_IMPLIED: u64 = 145522696103395328;
pub const XFLD_RT_PBS_INSTRUMENT_STATUS: u64 = 145522726168166400;
pub const XFLD_RT_PBS_IS_PRICE_POSITION: u64 = 145523168549797888;
pub const XFLD_RT_PBS_KEY: u64 = 145522631678885888;
pub const XFLD_RT_PBS_KEY_STRING: u64 = 145522657448689664;
pub const XFLD_RT_PBS_LIMIT_PRICE_HITIME: u64 = 145523159959863296;
pub const XFLD_RT_PBS_LOT_SIZE: u64 = 145522739053068288;
pub const XFLD_RT_PBS_LOWER_LIMIT_PRICE: u64 = 145522906556792832;
pub const XFLD_RT_PBS_MARKET_STATUS: u64 = 145522730463133696;
pub const XFLD_RT_PBS_MERGE_PRICES: u64 = 145522691808428032;
pub const XFLD_RT_PBS_ORDER_REF_ID_TYPE: u64 = 145522648858755072;
pub const XFLD_RT_PBS_PRICE_TYPE: u64 = 145522627383918592;
pub const XFLD_RT_PBS_PRIME_COUNTRY: u64 = 145523121305157632;
pub const XFLD_RT_PBS_PRIME_EXCH: u64 = 145522760527904768;
pub const XFLD_RT_PBS_PRIME_TRADE_VENUE: u64 = 145523138485026816;
pub const XFLD_RT_PBS_RELATIVE_LIMIT_HITIME: u64 = 145523164254830592;
pub const XFLD_RT_PBS_RELATIVE_LIMIT_PRICE: u64 = 145522915146727424;
pub const XFLD_RT_PBS_RELATIVE_LIMIT_PRICE_TYPE: u64 = 145522919441694720;
pub const XFLD_RT_PBS_RELATIVE_LIMIT_TYPE: u64 = 145522923736662016;
pub const XFLD_RT_PBS_SHORT_SALE_RESTRICTED: u64 = 145522799182610432;
pub const XFLD_RT_PBS_SHORT_SALE_RESTRICTED_V3_2: u64 = 145522734758100992;
pub const XFLD_RT_PBS_SIGLL_STATUS: u64 = 145523134190059520;
pub const XFLD_RT_PBS_STATUS_COUNT: u64 = 145522812067512320;
pub const XFLD_RT_PBS_STATUS_QUALS: u64 = 145522803477577728;
pub const XFLD_RT_PBS_STATUS_SEQUENCE: u64 = 145522807772545024;
pub const XFLD_RT_PBS_STATUS_SOURCE_COUNTRY: u64 = 145522820657446912;
pub const XFLD_RT_PBS_STATUS_SOURCE_EXCH: u64 = 145522816362479616;
pub const XFLD_RT_PBS_SYMBOL_TYPE: u64 = 145522674628558848;
pub const XFLD_RT_PBS_UPDATE_RECEIVE_HITIME: u64 = 145522833542348800;
pub const XFLD_RT_PBS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 145522837837316096;
pub const XFLD_RT_PBS_UPPER_LIMIT_PRICE: u64 = 145522902261825536;
pub const XFLD_RT_PBXS_ALTERNATE_ID1: u64 = 145804080885792768;
pub const XFLD_RT_PBXS_ALTERNATE_ID2: u64 = 145804085180760064;
pub const XFLD_RT_PBXS_ITEM_KEY: u64 = 145804046526054400;
pub const XFLD_RT_PBXS_ITEM_KEY_STRING: u64 = 145804059410956288;
pub const XFLD_RT_PBXS_KEY: u64 = 145804055115988992;
pub const XFLD_RT_PBXS_KEY_STRING: u64 = 145804072295858176;
pub const XFLD_RT_PBXS_ORDER_REF_ID_TYPE: u64 = 145804089475727360;
pub const XFLD_RT_PBXS_PRICE_TYPE: u64 = 145804050821021696;
pub const XFLD_RT_PBXS_SYMBOL_COUNT: u64 = 145804042231087104;
pub const XFLD_RT_PBXS_UPDATE_RECEIVE_HITIME: u64 = 145804093770694656;
pub const XFLD_RT_PBXS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 145804098065661952;
pub const XFLD_RT_BS_ASK_NAV: u64 = 146085530092699648;
pub const XFLD_RT_BS_BID_NAV: u64 = 146085525797732352;
pub const XFLD_RT_BS_HALTED_COUNT: u64 = 146085568747405312;
pub const XFLD_RT_BS_KEY: u64 = 146085551567536128;
pub const XFLD_RT_BS_KEY_STRING: u64 = 146085573042372608;
pub const XFLD_RT_BS_LAST_NAV: u64 = 146085521502765056;
pub const XFLD_RT_BS_PRICE_TYPE: u64 = 146085547272568832;
pub const XFLD_RT_BS_UNOPENED_COUNT: u64 = 146085564452438016;
pub const XFLD_RT_BS_UPDATE_RECEIVE_HITIME: u64 = 146085577337339904;
pub const XFLD_RT_BS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 146085581632307200;
pub const XFLD_RT_BL_BASKET_COUNT: u64 = 146366992184508416;
pub const XFLD_RT_BL_BASKET_KEY_STRING: u64 = 146367022249279488;
pub const XFLD_RT_BL_KEY: u64 = 146367005069410304;
pub const XFLD_RT_BL_KEY_STRING: u64 = 146367009364377600;
pub const XFLD_RT_BL_UPDATE_RECEIVE_HITIME: u64 = 146367013659344896;
pub const XFLD_RT_BL_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 146367017954312192;
pub const XFLD_RT_KLF_DESCRIPTION: u64 = 146648475751153664;
pub const XFLD_RT_KLF_FILTER_EXPRESSION: u64 = 146648467161219072;
pub const XFLD_RT_KLF_KEY: u64 = 146648501520957440;
pub const XFLD_RT_KLF_KEY_STRING: u64 = 146648510110892032;
pub const XFLD_RT_KLF_MATCH_COUNT: u64 = 146648492931022848;
pub const XFLD_RT_KLF_MATCH_KEY: u64 = 146648497225990144;
pub const XFLD_RT_KLF_MATCH_KEY_STRING: u64 = 146648514405859328;
pub const XFLD_RT_KLF_MATCH_SYMBOL_TYPE: u64 = 146648505815924736;
pub const XFLD_RT_KLF_UPDATE_DATE: u64 = 146648480046120960;
pub const XFLD_RT_KLF_UPDATE_RECEIVE_HITIME: u64 = 146648518700826624;
pub const XFLD_RT_KLF_UPDATE_TIME: u64 = 146648484341088256;
pub const XFLD_RT_KLF_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 146648522995793920;
pub const XFLD_RT_KLC_KEY: u64 = 146929967907733504;
pub const XFLD_RT_KLC_KEYLIST_COUNT: u64 = 146929942137929728;
pub const XFLD_RT_KLC_KEYLIST_DESCRIPTION: u64 = 146929963612766208;
pub const XFLD_RT_KLC_KEYLIST_KEY: u64 = 146929946432897024;
pub const XFLD_RT_KLC_KEYLIST_SYMBOL_TYPE: u64 = 146929950727864320;
pub const XFLD_RT_KLC_KEYLIST_UPDATE_DATE: u64 = 146929955022831616;
pub const XFLD_RT_KLC_KEYLIST_UPDATE_TIME: u64 = 146929959317798912;
pub const XFLD_RT_KLC_KEY_STRING: u64 = 146929972202700800;
pub const XFLD_RT_KLC_UPDATE_RECEIVE_HITIME: u64 = 146929976497668096;
pub const XFLD_RT_KLC_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 146929980792635392;
pub const XFLD_RT_CMTY_ALTERNATE_ID1: u64 = 147211417114640384;
pub const XFLD_RT_CMTY_ALTERNATE_ID2: u64 = 147211421409607680;
pub const XFLD_RT_CMTY_ASK_HITIME: u64 = 147211911035879424;
pub const XFLD_RT_CMTY_ASK_IMPLIED_SIZE: u64 = 147211786481827840;
pub const XFLD_RT_CMTY_ASK_PRICE: u64 = 147211425704574976;
pub const XFLD_RT_CMTY_ASK_SIZE: u64 = 147211429999542272;
pub const XFLD_RT_CMTY_BID_HITIME: u64 = 147211906740912128;
pub const XFLD_RT_CMTY_BID_IMPLIED_SIZE: u64 = 147211790776795136;
pub const XFLD_RT_CMTY_BID_PRICE: u64 = 147211438589476864;
pub const XFLD_RT_CMTY_BID_SIZE: u64 = 147211442884444160;
pub const XFLD_RT_CMTY_CLOSE_HITIME: u64 = 147211928215748608;
pub const XFLD_RT_CMTY_CLOSE_PRICE_HIGH: u64 = 147211460064313344;
pub const XFLD_RT_CMTY_CLOSE_PRICE_LOW: u64 = 147211455769346048;
pub const XFLD_RT_CMTY_CURRENCY: u64 = 147211468654247936;
pub const XFLD_RT_CMTY_EXCH_TIME_OFFSET: u64 = 147211472949215232;
pub const XFLD_RT_CMTY_EXPIRATION: u64 = 147211477244182528;
pub const XFLD_RT_CMTY_GROUP_ID: u64 = 147211816546598912;
pub const XFLD_RT_CMTY_HIGH_BATE: u64 = 147211481539149824;
pub const XFLD_RT_CMTY_HIGH_HITIME: u64 = 147211932510715904;
pub const XFLD_RT_CMTY_HIGH_PRICE: u64 = 147211485834117120;
pub const XFLD_RT_CMTY_IMBALANCE_AUCTION_END_HITIME: u64 = 147211777891893248;
pub const XFLD_RT_CMTY_IMBALANCE_AUCTION_ID: u64 = 147211769301958656;
pub const XFLD_RT_CMTY_IMBALANCE_AUCTION_OWNER: u64 = 147211782186860544;
pub const XFLD_RT_CMTY_IMBALANCE_AUCTION_START_HITIME: u64 = 147211773596925952;
pub const XFLD_RT_CMTY_IMBALANCE_AUCTION_TYPE: u64 = 147211743532154880;
pub const XFLD_RT_CMTY_IMBALANCE_FAR_PRICE: u64 = 147211765006991360;
pub const XFLD_RT_CMTY_IMBALANCE_MARKET_ORDER_TYPE: u64 = 147211868086206464;
pub const XFLD_RT_CMTY_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 147211863791239168;
pub const XFLD_RT_CMTY_IMBALANCE_NEAR_PRICE: u64 = 147211760712024064;
pub const XFLD_RT_CMTY_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 147211829431500800;
pub const XFLD_RT_CMTY_IMBALANCE_PAIRED_VOLUME: u64 = 147211752122089472;
pub const XFLD_RT_CMTY_IMBALANCE_QUALS: u64 = 147211726352285696;
pub const XFLD_RT_CMTY_IMBALANCE_RECEIVE_HITIME: u64 = 147211734942220288;
pub const XFLD_RT_CMTY_IMBALANCE_REFERENCE_PRICE: u64 = 147211756417056768;
pub const XFLD_RT_CMTY_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 147211833726468096;
pub const XFLD_RT_CMTY_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 147211859496271872;
pub const XFLD_RT_CMTY_IMBALANCE_REG_PAIRED_VOLUME: u64 = 147211850906337280;
pub const XFLD_RT_CMTY_IMBALANCE_REG_TYPE: u64 = 147211838021435392;
pub const XFLD_RT_CMTY_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 147211842316402688;
pub const XFLD_RT_CMTY_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 147211855201304576;
pub const XFLD_RT_CMTY_IMBALANCE_REG_VOLUME: u64 = 147211846611369984;
pub const XFLD_RT_CMTY_IMBALANCE_SEQUENCE: u64 = 147211730647252992;
pub const XFLD_RT_CMTY_IMBALANCE_TYPE: u64 = 147211739237187584;
pub const XFLD_RT_CMTY_IMBALANCE_UNPAIRED_TYPE: u64 = 147211820841566208;
pub const XFLD_RT_CMTY_IMBALANCE_UNPAIRED_VOLUME: u64 = 147211825136533504;
pub const XFLD_RT_CMTY_IMBALANCE_VOLUME: u64 = 147211747827122176;
pub const XFLD_RT_CMTY_INSTRUMENT_STATUS: u64 = 147211618978103296;
pub const XFLD_RT_CMTY_KEY: u64 = 147211597503266816;
pub const XFLD_RT_CMTY_KEY_STRING: u64 = 147211610388168704;
pub const XFLD_RT_CMTY_LAST_BATE: u64 = 147211494424051712;
pub const XFLD_RT_CMTY_LAST_HITIME: u64 = 147211915330846720;
pub const XFLD_RT_CMTY_LAST_PRICE: u64 = 147211498719019008;
pub const XFLD_RT_CMTY_LAST_QUALS: u64 = 147211872381173760;
pub const XFLD_RT_CMTY_LAST_SEQUENCE: u64 = 147211876676141056;
pub const XFLD_RT_CMTY_LAST_SIZE: u64 = 147211503013986304;
pub const XFLD_RT_CMTY_LIMIT_PRICE_HITIME: u64 = 147211949690585088;
pub const XFLD_RT_CMTY_LOWER_LIMIT_PRICE: u64 = 147211717762351104;
pub const XFLD_RT_CMTY_LOW_BATE: u64 = 147211515898888192;
pub const XFLD_RT_CMTY_LOW_HITIME: u64 = 147211936805683200;
pub const XFLD_RT_CMTY_LOW_PRICE: u64 = 147211520193855488;
pub const XFLD_RT_CMTY_MARKET_STATUS: u64 = 147211627568037888;
pub const XFLD_RT_CMTY_MAX_QUOTE_RATE: u64 = 147211674812678144;
pub const XFLD_RT_CMTY_OPEN_HITIME: u64 = 147211923920781312;
pub const XFLD_RT_CMTY_OPEN_INTEREST: u64 = 147211528783790080;
pub const XFLD_RT_CMTY_OPEN_PRICE_HIGH: u64 = 147211533078757376;
pub const XFLD_RT_CMTY_OPEN_PRICE_LOW: u64 = 147211537373724672;
pub const XFLD_RT_CMTY_ORDER_REF_ID_TYPE: u64 = 147211679107645440;
pub const XFLD_RT_CMTY_PD_SETL_HITIME: u64 = 147211941100650496;
pub const XFLD_RT_CMTY_PD_SETL_PRICE: u64 = 147211545963659264;
pub const XFLD_RT_CMTY_PD_TOTAL_VOLUME: u64 = 147211902445944832;
pub const XFLD_RT_CMTY_PRICE_TYPE: u64 = 147211558848561152;
pub const XFLD_RT_CMTY_QUOTE_QUALS: u64 = 147211687697580032;
pub const XFLD_RT_CMTY_QUOTE_SEQUENCE: u64 = 147211691992547328;
pub const XFLD_RT_CMTY_RELATIVE_LIMIT_HITIME: u64 = 147211953985552384;
pub const XFLD_RT_CMTY_RELATIVE_LIMIT_PRICE: u64 = 147211799366729728;
pub const XFLD_RT_CMTY_RELATIVE_LIMIT_PRICE_TYPE: u64 = 147211803661697024;
pub const XFLD_RT_CMTY_RELATIVE_LIMIT_TYPE: u64 = 147211807956664320;
pub const XFLD_RT_CMTY_SETL_BATE: u64 = 147211567438495744;
pub const XFLD_RT_CMTY_SETL_HITIME: u64 = 147211945395617792;
pub const XFLD_RT_CMTY_SETL_PRICE: u64 = 147211571733463040;
pub const XFLD_RT_CMTY_SHORT_SALE_RESTRICTED: u64 = 147211631863005184;
pub const XFLD_RT_CMTY_SYMBOL_TYPE: u64 = 147211601798234112;
pub const XFLD_RT_CMTY_TOTAL_CHANGE: u64 = 147211580323397632;
pub const XFLD_RT_CMTY_TOTAL_VOLUME: u64 = 147211893856010240;
pub const XFLD_RT_CMTY_TOTAL_VOLUME_FILTERED: u64 = 147211898150977536;
pub const XFLD_RT_CMTY_TRADE_HITIME: u64 = 147211919625814016;
pub const XFLD_RT_CMTY_TRADE_PRICE: u64 = 147211880971108352;
pub const XFLD_RT_CMTY_TRADE_QUALS: u64 = 147211696287514624;
pub const XFLD_RT_CMTY_TRADE_SEQUENCE: u64 = 147211700582481920;
pub const XFLD_RT_CMTY_TRADE_SIZE: u64 = 147211885266075648;
pub const XFLD_RT_CMTY_TRADE_TICK_FLAGS: u64 = 147211588913332224;
pub const XFLD_RT_CMTY_TRADING_SESSION_DATE: u64 = 147211795071762432;
pub const XFLD_RT_CMTY_UPDATE_RECEIVE_HITIME: u64 = 147211704877449216;
pub const XFLD_RT_CMTY_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 147211709172416512;
pub const XFLD_RT_CMTY_UPPER_LIMIT_PRICE: u64 = 147211713467383808;
pub const XFLD_RT_EQSTRM_ALTERNATE_ID1: u64 = 147492896386318336;
pub const XFLD_RT_EQSTRM_ALTERNATE_ID2: u64 = 147492900681285632;
pub const XFLD_RT_EQSTRM_INSTRUMENT_STATUS: u64 = 147492922156122112;
pub const XFLD_RT_EQSTRM_KEY: u64 = 147492892091351040;
pub const XFLD_RT_EQSTRM_KEY_STRING: u64 = 147492909271220224;
pub const XFLD_RT_EQSTRM_LOT_SIZE: u64 = 147492939335991296;
pub const XFLD_RT_EQSTRM_MARKET_STATUS: u64 = 147492926451089408;
pub const XFLD_RT_EQSTRM_MAX_QUOTE_RATE: u64 = 147492947925925888;
pub const XFLD_RT_EQSTRM_ORDER_REF_ID_TYPE: u64 = 147492952220893184;
pub const XFLD_RT_EQSTRM_PRICE_TYPE: u64 = 147492913566187520;
pub const XFLD_RT_EQSTRM_PRIME_COUNTRY: u64 = 147492973695729664;
pub const XFLD_RT_EQSTRM_PRIME_EXCH: u64 = 147492943630958592;
pub const XFLD_RT_EQSTRM_PRIME_TRADE_VENUE: u64 = 147492977990696960;
pub const XFLD_RT_EQSTRM_SHORT_SALE_RESTRICTED: u64 = 147492960810827776;
pub const XFLD_RT_EQSTRM_SYMBOL_TYPE: u64 = 147492917861154816;
pub const XFLD_RT_EQSTRM_UPDATE_RECEIVE_HITIME: u64 = 147492965105795072;
pub const XFLD_RT_EQSTRM_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 147492969400762368;
pub const XFLD_RT_CMSTRM_ALTERNATE_ID1: u64 = 147774371363028992;
pub const XFLD_RT_CMSTRM_ALTERNATE_ID2: u64 = 147774375657996288;
pub const XFLD_RT_CMSTRM_INSTRUMENT_STATUS: u64 = 147774397132832768;
pub const XFLD_RT_CMSTRM_KEY: u64 = 147774367068061696;
pub const XFLD_RT_CMSTRM_KEY_STRING: u64 = 147774384247930880;
pub const XFLD_RT_CMSTRM_MARKET_STATUS: u64 = 147774401427800064;
pub const XFLD_RT_CMSTRM_MAX_QUOTE_RATE: u64 = 147774405722767360;
pub const XFLD_RT_CMSTRM_ORDER_REF_ID_TYPE: u64 = 147774410017734656;
pub const XFLD_RT_CMSTRM_PRICE_TYPE: u64 = 147774388542898176;
pub const XFLD_RT_CMSTRM_SYMBOL_TYPE: u64 = 147774392837865472;
pub const XFLD_RT_CMSTRM_UPDATE_RECEIVE_HITIME: u64 = 147774418607669248;
pub const XFLD_RT_CMSTRM_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 147774422902636544;
pub const XFLD_RT_OBSTRM_ALTERNATE_ID1: u64 = 148055867814576128;
pub const XFLD_RT_OBSTRM_ALTERNATE_ID2: u64 = 148055872109543424;
pub const XFLD_RT_OBSTRM_EXCH_TIME_OFFSET: u64 = 148055897879347200;
pub const XFLD_RT_OBSTRM_INSTRUMENT_STATUS: u64 = 148055880699478016;
pub const XFLD_RT_OBSTRM_KEY: u64 = 148055842044772352;
pub const XFLD_RT_OBSTRM_KEY_STRING: u64 = 148055859224641536;
pub const XFLD_RT_OBSTRM_LOT_SIZE: u64 = 148055893584379904;
pub const XFLD_RT_OBSTRM_MARKET_STATUS: u64 = 148055884994445312;
pub const XFLD_RT_OBSTRM_ORDER_REF_ID_TYPE: u64 = 148055850634706944;
pub const XFLD_RT_OBSTRM_PRICE_TYPE: u64 = 148055846339739648;
pub const XFLD_RT_OBSTRM_PRIME_COUNTRY: u64 = 148055932239085568;
pub const XFLD_RT_OBSTRM_PRIME_EXCH: u64 = 148055906469281792;
pub const XFLD_RT_OBSTRM_PRIME_TRADE_VENUE: u64 = 148055936534052864;
pub const XFLD_RT_OBSTRM_SHORT_SALE_RESTRICTED: u64 = 148055889289412608;
pub const XFLD_RT_OBSTRM_SYMBOL_TYPE: u64 = 148055876404510720;
pub const XFLD_RT_OBSTRM_TRADING_STATE_FILTER: u64 = 148055919354183680;
pub const XFLD_RT_OBSTRM_UPDATE_RECEIVE_HITIME: u64 = 148055923649150976;
pub const XFLD_RT_OBSTRM_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 148055927944118272;
pub const XFLD_RT_PBSTRM_ALTERNATE_ID1: u64 = 148337342791286784;
pub const XFLD_RT_PBSTRM_ALTERNATE_ID2: u64 = 148337347086254080;
pub const XFLD_RT_PBSTRM_EXCH_TIME_OFFSET: u64 = 148337372856057856;
pub const XFLD_RT_PBSTRM_IS_PRICE_POSITION: u64 = 148337415805730816;
pub const XFLD_RT_PBSTRM_KEY: u64 = 148337317021483008;
pub const XFLD_RT_PBSTRM_KEY_STRING: u64 = 148337334201352192;
pub const XFLD_RT_PBSTRM_LOT_SIZE: u64 = 148337368561090560;
pub const XFLD_RT_PBSTRM_ORDER_REF_ID_TYPE: u64 = 148337325611417600;
pub const XFLD_RT_PBSTRM_PRICE_TYPE: u64 = 148337321316450304;
pub const XFLD_RT_PBSTRM_PRIME_COUNTRY: u64 = 148337407215796224;
pub const XFLD_RT_PBSTRM_PRIME_EXCH: u64 = 148337381445992448;
pub const XFLD_RT_PBSTRM_PRIME_TRADE_VENUE: u64 = 148337411510763520;
pub const XFLD_RT_PBSTRM_SYMBOL_TYPE: u64 = 148337351381221376;
pub const XFLD_RT_PBSTRM_TRADING_STATE_FILTER: u64 = 148337394330894336;
pub const XFLD_RT_PBSTRM_UPDATE_RECEIVE_HITIME: u64 = 148337398625861632;
pub const XFLD_RT_PBSTRM_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 148337402920828928;
pub const XFLD_RT_TPF_COUNTRY: u64 = 149181780606320640;
pub const XFLD_RT_TPF_EXCHANGE: u64 = 149181776311353344;
pub const XFLD_RT_TPF_EXCHANGE_LABEL: u64 = 149181784901287936;
pub const XFLD_RT_TPF_FEED_COUNT: u64 = 149181741951614976;
pub const XFLD_RT_TPF_FEED_HANDLER_NAME: u64 = 149181767721418752;
pub const XFLD_RT_TPF_FEED_HANDLER_VERSION: u64 = 149181772016386048;
pub const XFLD_RT_TPF_FEED_IDENTIFIER: u64 = 149181746246582272;
pub const XFLD_RT_TPF_FEED_LABEL: u64 = 149181750541549568;
pub const XFLD_RT_TPF_MARKET_STATUS: u64 = 149181793491222528;
pub const XFLD_RT_TPF_MWCB_LEVEL1_PRICE: u64 = 149181827850960896;
pub const XFLD_RT_TPF_MWCB_LEVEL2_PRICE: u64 = 149181832145928192;
pub const XFLD_RT_TPF_MWCB_LEVEL3_PRICE: u64 = 149181836440895488;
pub const XFLD_RT_TPF_MWCB_PRICE_TYPE: u64 = 149181840735862784;
pub const XFLD_RT_TPF_NOMINAL_CLOSE: u64 = 149181806376124416;
pub const XFLD_RT_TPF_NOMINAL_OPEN: u64 = 149181802081157120;
pub const XFLD_RT_TPF_TIMEZONE: u64 = 149181810671091712;
pub const XFLD_RT_TPF_USERBBO_COUNTRY: u64 = 149181819261026304;
pub const XFLD_RT_TPF_USERBBO_EXCHANGE: u64 = 149181823555993600;
pub const XFLD_RT_TPF_USERBBO_MEMBER: u64 = 149181789196255232;
pub const XFLD_RT_TPL_ABORTED: u64 = 149463354367279104;
pub const XFLD_RT_TPL_ALARM: u64 = 149463350072311808;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_AVG: u64 = 149463431676690432;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 149463448856559616;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 149463483216297984;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 149463453151526912;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 149463487511265280;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 149463457446494208;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 149463491806232576;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 149463461741461504;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 149463496101199872;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 149463466036428800;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 149463500396167168;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 149463470331396096;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 149463504691134464;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 149463474626363392;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 149463508986101760;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 149463478921330688;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 149463513281069056;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_MAX: u64 = 149463435971657728;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_MIN: u64 = 149463440266625024;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_SAMPLES: u64 = 149463427381723136;
pub const XFLD_RT_TPL_APPLIANCE_LATENCY_STD_DEV: u64 = 149463444561592320;
pub const XFLD_RT_TPL_BURSTRATE_TIMESPAN: u64 = 149463242698129408;
pub const XFLD_RT_TPL_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 149463289942769664;
pub const XFLD_RT_TPL_BYTE_COUNT: u64 = 149463251288064000;
pub const XFLD_RT_TPL_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 149463277057867776;
pub const XFLD_RT_TPL_CONNECTED: u64 = 149463341482377216;
pub const XFLD_RT_TPL_EXCHANGE_SKEW: u64 = 149463324302508032;
pub const XFLD_RT_TPL_FEED_IDENTIFIER: u64 = 149463328597475328;
pub const XFLD_RT_TPL_GAP_COUNT: u64 = 149463380137082880;
pub const XFLD_RT_TPL_HANDLER_NAME: u64 = 149463298532704256;
pub const XFLD_RT_TPL_HANDLER_VERSION: u64 = 149463302827671552;
pub const XFLD_RT_TPL_HEARTBEAT_COUNT: u64 = 149463526165970944;
pub const XFLD_RT_TPL_HIRATE_TIMESPAN: u64 = 149463238403162112;
pub const XFLD_RT_TPL_IGNORED_COUNT: u64 = 149463521871003648;
pub const XFLD_RT_TPL_INVALID_COUNT: u64 = 149463517576036352;
pub const XFLD_RT_TPL_LAST_GAP_TIME: u64 = 149463315712573440;
pub const XFLD_RT_TPL_LINE_COUNT: u64 = 149463216928325632;
pub const XFLD_RT_TPL_LINE_IDENTIFIER: u64 = 149463225518260224;
pub const XFLD_RT_TPL_LINE_NAME: u64 = 149463221223292928;
pub const XFLD_RT_TPL_LINE_SKEW: u64 = 149463320007540736;
pub const XFLD_RT_TPL_LINE_STATE: u64 = 149463367252180992;
pub const XFLD_RT_TPL_LOGGED_IN: u64 = 149463345777344512;
pub const XFLD_RT_TPL_MESSAGE_COUNT: u64 = 149463246993096704;
pub const XFLD_RT_TPL_ON_SCHEDULE: u64 = 149463332892442624;
pub const XFLD_RT_TPL_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 149463294237736960;
pub const XFLD_RT_TPL_PACKET_COUNT: u64 = 149463255583031296;
pub const XFLD_RT_TPL_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 149463281352835072;
pub const XFLD_RT_TPL_PEAK_BYTE_RATE: u64 = 149463264172965888;
pub const XFLD_RT_TPL_PEAK_MESSAGE_BURSTRATE: u64 = 149463285647802368;
pub const XFLD_RT_TPL_PEAK_MESSAGE_HIRATE: u64 = 149463272762900480;
pub const XFLD_RT_TPL_PEAK_MESSAGE_RATE: u64 = 149463259877998592;
pub const XFLD_RT_TPL_PEAK_PACKET_RATE: u64 = 149463268467933184;
pub const XFLD_RT_TPL_PEAK_QUOTE_BURSTRATE: u64 = 149463410201853952;
pub const XFLD_RT_TPL_PEAK_QUOTE_HIRATE: u64 = 149463401611919360;
pub const XFLD_RT_TPL_PEAK_QUOTE_RATE: u64 = 149463393021984768;
pub const XFLD_RT_TPL_PEAK_TIME_BURSTRATE: u64 = 149463418791788544;
pub const XFLD_RT_TPL_PEAK_TIME_HIRATE: u64 = 149463423086755840;
pub const XFLD_RT_TPL_PEAK_TRADE_BURSTRATE: u64 = 149463414496821248;
pub const XFLD_RT_TPL_PEAK_TRADE_HIRATE: u64 = 149463405906886656;
pub const XFLD_RT_TPL_PEAK_TRADE_RATE: u64 = 149463397316952064;
pub const XFLD_RT_TPL_PENDING_DOWN: u64 = 149463358662246400;
pub const XFLD_RT_TPL_QUOTE_COUNT: u64 = 149463384432050176;
pub const XFLD_RT_TPL_TCP_SOCKET_COUNT: u64 = 149463375842115584;
pub const XFLD_RT_TPL_TEST: u64 = 149463337187409920;
pub const XFLD_RT_TPL_TIMESPAN: u64 = 149463234108194816;
pub const XFLD_RT_TPL_TIMESTAMP: u64 = 149463229813227520;
pub const XFLD_RT_TPL_TRADE_COUNT: u64 = 149463388727017472;
pub const XFLD_RT_TPL_UDP_SOCKET_COUNT: u64 = 149463371547148288;
pub const XFLD_RT_TPS_APPLIANCE_ADDRESS: u64 = 149744734854709248;
pub const XFLD_RT_TPS_BURSTRATE_TIMESPAN: u64 = 149744713379872768;
pub const XFLD_RT_TPS_BYTE_COUNT: u64 = 149744747739611136;
pub const XFLD_RT_TPS_CONNECTION_TYPE: u64 = 149744721969807360;
pub const XFLD_RT_TPS_FEED_ADDRESS: u64 = 149744726264774656;
pub const XFLD_RT_TPS_FEED_MULTICAST: u64 = 149744730559741952;
pub const XFLD_RT_TPS_HIRATE_TIMESPAN: u64 = 149744709084905472;
pub const XFLD_RT_TPS_LINE_IDENTIFIER: u64 = 149744717674840064;
pub const XFLD_RT_TPS_LINE_NAME: u64 = 149744696200003584;
pub const XFLD_RT_TPS_MESSAGE_COUNT: u64 = 149744752034578432;
pub const XFLD_RT_TPS_PACKET_COUNT: u64 = 149744743444643840;
pub const XFLD_RT_TPS_PEAK_BYTE_BURSTRATE: u64 = 149744786394316800;
pub const XFLD_RT_TPS_PEAK_BYTE_HIRATE: u64 = 149744773509414912;
pub const XFLD_RT_TPS_PEAK_BYTE_RATE: u64 = 149744760624513024;
pub const XFLD_RT_TPS_PEAK_MESSAGE_BURSTRATE: u64 = 149744790689284096;
pub const XFLD_RT_TPS_PEAK_MESSAGE_HIRATE: u64 = 149744777804382208;
pub const XFLD_RT_TPS_PEAK_MESSAGE_RATE: u64 = 149744764919480320;
pub const XFLD_RT_TPS_PEAK_PACKET_BURSTRATE: u64 = 149744782099349504;
pub const XFLD_RT_TPS_PEAK_PACKET_HIRATE: u64 = 149744769214447616;
pub const XFLD_RT_TPS_PEAK_PACKET_RATE: u64 = 149744756329545728;
pub const XFLD_RT_TPS_PORT: u64 = 149744739149676544;
pub const XFLD_RT_TPS_SOCKET_COUNT: u64 = 149744691905036288;
pub const XFLD_RT_TPS_TIMESPAN: u64 = 149744704789938176;
pub const XFLD_RT_TPS_TIMESTAMP: u64 = 149744700494970880;
pub const XFLD_RT_TPCLI_API_BUILD_OS_VERSION: u64 = 150589151194906624;
pub const XFLD_RT_TPCLI_API_BUILD_PLATFORM: u64 = 150589146899939328;
pub const XFLD_RT_TPCLI_API_VERSION: u64 = 150589138310004736;
pub const XFLD_RT_TPCLI_APPLIANCE_HOSTNAME: u64 = 150589168374775808;
pub const XFLD_RT_TPCLI_APPLIANCE_LOCAL_ADDRESS: u64 = 150589176964710400;
pub const XFLD_RT_TPCLI_APPLIANCE_LOCAL_INTERFACE: u64 = 150589172669743104;
pub const XFLD_RT_TPCLI_APPLIANCE_LOCAL_PORT: u64 = 150589181259677696;
pub const XFLD_RT_TPCLI_CHANNEL_NAME: u64 = 150589164079808512;
pub const XFLD_RT_TPCLI_CLIENT_COUNT: u64 = 150589129720070144;
pub const XFLD_RT_TPCLI_CLIENT_HOSTNAME: u64 = 150589185554644992;
pub const XFLD_RT_TPCLI_CLIENT_LOCAL_ADDRESS: u64 = 150589189849612288;
pub const XFLD_RT_TPCLI_CLIENT_LOCAL_PORT: u64 = 150589194144579584;
pub const XFLD_RT_TPCLI_CONNECTION_DATE: u64 = 150589159784841216;
pub const XFLD_RT_TPCLI_CONNECTION_TIME: u64 = 150589155489873920;
pub const XFLD_RT_TPCLI_CURRENT_SUBSCRIPTION_COUNT: u64 = 150589207029481472;
pub const XFLD_RT_TPCLI_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 150589215619416064;
pub const XFLD_RT_TPCLI_LOCAL_IB_KEY: u64 = 150589198439546880;
pub const XFLD_RT_TPCLI_MAX_SUBSCRIPTION_COUNT: u64 = 150589211324448768;
pub const XFLD_RT_TPCLI_REMOTE_IB_KEY: u64 = 150589202734514176;
pub const XFLD_RT_TPCLI_REMOTE_PROCESS_ID: u64 = 150589142604972032;
pub const XFLD_RT_TPCLI_USERNAME: u64 = 150589134015037440;
pub const XFLD_RT_DRS_AMERICAN_EXERCISE: u64 = 151715124116193280;
pub const XFLD_RT_DRS_ASSET_CLASS: u64 = 151715325979656192;
pub const XFLD_RT_DRS_ATTRIBUTE: u64 = 151715403289067520;
pub const XFLD_RT_DRS_ATTRIBUTE_COUNT: u64 = 151715398994100224;
pub const XFLD_RT_DRS_AUCTION_COUNT: u64 = 151715205720571904;
pub const XFLD_RT_DRS_AUCTION_RULE_ID: u64 = 151715210015539200;
pub const XFLD_RT_DRS_AUCTION_TYPES: u64 = 151715214310506496;
pub const XFLD_RT_DRS_CALL: u64 = 151715119821225984;
pub const XFLD_RT_DRS_CONTRACT_ROOT_STRING: u64 = 151715291619917824;
pub const XFLD_RT_DRS_CONTRACT_SIZE: u64 = 151715098346389504;
pub const XFLD_RT_DRS_CURRENCY: u64 = 151715304504819712;
pub const XFLD_RT_DRS_DELIVERABLE_CASH: u64 = 151715184245735424;
pub const XFLD_RT_DRS_DELIVERABLE_COUNT: u64 = 151715171360833536;
pub const XFLD_RT_DRS_DELIVERABLE_CURRENCY: u64 = 151715188540702720;
pub const XFLD_RT_DRS_DELIVERABLE_FACTOR: u64 = 151715179950768128;
pub const XFLD_RT_DRS_DELIVERABLE_KEY_STRING: u64 = 151715201425604608;
pub const XFLD_RT_DRS_DELIVERABLE_PRICE_TYPE: u64 = 151715192835670016;
pub const XFLD_RT_DRS_DELIVERABLE_SECURITY_ID: u64 = 151715175655800832;
pub const XFLD_RT_DRS_DELIVERABLE_SYMBOL_TYPE: u64 = 151715197130637312;
pub const XFLD_RT_DRS_DISPLAY_FACTOR: u64 = 151715334569590784;
pub const XFLD_RT_DRS_DISPLAY_FACTOR_PRICE_TYPE: u64 = 151715338864558080;
pub const XFLD_RT_DRS_INSTRUMENT_MARKET_IDENTIFIER_CODE: u64 = 151715330274623488;
pub const XFLD_RT_DRS_INSTRUMENT_STATUS: u64 = 151715115526258688;
pub const XFLD_RT_DRS_ISIN: u64 = 151715321684688896;
pub const XFLD_RT_DRS_KEY: u64 = 151715016742010880;
pub const XFLD_RT_DRS_KEY_STRING: u64 = 151715021036978176;
pub const XFLD_RT_DRS_LEG_AMERICAN_EXERCISE: u64 = 151715283029983232;
pub const XFLD_RT_DRS_LEG_ASK_SIDE: u64 = 151715274440048640;
pub const XFLD_RT_DRS_LEG_CALL: u64 = 151715278735015936;
pub const XFLD_RT_DRS_LEG_CONTRACT_SIZE: u64 = 151715244375277568;
pub const XFLD_RT_DRS_LEG_COUNT: u64 = 151715218605473792;
pub const XFLD_RT_DRS_LEG_KEY_STRING: u64 = 151715231490375680;
pub const XFLD_RT_DRS_LEG_MARKET_SEGMENT_ID: u64 = 151715227195408384;
pub const XFLD_RT_DRS_LEG_MATURITY_DATE: u64 = 151715235785342976;
pub const XFLD_RT_DRS_LEG_MATURITY_TIME: u64 = 151715240080310272;
pub const XFLD_RT_DRS_LEG_OPTION_DELTA: u64 = 151715394699132928;
pub const XFLD_RT_DRS_LEG_PRICE_TYPE: u64 = 151715257260179456;
pub const XFLD_RT_DRS_LEG_PRIMARY_MMID: u64 = 151715265850114048;
pub const XFLD_RT_DRS_LEG_RATIO: u64 = 151715270145081344;
pub const XFLD_RT_DRS_LEG_REFERENCE_PRICE: u64 = 151715386109198336;
pub const XFLD_RT_DRS_LEG_REFERENCE_PRICE_TYPE: u64 = 151715390404165632;
pub const XFLD_RT_DRS_LEG_SECURITY_ID: u64 = 151715222900441088;
pub const XFLD_RT_DRS_LEG_STRIKE: u64 = 151715248670244864;
pub const XFLD_RT_DRS_LEG_STRIKE_CURRENCY: u64 = 151715252965212160;
pub const XFLD_RT_DRS_LEG_TRADING_STATUS: u64 = 151715261555146752;
pub const XFLD_RT_DRS_MARKET_SEGMENT_DESC: u64 = 151715042511814656;
pub const XFLD_RT_DRS_MARKET_SEGMENT_ID: u64 = 151715038216847360;
pub const XFLD_RT_DRS_MARKET_SEGMENT_STATUS: u64 = 151715063986651136;
pub const XFLD_RT_DRS_MATCH_ALGO: u64 = 151715162770898944;
pub const XFLD_RT_DRS_MATCH_COUNT: u64 = 151715154180964352;
pub const XFLD_RT_DRS_MATCH_CUSTOMER_PRIORITY: u64 = 151715167065866240;
pub const XFLD_RT_DRS_MATCH_RULE_ID: u64 = 151715158475931648;
pub const XFLD_RT_DRS_MATURITY_DATE: u64 = 151715089756454912;
pub const XFLD_RT_DRS_MATURITY_TIME: u64 = 151715094051422208;
pub const XFLD_RT_DRS_ORIGINAL_STRIKE_PRICE: u64 = 151715343159525376;
pub const XFLD_RT_DRS_ORIGINAL_STRIKE_PRICE_TYPE: u64 = 151715347454492672;
pub const XFLD_RT_DRS_PARENT_MARKET_SEGMENT_ID: u64 = 151715068281618432;
pub const XFLD_RT_DRS_PRIMARY_MMID: u64 = 151715033921880064;
pub const XFLD_RT_DRS_PRODUCT_BIN_ID: u64 = 151715051101749248;
pub const XFLD_RT_DRS_PRODUCT_MARKET_IDENTIFIER_CODE: u64 = 151715317389721600;
pub const XFLD_RT_DRS_PRODUCT_PARTITION_ID: u64 = 151715046806781952;
pub const XFLD_RT_DRS_SECURITY_GROUP: u64 = 151715313094754304;
pub const XFLD_RT_DRS_SECURITY_ID: u64 = 151715085461487616;
pub const XFLD_RT_DRS_SETTLEMENT_CURRENCY: u64 = 151715308799787008;
pub const XFLD_RT_DRS_SIZE_RULE_BLOCK_TRADE: u64 = 151715381814231040;
pub const XFLD_RT_DRS_SIZE_RULE_COUNT: u64 = 151715351749459968;
pub const XFLD_RT_DRS_SIZE_RULE_ID: u64 = 151715356044427264;
pub const XFLD_RT_DRS_SIZE_RULE_MAX_TRADE: u64 = 151715364634361856;
pub const XFLD_RT_DRS_SIZE_RULE_MIN_ASK: u64 = 151715373224296448;
pub const XFLD_RT_DRS_SIZE_RULE_MIN_BID: u64 = 151715368929329152;
pub const XFLD_RT_DRS_SIZE_RULE_MIN_TRADE: u64 = 151715360339394560;
pub const XFLD_RT_DRS_SIZE_RULE_ROUND_LOT: u64 = 151715377519263744;
pub const XFLD_RT_DRS_STRIKE: u64 = 151715102641356800;
pub const XFLD_RT_DRS_STRIKE_CURRENCY: u64 = 151715106936324096;
pub const XFLD_RT_DRS_STRIKE_PRICE_TYPE: u64 = 151715111231291392;
pub const XFLD_RT_DRS_SYMBOL_TYPE: u64 = 151715029626912768;
pub const XFLD_RT_DRS_TICK_COUNT: u64 = 151715128411160576;
pub const XFLD_RT_DRS_TICK_INCREMENT: u64 = 151715145591029760;
pub const XFLD_RT_DRS_TICK_INCREMENT_PRICE_TYPE: u64 = 151715149885997056;
pub const XFLD_RT_DRS_TICK_PRICE_RANGE_END: u64 = 151715141296062464;
pub const XFLD_RT_DRS_TICK_PRICE_RANGE_START: u64 = 151715137001095168;
pub const XFLD_RT_DRS_TICK_RULE_ID: u64 = 151715132706127872;
pub const XFLD_RT_DRS_TRADE_START_TIME: u64 = 151715055396716544;
pub const XFLD_RT_DRS_TRADE_STOP_TIME: u64 = 151715059691683840;
pub const XFLD_RT_DRS_UNDERLYING_COUNT: u64 = 151715287324950528;
pub const XFLD_RT_DRS_UNDERLYING_KEY_STRING: u64 = 151715072576585728;
pub const XFLD_RT_DRS_UNDERLYING_SECURITY_ID: u64 = 151715076871553024;
pub const XFLD_RT_DRS_UNDERLYING_SYMBOL_TYPE: u64 = 151715081166520320;
pub const XFLD_RT_DRS_UPDATE_RECEIVE_HITIME: u64 = 151715295914885120;
pub const XFLD_RT_DRS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 151715300209852416;
pub const XFLD_RT_DRES_KEY: u64 = 151996491718721536;
pub const XFLD_RT_DRES_KEY_STRING: u64 = 151996496013688832;
pub const XFLD_RT_DRES_UPDATE_RECEIVE_HITIME: u64 = 151996500308656128;
pub const XFLD_RT_DRES_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 151996504603623424;
pub const XFLD_RT_FXSPOT_ACCOUNT_ID: u64 = 152277983875301376;
pub const XFLD_RT_FXSPOT_ALTERNATE_ID1: u64 = 152277975285366784;
pub const XFLD_RT_FXSPOT_ALTERNATE_ID2: u64 = 152277979580334080;
pub const XFLD_RT_FXSPOT_CURRENCY: u64 = 152278001055170560;
pub const XFLD_RT_FXSPOT_EXCH_TIME_OFFSET: u64 = 152277996760203264;
pub const XFLD_RT_FXSPOT_INSTRUMENT_STATUS: u64 = 152278009645105152;
pub const XFLD_RT_FXSPOT_KEY: u64 = 152277966695432192;
pub const XFLD_RT_FXSPOT_KEY_STRING: u64 = 152277970990399488;
pub const XFLD_RT_FXSPOT_MARKET_STATUS: u64 = 152278005350137856;
pub const XFLD_RT_FXSPOT_PRICE_TYPE: u64 = 152277992465235968;
pub const XFLD_RT_FXSPOT_SYMBOL_TYPE: u64 = 152277988170268672;
pub const XFLD_RT_FXSPOT_UPDATE_RECEIVE_HITIME: u64 = 152278013940072448;
pub const XFLD_RT_FXSPOT_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 152278018235039744;
pub const XFLD_RT_FXFWD_ACCOUNT_ID: u64 = 152559458852012032;
pub const XFLD_RT_FXFWD_ALTERNATE_ID1: u64 = 152559450262077440;
pub const XFLD_RT_FXFWD_ALTERNATE_ID2: u64 = 152559454557044736;
pub const XFLD_RT_FXFWD_CURRENCY: u64 = 152559476031881216;
pub const XFLD_RT_FXFWD_EXCH_TIME_OFFSET: u64 = 152559471736913920;
pub const XFLD_RT_FXFWD_INSTRUMENT_STATUS: u64 = 152559484621815808;
pub const XFLD_RT_FXFWD_KEY: u64 = 152559441672142848;
pub const XFLD_RT_FXFWD_KEY_STRING: u64 = 152559445967110144;
pub const XFLD_RT_FXFWD_MARKET_STATUS: u64 = 152559480326848512;
pub const XFLD_RT_FXFWD_PRICE_TYPE: u64 = 152559467441946624;
pub const XFLD_RT_FXFWD_SYMBOL_TYPE: u64 = 152559463146979328;
pub const XFLD_RT_FXFWD_UPDATE_RECEIVE_HITIME: u64 = 152559488916783104;
pub const XFLD_RT_FXFWD_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 152559493211750400;
pub const XFLD_RT_FXSWAP_ACCOUNT_ID: u64 = 152840933828722688;
pub const XFLD_RT_FXSWAP_ALTERNATE_ID1: u64 = 152840925238788096;
pub const XFLD_RT_FXSWAP_ALTERNATE_ID2: u64 = 152840929533755392;
pub const XFLD_RT_FXSWAP_CURRENCY: u64 = 152840951008591872;
pub const XFLD_RT_FXSWAP_EXCH_TIME_OFFSET: u64 = 152840946713624576;
pub const XFLD_RT_FXSWAP_INSTRUMENT_STATUS: u64 = 152840959598526464;
pub const XFLD_RT_FXSWAP_KEY: u64 = 152840916648853504;
pub const XFLD_RT_FXSWAP_KEY_STRING: u64 = 152840920943820800;
pub const XFLD_RT_FXSWAP_MARKET_STATUS: u64 = 152840955303559168;
pub const XFLD_RT_FXSWAP_PRICE_TYPE: u64 = 152840942418657280;
pub const XFLD_RT_FXSWAP_SYMBOL_TYPE: u64 = 152840938123689984;
pub const XFLD_RT_FXSWAP_UPDATE_RECEIVE_HITIME: u64 = 152840963893493760;
pub const XFLD_RT_FXSWAP_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 152840968188461056;
pub const XFLD_RT_TPSUM_COMPOSITE_SYMBOL_COUNT: u64 = 153122421690335232;
pub const XFLD_RT_TPSUM_CONFIGURED_LINES_COUNT: u64 = 153122400215498752;
pub const XFLD_RT_TPSUM_CONFIGURED_TCP_SOCKETS_COUNT: u64 = 153122408805433344;
pub const XFLD_RT_TPSUM_CONFIGURED_UDP_SOCKETS_COUNT: u64 = 153122404510466048;
pub const XFLD_RT_TPSUM_CURRENT_CLIENT_COUNT: u64 = 153122425985302528;
pub const XFLD_RT_TPSUM_CURRENT_CLIENT_SUBSCRIPTIONS: u64 = 153122434575237120;
pub const XFLD_RT_TPSUM_CURRENT_SUBSCRIPTION_OVERLAP: u64 = 153122443165171712;
pub const XFLD_RT_TPSUM_LAST_RESTART_TIME: u64 = 153122395920531456;
pub const XFLD_RT_TPSUM_MAX_CLIENT_COUNT: u64 = 153122430280269824;
pub const XFLD_RT_TPSUM_MAX_CLIENT_SUBSCRIPTIONS: u64 = 153122438870204416;
pub const XFLD_RT_TPSUM_MAX_SUBSCRIPTION_OVERLAP: u64 = 153122447460139008;
pub const XFLD_RT_TPSUM_PACKET_DROP_COUNT: u64 = 153122413100400640;
pub const XFLD_RT_TPSUM_REGIONAL_SYMBOL_COUNT: u64 = 153122417395367936;
pub const XFLD_RT_TPSUM_TICKER_PLANT_VERSION: u64 = 153122391625564160;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_AVG: u64 = 153403870897242112;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 153403888077111296;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 153403922436849664;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 153403892372078592;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 153403926731816960;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 153403896667045888;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 153403931026784256;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 153403900962013184;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 153403935321751552;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 153403905256980480;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 153403939616718848;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 153403909551947776;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 153403943911686144;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 153403913846915072;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 153403948206653440;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 153403918141882368;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 153403952501620736;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_MAX: u64 = 153403875192209408;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_MIN: u64 = 153403879487176704;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_SAMPLES: u64 = 153403866602274816;
pub const XFLD_RT_TPLAT_APPLIANCE_LATENCY_STD_DEV: u64 = 153403883782144000;
pub const XFLD_RT_TPCR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 153685363053821952;
pub const XFLD_RT_TPCR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 153685358758854656;
pub const XFLD_RT_TPCR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 153685354463887360;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_AVG: u64 = 153685397413560320;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN0_LOWER_BOUND: u64 = 153685414593429504;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN0_SAMPLES: u64 = 153685448953167872;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN1_LOWER_BOUND: u64 = 153685418888396800;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN1_SAMPLES: u64 = 153685453248135168;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN2_LOWER_BOUND: u64 = 153685423183364096;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN2_SAMPLES: u64 = 153685457543102464;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN3_LOWER_BOUND: u64 = 153685427478331392;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN3_SAMPLES: u64 = 153685461838069760;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN4_LOWER_BOUND: u64 = 153685431773298688;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN4_SAMPLES: u64 = 153685466133037056;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN5_LOWER_BOUND: u64 = 153685436068265984;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN5_SAMPLES: u64 = 153685470428004352;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN6_LOWER_BOUND: u64 = 153685440363233280;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN6_SAMPLES: u64 = 153685474722971648;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN7_LOWER_BOUND: u64 = 153685444658200576;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_BIN7_SAMPLES: u64 = 153685479017938944;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_MAX: u64 = 153685410298462208;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_MIN: u64 = 153685406003494912;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_SAMPLES: u64 = 153685393118593024;
pub const XFLD_RT_TPCR_CALLBACK_LATENCY_STD_DEV: u64 = 153685401708527616;
pub const XFLD_RT_TPCR_CLIENT_COUNT: u64 = 153685345873952768;
pub const XFLD_RT_TPCR_CLIENT_ID: u64 = 153685483312906240;
pub const XFLD_RT_TPCR_FULL_BUFFER_SEND_COUNT: u64 = 153685388823625728;
pub const XFLD_RT_TPCR_MAX_CLIENT_BUFFER_SIZE: u64 = 153685350168920064;
pub const XFLD_RT_TPCR_OUTPUT_PEAK_BYTE_RATE: u64 = 153685375938723840;
pub const XFLD_RT_TPCR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 153685371643756544;
pub const XFLD_RT_TPCR_OUTPUT_PEAK_PACKET_RATE: u64 = 153685367348789248;
pub const XFLD_RT_TPCR_PENDING_SEND_BUFFER_COUNT: u64 = 153685380233691136;
pub const XFLD_RT_TPCR_PENDING_SEND_BYTE_COUNT: u64 = 153685384528658432;
pub const XFLD_RT_TPCR_TIMESPAN: u64 = 153685341578985472;
pub const XFLD_RT_TPSR_BURSTRATE_TIMESPAN: u64 = 153966880980205568;
pub const XFLD_RT_TPSR_HIRATE_TIMESPAN: u64 = 153966876685238272;
pub const XFLD_RT_TPSR_OUTPUT_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153967014124191744;
pub const XFLD_RT_TPSR_OUTPUT_BYTE_COUNT: u64 = 153966868095303680;
pub const XFLD_RT_TPSR_OUTPUT_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 153967001239289856;
pub const XFLD_RT_TPSR_OUTPUT_MESSAGE_COUNT: u64 = 153966855210401792;
pub const XFLD_RT_TPSR_OUTPUT_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153967009829224448;
pub const XFLD_RT_TPSR_OUTPUT_PACKET_COUNT: u64 = 153966850915434496;
pub const XFLD_RT_TPSR_OUTPUT_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 153966996944322560;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_BYTE_RATE: u64 = 153966988354387968;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_MESSAGE_BURSTRATE: u64 = 153967005534257152;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_MESSAGE_HIRATE: u64 = 153966992649355264;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 153966971174518784;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_PACKET_RATE: u64 = 153966984059420672;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_QUOTE_RATE: u64 = 153966975469486080;
pub const XFLD_RT_TPSR_OUTPUT_PEAK_TRADE_RATE: u64 = 153966979764453376;
pub const XFLD_RT_TPSR_OUTPUT_QUOTE_COUNT: u64 = 153966859505369088;
pub const XFLD_RT_TPSR_OUTPUT_TRADE_COUNT: u64 = 153966863800336384;
pub const XFLD_RT_TPSR_POST_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153966966879551488;
pub const XFLD_RT_TPSR_POST_ARB_BYTE_COUNT: u64 = 153966846620467200;
pub const XFLD_RT_TPSR_POST_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 153966953994649600;
pub const XFLD_RT_TPSR_POST_ARB_MESSAGE_COUNT: u64 = 153966833735565312;
pub const XFLD_RT_TPSR_POST_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153966962584584192;
pub const XFLD_RT_TPSR_POST_ARB_PACKET_COUNT: u64 = 153966829440598016;
pub const XFLD_RT_TPSR_POST_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 153966949699682304;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_BYTE_RATE: u64 = 153966941109747712;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 153966958289616896;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_MESSAGE_HIRATE: u64 = 153966945404715008;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_MESSAGE_RATE: u64 = 153966923929878528;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_PACKET_RATE: u64 = 153966936814780416;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_QUOTE_FILTERED_RATE: u64 = 153967022714126336;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_QUOTE_RATE: u64 = 153966928224845824;
pub const XFLD_RT_TPSR_POST_ARB_PEAK_TRADE_RATE: u64 = 153966932519813120;
pub const XFLD_RT_TPSR_POST_ARB_QUOTE_COUNT: u64 = 153966838030532608;
pub const XFLD_RT_TPSR_POST_ARB_QUOTE_FILTERED_COUNT: u64 = 153967018419159040;
pub const XFLD_RT_TPSR_POST_ARB_TRADE_COUNT: u64 = 153966842325499904;
pub const XFLD_RT_TPSR_PRE_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153966919634911232;
pub const XFLD_RT_TPSR_PRE_ARB_BYTE_COUNT: u64 = 153966825145630720;
pub const XFLD_RT_TPSR_PRE_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 153966906750009344;
pub const XFLD_RT_TPSR_PRE_ARB_MESSAGE_COUNT: u64 = 153966820850663424;
pub const XFLD_RT_TPSR_PRE_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 153966915339943936;
pub const XFLD_RT_TPSR_PRE_ARB_PACKET_COUNT: u64 = 153966816555696128;
pub const XFLD_RT_TPSR_PRE_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 153966902455042048;
pub const XFLD_RT_TPSR_PRE_ARB_PEAK_BYTE_RATE: u64 = 153966893865107456;
pub const XFLD_RT_TPSR_PRE_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 153966911044976640;
pub const XFLD_RT_TPSR_PRE_ARB_PEAK_MESSAGE_HIRATE: u64 = 153966898160074752;
pub const XFLD_RT_TPSR_PRE_ARB_PEAK_MESSAGE_RATE: u64 = 153966885275172864;
pub const XFLD_RT_TPSR_PRE_ARB_PEAK_PACKET_RATE: u64 = 153966889570140160;
pub const XFLD_RT_TPSR_TIMESPAN: u64 = 153966872390270976;
pub const XFLD_RT_TPSE_API_BUILD_OS_VERSION: u64 = 154529787983953920;
pub const XFLD_RT_TPSE_API_BUILD_PLATFORM: u64 = 154529783688986624;
pub const XFLD_RT_TPSE_API_VERSION: u64 = 154529775099052032;
pub const XFLD_RT_TPSE_APPLIANCE_HOSTNAME: u64 = 154529805163823104;
pub const XFLD_RT_TPSE_APPLIANCE_LOCAL_ADDRESS: u64 = 154529813753757696;
pub const XFLD_RT_TPSE_APPLIANCE_LOCAL_INTERFACE: u64 = 154529809458790400;
pub const XFLD_RT_TPSE_APPLIANCE_LOCAL_PORT: u64 = 154529818048724992;
pub const XFLD_RT_TPSE_CHANNEL_NAME: u64 = 154529800868855808;
pub const XFLD_RT_TPSE_CLIENT_HOSTNAME: u64 = 154529822343692288;
pub const XFLD_RT_TPSE_CLIENT_ID: u64 = 154529856703430656;
pub const XFLD_RT_TPSE_CLIENT_LOCAL_ADDRESS: u64 = 154529826638659584;
pub const XFLD_RT_TPSE_CLIENT_LOCAL_PORT: u64 = 154529830933626880;
pub const XFLD_RT_TPSE_CONNECTION_DATE: u64 = 154529796573888512;
pub const XFLD_RT_TPSE_CONNECTION_TIME: u64 = 154529792278921216;
pub const XFLD_RT_TPSE_CURRENT_SUBSCRIPTION_COUNT: u64 = 154529843818528768;
pub const XFLD_RT_TPSE_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 154529852408463360;
pub const XFLD_RT_TPSE_LOCAL_IB_KEY: u64 = 154529835228594176;
pub const XFLD_RT_TPSE_MAX_SUBSCRIPTION_COUNT: u64 = 154529848113496064;
pub const XFLD_RT_TPSE_REMOTE_IB_KEY: u64 = 154529839523561472;
pub const XFLD_RT_TPSE_REMOTE_PROCESS_ID: u64 = 154529779394019328;
pub const XFLD_RT_TPSE_SESSION_COUNT: u64 = 154529766509117440;
pub const XFLD_RT_TPSE_SESSION_ID: u64 = 154529860998397952;
pub const XFLD_RT_TPSE_USERNAME: u64 = 154529770804084736;
pub const XFLD_RT_TPSER_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 154811258665697280;
pub const XFLD_RT_TPSER_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 154811254370729984;
pub const XFLD_RT_TPSER_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 154811250075762688;
pub const XFLD_RT_TPSER_AVG: u64 = 154811301615370240;
pub const XFLD_RT_TPSER_BIN0_LOWER_BOUND: u64 = 154811318795239424;
pub const XFLD_RT_TPSER_BIN0_SAMPLES: u64 = 154811353154977792;
pub const XFLD_RT_TPSER_BIN1_LOWER_BOUND: u64 = 154811323090206720;
pub const XFLD_RT_TPSER_BIN1_SAMPLES: u64 = 154811357449945088;
pub const XFLD_RT_TPSER_BIN2_LOWER_BOUND: u64 = 154811327385174016;
pub const XFLD_RT_TPSER_BIN2_SAMPLES: u64 = 154811361744912384;
pub const XFLD_RT_TPSER_BIN3_LOWER_BOUND: u64 = 154811331680141312;
pub const XFLD_RT_TPSER_BIN3_SAMPLES: u64 = 154811366039879680;
pub const XFLD_RT_TPSER_BIN4_LOWER_BOUND: u64 = 154811335975108608;
pub const XFLD_RT_TPSER_BIN4_SAMPLES: u64 = 154811370334846976;
pub const XFLD_RT_TPSER_BIN5_LOWER_BOUND: u64 = 154811340270075904;
pub const XFLD_RT_TPSER_BIN5_SAMPLES: u64 = 154811374629814272;
pub const XFLD_RT_TPSER_BIN6_LOWER_BOUND: u64 = 154811344565043200;
pub const XFLD_RT_TPSER_BIN6_SAMPLES: u64 = 154811378924781568;
pub const XFLD_RT_TPSER_BIN7_LOWER_BOUND: u64 = 154811348860010496;
pub const XFLD_RT_TPSER_BIN7_SAMPLES: u64 = 154811383219748864;
pub const XFLD_RT_TPSER_CLIENT_ID: u64 = 154811293025435648;
pub const XFLD_RT_TPSER_FULL_BUFFER_SEND_COUNT: u64 = 154811284435501056;
pub const XFLD_RT_TPSER_MAX: u64 = 154811305910337536;
pub const XFLD_RT_TPSER_MAX_CLIENT_BUFFER_SIZE: u64 = 154811245780795392;
pub const XFLD_RT_TPSER_MIN: u64 = 154811310205304832;
pub const XFLD_RT_TPSER_OUTPUT_PEAK_BYTE_RATE: u64 = 154811271550599168;
pub const XFLD_RT_TPSER_OUTPUT_PEAK_MESSAGE_RATE: u64 = 154811267255631872;
pub const XFLD_RT_TPSER_OUTPUT_PEAK_PACKET_RATE: u64 = 154811262960664576;
pub const XFLD_RT_TPSER_PENDING_SEND_BUFFER_COUNT: u64 = 154811275845566464;
pub const XFLD_RT_TPSER_PENDING_SEND_BYTE_COUNT: u64 = 154811280140533760;
pub const XFLD_RT_TPSER_SAMPLES: u64 = 154811288730468352;
pub const XFLD_RT_TPSER_SESSION_COUNT: u64 = 154811241485828096;
pub const XFLD_RT_TPSER_SESSION_ID: u64 = 154811297320402944;
pub const XFLD_RT_TPSER_STD_DEV: u64 = 154811314500272128;
pub const XFLD_RT_INSTGRP_GROUP_COUNT: u64 = 155374191439249408;
pub const XFLD_RT_INSTGRP_GROUP_ID: u64 = 155374195734216704;
pub const XFLD_RT_INSTGRP_GROUP_STATUS: u64 = 155374200029184000;
pub const XFLD_RT_FXS_ASK_COUNT: u64 = 155655760905240576;
pub const XFLD_RT_FXS_ASK_FORWARD_POINTS: u64 = 155655799559946240;
pub const XFLD_RT_FXS_ASK_FORWARD_POINTS_PRICE_TYPE: u64 = 155655803854913536;
pub const XFLD_RT_FXS_ASK_HITIME: u64 = 155655778085109760;
pub const XFLD_RT_FXS_ASK_LPID: u64 = 155655812444848128;
pub const XFLD_RT_FXS_ASK_MARKET_MAKER_COUNT: u64 = 155655954178768896;
pub const XFLD_RT_FXS_ASK_MIN_SIZE: u64 = 155655773790142464;
pub const XFLD_RT_FXS_ASK_ORDER_COUNT: u64 = 155655958473736192;
pub const XFLD_RT_FXS_ASK_PRICE: u64 = 155655765200207872;
pub const XFLD_RT_FXS_ASK_QUALS: u64 = 155655786675044352;
pub const XFLD_RT_FXS_ASK_QUOTE_ID: u64 = 155655808149880832;
pub const XFLD_RT_FXS_ASK_REFERENCE_ID: u64 = 155655816739815424;
pub const XFLD_RT_FXS_ASK_ROW_FIXING_DATE: u64 = 155655967063670784;
pub const XFLD_RT_FXS_ASK_ROW_SETTLEMENT_CURRENCY: u64 = 155655971358638080;
pub const XFLD_RT_FXS_ASK_ROW_VALUE_DATE: u64 = 155655962768703488;
pub const XFLD_RT_FXS_ASK_SIZE: u64 = 155655769495175168;
pub const XFLD_RT_FXS_ASK_SPOT_RATE: u64 = 155655790970011648;
pub const XFLD_RT_FXS_ASK_SPOT_RATE_PRICE_TYPE: u64 = 155655795264978944;
pub const XFLD_RT_FXS_ASK_VALID_UNTIL_HITIME: u64 = 155655782380077056;
pub const XFLD_RT_FXS_BID_COUNT: u64 = 155655821034782720;
pub const XFLD_RT_FXS_BID_FORWARD_POINTS: u64 = 155655859689488384;
pub const XFLD_RT_FXS_BID_FORWARD_POINTS_PRICE_TYPE: u64 = 155655863984455680;
pub const XFLD_RT_FXS_BID_HITIME: u64 = 155655838214651904;
pub const XFLD_RT_FXS_BID_LPID: u64 = 155655872574390272;
pub const XFLD_RT_FXS_BID_MARKET_MAKER_COUNT: u64 = 155655975653605376;
pub const XFLD_RT_FXS_BID_MIN_SIZE: u64 = 155655833919684608;
pub const XFLD_RT_FXS_BID_ORDER_COUNT: u64 = 155655979948572672;
pub const XFLD_RT_FXS_BID_PRICE: u64 = 155655825329750016;
pub const XFLD_RT_FXS_BID_QUALS: u64 = 155655846804586496;
pub const XFLD_RT_FXS_BID_QUOTE_ID: u64 = 155655868279422976;
pub const XFLD_RT_FXS_BID_REFERENCE_ID: u64 = 155655876869357568;
pub const XFLD_RT_FXS_BID_ROW_FIXING_DATE: u64 = 155655988538507264;
pub const XFLD_RT_FXS_BID_ROW_SETTLEMENT_CURRENCY: u64 = 155655992833474560;
pub const XFLD_RT_FXS_BID_ROW_VALUE_DATE: u64 = 155655984243539968;
pub const XFLD_RT_FXS_BID_SIZE: u64 = 155655829624717312;
pub const XFLD_RT_FXS_BID_SPOT_RATE: u64 = 155655851099553792;
pub const XFLD_RT_FXS_BID_SPOT_RATE_PRICE_TYPE: u64 = 155655855394521088;
pub const XFLD_RT_FXS_BID_VALID_UNTIL_HITIME: u64 = 155655842509619200;
pub const XFLD_RT_FXS_BOOK_SWEEP_MODEL: u64 = 155655700775698432;
pub const XFLD_RT_FXS_CURRENCY: u64 = 155655709365633024;
pub const XFLD_RT_FXS_EXCH_TIME_OFFSET: u64 = 155655683595829248;
pub const XFLD_RT_FXS_FIXING_DATE: u64 = 155655722250534912;
pub const XFLD_RT_FXS_INSTRUMENT_STATUS: u64 = 155655726545502208;
pub const XFLD_RT_FXS_KEY: u64 = 155655666415960064;
pub const XFLD_RT_FXS_KEY_STRING: u64 = 155655670710927360;
pub const XFLD_RT_FXS_LOT_SIZE: u64 = 155655752315305984;
pub const XFLD_RT_FXS_MARKET_STATUS: u64 = 155655730840469504;
pub const XFLD_RT_FXS_MAX_DEPTH: u64 = 155655941293867008;
pub const XFLD_RT_FXS_MID_COUNT: u64 = 155655881164324864;
pub const XFLD_RT_FXS_MID_FORWARD_POINTS: u64 = 155655919819030528;
pub const XFLD_RT_FXS_MID_FORWARD_POINTS_PRICE_TYPE: u64 = 155655924113997824;
pub const XFLD_RT_FXS_MID_HITIME: u64 = 155655898344194048;
pub const XFLD_RT_FXS_MID_LPID: u64 = 155655932703932416;
pub const XFLD_RT_FXS_MID_MARKET_MAKER_COUNT: u64 = 155655997128441856;
pub const XFLD_RT_FXS_MID_MIN_SIZE: u64 = 155655894049226752;
pub const XFLD_RT_FXS_MID_ORDER_COUNT: u64 = 155656001423409152;
pub const XFLD_RT_FXS_MID_PRICE: u64 = 155655885459292160;
pub const XFLD_RT_FXS_MID_QUALS: u64 = 155655906934128640;
pub const XFLD_RT_FXS_MID_QUOTE_ID: u64 = 155655928408965120;
pub const XFLD_RT_FXS_MID_REFERENCE_ID: u64 = 155655936998899712;
pub const XFLD_RT_FXS_MID_ROW_FIXING_DATE: u64 = 155656010013343744;
pub const XFLD_RT_FXS_MID_ROW_SETTLEMENT_CURRENCY: u64 = 155656014308311040;
pub const XFLD_RT_FXS_MID_ROW_VALUE_DATE: u64 = 155656005718376448;
pub const XFLD_RT_FXS_MID_SIZE: u64 = 155655889754259456;
pub const XFLD_RT_FXS_MID_SPOT_RATE: u64 = 155655911229095936;
pub const XFLD_RT_FXS_MID_SPOT_RATE_PRICE_TYPE: u64 = 155655915524063232;
pub const XFLD_RT_FXS_MID_VALID_UNTIL_HITIME: u64 = 155655902639161344;
pub const XFLD_RT_FXS_MIN_FILL_VOLUME: u64 = 155655756610273280;
pub const XFLD_RT_FXS_PRICE_TYPE: u64 = 155655692185763840;
pub const XFLD_RT_FXS_PRICING_MODEL: u64 = 155655696480731136;
pub const XFLD_RT_FXS_REGULAR_AMOUNT: u64 = 155655743725371392;
pub const XFLD_RT_FXS_REGULAR_PRICE: u64 = 155655748020338688;
pub const XFLD_RT_FXS_SESSION_ID: u64 = 155655705070665728;
pub const XFLD_RT_FXS_SETTLEMENT_CURRENCY: u64 = 155655713660600320;
pub const XFLD_RT_FXS_SYMBOL_TYPE: u64 = 155655687890796544;
pub const XFLD_RT_FXS_TICK_SIZE: u64 = 155655739430404096;
pub const XFLD_RT_FXS_TRUNCATION_LEVEL: u64 = 155655735135436800;
pub const XFLD_RT_FXS_UPDATE_RECEIVE_HITIME: u64 = 155655675005894656;
pub const XFLD_RT_FXS_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 155655679300861952;
pub const XFLD_RT_FXS_VALUE_DATE: u64 = 155655717955567616;
pub const XFLD_RT_FXS_VOLUME: u64 = 155655949883801600;
pub const XFLD_RT_FXS_VOLUME_COUNT: u64 = 155655945588834304;
pub const XFLD_RT_FXSTRM_BOOK_SWEEP_MODEL: u64 = 155937175752409088;
pub const XFLD_RT_FXSTRM_CURRENCY: u64 = 155937184342343680;
pub const XFLD_RT_FXSTRM_EXCH_TIME_OFFSET: u64 = 155937158572539904;
pub const XFLD_RT_FXSTRM_FIXING_DATE: u64 = 155937197227245568;
pub const XFLD_RT_FXSTRM_KEY: u64 = 155937141392670720;
pub const XFLD_RT_FXSTRM_KEY_STRING: u64 = 155937145687638016;
pub const XFLD_RT_FXSTRM_LOT_SIZE: u64 = 155937218702082048;
pub const XFLD_RT_FXSTRM_MAX_DEPTH: u64 = 155937227292016640;
pub const XFLD_RT_FXSTRM_MIN_FILL_VOLUME: u64 = 155937222997049344;
pub const XFLD_RT_FXSTRM_PRICE_TYPE: u64 = 155937167162474496;
pub const XFLD_RT_FXSTRM_PRICING_MODEL: u64 = 155937171457441792;
pub const XFLD_RT_FXSTRM_REGULAR_AMOUNT: u64 = 155937210112147456;
pub const XFLD_RT_FXSTRM_REGULAR_PRICE: u64 = 155937214407114752;
pub const XFLD_RT_FXSTRM_SESSION_ID: u64 = 155937180047376384;
pub const XFLD_RT_FXSTRM_SETTLEMENT_CURRENCY: u64 = 155937188637310976;
pub const XFLD_RT_FXSTRM_SYMBOL_TYPE: u64 = 155937162867507200;
pub const XFLD_RT_FXSTRM_TICK_SIZE: u64 = 155937205817180160;
pub const XFLD_RT_FXSTRM_TRUNCATION_LEVEL: u64 = 155937201522212864;
pub const XFLD_RT_FXSTRM_UPDATE_RECEIVE_HITIME: u64 = 155937149982605312;
pub const XFLD_RT_FXSTRM_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 155937154277572608;
pub const XFLD_RT_FXSTRM_VALUE_DATE: u64 = 155937192932278272;
pub const XFLD_RT_FXSTRM_VOLUME: u64 = 155937235881951232;
pub const XFLD_RT_FXSTRM_VOLUME_COUNT: u64 = 155937231586983936;
pub const XFLD_RT_VOLATILITY_ASK_IV: u64 = 156218655024087040;
pub const XFLD_RT_VOLATILITY_BBO_ASK_EXCHANGE: u64 = 156218792463040512;
pub const XFLD_RT_VOLATILITY_BBO_ASK_HITIME: u64 = 156218783873105920;
pub const XFLD_RT_VOLATILITY_BBO_ASK_PRICE: u64 = 156218766693236736;
pub const XFLD_RT_VOLATILITY_BBO_ASK_SIZE: u64 = 156218775283171328;
pub const XFLD_RT_VOLATILITY_BBO_BID_EXCHANGE: u64 = 156218788168073216;
pub const XFLD_RT_VOLATILITY_BBO_BID_HITIME: u64 = 156218779578138624;
pub const XFLD_RT_VOLATILITY_BBO_BID_PRICE: u64 = 156218762398269440;
pub const XFLD_RT_VOLATILITY_BBO_BID_SIZE: u64 = 156218770988204032;
pub const XFLD_RT_VOLATILITY_BBO_TRADED_VOLUME: u64 = 156218796758007808;
pub const XFLD_RT_VOLATILITY_BID_IV: u64 = 156218650729119744;
pub const XFLD_RT_VOLATILITY_BORROW_COST: u64 = 156218637844217856;
pub const XFLD_RT_VOLATILITY_CURRENCY: u64 = 156218624959315968;
pub const XFLD_RT_VOLATILITY_EOD_IV: u64 = 156218715153629184;
pub const XFLD_RT_VOLATILITY_FORWARD_PRICE: u64 = 156218633549250560;
pub const XFLD_RT_VOLATILITY_INTRINSIC_VALUE: u64 = 156218642139185152;
pub const XFLD_RT_VOLATILITY_KEY: u64 = 156218616369381376;
pub const XFLD_RT_VOLATILITY_KEY_STRING: u64 = 156218620664348672;
pub const XFLD_RT_VOLATILITY_LINE_ID: u64 = 156218710858661888;
pub const XFLD_RT_VOLATILITY_LOCAL_CODE: u64 = 156218629254283264;
pub const XFLD_RT_VOLATILITY_MID_IV: u64 = 156218659319054336;
pub const XFLD_RT_VOLATILITY_QUOTE_RISK_QUALIFIERS: u64 = 156218706563694592;
pub const XFLD_RT_VOLATILITY_QUOTE_RISK_SEQUENCE: u64 = 156218702268727296;
pub const XFLD_RT_VOLATILITY_THEORETICAL_DELTA: u64 = 156218676498923520;
pub const XFLD_RT_VOLATILITY_THEORETICAL_GAMMA: u64 = 156218680793890816;
pub const XFLD_RT_VOLATILITY_THEORETICAL_GREEK_HITIME: u64 = 156218697973760000;
pub const XFLD_RT_VOLATILITY_THEORETICAL_HITIME: u64 = 156218672203956224;
pub const XFLD_RT_VOLATILITY_THEORETICAL_IV: u64 = 156218663614021632;
pub const XFLD_RT_VOLATILITY_THEORETICAL_PRICE: u64 = 156218667908988928;
pub const XFLD_RT_VOLATILITY_THEORETICAL_RHO: u64 = 156218685088858112;
pub const XFLD_RT_VOLATILITY_THEORETICAL_THETA: u64 = 156218689383825408;
pub const XFLD_RT_VOLATILITY_THEORETICAL_VEGA: u64 = 156218693678792704;
pub const XFLD_RT_VOLATILITY_TIME_VALUE: u64 = 156218646434152448;
pub const XFLD_RT_VOLATILITY_TRADE_DELTA: u64 = 156218723743563776;
pub const XFLD_RT_VOLATILITY_TRADE_EOD_INDICATOR: u64 = 156218749513367552;
pub const XFLD_RT_VOLATILITY_TRADE_EOD_PRICE: u64 = 156218844002648064;
pub const XFLD_RT_VOLATILITY_TRADE_EXCHANGE: u64 = 156218822527811584;
pub const XFLD_RT_VOLATILITY_TRADE_GAMMA: u64 = 156218728038531072;
pub const XFLD_RT_VOLATILITY_TRADE_GREEK_HITIME: u64 = 156218745218400256;
pub const XFLD_RT_VOLATILITY_TRADE_HITIME: u64 = 156218831117746176;
pub const XFLD_RT_VOLATILITY_TRADE_IV: u64 = 156218719448596480;
pub const XFLD_RT_VOLATILITY_TRADE_PRICE: u64 = 156218839707680768;
pub const XFLD_RT_VOLATILITY_TRADE_QUALIFIERS: u64 = 156218848297615360;
pub const XFLD_RT_VOLATILITY_TRADE_RHO: u64 = 156218732333498368;
pub const XFLD_RT_VOLATILITY_TRADE_RISK_QUALIFIERS: u64 = 156218758103302144;
pub const XFLD_RT_VOLATILITY_TRADE_RISK_SEQUENCE: u64 = 156218753808334848;
pub const XFLD_RT_VOLATILITY_TRADE_SEQUENCE: u64 = 156218826822778880;
pub const XFLD_RT_VOLATILITY_TRADE_SIZE: u64 = 156218835412713472;
pub const XFLD_RT_VOLATILITY_TRADE_THETA: u64 = 156218736628465664;
pub const XFLD_RT_VOLATILITY_TRADE_VEGA: u64 = 156218740923432960;
pub const XFLD_RT_VOLATILITY_UNDERLYING_ASK_PRICE: u64 = 156218805347942400;
pub const XFLD_RT_VOLATILITY_UNDERLYING_BID_PRICE: u64 = 156218801052975104;
pub const XFLD_RT_VOLATILITY_UNDERLYING_EOD_INDICATOR: u64 = 156218818232844288;
pub const XFLD_RT_VOLATILITY_UNDERLYING_THEORETICAL: u64 = 156218809642909696;
pub const XFLD_RT_VOLATILITY_UNDERLYING_VOLUME: u64 = 156218813937876992;
pub const XFLD_RT_VOLATILITY_UPDATE_RECEIVE_HITIME: u64 = 156218852592582656;
pub const XFLD_RT_VOLATILITY_UPDATE_XCAPI_RECEIVE_HITIME: u64 = 156218856887549952;
pub const XFLD_RT_SRS_ISIN: u64 = 156500117115895808;
pub const XFLD_RT_SRS_KEY: u64 = 156500091346092032;
pub const XFLD_RT_SRS_KEY_STRING: u64 = 156500095641059328;
pub const XFLD_RT_SRS_LISTING_MARKET: u64 = 156500112820928512;
pub const XFLD_RT_SRS_LOT_SIZE: u64 = 156500108525961216;
pub const XFLD_RT_SRS_SYMBOL_LABEL: u64 = 156500099936026624;
pub const XFLD_RT_SRS_TEST_SYMBOL: u64 = 156500104230993920;
pub const XFLD_WO_CONTAINER_TYPE: u64 = 216172790703718400;
pub const XFLD_WO_SLOT_COUNT: u64 = 216172794998685696;
pub const XFLD_WO_TURNKEY: u64 = 216172786408751104;
pub const XFLD_WO_EQTY_ALTERNATE_ID1: u64 = 216454261385461760;
pub const XFLD_WO_EQTY_ALTERNATE_ID2: u64 = 216454265680429056;
pub const XFLD_WO_EQTY_LINE_ID: u64 = 216454278565330944;
pub const XFLD_WO_EQTY_SYMBOL_TYPE: u64 = 216454269975396352;
pub const XFLD_WO_CMTY_ALTERNATE_ID1: u64 = 216735736362172416;
pub const XFLD_WO_CMTY_ALTERNATE_ID2: u64 = 216735740657139712;
pub const XFLD_WO_CMTY_LINE_ID: u64 = 216735753542041600;
pub const XFLD_WO_CMTY_SYMBOL_TYPE: u64 = 216735744952107008;
pub const XFLD_WO_L2_ALTERNATE_ID1: u64 = 217017224223784960;
pub const XFLD_WO_L2_ALTERNATE_ID2: u64 = 217017228518752256;
pub const XFLD_WO_L2_LINE_ID: u64 = 217017219928817664;
pub const XFLD_WO_L2_SYMBOL_TYPE: u64 = 217017211338883072;
pub const XFLD_WO_KLE_ACTION: u64 = 217298686315593728;
pub const XFLD_WO_KLE_CONSTITUENT_COUNT: u64 = 217298703495462912;
pub const XFLD_WO_KLE_CONSTITUENT_KEY: u64 = 217298690610561024;
pub const XFLD_WO_KLE_CONSTITUENT_KEY_STRING: u64 = 217298694905528320;
pub const XFLD_WO_KLE_CONSTITUENT_SYMBOL_TYPE: u64 = 217298699200495616;
pub const XFLD_RW_CONTAINER_TYPE: u64 = 360287983074541568;
pub const XFLD_RW_SLOT_COUNT: u64 = 360287987369508864;
pub const XFLD_RW_TURNKEY: u64 = 360287978779574272;
pub const XFLD_RW_BASKET_CASH_POSITION: u64 = 360569501000925184;
pub const XFLD_RW_BASKET_CONSTITUENT_HALTED_PRICE: u64 = 360569513885827072;
pub const XFLD_RW_BASKET_CONSTITUENT_KEY_STRING: u64 = 360569509590859776;
pub const XFLD_RW_BASKET_CONSTITUENT_PRICE_TYPE: u64 = 360569526770728960;
pub const XFLD_RW_BASKET_CONSTITUENT_WEIGHT: u64 = 360569492410990592;
pub const XFLD_RW_BASKET_DELTA_ASK_NAV: u64 = 360569470936154112;
pub const XFLD_RW_BASKET_DELTA_BID_NAV: u64 = 360569462346219520;
pub const XFLD_RW_BASKET_DELTA_LAST_NAV: u64 = 360569458051252224;
pub const XFLD_RW_BASKET_DIVISOR: u64 = 360569479526088704;
pub const XFLD_RW_BASKET_KEY: u64 = 360569449461317632;
pub const XFLD_RW_BASKET_KEY_STRING: u64 = 360569505295892480;
pub const XFLD_RW_BASKET_NUMBER_CONSTITUENTS: u64 = 360569483821056000;
pub const XFLD_RW_BASKET_THRESHOLD_ASK_HIGH: u64 = 360569531065696256;
pub const XFLD_RW_BASKET_THRESHOLD_ASK_LOW: u64 = 360569535360663552;
pub const XFLD_RW_BASKET_THRESHOLD_BID_HIGH: u64 = 360569539655630848;
pub const XFLD_RW_BASKET_THRESHOLD_BID_LOW: u64 = 360569543950598144;
pub const XFLD_RW_BASKET_THRESHOLD_LAST_HIGH: u64 = 360569548245565440;
pub const XFLD_RW_BASKET_THRESHOLD_LAST_LOW: u64 = 360569552540532736;
pub const XFLD_RW_BASKET_USER_NAV1: u64 = 360569518180794368;
pub const XFLD_RW_BASKET_USER_NAV2: u64 = 360569522475761664;
pub const XFLD_RW_KLD_CONSTITUENT_COUNT: u64 = 360850950207832064;
pub const XFLD_RW_KLD_CONSTITUENT_KEY: u64 = 360850937322930176;
pub const XFLD_RW_KLD_CONSTITUENT_KEY_STRING: u64 = 360850975977635840;
pub const XFLD_RW_KLD_CONSTITUENT_STATUS: u64 = 360850980272603136;
pub const XFLD_RW_KLD_CONSTITUENT_SYMBOL_TYPE: u64 = 360850945912864768;
pub const XFLD_RW_KLD_DESCRIPTION: u64 = 360850924438028288;
pub const XFLD_RW_KLD_KEY: u64 = 360850941617897472;
pub const XFLD_RW_KLD_KEY_STRING: u64 = 360850958797766656;
pub const XFLD_RW_KLD_UPDATE_DATE: u64 = 360850928732995584;
pub const XFLD_RW_KLD_UPDATE_TIME: u64 = 360850933027962880;
pub const XFLD_RW_KLFD_DESCRIPTION: u64 = 361132399414738944;
pub const XFLD_RW_KLFD_FILTER_EXPRESSION: u64 = 361132412299640832;
pub const XFLD_RW_KLFD_KEY: u64 = 361132416594608128;
pub const XFLD_RW_KLFD_KEY_STRING: u64 = 361132425184542720;
pub const XFLD_RW_KLFD_UPDATE_DATE: u64 = 361132403709706240;
pub const XFLD_RW_KLFD_UPDATE_TIME: u64 = 361132408004673536;
pub const XFLD_RW_BCONS_HALTED_PRICE: u64 = 361413887276351488;
pub const XFLD_RW_BCONS_IS_HALTED: u64 = 361413882981384192;
pub const XFLD_RW_BCONS_KEY: u64 = 361413874391449600;
pub const XFLD_RW_BCONS_KEY_STRING: u64 = 361413878686416896;
pub const XFLD_RW_BCONS_PRICE_TYPE: u64 = 361413891571318784;
pub const XFLD_RW_SPD_KEY: u64 = 361695349368160256;
pub const XFLD_RW_SPD_KEY_STRING: u64 = 361695353663127552;
pub const XFLD_RW_SPD_LL_ASK_FILTER_ENABLED: u64 = 361695379432931328;
pub const XFLD_RW_SPD_LL_BID_FILTER_ENABLED: u64 = 361695375137964032;
pub const XFLD_RW_SPD_QF_ASK_THRESHOLDS: u64 = 361695362253062144;
pub const XFLD_RW_SPD_QF_BID_THRESHOLDS: u64 = 361695357958094848;
pub const XFLD_RW_SPD_QV_ASK_THRESHOLDS: u64 = 361695370842996736;
pub const XFLD_RW_SPD_QV_BID_THRESHOLDS: u64 = 361695366548029440;
pub const XFLD_RW_SPD_UPDATE_HITIME: u64 = 361695383727898624;
pub const XFLD_ST_CONTAINER_TYPE: u64 = 432345577112469504;
pub const XFLD_ST_SLOT_COUNT: u64 = 432345581407436800;
pub const XFLD_ST_TURNKEY: u64 = 432345572817502208;
pub const XFLD_ST_EQTY_ALTERNATE_ID1: u64 = 432627043499245568;
pub const XFLD_ST_EQTY_ALTERNATE_ID2: u64 = 432627047794212864;
pub const XFLD_ST_EQTY_ASK_CUSTOMER_SIZE: u64 = 432627339851988992;
pub const XFLD_ST_EQTY_ASK_EXCHANGE: u64 = 432627052089180160;
pub const XFLD_ST_EQTY_ASK_HITIME: u64 = 432627653384601600;
pub const XFLD_ST_EQTY_ASK_MARKET_MAKER_SIZE: u64 = 432627348441923584;
pub const XFLD_ST_EQTY_ASK_PRICE: u64 = 432627056384147456;
pub const XFLD_ST_EQTY_ASK_PROFESSIONAL_SIZE: u64 = 432627344146956288;
pub const XFLD_ST_EQTY_ASK_SIZE: u64 = 432627060679114752;
pub const XFLD_ST_EQTY_ASK_TRADE_VENUE: u64 = 432627563190288384;
pub const XFLD_ST_EQTY_BID_CUSTOMER_SIZE: u64 = 432627352736890880;
pub const XFLD_ST_EQTY_BID_EXCHANGE: u64 = 432627077858983936;
pub const XFLD_ST_EQTY_BID_HITIME: u64 = 432627649089634304;
pub const XFLD_ST_EQTY_BID_MARKET_MAKER_SIZE: u64 = 432627361326825472;
pub const XFLD_ST_EQTY_BID_PRICE: u64 = 432627082153951232;
pub const XFLD_ST_EQTY_BID_PROFESSIONAL_SIZE: u64 = 432627357031858176;
pub const XFLD_ST_EQTY_BID_SIZE: u64 = 432627086448918528;
pub const XFLD_ST_EQTY_BID_TRADE_VENUE: u64 = 432627567485255680;
pub const XFLD_ST_EQTY_CLOSE_EXCH: u64 = 432627107923755008;
pub const XFLD_ST_EQTY_CLOSE_HITIME: u64 = 432627666269503488;
pub const XFLD_ST_EQTY_CLOSE_PRICE: u64 = 432627112218722304;
pub const XFLD_ST_EQTY_CLOSE_TRADE_VENUE: u64 = 432627571780222976;
pub const XFLD_ST_EQTY_CURRENCY: u64 = 432627120808656896;
pub const XFLD_ST_EQTY_EXCH_TIME_OFFSET: u64 = 432627125103624192;
pub const XFLD_ST_EQTY_GROUP_ID: u64 = 432627477290942464;
pub const XFLD_ST_EQTY_HIGH_EXCH: u64 = 432627129398591488;
pub const XFLD_ST_EQTY_HIGH_HITIME: u64 = 432627670564470784;
pub const XFLD_ST_EQTY_HIGH_PRICE: u64 = 432627133693558784;
pub const XFLD_ST_EQTY_HIGH_TRADE_VENUE: u64 = 432627576075190272;
pub const XFLD_ST_EQTY_IMBALANCE_AUCTION_END_HITIME: u64 = 432627447226171392;
pub const XFLD_ST_EQTY_IMBALANCE_AUCTION_ID: u64 = 432627438636236800;
pub const XFLD_ST_EQTY_IMBALANCE_AUCTION_OWNER: u64 = 432627451521138688;
pub const XFLD_ST_EQTY_IMBALANCE_AUCTION_START_HITIME: u64 = 432627442931204096;
pub const XFLD_ST_EQTY_IMBALANCE_AUCTION_TYPE: u64 = 432627412866433024;
pub const XFLD_ST_EQTY_IMBALANCE_FAR_PRICE: u64 = 432627434341269504;
pub const XFLD_ST_EQTY_IMBALANCE_MARKET_ORDER_TYPE: u64 = 432627636204732416;
pub const XFLD_ST_EQTY_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 432627631909765120;
pub const XFLD_ST_EQTY_IMBALANCE_NEAR_PRICE: u64 = 432627430046302208;
pub const XFLD_ST_EQTY_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 432627490175844352;
pub const XFLD_ST_EQTY_IMBALANCE_PAIRED_VOLUME: u64 = 432627421456367616;
pub const XFLD_ST_EQTY_IMBALANCE_QUALS: u64 = 432627395686563840;
pub const XFLD_ST_EQTY_IMBALANCE_RECEIVE_HITIME: u64 = 432627404276498432;
pub const XFLD_ST_EQTY_IMBALANCE_REFERENCE_PRICE: u64 = 432627425751334912;
pub const XFLD_ST_EQTY_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 432627494470811648;
pub const XFLD_ST_EQTY_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 432627520240615424;
pub const XFLD_ST_EQTY_IMBALANCE_REG_PAIRED_VOLUME: u64 = 432627511650680832;
pub const XFLD_ST_EQTY_IMBALANCE_REG_TYPE: u64 = 432627498765778944;
pub const XFLD_ST_EQTY_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 432627503060746240;
pub const XFLD_ST_EQTY_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 432627515945648128;
pub const XFLD_ST_EQTY_IMBALANCE_REG_VOLUME: u64 = 432627507355713536;
pub const XFLD_ST_EQTY_IMBALANCE_SEQUENCE: u64 = 432627399981531136;
pub const XFLD_ST_EQTY_IMBALANCE_TYPE: u64 = 432627408571465728;
pub const XFLD_ST_EQTY_IMBALANCE_UNPAIRED_TYPE: u64 = 432627481585909760;
pub const XFLD_ST_EQTY_IMBALANCE_UNPAIRED_VOLUME: u64 = 432627485880877056;
pub const XFLD_ST_EQTY_IMBALANCE_VOLUME: u64 = 432627417161400320;
pub const XFLD_ST_EQTY_INSTRUMENT_STATUS: u64 = 432627245362708480;
pub const XFLD_ST_EQTY_IOI_ASK_OFFSET_PRICE: u64 = 432627554600353792;
pub const XFLD_ST_EQTY_IOI_ASK_ORDER_REF: u64 = 432627533125517312;
pub const XFLD_ST_EQTY_IOI_ASK_QUALS: u64 = 432627541715451904;
pub const XFLD_ST_EQTY_IOI_BID_OFFSET_PRICE: u64 = 432627550305386496;
pub const XFLD_ST_EQTY_IOI_BID_ORDER_REF: u64 = 432627528830550016;
pub const XFLD_ST_EQTY_IOI_BID_QUALS: u64 = 432627537420484608;
pub const XFLD_ST_EQTY_IOI_OFFSET_PRICE_TYPE: u64 = 432627546010419200;
pub const XFLD_ST_EQTY_IOI_ORDER_REF_TYPE: u64 = 432627524535582720;
pub const XFLD_ST_EQTY_KEY: u64 = 432627219592904704;
pub const XFLD_ST_EQTY_KEY_STRING: u64 = 432627236772773888;
pub const XFLD_ST_EQTY_LAST_EXCH: u64 = 432627137988526080;
pub const XFLD_ST_EQTY_LAST_HITIME: u64 = 432627657679568896;
pub const XFLD_ST_EQTY_LAST_PRICE: u64 = 432627142283493376;
pub const XFLD_ST_EQTY_LAST_QUALS: u64 = 432627597550026752;
pub const XFLD_ST_EQTY_LAST_SEQUENCE: u64 = 432627601844994048;
pub const XFLD_ST_EQTY_LAST_SIZE: u64 = 432627146578460672;
pub const XFLD_ST_EQTY_LAST_TRADE_VENUE: u64 = 432627580370157568;
pub const XFLD_ST_EQTY_LIMIT_PRICE_HITIME: u64 = 432627683449372672;
pub const XFLD_ST_EQTY_LOT_SIZE: u64 = 432627326967087104;
pub const XFLD_ST_EQTY_LOWER_LIMIT_PRICE: u64 = 432627369916760064;
pub const XFLD_ST_EQTY_LOW_EXCH: u64 = 432627155168395264;
pub const XFLD_ST_EQTY_LOW_HITIME: u64 = 432627674859438080;
pub const XFLD_ST_EQTY_LOW_PRICE: u64 = 432627159463362560;
pub const XFLD_ST_EQTY_LOW_TRADE_VENUE: u64 = 432627584665124864;
pub const XFLD_ST_EQTY_MARKET_STATUS: u64 = 432627253952643072;
pub const XFLD_ST_EQTY_OPEN_EXCH: u64 = 432627163758329856;
pub const XFLD_ST_EQTY_OPEN_HITIME: u64 = 432627679154405376;
pub const XFLD_ST_EQTY_OPEN_INTEREST: u64 = 432627168053297152;
pub const XFLD_ST_EQTY_OPEN_PRICE: u64 = 432627172348264448;
pub const XFLD_ST_EQTY_OPEN_TRADE_VENUE: u64 = 432627588960092160;
pub const XFLD_ST_EQTY_PRICE_TYPE: u64 = 432627180938199040;
pub const XFLD_ST_EQTY_PRIME_COUNTRY: u64 = 432627558895321088;
pub const XFLD_ST_EQTY_PRIME_EXCH: u64 = 432627262542577664;
pub const XFLD_ST_EQTY_PRIME_TRADE_VENUE: u64 = 432627593255059456;
pub const XFLD_ST_EQTY_QUOTE_QUALS: u64 = 432627378506694656;
pub const XFLD_ST_EQTY_QUOTE_SEQUENCE: u64 = 432627382801661952;
pub const XFLD_ST_EQTY_REF_CLOSE_PRICE: u64 = 432627189528133632;
pub const XFLD_ST_EQTY_RELATIVE_LIMIT_HITIME: u64 = 432627687744339968;
pub const XFLD_ST_EQTY_RELATIVE_LIMIT_PRICE: u64 = 432627460111073280;
pub const XFLD_ST_EQTY_RELATIVE_LIMIT_PRICE_TYPE: u64 = 432627464406040576;
pub const XFLD_ST_EQTY_RELATIVE_LIMIT_TYPE: u64 = 432627468701007872;
pub const XFLD_ST_EQTY_SHORT_SALE_RESTRICTED: u64 = 432627331262054400;
pub const XFLD_ST_EQTY_SYMBOL_TYPE: u64 = 432627228182839296;
pub const XFLD_ST_EQTY_TOTAL_CHANGE: u64 = 432627193823100928;
pub const XFLD_ST_EQTY_TOTAL_VOLUME: u64 = 432627640499699712;
pub const XFLD_ST_EQTY_TOTAL_VOLUME_FILTERED: u64 = 432627644794667008;
pub const XFLD_ST_EQTY_TRADED_VALUE: u64 = 432627206708002816;
pub const XFLD_ST_EQTY_TRADE_EXCH: u64 = 432627614729895936;
pub const XFLD_ST_EQTY_TRADE_HITIME: u64 = 432627661974536192;
pub const XFLD_ST_EQTY_TRADE_PRICE: u64 = 432627606139961344;
pub const XFLD_ST_EQTY_TRADE_QUALS: u64 = 432627387096629248;
pub const XFLD_ST_EQTY_TRADE_SEQUENCE: u64 = 432627391391596544;
pub const XFLD_ST_EQTY_TRADE_SIZE: u64 = 432627610434928640;
pub const XFLD_ST_EQTY_TRADE_TICK_FLAGS: u64 = 432627202413035520;
pub const XFLD_ST_EQTY_TRADE_TRADE_VENUE: u64 = 432627627614797824;
pub const XFLD_ST_EQTY_TRADING_SESSION_DATE: u64 = 432627455816105984;
pub const XFLD_ST_EQTY_UPPER_LIMIT_PRICE: u64 = 432627365621792768;
pub const XFLD_ST_EQTY_VWAP_VOLUME: u64 = 432627215297937408;
pub const XFLD_ST_CMTY_ALTERNATE_ID1: u64 = 432908518475956224;
pub const XFLD_ST_CMTY_ALTERNATE_ID2: u64 = 432908522770923520;
pub const XFLD_ST_CMTY_ASK_HITIME: u64 = 432908982332424192;
pub const XFLD_ST_CMTY_ASK_IMPLIED_SIZE: u64 = 432908862073339904;
pub const XFLD_ST_CMTY_ASK_PRICE: u64 = 432908527065890816;
pub const XFLD_ST_CMTY_ASK_SIZE: u64 = 432908531360858112;
pub const XFLD_ST_CMTY_BID_HITIME: u64 = 432908986627391488;
pub const XFLD_ST_CMTY_BID_IMPLIED_SIZE: u64 = 432908866368307200;
pub const XFLD_ST_CMTY_BID_PRICE: u64 = 432908539950792704;
pub const XFLD_ST_CMTY_BID_SIZE: u64 = 432908544245760000;
pub const XFLD_ST_CMTY_CLOSE_HITIME: u64 = 432909008102227968;
pub const XFLD_ST_CMTY_CLOSE_PRICE_HIGH: u64 = 432908561425629184;
pub const XFLD_ST_CMTY_CLOSE_PRICE_LOW: u64 = 432908557130661888;
pub const XFLD_ST_CMTY_CURRENCY: u64 = 432908570015563776;
pub const XFLD_ST_CMTY_EXCH_TIME_OFFSET: u64 = 432908574310531072;
pub const XFLD_ST_CMTY_EXPIRATION: u64 = 432908578605498368;
pub const XFLD_ST_CMTY_GROUP_ID: u64 = 432908892138110976;
pub const XFLD_ST_CMTY_HIGH_BATE: u64 = 432908582900465664;
pub const XFLD_ST_CMTY_HIGH_HITIME: u64 = 432908999512293376;
pub const XFLD_ST_CMTY_HIGH_PRICE: u64 = 432908587195432960;
pub const XFLD_ST_CMTY_IMBALANCE_AUCTION_END_HITIME: u64 = 432908853483405312;
pub const XFLD_ST_CMTY_IMBALANCE_AUCTION_ID: u64 = 432908844893470720;
pub const XFLD_ST_CMTY_IMBALANCE_AUCTION_OWNER: u64 = 432908857778372608;
pub const XFLD_ST_CMTY_IMBALANCE_AUCTION_START_HITIME: u64 = 432908849188438016;
pub const XFLD_ST_CMTY_IMBALANCE_AUCTION_TYPE: u64 = 432908819123666944;
pub const XFLD_ST_CMTY_IMBALANCE_FAR_PRICE: u64 = 432908840598503424;
pub const XFLD_ST_CMTY_IMBALANCE_MARKET_ORDER_TYPE: u64 = 432908943677718528;
pub const XFLD_ST_CMTY_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 432908939382751232;
pub const XFLD_ST_CMTY_IMBALANCE_NEAR_PRICE: u64 = 432908836303536128;
pub const XFLD_ST_CMTY_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 432908905023012864;
pub const XFLD_ST_CMTY_IMBALANCE_PAIRED_VOLUME: u64 = 432908827713601536;
pub const XFLD_ST_CMTY_IMBALANCE_QUALS: u64 = 432908801943797760;
pub const XFLD_ST_CMTY_IMBALANCE_RECEIVE_HITIME: u64 = 432908810533732352;
pub const XFLD_ST_CMTY_IMBALANCE_REFERENCE_PRICE: u64 = 432908832008568832;
pub const XFLD_ST_CMTY_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 432908909317980160;
pub const XFLD_ST_CMTY_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 432908935087783936;
pub const XFLD_ST_CMTY_IMBALANCE_REG_PAIRED_VOLUME: u64 = 432908926497849344;
pub const XFLD_ST_CMTY_IMBALANCE_REG_TYPE: u64 = 432908913612947456;
pub const XFLD_ST_CMTY_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 432908917907914752;
pub const XFLD_ST_CMTY_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 432908930792816640;
pub const XFLD_ST_CMTY_IMBALANCE_REG_VOLUME: u64 = 432908922202882048;
pub const XFLD_ST_CMTY_IMBALANCE_SEQUENCE: u64 = 432908806238765056;
pub const XFLD_ST_CMTY_IMBALANCE_TYPE: u64 = 432908814828699648;
pub const XFLD_ST_CMTY_IMBALANCE_UNPAIRED_TYPE: u64 = 432908896433078272;
pub const XFLD_ST_CMTY_IMBALANCE_UNPAIRED_VOLUME: u64 = 432908900728045568;
pub const XFLD_ST_CMTY_IMBALANCE_VOLUME: u64 = 432908823418634240;
pub const XFLD_ST_CMTY_INSTRUMENT_STATUS: u64 = 432908720339419136;
pub const XFLD_ST_CMTY_KEY: u64 = 432908698864582656;
pub const XFLD_ST_CMTY_KEY_STRING: u64 = 432908711749484544;
pub const XFLD_ST_CMTY_LAST_BATE: u64 = 432908595785367552;
pub const XFLD_ST_CMTY_LAST_HITIME: u64 = 432908990922358784;
pub const XFLD_ST_CMTY_LAST_PRICE: u64 = 432908600080334848;
pub const XFLD_ST_CMTY_LAST_QUALS: u64 = 432908960857587712;
pub const XFLD_ST_CMTY_LAST_SEQUENCE: u64 = 432908965152555008;
pub const XFLD_ST_CMTY_LAST_SIZE: u64 = 432908604375302144;
pub const XFLD_ST_CMTY_LIMIT_PRICE_HITIME: u64 = 432909025282097152;
pub const XFLD_ST_CMTY_LOWER_LIMIT_PRICE: u64 = 432908793353863168;
pub const XFLD_ST_CMTY_LOW_BATE: u64 = 432908617260204032;
pub const XFLD_ST_CMTY_LOW_HITIME: u64 = 432909003807260672;
pub const XFLD_ST_CMTY_LOW_PRICE: u64 = 432908621555171328;
pub const XFLD_ST_CMTY_MARKET_STATUS: u64 = 432908728929353728;
pub const XFLD_ST_CMTY_OPEN_HITIME: u64 = 432909012397195264;
pub const XFLD_ST_CMTY_OPEN_INTEREST: u64 = 432908630145105920;
pub const XFLD_ST_CMTY_OPEN_PRICE_HIGH: u64 = 432908634440073216;
pub const XFLD_ST_CMTY_OPEN_PRICE_LOW: u64 = 432908638735040512;
pub const XFLD_ST_CMTY_PD_SETL_HITIME: u64 = 432909016692162560;
pub const XFLD_ST_CMTY_PD_SETL_PRICE: u64 = 432908647324975104;
pub const XFLD_ST_CMTY_PD_TOTAL_VOLUME: u64 = 432908969447522304;
pub const XFLD_ST_CMTY_PRICE_TYPE: u64 = 432908660209876992;
pub const XFLD_ST_CMTY_QUOTE_QUALS: u64 = 432908771879026688;
pub const XFLD_ST_CMTY_QUOTE_SEQUENCE: u64 = 432908776173993984;
pub const XFLD_ST_CMTY_RELATIVE_LIMIT_HITIME: u64 = 432909029577064448;
pub const XFLD_ST_CMTY_RELATIVE_LIMIT_PRICE: u64 = 432908874958241792;
pub const XFLD_ST_CMTY_RELATIVE_LIMIT_PRICE_TYPE: u64 = 432908879253209088;
pub const XFLD_ST_CMTY_RELATIVE_LIMIT_TYPE: u64 = 432908883548176384;
pub const XFLD_ST_CMTY_SETL_BATE: u64 = 432908668799811584;
pub const XFLD_ST_CMTY_SETL_HITIME: u64 = 432909020987129856;
pub const XFLD_ST_CMTY_SETL_PRICE: u64 = 432908673094778880;
pub const XFLD_ST_CMTY_SYMBOL_TYPE: u64 = 432908703159549952;
pub const XFLD_ST_CMTY_TOTAL_CHANGE: u64 = 432908681684713472;
pub const XFLD_ST_CMTY_TOTAL_VOLUME: u64 = 432908973742489600;
pub const XFLD_ST_CMTY_TOTAL_VOLUME_FILTERED: u64 = 432908978037456896;
pub const XFLD_ST_CMTY_TRADE_HITIME: u64 = 432908995217326080;
pub const XFLD_ST_CMTY_TRADE_PRICE: u64 = 432908947972685824;
pub const XFLD_ST_CMTY_TRADE_QUALS: u64 = 432908780468961280;
pub const XFLD_ST_CMTY_TRADE_SEQUENCE: u64 = 432908784763928576;
pub const XFLD_ST_CMTY_TRADE_SIZE: u64 = 432908952267653120;
pub const XFLD_ST_CMTY_TRADE_TICK_FLAGS: u64 = 432908690274648064;
pub const XFLD_ST_CMTY_TRADING_SESSION_DATE: u64 = 432908870663274496;
pub const XFLD_ST_CMTY_UPPER_LIMIT_PRICE: u64 = 432908789058895872;
pub const XFLD_ST_TPL_ABORTED: u64 = 434034555821752320;
pub const XFLD_ST_TPL_ALARM: u64 = 434034551526785024;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_AVG: u64 = 434034633131163648;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 434034650311032832;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 434034684670771200;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 434034654606000128;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 434034688965738496;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 434034658900967424;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 434034693260705792;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 434034663195934720;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 434034697555673088;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 434034667490902016;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 434034701850640384;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 434034671785869312;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 434034706145607680;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 434034676080836608;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 434034710440574976;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 434034680375803904;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 434034714735542272;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_MAX: u64 = 434034637426130944;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_MIN: u64 = 434034641721098240;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_SAMPLES: u64 = 434034628836196352;
pub const XFLD_ST_TPL_APPLIANCE_LATENCY_STD_DEV: u64 = 434034646016065536;
pub const XFLD_ST_TPL_BURSTRATE_TIMESPAN: u64 = 434034444152602624;
pub const XFLD_ST_TPL_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 434034491397242880;
pub const XFLD_ST_TPL_BYTE_COUNT: u64 = 434034452742537216;
pub const XFLD_ST_TPL_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 434034478512340992;
pub const XFLD_ST_TPL_CONNECTED: u64 = 434034542936850432;
pub const XFLD_ST_TPL_EXCHANGE_SKEW: u64 = 434034525756981248;
pub const XFLD_ST_TPL_FEED_IDENTIFIER: u64 = 434034530051948544;
pub const XFLD_ST_TPL_GAP_COUNT: u64 = 434034581591556096;
pub const XFLD_ST_TPL_HANDLER_NAME: u64 = 434034499987177472;
pub const XFLD_ST_TPL_HANDLER_VERSION: u64 = 434034504282144768;
pub const XFLD_ST_TPL_HEARTBEAT_COUNT: u64 = 434034727620444160;
pub const XFLD_ST_TPL_HIRATE_TIMESPAN: u64 = 434034439857635328;
pub const XFLD_ST_TPL_IGNORED_COUNT: u64 = 434034723325476864;
pub const XFLD_ST_TPL_INVALID_COUNT: u64 = 434034719030509568;
pub const XFLD_ST_TPL_LAST_GAP_TIME: u64 = 434034517167046656;
pub const XFLD_ST_TPL_LINE_COUNT: u64 = 434034418382798848;
pub const XFLD_ST_TPL_LINE_IDENTIFIER: u64 = 434034426972733440;
pub const XFLD_ST_TPL_LINE_NAME: u64 = 434034422677766144;
pub const XFLD_ST_TPL_LINE_SKEW: u64 = 434034521462013952;
pub const XFLD_ST_TPL_LINE_STATE: u64 = 434034568706654208;
pub const XFLD_ST_TPL_LOGGED_IN: u64 = 434034547231817728;
pub const XFLD_ST_TPL_MESSAGE_COUNT: u64 = 434034448447569920;
pub const XFLD_ST_TPL_ON_SCHEDULE: u64 = 434034534346915840;
pub const XFLD_ST_TPL_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 434034495692210176;
pub const XFLD_ST_TPL_PACKET_COUNT: u64 = 434034457037504512;
pub const XFLD_ST_TPL_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 434034482807308288;
pub const XFLD_ST_TPL_PEAK_BYTE_RATE: u64 = 434034465627439104;
pub const XFLD_ST_TPL_PEAK_MESSAGE_BURSTRATE: u64 = 434034487102275584;
pub const XFLD_ST_TPL_PEAK_MESSAGE_HIRATE: u64 = 434034474217373696;
pub const XFLD_ST_TPL_PEAK_MESSAGE_RATE: u64 = 434034461332471808;
pub const XFLD_ST_TPL_PEAK_PACKET_RATE: u64 = 434034469922406400;
pub const XFLD_ST_TPL_PEAK_QUOTE_BURSTRATE: u64 = 434034611656327168;
pub const XFLD_ST_TPL_PEAK_QUOTE_HIRATE: u64 = 434034603066392576;
pub const XFLD_ST_TPL_PEAK_QUOTE_RATE: u64 = 434034594476457984;
pub const XFLD_ST_TPL_PEAK_TIME_BURSTRATE: u64 = 434034620246261760;
pub const XFLD_ST_TPL_PEAK_TIME_HIRATE: u64 = 434034624541229056;
pub const XFLD_ST_TPL_PEAK_TRADE_BURSTRATE: u64 = 434034615951294464;
pub const XFLD_ST_TPL_PEAK_TRADE_HIRATE: u64 = 434034607361359872;
pub const XFLD_ST_TPL_PEAK_TRADE_RATE: u64 = 434034598771425280;
pub const XFLD_ST_TPL_PENDING_DOWN: u64 = 434034560116719616;
pub const XFLD_ST_TPL_QUOTE_COUNT: u64 = 434034585886523392;
pub const XFLD_ST_TPL_TCP_SOCKET_COUNT: u64 = 434034577296588800;
pub const XFLD_ST_TPL_TEST: u64 = 434034538641883136;
pub const XFLD_ST_TPL_TIMESPAN: u64 = 434034435562668032;
pub const XFLD_ST_TPL_TIMESTAMP: u64 = 434034431267700736;
pub const XFLD_ST_TPL_TRADE_COUNT: u64 = 434034590181490688;
pub const XFLD_ST_TPL_UDP_SOCKET_COUNT: u64 = 434034573001621504;
pub const XFLD_ST_TPS_APPLIANCE_ADDRESS: u64 = 434315936309182464;
pub const XFLD_ST_TPS_BURSTRATE_TIMESPAN: u64 = 434315914834345984;
pub const XFLD_ST_TPS_BYTE_COUNT: u64 = 434315949194084352;
pub const XFLD_ST_TPS_CONNECTION_TYPE: u64 = 434315923424280576;
pub const XFLD_ST_TPS_FEED_ADDRESS: u64 = 434315927719247872;
pub const XFLD_ST_TPS_FEED_MULTICAST: u64 = 434315932014215168;
pub const XFLD_ST_TPS_HIRATE_TIMESPAN: u64 = 434315910539378688;
pub const XFLD_ST_TPS_LINE_IDENTIFIER: u64 = 434315919129313280;
pub const XFLD_ST_TPS_LINE_NAME: u64 = 434315897654476800;
pub const XFLD_ST_TPS_MESSAGE_COUNT: u64 = 434315953489051648;
pub const XFLD_ST_TPS_PACKET_COUNT: u64 = 434315944899117056;
pub const XFLD_ST_TPS_PEAK_BYTE_BURSTRATE: u64 = 434315987848790016;
pub const XFLD_ST_TPS_PEAK_BYTE_HIRATE: u64 = 434315974963888128;
pub const XFLD_ST_TPS_PEAK_BYTE_RATE: u64 = 434315962078986240;
pub const XFLD_ST_TPS_PEAK_MESSAGE_BURSTRATE: u64 = 434315992143757312;
pub const XFLD_ST_TPS_PEAK_MESSAGE_HIRATE: u64 = 434315979258855424;
pub const XFLD_ST_TPS_PEAK_MESSAGE_RATE: u64 = 434315966373953536;
pub const XFLD_ST_TPS_PEAK_PACKET_BURSTRATE: u64 = 434315983553822720;
pub const XFLD_ST_TPS_PEAK_PACKET_HIRATE: u64 = 434315970668920832;
pub const XFLD_ST_TPS_PEAK_PACKET_RATE: u64 = 434315957784018944;
pub const XFLD_ST_TPS_PORT: u64 = 434315940604149760;
pub const XFLD_ST_TPS_SOCKET_COUNT: u64 = 434315893359509504;
pub const XFLD_ST_TPS_TIMESPAN: u64 = 434315906244411392;
pub const XFLD_ST_TPS_TIMESTAMP: u64 = 434315901949444096;
pub const XFLD_ST_TPCLI_API_BUILD_OS_VERSION: u64 = 435160352649379840;
pub const XFLD_ST_TPCLI_API_BUILD_PLATFORM: u64 = 435160348354412544;
pub const XFLD_ST_TPCLI_API_VERSION: u64 = 435160339764477952;
pub const XFLD_ST_TPCLI_APPLIANCE_HOSTNAME: u64 = 435160369829249024;
pub const XFLD_ST_TPCLI_APPLIANCE_LOCAL_ADDRESS: u64 = 435160378419183616;
pub const XFLD_ST_TPCLI_APPLIANCE_LOCAL_INTERFACE: u64 = 435160374124216320;
pub const XFLD_ST_TPCLI_APPLIANCE_LOCAL_PORT: u64 = 435160382714150912;
pub const XFLD_ST_TPCLI_CHANNEL_NAME: u64 = 435160365534281728;
pub const XFLD_ST_TPCLI_CLIENT_COUNT: u64 = 435160331174543360;
pub const XFLD_ST_TPCLI_CLIENT_HOSTNAME: u64 = 435160387009118208;
pub const XFLD_ST_TPCLI_CLIENT_LOCAL_ADDRESS: u64 = 435160391304085504;
pub const XFLD_ST_TPCLI_CLIENT_LOCAL_PORT: u64 = 435160395599052800;
pub const XFLD_ST_TPCLI_CONNECTION_DATE: u64 = 435160361239314432;
pub const XFLD_ST_TPCLI_CONNECTION_TIME: u64 = 435160356944347136;
pub const XFLD_ST_TPCLI_CURRENT_SUBSCRIPTION_COUNT: u64 = 435160408483954688;
pub const XFLD_ST_TPCLI_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 435160417073889280;
pub const XFLD_ST_TPCLI_LOCAL_IB_KEY: u64 = 435160399894020096;
pub const XFLD_ST_TPCLI_MAX_SUBSCRIPTION_COUNT: u64 = 435160412778921984;
pub const XFLD_ST_TPCLI_REMOTE_IB_KEY: u64 = 435160404188987392;
pub const XFLD_ST_TPCLI_REMOTE_PROCESS_ID: u64 = 435160344059445248;
pub const XFLD_ST_TPCLI_USERNAME: u64 = 435160335469510656;
pub const XFLD_ST_TPLG_COUNT_MISSING: u64 = 436004756104675328;
pub const XFLD_ST_TPLG_FEED_IDENTIFIER: u64 = 436004777579511808;
pub const XFLD_ST_TPLG_FIRST_MISSING: u64 = 436004751809708032;
pub const XFLD_ST_TPLG_GAP_RANGE_COUNT: u64 = 436004747514740736;
pub const XFLD_ST_TPLG_LINE_IDENTIFIER: u64 = 436004773284544512;
pub const XFLD_ST_TPLG_LINE_NAME: u64 = 436004768989577216;
pub const XFLD_ST_TPLG_SUBLINE: u64 = 436004764694609920;
pub const XFLD_ST_TPLG_TIME: u64 = 436004760399642624;
pub const XFLD_ST_TPLG_TIMESTAMP: u64 = 436004743219773440;
pub const XFLD_ST_TPSUM_COMPOSITE_SYMBOL_COUNT: u64 = 436849198214676480;
pub const XFLD_ST_TPSUM_CONFIGURED_LINES_COUNT: u64 = 436849176739840000;
pub const XFLD_ST_TPSUM_CONFIGURED_TCP_SOCKETS_COUNT: u64 = 436849185329774592;
pub const XFLD_ST_TPSUM_CONFIGURED_UDP_SOCKETS_COUNT: u64 = 436849181034807296;
pub const XFLD_ST_TPSUM_CURRENT_CLIENT_COUNT: u64 = 436849202509643776;
pub const XFLD_ST_TPSUM_CURRENT_CLIENT_SUBSCRIPTIONS: u64 = 436849211099578368;
pub const XFLD_ST_TPSUM_CURRENT_SUBSCRIPTION_OVERLAP: u64 = 436849219689512960;
pub const XFLD_ST_TPSUM_LAST_RESTART_TIME: u64 = 436849172444872704;
pub const XFLD_ST_TPSUM_MAX_CLIENT_COUNT: u64 = 436849206804611072;
pub const XFLD_ST_TPSUM_MAX_CLIENT_SUBSCRIPTIONS: u64 = 436849215394545664;
pub const XFLD_ST_TPSUM_MAX_SUBSCRIPTION_OVERLAP: u64 = 436849223984480256;
pub const XFLD_ST_TPSUM_PACKET_DROP_COUNT: u64 = 436849189624741888;
pub const XFLD_ST_TPSUM_REGIONAL_SYMBOL_COUNT: u64 = 436849193919709184;
pub const XFLD_ST_TPSUM_TICKER_PLANT_VERSION: u64 = 436849168149905408;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_AVG: u64 = 437130647421583360;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 437130664601452544;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 437130698961190912;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 437130668896419840;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 437130703256158208;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 437130673191387136;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 437130707551125504;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 437130677486354432;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 437130711846092800;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 437130681781321728;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 437130716141060096;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 437130686076289024;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 437130720436027392;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 437130690371256320;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 437130724730994688;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 437130694666223616;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 437130729025961984;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_MAX: u64 = 437130651716550656;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_MIN: u64 = 437130656011517952;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_SAMPLES: u64 = 437130643126616064;
pub const XFLD_ST_TPLAT_APPLIANCE_LATENCY_STD_DEV: u64 = 437130660306485248;
pub const XFLD_ST_TPCR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 437412139578163200;
pub const XFLD_ST_TPCR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 437412135283195904;
pub const XFLD_ST_TPCR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 437412130988228608;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_AVG: u64 = 437412173937901568;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN0_LOWER_BOUND: u64 = 437412191117770752;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN0_SAMPLES: u64 = 437412225477509120;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN1_LOWER_BOUND: u64 = 437412195412738048;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN1_SAMPLES: u64 = 437412229772476416;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN2_LOWER_BOUND: u64 = 437412199707705344;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN2_SAMPLES: u64 = 437412234067443712;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN3_LOWER_BOUND: u64 = 437412204002672640;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN3_SAMPLES: u64 = 437412238362411008;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN4_LOWER_BOUND: u64 = 437412208297639936;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN4_SAMPLES: u64 = 437412242657378304;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN5_LOWER_BOUND: u64 = 437412212592607232;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN5_SAMPLES: u64 = 437412246952345600;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN6_LOWER_BOUND: u64 = 437412216887574528;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN6_SAMPLES: u64 = 437412251247312896;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN7_LOWER_BOUND: u64 = 437412221182541824;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_BIN7_SAMPLES: u64 = 437412255542280192;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_MAX: u64 = 437412186822803456;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_MIN: u64 = 437412182527836160;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_SAMPLES: u64 = 437412169642934272;
pub const XFLD_ST_TPCR_CALLBACK_LATENCY_STD_DEV: u64 = 437412178232868864;
pub const XFLD_ST_TPCR_CLIENT_COUNT: u64 = 437412122398294016;
pub const XFLD_ST_TPCR_CLIENT_ID: u64 = 437412259837247488;
pub const XFLD_ST_TPCR_FULL_BUFFER_SEND_COUNT: u64 = 437412165347966976;
pub const XFLD_ST_TPCR_MAX_CLIENT_BUFFER_SIZE: u64 = 437412126693261312;
pub const XFLD_ST_TPCR_OUTPUT_PEAK_BYTE_RATE: u64 = 437412152463065088;
pub const XFLD_ST_TPCR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 437412148168097792;
pub const XFLD_ST_TPCR_OUTPUT_PEAK_PACKET_RATE: u64 = 437412143873130496;
pub const XFLD_ST_TPCR_PENDING_SEND_BUFFER_COUNT: u64 = 437412156758032384;
pub const XFLD_ST_TPCR_PENDING_SEND_BYTE_COUNT: u64 = 437412161052999680;
pub const XFLD_ST_TPCR_TIMESPAN: u64 = 437412118103326720;
pub const XFLD_ST_TPSR_BURSTRATE_TIMESPAN: u64 = 437693657504546816;
pub const XFLD_ST_TPSR_HIRATE_TIMESPAN: u64 = 437693653209579520;
pub const XFLD_ST_TPSR_OUTPUT_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693790648532992;
pub const XFLD_ST_TPSR_OUTPUT_BYTE_COUNT: u64 = 437693644619644928;
pub const XFLD_ST_TPSR_OUTPUT_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 437693777763631104;
pub const XFLD_ST_TPSR_OUTPUT_MESSAGE_COUNT: u64 = 437693631734743040;
pub const XFLD_ST_TPSR_OUTPUT_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693786353565696;
pub const XFLD_ST_TPSR_OUTPUT_PACKET_COUNT: u64 = 437693627439775744;
pub const XFLD_ST_TPSR_OUTPUT_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 437693773468663808;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_BYTE_RATE: u64 = 437693764878729216;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_MESSAGE_BURSTRATE: u64 = 437693782058598400;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_MESSAGE_HIRATE: u64 = 437693769173696512;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 437693747698860032;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_PACKET_RATE: u64 = 437693760583761920;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_QUOTE_RATE: u64 = 437693751993827328;
pub const XFLD_ST_TPSR_OUTPUT_PEAK_TRADE_RATE: u64 = 437693756288794624;
pub const XFLD_ST_TPSR_OUTPUT_QUOTE_COUNT: u64 = 437693636029710336;
pub const XFLD_ST_TPSR_OUTPUT_TRADE_COUNT: u64 = 437693640324677632;
pub const XFLD_ST_TPSR_POST_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693743403892736;
pub const XFLD_ST_TPSR_POST_ARB_BYTE_COUNT: u64 = 437693623144808448;
pub const XFLD_ST_TPSR_POST_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 437693730518990848;
pub const XFLD_ST_TPSR_POST_ARB_MESSAGE_COUNT: u64 = 437693610259906560;
pub const XFLD_ST_TPSR_POST_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693739108925440;
pub const XFLD_ST_TPSR_POST_ARB_PACKET_COUNT: u64 = 437693605964939264;
pub const XFLD_ST_TPSR_POST_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 437693726224023552;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_BYTE_RATE: u64 = 437693717634088960;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 437693734813958144;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_MESSAGE_HIRATE: u64 = 437693721929056256;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_MESSAGE_RATE: u64 = 437693700454219776;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_PACKET_RATE: u64 = 437693713339121664;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_QUOTE_FILTERED_RATE: u64 = 437693799238467584;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_QUOTE_RATE: u64 = 437693704749187072;
pub const XFLD_ST_TPSR_POST_ARB_PEAK_TRADE_RATE: u64 = 437693709044154368;
pub const XFLD_ST_TPSR_POST_ARB_QUOTE_COUNT: u64 = 437693614554873856;
pub const XFLD_ST_TPSR_POST_ARB_QUOTE_FILTERED_COUNT: u64 = 437693794943500288;
pub const XFLD_ST_TPSR_POST_ARB_TRADE_COUNT: u64 = 437693618849841152;
pub const XFLD_ST_TPSR_PRE_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693696159252480;
pub const XFLD_ST_TPSR_PRE_ARB_BYTE_COUNT: u64 = 437693601669971968;
pub const XFLD_ST_TPSR_PRE_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 437693683274350592;
pub const XFLD_ST_TPSR_PRE_ARB_MESSAGE_COUNT: u64 = 437693597375004672;
pub const XFLD_ST_TPSR_PRE_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 437693691864285184;
pub const XFLD_ST_TPSR_PRE_ARB_PACKET_COUNT: u64 = 437693593080037376;
pub const XFLD_ST_TPSR_PRE_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 437693678979383296;
pub const XFLD_ST_TPSR_PRE_ARB_PEAK_BYTE_RATE: u64 = 437693670389448704;
pub const XFLD_ST_TPSR_PRE_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 437693687569317888;
pub const XFLD_ST_TPSR_PRE_ARB_PEAK_MESSAGE_HIRATE: u64 = 437693674684416000;
pub const XFLD_ST_TPSR_PRE_ARB_PEAK_MESSAGE_RATE: u64 = 437693661799514112;
pub const XFLD_ST_TPSR_PRE_ARB_PEAK_PACKET_RATE: u64 = 437693666094481408;
pub const XFLD_ST_TPSR_TIMESPAN: u64 = 437693648914612224;
pub const XFLD_ST_TPSE_API_BUILD_OS_VERSION: u64 = 438256564508295168;
pub const XFLD_ST_TPSE_API_BUILD_PLATFORM: u64 = 438256560213327872;
pub const XFLD_ST_TPSE_API_VERSION: u64 = 438256551623393280;
pub const XFLD_ST_TPSE_APPLIANCE_HOSTNAME: u64 = 438256581688164352;
pub const XFLD_ST_TPSE_APPLIANCE_LOCAL_ADDRESS: u64 = 438256590278098944;
pub const XFLD_ST_TPSE_APPLIANCE_LOCAL_INTERFACE: u64 = 438256585983131648;
pub const XFLD_ST_TPSE_APPLIANCE_LOCAL_PORT: u64 = 438256594573066240;
pub const XFLD_ST_TPSE_CHANNEL_NAME: u64 = 438256577393197056;
pub const XFLD_ST_TPSE_CLIENT_HOSTNAME: u64 = 438256598868033536;
pub const XFLD_ST_TPSE_CLIENT_ID: u64 = 438256633227771904;
pub const XFLD_ST_TPSE_CLIENT_LOCAL_ADDRESS: u64 = 438256603163000832;
pub const XFLD_ST_TPSE_CLIENT_LOCAL_PORT: u64 = 438256607457968128;
pub const XFLD_ST_TPSE_CONNECTION_DATE: u64 = 438256573098229760;
pub const XFLD_ST_TPSE_CONNECTION_TIME: u64 = 438256568803262464;
pub const XFLD_ST_TPSE_CURRENT_SUBSCRIPTION_COUNT: u64 = 438256620342870016;
pub const XFLD_ST_TPSE_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 438256628932804608;
pub const XFLD_ST_TPSE_LOCAL_IB_KEY: u64 = 438256611752935424;
pub const XFLD_ST_TPSE_MAX_SUBSCRIPTION_COUNT: u64 = 438256624637837312;
pub const XFLD_ST_TPSE_REMOTE_IB_KEY: u64 = 438256616047902720;
pub const XFLD_ST_TPSE_REMOTE_PROCESS_ID: u64 = 438256555918360576;
pub const XFLD_ST_TPSE_SESSION_COUNT: u64 = 438256543033458688;
pub const XFLD_ST_TPSE_SESSION_ID: u64 = 438256637522739200;
pub const XFLD_ST_TPSE_USERNAME: u64 = 438256547328425984;
pub const XFLD_ST_TPSER_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 438538035190038528;
pub const XFLD_ST_TPSER_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 438538030895071232;
pub const XFLD_ST_TPSER_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 438538026600103936;
pub const XFLD_ST_TPSER_AVG: u64 = 438538078139711488;
pub const XFLD_ST_TPSER_BIN0_LOWER_BOUND: u64 = 438538095319580672;
pub const XFLD_ST_TPSER_BIN0_SAMPLES: u64 = 438538129679319040;
pub const XFLD_ST_TPSER_BIN1_LOWER_BOUND: u64 = 438538099614547968;
pub const XFLD_ST_TPSER_BIN1_SAMPLES: u64 = 438538133974286336;
pub const XFLD_ST_TPSER_BIN2_LOWER_BOUND: u64 = 438538103909515264;
pub const XFLD_ST_TPSER_BIN2_SAMPLES: u64 = 438538138269253632;
pub const XFLD_ST_TPSER_BIN3_LOWER_BOUND: u64 = 438538108204482560;
pub const XFLD_ST_TPSER_BIN3_SAMPLES: u64 = 438538142564220928;
pub const XFLD_ST_TPSER_BIN4_LOWER_BOUND: u64 = 438538112499449856;
pub const XFLD_ST_TPSER_BIN4_SAMPLES: u64 = 438538146859188224;
pub const XFLD_ST_TPSER_BIN5_LOWER_BOUND: u64 = 438538116794417152;
pub const XFLD_ST_TPSER_BIN5_SAMPLES: u64 = 438538151154155520;
pub const XFLD_ST_TPSER_BIN6_LOWER_BOUND: u64 = 438538121089384448;
pub const XFLD_ST_TPSER_BIN6_SAMPLES: u64 = 438538155449122816;
pub const XFLD_ST_TPSER_BIN7_LOWER_BOUND: u64 = 438538125384351744;
pub const XFLD_ST_TPSER_BIN7_SAMPLES: u64 = 438538159744090112;
pub const XFLD_ST_TPSER_CLIENT_ID: u64 = 438538069549776896;
pub const XFLD_ST_TPSER_FULL_BUFFER_SEND_COUNT: u64 = 438538060959842304;
pub const XFLD_ST_TPSER_MAX: u64 = 438538082434678784;
pub const XFLD_ST_TPSER_MAX_CLIENT_BUFFER_SIZE: u64 = 438538022305136640;
pub const XFLD_ST_TPSER_MIN: u64 = 438538086729646080;
pub const XFLD_ST_TPSER_OUTPUT_PEAK_BYTE_RATE: u64 = 438538048074940416;
pub const XFLD_ST_TPSER_OUTPUT_PEAK_MESSAGE_RATE: u64 = 438538043779973120;
pub const XFLD_ST_TPSER_OUTPUT_PEAK_PACKET_RATE: u64 = 438538039485005824;
pub const XFLD_ST_TPSER_PENDING_SEND_BUFFER_COUNT: u64 = 438538052369907712;
pub const XFLD_ST_TPSER_PENDING_SEND_BYTE_COUNT: u64 = 438538056664875008;
pub const XFLD_ST_TPSER_SAMPLES: u64 = 438538065254809600;
pub const XFLD_ST_TPSER_SESSION_COUNT: u64 = 438538018010169344;
pub const XFLD_ST_TPSER_SESSION_ID: u64 = 438538073844744192;
pub const XFLD_ST_TPSER_STD_DEV: u64 = 438538091024613376;
pub const XFLD_EVT_APPLIANCE_TIME_COUNT: u64 = 288230466346024960;
pub const XFLD_EVT_EVENT_TYPE: u64 = 288230380446679040;
pub const XFLD_EVT_ITEM_KEY: u64 = 288230401921515520;
pub const XFLD_EVT_ITEM_KEY_STRING: u64 = 288230406216482816;
pub const XFLD_EVT_LINE_ID: u64 = 288230457756090368;
pub const XFLD_EVT_RECEIVE_HITIME: u64 = 288230440576221184;
pub const XFLD_EVT_SEQUENCE: u64 = 288230462051057664;
pub const XFLD_EVT_STATUS: u64 = 288230389036613632;
pub const XFLD_EVT_TRANSMIT_HITIME: u64 = 288230453461123072;
pub const XFLD_EVT_TURNKEY: u64 = 288230393331580928;
pub const XFLD_EVT_XCAPI_CALLBACK_HITIME: u64 = 288230449166155776;
pub const XFLD_EVT_XCAPI_RECEIVE_HITIME: u64 = 288230444871188480;
pub const XFLD_EVT_EQTY_TRD_ALTERNATE_ID1: u64 = 289637811164807168;
pub const XFLD_EVT_EQTY_TRD_ALTERNATE_ID2: u64 = 289637815459774464;
pub const XFLD_EVT_EQTY_TRD_ASK_MMID: u64 = 289637948603760640;
pub const XFLD_EVT_EQTY_TRD_ASK_ORDER_REF: u64 = 289637940013826048;
pub const XFLD_EVT_EQTY_TRD_BID_MMID: u64 = 289637944308793344;
pub const XFLD_EVT_EQTY_TRD_BID_ORDER_REF: u64 = 289637935718858752;
pub const XFLD_EVT_EQTY_TRD_CLOSE_PRICE: u64 = 289637970078597120;
pub const XFLD_EVT_EQTY_TRD_COUNTRY: u64 = 289637965783629824;
pub const XFLD_EVT_EQTY_TRD_EXCHANGE: u64 = 289637918538989568;
pub const XFLD_EVT_EQTY_TRD_EXCHANGE_HITIME: u64 = 289637897064153088;
pub const XFLD_EVT_EQTY_TRD_HIGH_PRICE: u64 = 289637875589316608;
pub const XFLD_EVT_EQTY_TRD_INSTRUMENT_STATUS: u64 = 289637901359120384;
pub const XFLD_EVT_EQTY_TRD_LOW_PRICE: u64 = 289637879884283904;
pub const XFLD_EVT_EQTY_TRD_MARKET_STATUS: u64 = 289637909949054976;
pub const XFLD_EVT_EQTY_TRD_OPEN_PRICE: u64 = 289637866999382016;
pub const XFLD_EVT_EQTY_TRD_ORDER_REF_ID_TYPE: u64 = 289637974373564416;
pub const XFLD_EVT_EQTY_TRD_PRICE: u64 = 289637776805068800;
pub const XFLD_EVT_EQTY_TRD_PRICE_TYPE: u64 = 289637763920166912;
pub const XFLD_EVT_EQTY_TRD_QUALS: u64 = 289637824049709056;
pub const XFLD_EVT_EQTY_TRD_SHORT_SALE_RESTRICTED: u64 = 289637922833956864;
pub const XFLD_EVT_EQTY_TRD_SIDE_ATTR: u64 = 289637957193695232;
pub const XFLD_EVT_EQTY_TRD_SIZE: u64 = 289637781100036096;
pub const XFLD_EVT_EQTY_TRD_SUB_MARKET: u64 = 289637892769185792;
pub const XFLD_EVT_EQTY_TRD_SYMBOL_TYPE: u64 = 289637832639643648;
pub const XFLD_EVT_EQTY_TRD_TOTAL_CHANGE: u64 = 289637871294349312;
pub const XFLD_EVT_EQTY_TRD_TOTAL_VOLUME: u64 = 289638077452779520;
pub const XFLD_EVT_EQTY_TRD_TOTAL_VOLUME_FILTERED: u64 = 289638081747746816;
pub const XFLD_EVT_EQTY_TRD_TRADED_VALUE: u64 = 289637854114480128;
pub const XFLD_EVT_EQTY_TRD_TRADE_REF: u64 = 289637952898727936;
pub const XFLD_EVT_EQTY_TRD_TRADE_THRU_EXEMPT: u64 = 289637961488662528;
pub const XFLD_EVT_EQTY_TRD_TRADE_TICK_FLAGS: u64 = 289637768215134208;
pub const XFLD_EVT_EQTY_TRD_TRADE_UPDATE_FLAGS: u64 = 289638073157812224;
pub const XFLD_EVT_EQTY_TRD_TRADE_VENUE: u64 = 289638068862844928;
pub const XFLD_EVT_EQTY_TRD_TRADING_SESSION_DATE: u64 = 289637978668531712;
pub const XFLD_EVT_EQTY_TRD_TRANSACTION_HITIME: u64 = 289638086042714112;
pub const XFLD_EVT_EQTY_TRD_VWAP_VOLUME: u64 = 289637841229578240;
pub const XFLD_EVT_EQTY_QUO_ALTERNATE_ID1: u64 = 289919286141517824;
pub const XFLD_EVT_EQTY_QUO_ALTERNATE_ID2: u64 = 289919290436485120;
pub const XFLD_EVT_EQTY_QUO_ASK_COUNTRY: u64 = 289919573904326656;
pub const XFLD_EVT_EQTY_QUO_ASK_CUSTOMER_SIZE: u64 = 289919350566027264;
pub const XFLD_EVT_EQTY_QUO_ASK_EXCHANGE: u64 = 289919256076746752;
pub const XFLD_EVT_EQTY_QUO_ASK_HITIME: u64 = 289919565314392064;
pub const XFLD_EVT_EQTY_QUO_ASK_MARKET_MAKER_SIZE: u64 = 289919359155961856;
pub const XFLD_EVT_EQTY_QUO_ASK_PRICE: u64 = 289919264666681344;
pub const XFLD_EVT_EQTY_QUO_ASK_PROFESSIONAL_SIZE: u64 = 289919354860994560;
pub const XFLD_EVT_EQTY_QUO_ASK_SIZE: u64 = 289919273256615936;
pub const XFLD_EVT_EQTY_QUO_ASK_TRADE_VENUE: u64 = 289919556724457472;
pub const XFLD_EVT_EQTY_QUO_BID_COUNTRY: u64 = 289919578199293952;
pub const XFLD_EVT_EQTY_QUO_BID_CUSTOMER_SIZE: u64 = 289919363450929152;
pub const XFLD_EVT_EQTY_QUO_BID_EXCHANGE: u64 = 289919251781779456;
pub const XFLD_EVT_EQTY_QUO_BID_HITIME: u64 = 289919569609359360;
pub const XFLD_EVT_EQTY_QUO_BID_MARKET_MAKER_SIZE: u64 = 289919372040863744;
pub const XFLD_EVT_EQTY_QUO_BID_PRICE: u64 = 289919260371714048;
pub const XFLD_EVT_EQTY_QUO_BID_PROFESSIONAL_SIZE: u64 = 289919367745896448;
pub const XFLD_EVT_EQTY_QUO_BID_SIZE: u64 = 289919268961648640;
pub const XFLD_EVT_EQTY_QUO_BID_TRADE_VENUE: u64 = 289919561019424768;
pub const XFLD_EVT_EQTY_QUO_EXCHANGE_HITIME: u64 = 289919320501256192;
pub const XFLD_EVT_EQTY_QUO_INSTRUMENT_STATUS: u64 = 289919324796223488;
pub const XFLD_EVT_EQTY_QUO_IOI_ASK_OFFSET_PRICE: u64 = 289919543839555584;
pub const XFLD_EVT_EQTY_QUO_IOI_ASK_ORDER_REF: u64 = 289919522364719104;
pub const XFLD_EVT_EQTY_QUO_IOI_ASK_QUALS: u64 = 289919530954653696;
pub const XFLD_EVT_EQTY_QUO_IOI_BID_OFFSET_PRICE: u64 = 289919539544588288;
pub const XFLD_EVT_EQTY_QUO_IOI_BID_ORDER_REF: u64 = 289919518069751808;
pub const XFLD_EVT_EQTY_QUO_IOI_BID_QUALS: u64 = 289919526659686400;
pub const XFLD_EVT_EQTY_QUO_IOI_OFFSET_PRICE_TYPE: u64 = 289919535249620992;
pub const XFLD_EVT_EQTY_QUO_IOI_ORDER_REF_TYPE: u64 = 289919513774784512;
pub const XFLD_EVT_EQTY_QUO_MARKET_STATUS: u64 = 289919333386158080;
pub const XFLD_EVT_EQTY_QUO_PRICE_TYPE: u64 = 289919238896877568;
pub const XFLD_EVT_EQTY_QUO_QUALS: u64 = 289919299026419712;
pub const XFLD_EVT_EQTY_QUO_SHORT_SALE_RESTRICTED: u64 = 289919337681125376;
pub const XFLD_EVT_EQTY_QUO_SIGLL_ASK_DARK: u64 = 289919548134522880;
pub const XFLD_EVT_EQTY_QUO_SIGLL_BID_DARK: u64 = 289919552429490176;
pub const XFLD_EVT_EQTY_QUO_SIGNUM_EXCH_ASK_COUNT: u64 = 289919509479817216;
pub const XFLD_EVT_EQTY_QUO_SIGNUM_EXCH_BID_COUNT: u64 = 289919505184849920;
pub const XFLD_EVT_EQTY_QUO_SIGQF_ASK_SHORT_FUSE: u64 = 289919462235176960;
pub const XFLD_EVT_EQTY_QUO_SIGQF_BID_SHORT_FUSE: u64 = 289919466530144256;
pub const XFLD_EVT_EQTY_QUO_SIGQV_ASK_UP_NEXT: u64 = 289919470825111552;
pub const XFLD_EVT_EQTY_QUO_SIGQV_BID_UP_NEXT: u64 = 289919475120078848;
pub const XFLD_EVT_EQTY_QUO_SYMBOL_TYPE: u64 = 289919307616354304;
pub const XFLD_EVT_EQTY_REFR_AFTERNOON_VWAP: u64 = 290201654471426048;
pub const XFLD_EVT_EQTY_REFR_ALLDAY_VWAP: u64 = 290201658766393344;
pub const XFLD_EVT_EQTY_REFR_ALTERNATE_ID1: u64 = 290200932916920320;
pub const XFLD_EVT_EQTY_REFR_ALTERNATE_ID2: u64 = 290200937211887616;
pub const XFLD_EVT_EQTY_REFR_ASK_CUSTOMER_SIZE: u64 = 290201164845154304;
pub const XFLD_EVT_EQTY_REFR_ASK_EXCHANGE: u64 = 290200795477966848;
pub const XFLD_EVT_EQTY_REFR_ASK_HITIME: u64 = 290201602931818496;
pub const XFLD_EVT_EQTY_REFR_ASK_MARKET_MAKER_SIZE: u64 = 290201173435088896;
pub const XFLD_EVT_EQTY_REFR_ASK_PRICE: u64 = 290200769708163072;
pub const XFLD_EVT_EQTY_REFR_ASK_PROFESSIONAL_SIZE: u64 = 290201169140121600;
pub const XFLD_EVT_EQTY_REFR_ASK_SIZE: u64 = 290200778298097664;
pub const XFLD_EVT_EQTY_REFR_ASK_TRADE_VENUE: u64 = 290201521327439872;
pub const XFLD_EVT_EQTY_REFR_BID_CUSTOMER_SIZE: u64 = 290201177730056192;
pub const XFLD_EVT_EQTY_REFR_BID_EXCHANGE: u64 = 290200791182999552;
pub const XFLD_EVT_EQTY_REFR_BID_HITIME: u64 = 290201607226785792;
pub const XFLD_EVT_EQTY_REFR_BID_MARKET_MAKER_SIZE: u64 = 290201186319990784;
pub const XFLD_EVT_EQTY_REFR_BID_PRICE: u64 = 290200765413195776;
pub const XFLD_EVT_EQTY_REFR_BID_PROFESSIONAL_SIZE: u64 = 290201182025023488;
pub const XFLD_EVT_EQTY_REFR_BID_SIZE: u64 = 290200774003130368;
pub const XFLD_EVT_EQTY_REFR_BID_TRADE_VENUE: u64 = 290201525622407168;
pub const XFLD_EVT_EQTY_REFR_CLOSE_EXCH: u64 = 290200722463522816;
pub const XFLD_EVT_EQTY_REFR_CLOSE_HITIME: u64 = 290201598636851200;
pub const XFLD_EVT_EQTY_REFR_CLOSE_PRICE: u64 = 290200713873588224;
pub const XFLD_EVT_EQTY_REFR_CLOSE_SIZE: u64 = 290200941506854912;
pub const XFLD_EVT_EQTY_REFR_CLOSE_TRADE_VENUE: u64 = 290201512737505280;
pub const XFLD_EVT_EQTY_REFR_CURRENCY: u64 = 290200748233326592;
pub const XFLD_EVT_EQTY_REFR_EXCHANGE_HITIME: u64 = 290201061765939200;
pub const XFLD_EVT_EQTY_REFR_EXCH_STAT_QUALS: u64 = 290201697421099008;
pub const XFLD_EVT_EQTY_REFR_EXCH_TIME_OFFSET: u64 = 290200958686724096;
pub const XFLD_EVT_EQTY_REFR_GROUP_ID: u64 = 290201302284107776;
pub const XFLD_EVT_EQTY_REFR_HIGH_52WEEK: u64 = 290201680241229824;
pub const XFLD_EVT_EQTY_REFR_HIGH_EXCH: u64 = 290200907147116544;
pub const XFLD_EVT_EQTY_REFR_HIGH_HITIME: u64 = 290201624406654976;
pub const XFLD_EVT_EQTY_REFR_HIGH_PRICE: u64 = 290200898557181952;
pub const XFLD_EVT_EQTY_REFR_HIGH_TRADE_VENUE: u64 = 290201538507309056;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_AUCTION_END_HITIME: u64 = 290201272219336704;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_AUCTION_ID: u64 = 290201263629402112;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_AUCTION_OWNER: u64 = 290201276514304000;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_AUCTION_START_HITIME: u64 = 290201267924369408;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_AUCTION_TYPE: u64 = 290201237859598336;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_FAR_PRICE: u64 = 290201259334434816;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_MARKET_ORDER_TYPE: u64 = 290201585751949312;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 290201581456982016;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_NEAR_PRICE: u64 = 290201255039467520;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 290201401068355584;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_PAIRED_VOLUME: u64 = 290201246449532928;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_QUALS: u64 = 290201220679729152;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_RECEIVE_HITIME: u64 = 290201229269663744;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REFERENCE_PRICE: u64 = 290201250744500224;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 290201405363322880;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 290201431133126656;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_PAIRED_VOLUME: u64 = 290201422543192064;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_TYPE: u64 = 290201409658290176;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 290201413953257472;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 290201426838159360;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_REG_VOLUME: u64 = 290201418248224768;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_SEQUENCE: u64 = 290201224974696448;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_TYPE: u64 = 290201233564631040;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_UNPAIRED_TYPE: u64 = 290201392478420992;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_UNPAIRED_VOLUME: u64 = 290201396773388288;
pub const XFLD_EVT_EQTY_REFR_IMBALANCE_VOLUME: u64 = 290201242154565632;
pub const XFLD_EVT_EQTY_REFR_INSTRUMENT_STATUS: u64 = 290201066060906496;
pub const XFLD_EVT_EQTY_REFR_IOI_ASK_OFFSET_PRICE: u64 = 290201491262668800;
pub const XFLD_EVT_EQTY_REFR_IOI_ASK_ORDER_REF: u64 = 290201469787832320;
pub const XFLD_EVT_EQTY_REFR_IOI_ASK_QUALS: u64 = 290201478377766912;
pub const XFLD_EVT_EQTY_REFR_IOI_BID_OFFSET_PRICE: u64 = 290201486967701504;
pub const XFLD_EVT_EQTY_REFR_IOI_BID_ORDER_REF: u64 = 290201465492865024;
pub const XFLD_EVT_EQTY_REFR_IOI_BID_QUALS: u64 = 290201474082799616;
pub const XFLD_EVT_EQTY_REFR_IOI_OFFSET_PRICE_TYPE: u64 = 290201482672734208;
pub const XFLD_EVT_EQTY_REFR_IOI_ORDER_REF_TYPE: u64 = 290201461197897728;
pub const XFLD_EVT_EQTY_REFR_LAST_EXCH: u64 = 290200829837705216;
pub const XFLD_EVT_EQTY_REFR_LAST_HITIME: u64 = 290201611521753088;
pub const XFLD_EVT_EQTY_REFR_LAST_PRICE: u64 = 290200808362868736;
pub const XFLD_EVT_EQTY_REFR_LAST_QUALS: u64 = 290201547097243648;
pub const XFLD_EVT_EQTY_REFR_LAST_SEQUENCE: u64 = 290201551392210944;
pub const XFLD_EVT_EQTY_REFR_LAST_SIZE: u64 = 290200816952803328;
pub const XFLD_EVT_EQTY_REFR_LAST_TRADE_VENUE: u64 = 290201529917374464;
pub const XFLD_EVT_EQTY_REFR_LIMIT_PRICE_HITIME: u64 = 290201632996589568;
pub const XFLD_EVT_EQTY_REFR_LOT_SIZE: u64 = 290201156255219712;
pub const XFLD_EVT_EQTY_REFR_LOWER_LIMIT_PRICE: u64 = 290201194909925376;
pub const XFLD_EVT_EQTY_REFR_LOW_52WEEK: u64 = 290201684536197120;
pub const XFLD_EVT_EQTY_REFR_LOW_EXCH: u64 = 290200911442083840;
pub const XFLD_EVT_EQTY_REFR_LOW_HITIME: u64 = 290201628701622272;
pub const XFLD_EVT_EQTY_REFR_LOW_PRICE: u64 = 290200902852149248;
pub const XFLD_EVT_EQTY_REFR_LOW_TRADE_VENUE: u64 = 290201542802276352;
pub const XFLD_EVT_EQTY_REFR_MARKET_STATUS: u64 = 290201078945808384;
pub const XFLD_EVT_EQTY_REFR_MORNING_VWAP: u64 = 290201650176458752;
pub const XFLD_EVT_EQTY_REFR_OPEN_EXCH: u64 = 290200834132672512;
pub const XFLD_EVT_EQTY_REFR_OPEN_HITIME: u64 = 290201620111687680;
pub const XFLD_EVT_EQTY_REFR_OPEN_INTEREST: u64 = 290200945801822208;
pub const XFLD_EVT_EQTY_REFR_OPEN_PRICE: u64 = 290200812657836032;
pub const XFLD_EVT_EQTY_REFR_OPEN_TRADE_VENUE: u64 = 290201534212341760;
pub const XFLD_EVT_EQTY_REFR_PREV_CLOSE: u64 = 290201040291102720;
pub const XFLD_EVT_EQTY_REFR_PRICE_TYPE: u64 = 290200950096789504;
pub const XFLD_EVT_EQTY_REFR_PRIME_COUNTRY: u64 = 290201495557636096;
pub const XFLD_EVT_EQTY_REFR_PRIME_EXCH: u64 = 290201053176004608;
pub const XFLD_EVT_EQTY_REFR_PRIME_TRADE_VENUE: u64 = 290201517032472576;
pub const XFLD_EVT_EQTY_REFR_QUALS: u64 = 290201027406200832;
pub const XFLD_EVT_EQTY_REFR_QUOTE_QUALS: u64 = 290201203499859968;
pub const XFLD_EVT_EQTY_REFR_QUOTE_SEQUENCE: u64 = 290201207794827264;
pub const XFLD_EVT_EQTY_REFR_REF_CLOSE_PRICE: u64 = 290200726758490112;
pub const XFLD_EVT_EQTY_REFR_RELATIVE_LIMIT_HITIME: u64 = 290201637291556864;
pub const XFLD_EVT_EQTY_REFR_RELATIVE_LIMIT_PRICE: u64 = 290201280809271296;
pub const XFLD_EVT_EQTY_REFR_RELATIVE_LIMIT_PRICE_TYPE: u64 = 290201285104238592;
pub const XFLD_EVT_EQTY_REFR_RELATIVE_LIMIT_TYPE: u64 = 290201289399205888;
pub const XFLD_EVT_EQTY_REFR_SHORT_SALE_RESTRICTED: u64 = 290201083240775680;
pub const XFLD_EVT_EQTY_REFR_SHORT_SELL_SHARES_TRADED: u64 = 290201688831164416;
pub const XFLD_EVT_EQTY_REFR_SHORT_SELL_TURNOVER: u64 = 290201693126131712;
pub const XFLD_EVT_EQTY_REFR_SIGLL_ASK_DARK: u64 = 290201504147570688;
pub const XFLD_EVT_EQTY_REFR_SIGLL_BID_DARK: u64 = 290201508442537984;
pub const XFLD_EVT_EQTY_REFR_SIGLL_STATUS: u64 = 290201499852603392;
pub const XFLD_EVT_EQTY_REFR_SIGNUM_EXCH_ASK_COUNT: u64 = 290201645881491456;
pub const XFLD_EVT_EQTY_REFR_SIGNUM_EXCH_BID_COUNT: u64 = 290201641586524160;
pub const XFLD_EVT_EQTY_REFR_SIGQF_ASK_SHORT_FUSE: u64 = 290201439723061248;
pub const XFLD_EVT_EQTY_REFR_SIGQF_BID_SHORT_FUSE: u64 = 290201444018028544;
pub const XFLD_EVT_EQTY_REFR_SIGQF_STATUS: u64 = 290201435428093952;
pub const XFLD_EVT_EQTY_REFR_SIGQV_ASK_UP_NEXT: u64 = 290201452607963136;
pub const XFLD_EVT_EQTY_REFR_SIGQV_BID_UP_NEXT: u64 = 290201456902930432;
pub const XFLD_EVT_EQTY_REFR_SIGQV_STATUS: u64 = 290201448312995840;
pub const XFLD_EVT_EQTY_REFR_STATUS: u64 = 290201044586070016;
pub const XFLD_EVT_EQTY_REFR_SYMBOL_TYPE: u64 = 290201023111233536;
pub const XFLD_EVT_EQTY_REFR_TOTAL_CHANGE: u64 = 290200868492410880;
pub const XFLD_EVT_EQTY_REFR_TOTAL_VOLUME: u64 = 290201590046916608;
pub const XFLD_EVT_EQTY_REFR_TOTAL_VOLUME_FILTERED: u64 = 290201594341883904;
pub const XFLD_EVT_EQTY_REFR_TRADED_VALUE: u64 = 290200885672280064;
pub const XFLD_EVT_EQTY_REFR_TRADE_COUNT_ON_BOOK: u64 = 290201667356327936;
pub const XFLD_EVT_EQTY_REFR_TRADE_COUNT_TOTAL: u64 = 290201663061360640;
pub const XFLD_EVT_EQTY_REFR_TRADE_EXCH: u64 = 290201572867047424;
pub const XFLD_EVT_EQTY_REFR_TRADE_HITIME: u64 = 290201615816720384;
pub const XFLD_EVT_EQTY_REFR_TRADE_PRICE: u64 = 290201555687178240;
pub const XFLD_EVT_EQTY_REFR_TRADE_QUALS: u64 = 290201212089794560;
pub const XFLD_EVT_EQTY_REFR_TRADE_SEQUENCE: u64 = 290201216384761856;
pub const XFLD_EVT_EQTY_REFR_TRADE_SIZE: u64 = 290201559982145536;
pub const XFLD_EVT_EQTY_REFR_TRADE_TICK_FLAGS: u64 = 290200838427639808;
pub const XFLD_EVT_EQTY_REFR_TRADE_TRADE_VENUE: u64 = 290201577162014720;
pub const XFLD_EVT_EQTY_REFR_TRADING_SESSION_DATE: u64 = 290201297989140480;
pub const XFLD_EVT_EQTY_REFR_TURNOVER_ON_BOOK: u64 = 290201675946262528;
pub const XFLD_EVT_EQTY_REFR_TURNOVER_TOTAL: u64 = 290201671651295232;
pub const XFLD_EVT_EQTY_REFR_UPPER_LIMIT_PRICE: u64 = 290201190614958080;
pub const XFLD_EVT_EQTY_REFR_VWAP_VOLUME: u64 = 290200954391756800;
pub const XFLD_EVT_EQTY_CANC_ALTERNATE_ID1: u64 = 290482236094939136;
pub const XFLD_EVT_EQTY_CANC_ALTERNATE_ID2: u64 = 290482240389906432;
pub const XFLD_EVT_EQTY_CANC_ASK_MMID: u64 = 290482326289252352;
pub const XFLD_EVT_EQTY_CANC_ASK_ORDER_REF: u64 = 290482317699317760;
pub const XFLD_EVT_EQTY_CANC_BID_MMID: u64 = 290482321994285056;
pub const XFLD_EVT_EQTY_CANC_BID_ORDER_REF: u64 = 290482313404350464;
pub const XFLD_EVT_EQTY_CANC_CLOSE_PRICE: u64 = 290482377828859904;
pub const XFLD_EVT_EQTY_CANC_COUNTRY: u64 = 290482343469121536;
pub const XFLD_EVT_EQTY_CANC_EXCHANGE: u64 = 290482296224481280;
pub const XFLD_EVT_EQTY_CANC_EXCHANGE_HITIME: u64 = 290482274749644800;
pub const XFLD_EVT_EQTY_CANC_HIGH_PRICE: u64 = 290482369238925312;
pub const XFLD_EVT_EQTY_CANC_INSTRUMENT_STATUS: u64 = 290482279044612096;
pub const XFLD_EVT_EQTY_CANC_LOW_PRICE: u64 = 290482373533892608;
pub const XFLD_EVT_EQTY_CANC_MARKET_STATUS: u64 = 290482287634546688;
pub const XFLD_EVT_EQTY_CANC_OPEN_PRICE: u64 = 290482360648990720;
pub const XFLD_EVT_EQTY_CANC_ORDER_REF_ID_TYPE: u64 = 290482382123827200;
pub const XFLD_EVT_EQTY_CANC_PRICE: u64 = 290482201735200768;
pub const XFLD_EVT_EQTY_CANC_PRICE_TYPE: u64 = 290482188850298880;
pub const XFLD_EVT_EQTY_CANC_QUALS: u64 = 290482248979841024;
pub const XFLD_EVT_EQTY_CANC_SHORT_SALE_RESTRICTED: u64 = 290482300519448576;
pub const XFLD_EVT_EQTY_CANC_SIDE_ATTR: u64 = 290482334879186944;
pub const XFLD_EVT_EQTY_CANC_SIZE: u64 = 290482206030168064;
pub const XFLD_EVT_EQTY_CANC_SUB_MARKET: u64 = 290482270454677504;
pub const XFLD_EVT_EQTY_CANC_SYMBOL_TYPE: u64 = 290482257569775616;
pub const XFLD_EVT_EQTY_CANC_TOTAL_CHANGE: u64 = 290482364943958016;
pub const XFLD_EVT_EQTY_CANC_TOTAL_VOLUME: u64 = 290482399303696384;
pub const XFLD_EVT_EQTY_CANC_TOTAL_VOLUME_FILTERED: u64 = 290482403598663680;
pub const XFLD_EVT_EQTY_CANC_TRADED_VALUE: u64 = 290482356354023424;
pub const XFLD_EVT_EQTY_CANC_TRADE_REF: u64 = 290482330584219648;
pub const XFLD_EVT_EQTY_CANC_TRADE_THRU_EXEMPT: u64 = 290482339174154240;
pub const XFLD_EVT_EQTY_CANC_TRADE_TICK_FLAGS: u64 = 290482193145266176;
pub const XFLD_EVT_EQTY_CANC_TRADE_UPDATE_FLAGS: u64 = 290482395008729088;
pub const XFLD_EVT_EQTY_CANC_TRADE_VENUE: u64 = 290482390713761792;
pub const XFLD_EVT_EQTY_CANC_TRADING_SESSION_DATE: u64 = 290482386418794496;
pub const XFLD_EVT_EQTY_CANC_TRANSACTION_HITIME: u64 = 290482407893630976;
pub const XFLD_EVT_EQTY_CANC_VWAP_VOLUME: u64 = 290482352059056128;
pub const XFLD_EVT_EQTY_CORR_ALTERNATE_ID1: u64 = 290763749726355456;
pub const XFLD_EVT_EQTY_CORR_ALTERNATE_ID2: u64 = 290763754021322752;
pub const XFLD_EVT_EQTY_CORR_ASK_MMID: u64 = 290763878575374336;
pub const XFLD_EVT_EQTY_CORR_ASK_MMID_ORIG: u64 = 290763852805570560;
pub const XFLD_EVT_EQTY_CORR_ASK_ORDER_REF: u64 = 290763869985439744;
pub const XFLD_EVT_EQTY_CORR_ASK_ORDER_REF_ORIG: u64 = 290763844215635968;
pub const XFLD_EVT_EQTY_CORR_BID_MMID: u64 = 290763874280407040;
pub const XFLD_EVT_EQTY_CORR_BID_MMID_ORIG: u64 = 290763848510603264;
pub const XFLD_EVT_EQTY_CORR_BID_ORDER_REF: u64 = 290763865690472448;
pub const XFLD_EVT_EQTY_CORR_BID_ORDER_REF_ORIG: u64 = 290763839920668672;
pub const XFLD_EVT_EQTY_CORR_CLOSE_PRICE: u64 = 290763930114981888;
pub const XFLD_EVT_EQTY_CORR_COUNTRY: u64 = 290763895755243520;
pub const XFLD_EVT_EQTY_CORR_EXCHANGE: u64 = 290763814150864896;
pub const XFLD_EVT_EQTY_CORR_EXCHANGE_HITIME: u64 = 290763792676028416;
pub const XFLD_EVT_EQTY_CORR_HIGH_PRICE: u64 = 290763921525047296;
pub const XFLD_EVT_EQTY_CORR_INSTRUMENT_STATUS: u64 = 290763796970995712;
pub const XFLD_EVT_EQTY_CORR_LOW_PRICE: u64 = 290763925820014592;
pub const XFLD_EVT_EQTY_CORR_MARKET_STATUS: u64 = 290763805560930304;
pub const XFLD_EVT_EQTY_CORR_OPEN_PRICE: u64 = 290763912935112704;
pub const XFLD_EVT_EQTY_CORR_ORDER_REF_ID_TYPE: u64 = 290763934409949184;
pub const XFLD_EVT_EQTY_CORR_PRICE: u64 = 290763676711911424;
pub const XFLD_EVT_EQTY_CORR_PRICE_ORIG: u64 = 290763715366617088;
pub const XFLD_EVT_EQTY_CORR_PRICE_TYPE: u64 = 290763663827009536;
pub const XFLD_EVT_EQTY_CORR_QUALS: u64 = 290763762611257344;
pub const XFLD_EVT_EQTY_CORR_SHORT_SALE_RESTRICTED: u64 = 290763818445832192;
pub const XFLD_EVT_EQTY_CORR_SIDE_ATTR: u64 = 290763887165308928;
pub const XFLD_EVT_EQTY_CORR_SIDE_ATTR_ORIG: u64 = 290763861395505152;
pub const XFLD_EVT_EQTY_CORR_SIZE: u64 = 290763681006878720;
pub const XFLD_EVT_EQTY_CORR_SIZE_ORIG: u64 = 290763719661584384;
pub const XFLD_EVT_EQTY_CORR_SUB_MARKET: u64 = 290763788381061120;
pub const XFLD_EVT_EQTY_CORR_SUB_MARKET_ORIG: u64 = 290763784086093824;
pub const XFLD_EVT_EQTY_CORR_SYMBOL_TYPE: u64 = 290763771201191936;
pub const XFLD_EVT_EQTY_CORR_TOTAL_CHANGE: u64 = 290763917230080000;
pub const XFLD_EVT_EQTY_CORR_TOTAL_VOLUME: u64 = 290763955884785664;
pub const XFLD_EVT_EQTY_CORR_TOTAL_VOLUME_FILTERED: u64 = 290763960179752960;
pub const XFLD_EVT_EQTY_CORR_TRADED_VALUE: u64 = 290763908640145408;
pub const XFLD_EVT_EQTY_CORR_TRADE_REF: u64 = 290763882870341632;
pub const XFLD_EVT_EQTY_CORR_TRADE_REF_ORIG: u64 = 290763857100537856;
pub const XFLD_EVT_EQTY_CORR_TRADE_THRU_EXEMPT: u64 = 290763891460276224;
pub const XFLD_EVT_EQTY_CORR_TRADE_TICK_FLAGS: u64 = 290763668121976832;
pub const XFLD_EVT_EQTY_CORR_TRADE_TICK_FLAGS_ORIG: u64 = 290763706776682496;
pub const XFLD_EVT_EQTY_CORR_TRADE_VENUE: u64 = 290763951589818368;
pub const XFLD_EVT_EQTY_CORR_TRADE_VENUE_ORIG: u64 = 290763947294851072;
pub const XFLD_EVT_EQTY_CORR_TRADING_SESSION_DATE: u64 = 290763942999883776;
pub const XFLD_EVT_EQTY_CORR_TRADING_SESSION_DATE_ORIG: u64 = 290763938704916480;
pub const XFLD_EVT_EQTY_CORR_TRANSACTION_HITIME: u64 = 290763964474720256;
pub const XFLD_EVT_EQTY_CORR_VWAP_VOLUME: u64 = 290763904345178112;
pub const XFLD_EVT_OBREF_BID_ALTERNATE_ID1: u64 = 291045228998033408;
pub const XFLD_EVT_OBREF_BID_ALTERNATE_ID2: u64 = 291045233293000704;
pub const XFLD_EVT_OBREF_BID_COUNTRY: u64 = 291045186048360448;
pub const XFLD_EVT_OBREF_BID_ENTRY_COUNT: u64 = 291045168868491264;
pub const XFLD_EVT_OBREF_BID_EXCHANGE: u64 = 291045181753393152;
pub const XFLD_EVT_OBREF_BID_EXCHANGE_HITIME: u64 = 291045216113131520;
pub const XFLD_EVT_OBREF_BID_EXCH_TIME_OFFSET: u64 = 291045263357771776;
pub const XFLD_EVT_OBREF_BID_GROUP_ID: u64 = 291045400796725248;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_AUCTION_END_HITIME: u64 = 291045362142019584;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_AUCTION_ID: u64 = 291045353552084992;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_AUCTION_OWNER: u64 = 291045366436986880;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_AUCTION_START_HITIME: u64 = 291045357847052288;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_AUCTION_TYPE: u64 = 291045327782281216;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_FAR_PRICE: u64 = 291045349257117696;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_MARKET_ORDER_TYPE: u64 = 291045478106136576;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 291045473811169280;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_NEAR_PRICE: u64 = 291045344962150400;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 291045413681627136;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_PAIRED_VOLUME: u64 = 291045336372215808;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_QUALS: u64 = 291045310602412032;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_RECEIVE_HITIME: u64 = 291045319192346624;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REFERENCE_PRICE: u64 = 291045340667183104;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 291045417976594432;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 291045443746398208;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_PAIRED_VOLUME: u64 = 291045435156463616;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_TYPE: u64 = 291045422271561728;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 291045426566529024;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 291045439451430912;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_REG_VOLUME: u64 = 291045430861496320;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_SEQUENCE: u64 = 291045314897379328;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_TYPE: u64 = 291045323487313920;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_UNPAIRED_TYPE: u64 = 291045405091692544;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_UNPAIRED_VOLUME: u64 = 291045409386659840;
pub const XFLD_EVT_OBREF_BID_IMBALANCE_VOLUME: u64 = 291045332077248512;
pub const XFLD_EVT_OBREF_BID_IMPLIED: u64 = 291045211818164224;
pub const XFLD_EVT_OBREF_BID_INSTRUMENT_STATUS: u64 = 291045237587968000;
pub const XFLD_EVT_OBREF_BID_LIMIT_PRICE_HITIME: u64 = 291045486696071168;
pub const XFLD_EVT_OBREF_BID_LOT_SIZE: u64 = 291045254767837184;
pub const XFLD_EVT_OBREF_BID_LOWER_LIMIT_PRICE: u64 = 291045375026921472;
pub const XFLD_EVT_OBREF_BID_MARKET_STATUS: u64 = 291045246177902592;
pub const XFLD_EVT_OBREF_BID_MMID: u64 = 291045160278556672;
pub const XFLD_EVT_OBREF_BID_OPEN_MARKET: u64 = 291045297717510144;
pub const XFLD_EVT_OBREF_BID_ORDER_PRIORITY: u64 = 291045448041365504;
pub const XFLD_EVT_OBREF_BID_ORDER_QUALS: u64 = 291045306307444736;
pub const XFLD_EVT_OBREF_BID_ORDER_REF: u64 = 291045155983589376;
pub const XFLD_EVT_OBREF_BID_ORDER_REF_ID_TYPE: u64 = 291045203228229632;
pub const XFLD_EVT_OBREF_BID_ORIGIN_EXTIME: u64 = 291045280537640960;
pub const XFLD_EVT_OBREF_BID_ORIGIN_HITIME: u64 = 291045482401103872;
pub const XFLD_EVT_OBREF_BID_POST_MARKET: u64 = 291045302012477440;
pub const XFLD_EVT_OBREF_BID_PRE_MARKET: u64 = 291045293422542848;
pub const XFLD_EVT_OBREF_BID_PRICE: u64 = 291045143098687488;
pub const XFLD_EVT_OBREF_BID_PRICE_TYPE: u64 = 291045194638295040;
pub const XFLD_EVT_OBREF_BID_PRIME_COUNTRY: u64 = 291045456631300096;
pub const XFLD_EVT_OBREF_BID_PRIME_EXCH: u64 = 291045271947706368;
pub const XFLD_EVT_OBREF_BID_PRIME_TRADE_VENUE: u64 = 291045469516201984;
pub const XFLD_EVT_OBREF_BID_QUALS: u64 = 291045220408098816;
pub const XFLD_EVT_OBREF_BID_RELATIVE_LIMIT_HITIME: u64 = 291045490991038464;
pub const XFLD_EVT_OBREF_BID_RELATIVE_LIMIT_PRICE: u64 = 291045383616856064;
pub const XFLD_EVT_OBREF_BID_RELATIVE_LIMIT_PRICE_TYPE: u64 = 291045387911823360;
pub const XFLD_EVT_OBREF_BID_RELATIVE_LIMIT_TYPE: u64 = 291045392206790656;
pub const XFLD_EVT_OBREF_BID_SHORT_SALE_RESTRICTED: u64 = 291045250472869888;
pub const XFLD_EVT_OBREF_BID_SIGLL_DARK: u64 = 291045465221234688;
pub const XFLD_EVT_OBREF_BID_SIGLL_STATUS: u64 = 291045460926267392;
pub const XFLD_EVT_OBREF_BID_SIZE: u64 = 291045147393654784;
pub const XFLD_EVT_OBREF_BID_SYMBOL_TYPE: u64 = 291045207523196928;
pub const XFLD_EVT_OBREF_BID_TRADE_VENUE: u64 = 291045452336332800;
pub const XFLD_EVT_OBREF_BID_UPPER_LIMIT_PRICE: u64 = 291045370731954176;
pub const XFLD_EVT_OBREF_ASK_ALTERNATE_ID1: u64 = 291326703974744064;
pub const XFLD_EVT_OBREF_ASK_ALTERNATE_ID2: u64 = 291326708269711360;
pub const XFLD_EVT_OBREF_ASK_COUNTRY: u64 = 291326661025071104;
pub const XFLD_EVT_OBREF_ASK_ENTRY_COUNT: u64 = 291326643845201920;
pub const XFLD_EVT_OBREF_ASK_EXCHANGE: u64 = 291326656730103808;
pub const XFLD_EVT_OBREF_ASK_EXCHANGE_HITIME: u64 = 291326691089842176;
pub const XFLD_EVT_OBREF_ASK_EXCH_TIME_OFFSET: u64 = 291326738334482432;
pub const XFLD_EVT_OBREF_ASK_GROUP_ID: u64 = 291326875773435904;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_AUCTION_END_HITIME: u64 = 291326837118730240;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_AUCTION_ID: u64 = 291326828528795648;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_AUCTION_OWNER: u64 = 291326841413697536;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_AUCTION_START_HITIME: u64 = 291326832823762944;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_AUCTION_TYPE: u64 = 291326802758991872;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_FAR_PRICE: u64 = 291326824233828352;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_MARKET_ORDER_TYPE: u64 = 291326953082847232;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 291326948787879936;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_NEAR_PRICE: u64 = 291326819938861056;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 291326888658337792;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_PAIRED_VOLUME: u64 = 291326811348926464;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_QUALS: u64 = 291326785579122688;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_RECEIVE_HITIME: u64 = 291326794169057280;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REFERENCE_PRICE: u64 = 291326815643893760;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 291326892953305088;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 291326918723108864;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_PAIRED_VOLUME: u64 = 291326910133174272;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_TYPE: u64 = 291326897248272384;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 291326901543239680;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 291326914428141568;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_REG_VOLUME: u64 = 291326905838206976;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_SEQUENCE: u64 = 291326789874089984;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_TYPE: u64 = 291326798464024576;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_UNPAIRED_TYPE: u64 = 291326880068403200;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_UNPAIRED_VOLUME: u64 = 291326884363370496;
pub const XFLD_EVT_OBREF_ASK_IMBALANCE_VOLUME: u64 = 291326807053959168;
pub const XFLD_EVT_OBREF_ASK_IMPLIED: u64 = 291326686794874880;
pub const XFLD_EVT_OBREF_ASK_INSTRUMENT_STATUS: u64 = 291326712564678656;
pub const XFLD_EVT_OBREF_ASK_LIMIT_PRICE_HITIME: u64 = 291326961672781824;
pub const XFLD_EVT_OBREF_ASK_LOT_SIZE: u64 = 291326729744547840;
pub const XFLD_EVT_OBREF_ASK_LOWER_LIMIT_PRICE: u64 = 291326850003632128;
pub const XFLD_EVT_OBREF_ASK_MARKET_STATUS: u64 = 291326721154613248;
pub const XFLD_EVT_OBREF_ASK_MMID: u64 = 291326635255267328;
pub const XFLD_EVT_OBREF_ASK_OPEN_MARKET: u64 = 291326772694220800;
pub const XFLD_EVT_OBREF_ASK_ORDER_PRIORITY: u64 = 291326923018076160;
pub const XFLD_EVT_OBREF_ASK_ORDER_QUALS: u64 = 291326781284155392;
pub const XFLD_EVT_OBREF_ASK_ORDER_REF: u64 = 291326630960300032;
pub const XFLD_EVT_OBREF_ASK_ORDER_REF_ID_TYPE: u64 = 291326678204940288;
pub const XFLD_EVT_OBREF_ASK_ORIGIN_EXTIME: u64 = 291326755514351616;
pub const XFLD_EVT_OBREF_ASK_ORIGIN_HITIME: u64 = 291326957377814528;
pub const XFLD_EVT_OBREF_ASK_POST_MARKET: u64 = 291326776989188096;
pub const XFLD_EVT_OBREF_ASK_PRE_MARKET: u64 = 291326768399253504;
pub const XFLD_EVT_OBREF_ASK_PRICE: u64 = 291326618075398144;
pub const XFLD_EVT_OBREF_ASK_PRICE_TYPE: u64 = 291326669615005696;
pub const XFLD_EVT_OBREF_ASK_PRIME_COUNTRY: u64 = 291326931608010752;
pub const XFLD_EVT_OBREF_ASK_PRIME_EXCH: u64 = 291326746924417024;
pub const XFLD_EVT_OBREF_ASK_PRIME_TRADE_VENUE: u64 = 291326944492912640;
pub const XFLD_EVT_OBREF_ASK_QUALS: u64 = 291326695384809472;
pub const XFLD_EVT_OBREF_ASK_RELATIVE_LIMIT_HITIME: u64 = 291326965967749120;
pub const XFLD_EVT_OBREF_ASK_RELATIVE_LIMIT_PRICE: u64 = 291326858593566720;
pub const XFLD_EVT_OBREF_ASK_RELATIVE_LIMIT_PRICE_TYPE: u64 = 291326862888534016;
pub const XFLD_EVT_OBREF_ASK_RELATIVE_LIMIT_TYPE: u64 = 291326867183501312;
pub const XFLD_EVT_OBREF_ASK_SHORT_SALE_RESTRICTED: u64 = 291326725449580544;
pub const XFLD_EVT_OBREF_ASK_SIGLL_DARK: u64 = 291326940197945344;
pub const XFLD_EVT_OBREF_ASK_SIGLL_STATUS: u64 = 291326935902978048;
pub const XFLD_EVT_OBREF_ASK_SIZE: u64 = 291326622370365440;
pub const XFLD_EVT_OBREF_ASK_SYMBOL_TYPE: u64 = 291326682499907584;
pub const XFLD_EVT_OBREF_ASK_TRADE_VENUE: u64 = 291326927313043456;
pub const XFLD_EVT_OBREF_ASK_UPPER_LIMIT_PRICE: u64 = 291326845708664832;
pub const XFLD_EVT_OBUPD_ASK_SIDE: u64 = 291608157476618240;
pub const XFLD_EVT_OBUPD_COUNTRY: u64 = 291608123116879872;
pub const XFLD_EVT_OBUPD_EXCHANGE: u64 = 291608118821912576;
pub const XFLD_EVT_OBUPD_EXCHANGE_HITIME: u64 = 291608196131323904;
pub const XFLD_EVT_OBUPD_IMPLIED: u64 = 291608191836356608;
pub const XFLD_EVT_OBUPD_INSTRUMENT_STATUS: u64 = 291608200426291200;
pub const XFLD_EVT_OBUPD_MARKET_STATUS: u64 = 291608209016225792;
pub const XFLD_EVT_OBUPD_MMID: u64 = 291608101642043392;
pub const XFLD_EVT_OBUPD_OPEN_MARKET: u64 = 291608234786029568;
pub const XFLD_EVT_OBUPD_ORDER_PRIORITY: u64 = 291608243375964160;
pub const XFLD_EVT_OBUPD_ORDER_REF: u64 = 291608097347076096;
pub const XFLD_EVT_OBUPD_ORIGIN_HITIME: u64 = 291608282030669824;
pub const XFLD_EVT_OBUPD_POST_MARKET: u64 = 291608239080996864;
pub const XFLD_EVT_OBUPD_PRE_MARKET: u64 = 291608230491062272;
pub const XFLD_EVT_OBUPD_PRICE: u64 = 291608084462174208;
pub const XFLD_EVT_OBUPD_PRICE_TYPE: u64 = 291608170361520128;
pub const XFLD_EVT_OBUPD_QUALS: u64 = 291608174656487424;
pub const XFLD_EVT_OBUPD_SHORT_SALE_RESTRICTED: u64 = 291608213311193088;
pub const XFLD_EVT_OBUPD_SIGLL_DARK: u64 = 291608251965898752;
pub const XFLD_EVT_OBUPD_SIZE: u64 = 291608088757141504;
pub const XFLD_EVT_OBUPD_SYMBOL_TYPE: u64 = 291608178951454720;
pub const XFLD_EVT_OBUPD_TRADE_VENUE: u64 = 291608247670931456;
pub const XFLD_EVT_OBUPD_TRANSACTION_TYPE: u64 = 291608127411847168;
pub const XFLD_EVT_OBUPD_UPDATE_COUNT: u64 = 291608114526945280;
pub const XFLD_EVT_OBUPD_UPDATE_TYPE: u64 = 291608153181650944;
pub const XFLD_EVT_PBREF_BID_ALTERNATE_ID1: u64 = 291889649633198080;
pub const XFLD_EVT_PBREF_BID_ALTERNATE_ID2: u64 = 291889653928165376;
pub const XFLD_EVT_PBREF_BID_COUNTRY: u64 = 291889602388557824;
pub const XFLD_EVT_PBREF_BID_CUSTOMER_VOLUME: u64 = 291889718352674816;
pub const XFLD_EVT_PBREF_BID_ENTRY_COUNT: u64 = 291889585208688640;
pub const XFLD_EVT_PBREF_BID_EXCHANGE: u64 = 291889598093590528;
pub const XFLD_EVT_PBREF_BID_EXCHANGE_HITIME: u64 = 291889628158361600;
pub const XFLD_EVT_PBREF_BID_EXCH_TIME_OFFSET: u64 = 291889683992936448;
pub const XFLD_EVT_PBREF_BID_GROUP_ID: u64 = 291889842906726400;
pub const XFLD_EVT_PBREF_BID_HITIME: u64 = 291889984640647168;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_AUCTION_END_HITIME: u64 = 291889817136922624;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_AUCTION_ID: u64 = 291889808546988032;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_AUCTION_OWNER: u64 = 291889821431889920;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_AUCTION_START_HITIME: u64 = 291889812841955328;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_AUCTION_TYPE: u64 = 291889782777184256;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_FAR_PRICE: u64 = 291889804252020736;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_MARKET_ORDER_TYPE: u64 = 291889980345679872;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 291889976050712576;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_NEAR_PRICE: u64 = 291889799957053440;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 291889920216137728;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_PAIRED_VOLUME: u64 = 291889791367118848;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_QUALS: u64 = 291889765597315072;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_RECEIVE_HITIME: u64 = 291889774187249664;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REFERENCE_PRICE: u64 = 291889795662086144;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 291889924511105024;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 291889950280908800;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_PAIRED_VOLUME: u64 = 291889941690974208;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_TYPE: u64 = 291889928806072320;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 291889933101039616;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 291889945985941504;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_REG_VOLUME: u64 = 291889937396006912;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_SEQUENCE: u64 = 291889769892282368;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_TYPE: u64 = 291889778482216960;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_UNPAIRED_TYPE: u64 = 291889911626203136;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_UNPAIRED_VOLUME: u64 = 291889915921170432;
pub const XFLD_EVT_PBREF_BID_IMBALANCE_VOLUME: u64 = 291889787072151552;
pub const XFLD_EVT_PBREF_BID_IMPLIED: u64 = 291889623863394304;
pub const XFLD_EVT_PBREF_BID_INSTRUMENT_STATUS: u64 = 291889658223132672;
pub const XFLD_EVT_PBREF_BID_LIMIT_PRICE_HITIME: u64 = 291889988935614464;
pub const XFLD_EVT_PBREF_BID_LOT_SIZE: u64 = 291889675403001856;
pub const XFLD_EVT_PBREF_BID_LOWER_LIMIT_PRICE: u64 = 291889757007380480;
pub const XFLD_EVT_PBREF_BID_MARKET_MAKER_VOLUME: u64 = 291889726942609408;
pub const XFLD_EVT_PBREF_BID_MARKET_STATUS: u64 = 291889666813067264;
pub const XFLD_EVT_PBREF_BID_OPEN_MARKET: u64 = 291889709762740224;
pub const XFLD_EVT_PBREF_BID_ORDER_COUNT: u64 = 291889576618754048;
pub const XFLD_EVT_PBREF_BID_ORDER_REF_ID_TYPE: u64 = 291889615273459712;
pub const XFLD_EVT_PBREF_BID_POST_MARKET: u64 = 291889714057707520;
pub const XFLD_EVT_PBREF_BID_PRE_MARKET: u64 = 291889705467772928;
pub const XFLD_EVT_PBREF_BID_PRICE: u64 = 291889568028819456;
pub const XFLD_EVT_PBREF_BID_PRICE_TYPE: u64 = 291889610978492416;
pub const XFLD_EVT_PBREF_BID_PRIME_COUNTRY: u64 = 291889958870843392;
pub const XFLD_EVT_PBREF_BID_PRIME_EXCH: u64 = 291889692582871040;
pub const XFLD_EVT_PBREF_BID_PRIME_TRADE_VENUE: u64 = 291889971755745280;
pub const XFLD_EVT_PBREF_BID_PROFESSIONAL_VOLUME: u64 = 291889722647642112;
pub const XFLD_EVT_PBREF_BID_QUALS: u64 = 291889632453328896;
pub const XFLD_EVT_PBREF_BID_RELATIVE_LIMIT_HITIME: u64 = 291889993230581760;
pub const XFLD_EVT_PBREF_BID_RELATIVE_LIMIT_PRICE: u64 = 291889825726857216;
pub const XFLD_EVT_PBREF_BID_RELATIVE_LIMIT_PRICE_TYPE: u64 = 291889830021824512;
pub const XFLD_EVT_PBREF_BID_RELATIVE_LIMIT_TYPE: u64 = 291889834316791808;
pub const XFLD_EVT_PBREF_BID_SHORT_SALE_RESTRICTED: u64 = 291889735532544000;
pub const XFLD_EVT_PBREF_BID_SHORT_SALE_RESTRICTED_V3_2: u64 = 291889671108034560;
pub const XFLD_EVT_PBREF_BID_SIGLL_DARK: u64 = 291889967460777984;
pub const XFLD_EVT_PBREF_BID_SIGLL_STATUS: u64 = 291889963165810688;
pub const XFLD_EVT_PBREF_BID_STATUS_COUNT: u64 = 291889731237576704;
pub const XFLD_EVT_PBREF_BID_STATUS_INDEX: u64 = 291889739827511296;
pub const XFLD_EVT_PBREF_BID_STATUS_SOURCE_COUNTRY: u64 = 291889748417445888;
pub const XFLD_EVT_PBREF_BID_STATUS_SOURCE_EXCH: u64 = 291889744122478592;
pub const XFLD_EVT_PBREF_BID_SYMBOL_TYPE: u64 = 291889619568427008;
pub const XFLD_EVT_PBREF_BID_TRADE_VENUE: u64 = 291889954575876096;
pub const XFLD_EVT_PBREF_BID_UPPER_LIMIT_PRICE: u64 = 291889752712413184;
pub const XFLD_EVT_PBREF_BID_VOLUME: u64 = 291889641043263488;
pub const XFLD_EVT_PBREF_ASK_ALTERNATE_ID1: u64 = 292171124609908736;
pub const XFLD_EVT_PBREF_ASK_ALTERNATE_ID2: u64 = 292171128904876032;
pub const XFLD_EVT_PBREF_ASK_COUNTRY: u64 = 292171077365268480;
pub const XFLD_EVT_PBREF_ASK_CUSTOMER_VOLUME: u64 = 292171193329385472;
pub const XFLD_EVT_PBREF_ASK_ENTRY_COUNT: u64 = 292171060185399296;
pub const XFLD_EVT_PBREF_ASK_EXCHANGE: u64 = 292171073070301184;
pub const XFLD_EVT_PBREF_ASK_EXCHANGE_HITIME: u64 = 292171103135072256;
pub const XFLD_EVT_PBREF_ASK_EXCH_TIME_OFFSET: u64 = 292171158969647104;
pub const XFLD_EVT_PBREF_ASK_GROUP_ID: u64 = 292171317883437056;
pub const XFLD_EVT_PBREF_ASK_HITIME: u64 = 292171459617357824;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_AUCTION_END_HITIME: u64 = 292171292113633280;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_AUCTION_ID: u64 = 292171283523698688;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_AUCTION_OWNER: u64 = 292171296408600576;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_AUCTION_START_HITIME: u64 = 292171287818665984;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_AUCTION_TYPE: u64 = 292171257753894912;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_FAR_PRICE: u64 = 292171279228731392;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_MARKET_ORDER_TYPE: u64 = 292171455322390528;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 292171451027423232;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_NEAR_PRICE: u64 = 292171274933764096;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 292171395192848384;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_PAIRED_VOLUME: u64 = 292171266343829504;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_QUALS: u64 = 292171240574025728;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_RECEIVE_HITIME: u64 = 292171249163960320;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REFERENCE_PRICE: u64 = 292171270638796800;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 292171399487815680;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 292171425257619456;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_PAIRED_VOLUME: u64 = 292171416667684864;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_TYPE: u64 = 292171403782782976;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 292171408077750272;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 292171420962652160;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_REG_VOLUME: u64 = 292171412372717568;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_SEQUENCE: u64 = 292171244868993024;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_TYPE: u64 = 292171253458927616;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_UNPAIRED_TYPE: u64 = 292171386602913792;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_UNPAIRED_VOLUME: u64 = 292171390897881088;
pub const XFLD_EVT_PBREF_ASK_IMBALANCE_VOLUME: u64 = 292171262048862208;
pub const XFLD_EVT_PBREF_ASK_IMPLIED: u64 = 292171098840104960;
pub const XFLD_EVT_PBREF_ASK_INSTRUMENT_STATUS: u64 = 292171133199843328;
pub const XFLD_EVT_PBREF_ASK_LIMIT_PRICE_HITIME: u64 = 292171463912325120;
pub const XFLD_EVT_PBREF_ASK_LOT_SIZE: u64 = 292171150379712512;
pub const XFLD_EVT_PBREF_ASK_LOWER_LIMIT_PRICE: u64 = 292171231984091136;
pub const XFLD_EVT_PBREF_ASK_MARKET_MAKER_VOLUME: u64 = 292171201919320064;
pub const XFLD_EVT_PBREF_ASK_MARKET_STATUS: u64 = 292171141789777920;
pub const XFLD_EVT_PBREF_ASK_OPEN_MARKET: u64 = 292171184739450880;
pub const XFLD_EVT_PBREF_ASK_ORDER_COUNT: u64 = 292171051595464704;
pub const XFLD_EVT_PBREF_ASK_ORDER_REF_ID_TYPE: u64 = 292171090250170368;
pub const XFLD_EVT_PBREF_ASK_POST_MARKET: u64 = 292171189034418176;
pub const XFLD_EVT_PBREF_ASK_PRE_MARKET: u64 = 292171180444483584;
pub const XFLD_EVT_PBREF_ASK_PRICE: u64 = 292171043005530112;
pub const XFLD_EVT_PBREF_ASK_PRICE_TYPE: u64 = 292171085955203072;
pub const XFLD_EVT_PBREF_ASK_PRIME_COUNTRY: u64 = 292171433847554048;
pub const XFLD_EVT_PBREF_ASK_PRIME_EXCH: u64 = 292171167559581696;
pub const XFLD_EVT_PBREF_ASK_PRIME_TRADE_VENUE: u64 = 292171446732455936;
pub const XFLD_EVT_PBREF_ASK_PROFESSIONAL_VOLUME: u64 = 292171197624352768;
pub const XFLD_EVT_PBREF_ASK_QUALS: u64 = 292171107430039552;
pub const XFLD_EVT_PBREF_ASK_RELATIVE_LIMIT_HITIME: u64 = 292171468207292416;
pub const XFLD_EVT_PBREF_ASK_RELATIVE_LIMIT_PRICE: u64 = 292171300703567872;
pub const XFLD_EVT_PBREF_ASK_RELATIVE_LIMIT_PRICE_TYPE: u64 = 292171304998535168;
pub const XFLD_EVT_PBREF_ASK_RELATIVE_LIMIT_TYPE: u64 = 292171309293502464;
pub const XFLD_EVT_PBREF_ASK_SHORT_SALE_RESTRICTED: u64 = 292171210509254656;
pub const XFLD_EVT_PBREF_ASK_SHORT_SALE_RESTRICTED_V3_2: u64 = 292171146084745216;
pub const XFLD_EVT_PBREF_ASK_SIGLL_DARK: u64 = 292171442437488640;
pub const XFLD_EVT_PBREF_ASK_SIGLL_STATUS: u64 = 292171438142521344;
pub const XFLD_EVT_PBREF_ASK_STATUS_COUNT: u64 = 292171206214287360;
pub const XFLD_EVT_PBREF_ASK_STATUS_INDEX: u64 = 292171214804221952;
pub const XFLD_EVT_PBREF_ASK_STATUS_SOURCE_COUNTRY: u64 = 292171223394156544;
pub const XFLD_EVT_PBREF_ASK_STATUS_SOURCE_EXCH: u64 = 292171219099189248;
pub const XFLD_EVT_PBREF_ASK_SYMBOL_TYPE: u64 = 292171094545137664;
pub const XFLD_EVT_PBREF_ASK_TRADE_VENUE: u64 = 292171429552586752;
pub const XFLD_EVT_PBREF_ASK_UPPER_LIMIT_PRICE: u64 = 292171227689123840;
pub const XFLD_EVT_PBREF_ASK_VOLUME: u64 = 292171116019974144;
pub const XFLD_EVT_PBUPD_ASK_SIDE: u64 = 292452569521848320;
pub const XFLD_EVT_PBUPD_COUNTRY: u64 = 292452560931913728;
pub const XFLD_EVT_PBUPD_CUSTOMER_VOLUME: u64 = 292452659716161536;
pub const XFLD_EVT_PBUPD_EXCHANGE: u64 = 292452556636946432;
pub const XFLD_EVT_PBUPD_EXCHANGE_HITIME: u64 = 292452616766488576;
pub const XFLD_EVT_PBUPD_HITIME: u64 = 292452788565180416;
pub const XFLD_EVT_PBUPD_IMPLIED: u64 = 292452612471521280;
pub const XFLD_EVT_PBUPD_INSTRUMENT_STATUS: u64 = 292452621061455872;
pub const XFLD_EVT_PBUPD_MARKET_MAKER_VOLUME: u64 = 292452668306096128;
pub const XFLD_EVT_PBUPD_MARKET_STATUS: u64 = 292452625356423168;
pub const XFLD_EVT_PBUPD_OPEN_MARKET: u64 = 292452651126226944;
pub const XFLD_EVT_PBUPD_ORDER_COUNT: u64 = 292452517982240768;
pub const XFLD_EVT_PBUPD_POST_MARKET: u64 = 292452655421194240;
pub const XFLD_EVT_PBUPD_PRE_MARKET: u64 = 292452646831259648;
pub const XFLD_EVT_PBUPD_PRICE: u64 = 292452509392306176;
pub const XFLD_EVT_PBUPD_PRICE_TYPE: u64 = 292452582406750208;
pub const XFLD_EVT_PBUPD_PROFESSIONAL_VOLUME: u64 = 292452664011128832;
pub const XFLD_EVT_PBUPD_QUALS: u64 = 292452590996684800;
pub const XFLD_EVT_PBUPD_ROW_LEVEL: u64 = 292452638241325056;
pub const XFLD_EVT_PBUPD_SHORT_SALE_RESTRICTED: u64 = 292452629651390464;
pub const XFLD_EVT_PBUPD_SIGLL_DARK: u64 = 292452784270213120;
pub const XFLD_EVT_PBUPD_SYMBOL_TYPE: u64 = 292452599586619392;
pub const XFLD_EVT_PBUPD_SYNTHETIC: u64 = 292452586701717504;
pub const XFLD_EVT_PBUPD_TRADE_VENUE: u64 = 292452779975245824;
pub const XFLD_EVT_PBUPD_TRANSACTION_TYPE: u64 = 292452535162109952;
pub const XFLD_EVT_PBUPD_UPDATE_COUNT: u64 = 292452530867142656;
pub const XFLD_EVT_PBUPD_UPDATE_TYPE: u64 = 292452565226881024;
pub const XFLD_EVT_PBUPD_VOLUME: u64 = 292452513687273472;
pub const XFLD_EVT_CMTY_REFR_ALTERNATE_ID1: u64 = 292733988663984128;
pub const XFLD_EVT_CMTY_REFR_ALTERNATE_ID2: u64 = 292733992958951424;
pub const XFLD_EVT_CMTY_REFR_ASK_HITIME: u64 = 292734478290255872;
pub const XFLD_EVT_CMTY_REFR_ASK_IMPLIED_SIZE: u64 = 292734358031171584;
pub const XFLD_EVT_CMTY_REFR_ASK_PRICE: u64 = 292734031613657088;
pub const XFLD_EVT_CMTY_REFR_ASK_SIZE: u64 = 292734040203591680;
pub const XFLD_EVT_CMTY_REFR_BID_HITIME: u64 = 292734473995288576;
pub const XFLD_EVT_CMTY_REFR_BID_IMPLIED_SIZE: u64 = 292734353736204288;
pub const XFLD_EVT_CMTY_REFR_BID_PRICE: u64 = 292734027318689792;
pub const XFLD_EVT_CMTY_REFR_BID_SIZE: u64 = 292734035908624384;
pub const XFLD_EVT_CMTY_REFR_CLOSE_HITIME: u64 = 292734504060059648;
pub const XFLD_EVT_CMTY_REFR_CLOSE_PRICE_HIGH: u64 = 292734126102937600;
pub const XFLD_EVT_CMTY_REFR_CLOSE_PRICE_LOW: u64 = 292734130397904896;
pub const XFLD_EVT_CMTY_REFR_CURRENCY: u64 = 292734005843853312;
pub const XFLD_EVT_CMTY_REFR_EXCHANGE_HITIME: u64 = 292734199117381632;
pub const XFLD_EVT_CMTY_REFR_EXCH_TIME_OFFSET: u64 = 292734018728755200;
pub const XFLD_EVT_CMTY_REFR_EXPIRATION: u64 = 292734173347577856;
pub const XFLD_EVT_CMTY_REFR_GROUP_ID: u64 = 292734383800975360;
pub const XFLD_EVT_CMTY_REFR_HIGH_BATE: u64 = 292734074563330048;
pub const XFLD_EVT_CMTY_REFR_HIGH_HITIME: u64 = 292734491175157760;
pub const XFLD_EVT_CMTY_REFR_HIGH_PRICE: u64 = 292734108923068416;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_AUCTION_END_HITIME: u64 = 292734345146269696;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_AUCTION_ID: u64 = 292734336556335104;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_AUCTION_OWNER: u64 = 292734349441236992;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_AUCTION_START_HITIME: u64 = 292734340851302400;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_AUCTION_TYPE: u64 = 292734310786531328;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_FAR_PRICE: u64 = 292734332261367808;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_MARKET_ORDER_TYPE: u64 = 292734435340582912;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 292734431045615616;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_NEAR_PRICE: u64 = 292734327966400512;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 292734396685877248;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_PAIRED_VOLUME: u64 = 292734319376465920;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_QUALS: u64 = 292734293606662144;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_RECEIVE_HITIME: u64 = 292734302196596736;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REFERENCE_PRICE: u64 = 292734323671433216;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 292734400980844544;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 292734426750648320;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_PAIRED_VOLUME: u64 = 292734418160713728;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_TYPE: u64 = 292734405275811840;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 292734409570779136;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 292734422455681024;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_REG_VOLUME: u64 = 292734413865746432;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_SEQUENCE: u64 = 292734297901629440;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_TYPE: u64 = 292734306491564032;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_UNPAIRED_TYPE: u64 = 292734388095942656;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_UNPAIRED_VOLUME: u64 = 292734392390909952;
pub const XFLD_EVT_CMTY_REFR_IMBALANCE_VOLUME: u64 = 292734315081498624;
pub const XFLD_EVT_CMTY_REFR_INSTRUMENT_STATUS: u64 = 292734203412348928;
pub const XFLD_EVT_CMTY_REFR_LAST_BATE: u64 = 292734070268362752;
pub const XFLD_EVT_CMTY_REFR_LAST_HITIME: u64 = 292734482585223168;
pub const XFLD_EVT_CMTY_REFR_LAST_PRICE: u64 = 292734091743199232;
pub const XFLD_EVT_CMTY_REFR_LAST_QUALS: u64 = 292734439635550208;
pub const XFLD_EVT_CMTY_REFR_LAST_SEQUENCE: u64 = 292734443930517504;
pub const XFLD_EVT_CMTY_REFR_LAST_SIZE: u64 = 292734096038166528;
pub const XFLD_EVT_CMTY_REFR_LIMIT_PRICE_HITIME: u64 = 292734516944961536;
pub const XFLD_EVT_CMTY_REFR_LOWER_LIMIT_PRICE: u64 = 292734285016727552;
pub const XFLD_EVT_CMTY_REFR_LOW_BATE: u64 = 292734078858297344;
pub const XFLD_EVT_CMTY_REFR_LOW_HITIME: u64 = 292734495470125056;
pub const XFLD_EVT_CMTY_REFR_LOW_PRICE: u64 = 292734113218035712;
pub const XFLD_EVT_CMTY_REFR_MARKET_STATUS: u64 = 292734216297250816;
pub const XFLD_EVT_CMTY_REFR_OPEN_HITIME: u64 = 292734499765092352;
pub const XFLD_EVT_CMTY_REFR_OPEN_INTEREST: u64 = 292734169052610560;
pub const XFLD_EVT_CMTY_REFR_OPEN_PRICE_HIGH: u64 = 292734117513003008;
pub const XFLD_EVT_CMTY_REFR_OPEN_PRICE_LOW: u64 = 292734121807970304;
pub const XFLD_EVT_CMTY_REFR_PD_SETL_HITIME: u64 = 292734512649994240;
pub const XFLD_EVT_CMTY_REFR_PD_SETL_PRICE: u64 = 292734160462675968;
pub const XFLD_EVT_CMTY_REFR_PD_TOTAL_VOLUME: u64 = 292734469700321280;
pub const XFLD_EVT_CMTY_REFR_PRICE_TYPE: u64 = 292734023023722496;
pub const XFLD_EVT_CMTY_REFR_QUALS: u64 = 292734181937512448;
pub const XFLD_EVT_CMTY_REFR_QUOTE_QUALS: u64 = 292734263541891072;
pub const XFLD_EVT_CMTY_REFR_QUOTE_SEQUENCE: u64 = 292734267836858368;
pub const XFLD_EVT_CMTY_REFR_RELATIVE_LIMIT_HITIME: u64 = 292734521239928832;
pub const XFLD_EVT_CMTY_REFR_RELATIVE_LIMIT_PRICE: u64 = 292734362326138880;
pub const XFLD_EVT_CMTY_REFR_RELATIVE_LIMIT_PRICE_TYPE: u64 = 292734366621106176;
pub const XFLD_EVT_CMTY_REFR_RELATIVE_LIMIT_TYPE: u64 = 292734370916073472;
pub const XFLD_EVT_CMTY_REFR_SETL_BATE: u64 = 292734065973395456;
pub const XFLD_EVT_CMTY_REFR_SETL_HITIME: u64 = 292734508355026944;
pub const XFLD_EVT_CMTY_REFR_SETL_PRICE: u64 = 292734061678428160;
pub const XFLD_EVT_CMTY_REFR_STATUS: u64 = 292734186232479744;
pub const XFLD_EVT_CMTY_REFR_SYMBOL_TYPE: u64 = 292734014433787904;
pub const XFLD_EVT_CMTY_REFR_TOTAL_CHANGE: u64 = 292734104628101120;
pub const XFLD_EVT_CMTY_REFR_TOTAL_VOLUME: u64 = 292734461110386688;
pub const XFLD_EVT_CMTY_REFR_TOTAL_VOLUME_FILTERED: u64 = 292734465405353984;
pub const XFLD_EVT_CMTY_REFR_TRADE_HITIME: u64 = 292734486880190464;
pub const XFLD_EVT_CMTY_REFR_TRADE_PRICE: u64 = 292734448225484800;
pub const XFLD_EVT_CMTY_REFR_TRADE_QUALS: u64 = 292734272131825664;
pub const XFLD_EVT_CMTY_REFR_TRADE_SEQUENCE: u64 = 292734276426792960;
pub const XFLD_EVT_CMTY_REFR_TRADE_SIZE: u64 = 292734452520452096;
pub const XFLD_EVT_CMTY_REFR_TRADE_TICK_FLAGS: u64 = 292734083153264640;
pub const XFLD_EVT_CMTY_REFR_TRADING_SESSION_DATE: u64 = 292734379506008064;
pub const XFLD_EVT_CMTY_REFR_UPPER_LIMIT_PRICE: u64 = 292734280721760256;
pub const XFLD_EVT_CMTY_TRD_ALTERNATE_ID1: u64 = 293015463640694784;
pub const XFLD_EVT_CMTY_TRD_ALTERNATE_ID2: u64 = 293015467935662080;
pub const XFLD_EVT_CMTY_TRD_ASK_MMID: u64 = 293015609669582848;
pub const XFLD_EVT_CMTY_TRD_ASK_ORDER_REF: u64 = 293015601079648256;
pub const XFLD_EVT_CMTY_TRD_BATE: u64 = 293015523770236928;
pub const XFLD_EVT_CMTY_TRD_BID_MMID: u64 = 293015605374615552;
pub const XFLD_EVT_CMTY_TRD_BID_ORDER_REF: u64 = 293015596784680960;
pub const XFLD_EVT_CMTY_TRD_COUNTRY: u64 = 293015622554484736;
pub const XFLD_EVT_CMTY_TRD_EXCHANGE: u64 = 293015579604811776;
pub const XFLD_EVT_CMTY_TRD_EXCHANGE_HITIME: u64 = 293015558129975296;
pub const XFLD_EVT_CMTY_TRD_INSTRUMENT_STATUS: u64 = 293015562424942592;
pub const XFLD_EVT_CMTY_TRD_MARKET_STATUS: u64 = 293015571014877184;
pub const XFLD_EVT_CMTY_TRD_ORDER_REF_ID_TYPE: u64 = 293015631144419328;
pub const XFLD_EVT_CMTY_TRD_PRICE: u64 = 293015480820563968;
pub const XFLD_EVT_CMTY_TRD_PRICE_TYPE: u64 = 293015515180302336;
pub const XFLD_EVT_CMTY_TRD_QUALS: u64 = 293015528065204224;
pub const XFLD_EVT_CMTY_TRD_SHORT_SALE_RESTRICTED: u64 = 293015583899779072;
pub const XFLD_EVT_CMTY_TRD_SIDE_ATTR: u64 = 293015618259517440;
pub const XFLD_EVT_CMTY_TRD_SIZE: u64 = 293015485115531264;
pub const XFLD_EVT_CMTY_TRD_SUB_MARKET: u64 = 293015588194746368;
pub const XFLD_EVT_CMTY_TRD_SYMBOL_TYPE: u64 = 293015536655138816;
pub const XFLD_EVT_CMTY_TRD_TOTAL_CHANGE: u64 = 293015545245073408;
pub const XFLD_EVT_CMTY_TRD_TOTAL_VOLUME: u64 = 293015648324288512;
pub const XFLD_EVT_CMTY_TRD_TOTAL_VOLUME_FILTERED: u64 = 293015652619255808;
pub const XFLD_EVT_CMTY_TRD_TRADE_REF: u64 = 293015613964550144;
pub const XFLD_EVT_CMTY_TRD_TRADE_THRU_EXEMPT: u64 = 293015626849452032;
pub const XFLD_EVT_CMTY_TRD_TRADE_TICK_FLAGS: u64 = 293015472230629376;
pub const XFLD_EVT_CMTY_TRD_TRADE_UPDATE_FLAGS: u64 = 293015644029321216;
pub const XFLD_EVT_CMTY_TRD_TRADE_VENUE: u64 = 293015639734353920;
pub const XFLD_EVT_CMTY_TRD_TRADING_SESSION_DATE: u64 = 293015635439386624;
pub const XFLD_EVT_CMTY_TRD_TRANSACTION_HITIME: u64 = 293015656914223104;
pub const XFLD_EVT_CMTY_QUO_ALTERNATE_ID1: u64 = 293296938617405440;
pub const XFLD_EVT_CMTY_QUO_ALTERNATE_ID2: u64 = 293296942912372736;
pub const XFLD_EVT_CMTY_QUO_ASK_HITIME: u64 = 293297045991587840;
pub const XFLD_EVT_CMTY_QUO_ASK_IMPLIED_SIZE: u64 = 293297037401653248;
pub const XFLD_EVT_CMTY_QUO_ASK_PRICE: u64 = 293296960092241920;
pub const XFLD_EVT_CMTY_QUO_ASK_SIZE: u64 = 293296968682176512;
pub const XFLD_EVT_CMTY_QUO_BID_HITIME: u64 = 293297041696620544;
pub const XFLD_EVT_CMTY_QUO_BID_IMPLIED_SIZE: u64 = 293297033106685952;
pub const XFLD_EVT_CMTY_QUO_BID_PRICE: u64 = 293296955797274624;
pub const XFLD_EVT_CMTY_QUO_BID_SIZE: u64 = 293296964387209216;
pub const XFLD_EVT_CMTY_QUO_EXCHANGE_HITIME: u64 = 293297011631849472;
pub const XFLD_EVT_CMTY_QUO_INSTRUMENT_STATUS: u64 = 293297015926816768;
pub const XFLD_EVT_CMTY_QUO_MARKET_STATUS: u64 = 293297024516751360;
pub const XFLD_EVT_CMTY_QUO_PRICE_TYPE: u64 = 293296981567078400;
pub const XFLD_EVT_CMTY_QUO_QUALS: u64 = 293296990157012992;
pub const XFLD_EVT_CMTY_QUO_SHORT_SALE_RESTRICTED: u64 = 293297028811718656;
pub const XFLD_EVT_CMTY_QUO_SYMBOL_TYPE: u64 = 293296998746947584;
pub const XFLD_EVT_CMTY_CANC_ALTERNATE_ID1: u64 = 293578413594116096;
pub const XFLD_EVT_CMTY_CANC_ALTERNATE_ID2: u64 = 293578417889083392;
pub const XFLD_EVT_CMTY_CANC_ASK_MMID: u64 = 293578533853200384;
pub const XFLD_EVT_CMTY_CANC_ASK_ORDER_REF: u64 = 293578525263265792;
pub const XFLD_EVT_CMTY_CANC_BATE: u64 = 293578439363919872;
pub const XFLD_EVT_CMTY_CANC_BID_MMID: u64 = 293578529558233088;
pub const XFLD_EVT_CMTY_CANC_BID_ORDER_REF: u64 = 293578520968298496;
pub const XFLD_EVT_CMTY_CANC_COUNTRY: u64 = 293578546738102272;
pub const XFLD_EVT_CMTY_CANC_EXCHANGE: u64 = 293578503788429312;
pub const XFLD_EVT_CMTY_CANC_EXCHANGE_HITIME: u64 = 293578482313592832;
pub const XFLD_EVT_CMTY_CANC_INSTRUMENT_STATUS: u64 = 293578486608560128;
pub const XFLD_EVT_CMTY_CANC_MARKET_STATUS: u64 = 293578495198494720;
pub const XFLD_EVT_CMTY_CANC_ORDER_REF_ID_TYPE: u64 = 293578563917971456;
pub const XFLD_EVT_CMTY_CANC_PRICE: u64 = 293578430773985280;
pub const XFLD_EVT_CMTY_CANC_PRICE_TYPE: u64 = 293578452248821760;
pub const XFLD_EVT_CMTY_CANC_QUALS: u64 = 293578460838756352;
pub const XFLD_EVT_CMTY_CANC_SHORT_SALE_RESTRICTED: u64 = 293578508083396608;
pub const XFLD_EVT_CMTY_CANC_SIDE_ATTR: u64 = 293578542443134976;
pub const XFLD_EVT_CMTY_CANC_SIZE: u64 = 293578435068952576;
pub const XFLD_EVT_CMTY_CANC_SUB_MARKET: u64 = 293578512378363904;
pub const XFLD_EVT_CMTY_CANC_SYMBOL_TYPE: u64 = 293578469428690944;
pub const XFLD_EVT_CMTY_CANC_TOTAL_CHANGE: u64 = 293578559623004160;
pub const XFLD_EVT_CMTY_CANC_TOTAL_VOLUME: u64 = 293578581097840640;
pub const XFLD_EVT_CMTY_CANC_TOTAL_VOLUME_FILTERED: u64 = 293578585392807936;
pub const XFLD_EVT_CMTY_CANC_TRADE_REF: u64 = 293578538148167680;
pub const XFLD_EVT_CMTY_CANC_TRADE_THRU_EXEMPT: u64 = 293578551033069568;
pub const XFLD_EVT_CMTY_CANC_TRADE_TICK_FLAGS: u64 = 293578422184050688;
pub const XFLD_EVT_CMTY_CANC_TRADE_UPDATE_FLAGS: u64 = 293578576802873344;
pub const XFLD_EVT_CMTY_CANC_TRADE_VENUE: u64 = 293578572507906048;
pub const XFLD_EVT_CMTY_CANC_TRADING_SESSION_DATE: u64 = 293578568212938752;
pub const XFLD_EVT_CMTY_CANC_TRANSACTION_HITIME: u64 = 293578589687775232;
pub const XFLD_EVT_CMTY_CORR_ALTERNATE_ID1: u64 = 293859888570826752;
pub const XFLD_EVT_CMTY_CORR_ALTERNATE_ID2: u64 = 293859892865794048;
pub const XFLD_EVT_CMTY_CORR_ASK_MMID: u64 = 293860064664485888;
pub const XFLD_EVT_CMTY_CORR_ASK_MMID_ORIG: u64 = 293860030304747520;
pub const XFLD_EVT_CMTY_CORR_ASK_ORDER_REF: u64 = 293860056074551296;
pub const XFLD_EVT_CMTY_CORR_ASK_ORDER_REF_ORIG: u64 = 293860021714812928;
pub const XFLD_EVT_CMTY_CORR_BATE: u64 = 293859935815467008;
pub const XFLD_EVT_CMTY_CORR_BATE_ORIG: u64 = 293859914340630528;
pub const XFLD_EVT_CMTY_CORR_BID_MMID: u64 = 293860060369518592;
pub const XFLD_EVT_CMTY_CORR_BID_MMID_ORIG: u64 = 293860026009780224;
pub const XFLD_EVT_CMTY_CORR_BID_ORDER_REF: u64 = 293860051779584000;
pub const XFLD_EVT_CMTY_CORR_BID_ORDER_REF_ORIG: u64 = 293860017419845632;
pub const XFLD_EVT_CMTY_CORR_COUNTRY: u64 = 293860077549387776;
pub const XFLD_EVT_CMTY_CORR_EXCHANGE: u64 = 293860000239976448;
pub const XFLD_EVT_CMTY_CORR_EXCHANGE_HITIME: u64 = 293859978765139968;
pub const XFLD_EVT_CMTY_CORR_INSTRUMENT_STATUS: u64 = 293859983060107264;
pub const XFLD_EVT_CMTY_CORR_MARKET_STATUS: u64 = 293859991650041856;
pub const XFLD_EVT_CMTY_CORR_ORDER_REF_ID_TYPE: u64 = 293860094729256960;
pub const XFLD_EVT_CMTY_CORR_PRICE: u64 = 293859927225532416;
pub const XFLD_EVT_CMTY_CORR_PRICE_ORIG: u64 = 293859905750695936;
pub const XFLD_EVT_CMTY_CORR_PRICE_TYPE: u64 = 293859948700368896;
pub const XFLD_EVT_CMTY_CORR_QUALS: u64 = 293859957290303488;
pub const XFLD_EVT_CMTY_CORR_SHORT_SALE_RESTRICTED: u64 = 293860004534943744;
pub const XFLD_EVT_CMTY_CORR_SIDE_ATTR: u64 = 293860073254420480;
pub const XFLD_EVT_CMTY_CORR_SIDE_ATTR_ORIG: u64 = 293860038894682112;
pub const XFLD_EVT_CMTY_CORR_SIZE: u64 = 293859931520499712;
pub const XFLD_EVT_CMTY_CORR_SIZE_ORIG: u64 = 293859910045663232;
pub const XFLD_EVT_CMTY_CORR_SUB_MARKET: u64 = 293860043189649408;
pub const XFLD_EVT_CMTY_CORR_SUB_MARKET_ORIG: u64 = 293860008829911040;
pub const XFLD_EVT_CMTY_CORR_SYMBOL_TYPE: u64 = 293859965880238080;
pub const XFLD_EVT_CMTY_CORR_TOTAL_CHANGE: u64 = 293860090434289664;
pub const XFLD_EVT_CMTY_CORR_TOTAL_VOLUME: u64 = 293860107614158848;
pub const XFLD_EVT_CMTY_CORR_TOTAL_VOLUME_FILTERED: u64 = 293860111909126144;
pub const XFLD_EVT_CMTY_CORR_TRADE_REF: u64 = 293860068959453184;
pub const XFLD_EVT_CMTY_CORR_TRADE_REF_ORIG: u64 = 293860034599714816;
pub const XFLD_EVT_CMTY_CORR_TRADE_THRU_EXEMPT: u64 = 293860081844355072;
pub const XFLD_EVT_CMTY_CORR_TRADE_TICK_FLAGS: u64 = 293859918635597824;
pub const XFLD_EVT_CMTY_CORR_TRADE_TICK_FLAGS_ORIG: u64 = 293859897160761344;
pub const XFLD_EVT_CMTY_CORR_TRADING_SESSION_DATE: u64 = 293860103319191552;
pub const XFLD_EVT_CMTY_CORR_TRADING_SESSION_DATE_ORIG: u64 = 293860099024224256;
pub const XFLD_EVT_CMTY_CORR_TRANSACTION_HITIME: u64 = 293860116204093440;
pub const XFLD_EVT_NAVU_ASK: u64 = 294422842819215360;
pub const XFLD_EVT_NAVU_BID: u64 = 294422834229280768;
pub const XFLD_EVT_NAVU_HALTED_COUNT: u64 = 294422885768888320;
pub const XFLD_EVT_NAVU_LAST: u64 = 294422829934313472;
pub const XFLD_EVT_NAVU_PRICE_TYPE: u64 = 294422859999084544;
pub const XFLD_EVT_NAVU_UNOPENED_COUNT: u64 = 294422881473921024;
pub const XFLD_EVT_BLR_BASKET_COUNT: u64 = 294704322090893312;
pub const XFLD_EVT_BLR_BASKET_KEY_STRING: u64 = 294704326385860608;
pub const XFLD_EVT_BLU_BASKET_KEY_STRING: u64 = 294985822837407744;
pub const XFLD_EVT_BLU_UPDATE_ACTION: u64 = 294985818542440448;
pub const XFLD_EVT_BLU_UPDATE_COUNT: u64 = 294985814247473152;
pub const XFLD_EVT_BDR_CASH_POSITION: u64 = 295267297814118400;
pub const XFLD_EVT_BDR_CONSTITUENT_HALTED_PRICE: u64 = 295267306404052992;
pub const XFLD_EVT_BDR_CONSTITUENT_KEY_STRING: u64 = 295267302109085696;
pub const XFLD_EVT_BDR_CONSTITUENT_PRICE_TYPE: u64 = 295267319288954880;
pub const XFLD_EVT_BDR_CONSTITUENT_WEIGHT: u64 = 295267293519151104;
pub const XFLD_EVT_BDR_DELTA_ASK_NAV: u64 = 295267272044314624;
pub const XFLD_EVT_BDR_DELTA_BID_NAV: u64 = 295267263454380032;
pub const XFLD_EVT_BDR_DELTA_LAST_NAV: u64 = 295267259159412736;
pub const XFLD_EVT_BDR_DIVISOR: u64 = 295267280634249216;
pub const XFLD_EVT_BDR_NUMBER_CONSTITUENTS: u64 = 295267284929216512;
pub const XFLD_EVT_BDR_USER_NAV1: u64 = 295267310699020288;
pub const XFLD_EVT_BDR_USER_NAV2: u64 = 295267314993987584;
pub const XFLD_EVT_BDS_CONSTITUENT_KEY_STRING: u64 = 295548747021025280;
pub const XFLD_EVT_BDS_CONSTITUENT_STATUS: u64 = 295548742726057984;
pub const XFLD_EVT_BDS_NUMBER_CONSTITUENTS: u64 = 295548734136123392;
pub const XFLD_EVT_BDS_STATUS_STRING: u64 = 295548729841156096;
pub const XFLD_EVT_BCONSUS_HALTED_PRICE: u64 = 295830209112834048;
pub const XFLD_EVT_BCONSR_HALTED_PRICE: u64 = 296111692679479296;
pub const XFLD_EVT_BCONSR_IS_HALTED: u64 = 296111684089544704;
pub const XFLD_EVT_BCONSR_PRICE_TYPE: u64 = 296111696974446592;
pub const XFLD_EVT_ST_EQTY_REFR_ALTERNATE_ID1: u64 = 296674655517802496;
pub const XFLD_EVT_ST_EQTY_REFR_ALTERNATE_ID2: u64 = 296674659812769792;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_CUSTOMER_SIZE: u64 = 296674943280611328;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_EXCHANGE: u64 = 296674707057410048;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_HITIME: u64 = 296675256813223936;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_MARKET_MAKER_SIZE: u64 = 296674951870545920;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_PRICE: u64 = 296674681287606272;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_PROFESSIONAL_SIZE: u64 = 296674947575578624;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_SIZE: u64 = 296674689877540864;
pub const XFLD_EVT_ST_EQTY_REFR_ASK_TRADE_VENUE: u64 = 296675175208845312;
pub const XFLD_EVT_ST_EQTY_REFR_BID_CUSTOMER_SIZE: u64 = 296674956165513216;
pub const XFLD_EVT_ST_EQTY_REFR_BID_EXCHANGE: u64 = 296674702762442752;
pub const XFLD_EVT_ST_EQTY_REFR_BID_HITIME: u64 = 296675261108191232;
pub const XFLD_EVT_ST_EQTY_REFR_BID_MARKET_MAKER_SIZE: u64 = 296674964755447808;
pub const XFLD_EVT_ST_EQTY_REFR_BID_PRICE: u64 = 296674676992638976;
pub const XFLD_EVT_ST_EQTY_REFR_BID_PROFESSIONAL_SIZE: u64 = 296674960460480512;
pub const XFLD_EVT_ST_EQTY_REFR_BID_SIZE: u64 = 296674685582573568;
pub const XFLD_EVT_ST_EQTY_REFR_BID_TRADE_VENUE: u64 = 296675179503812608;
pub const XFLD_EVT_ST_EQTY_REFR_CLOSE_EXCH: u64 = 296674638337933312;
pub const XFLD_EVT_ST_EQTY_REFR_CLOSE_HITIME: u64 = 296675252518256640;
pub const XFLD_EVT_ST_EQTY_REFR_CLOSE_PRICE: u64 = 296674629747998720;
pub const XFLD_EVT_ST_EQTY_REFR_CLOSE_SIZE: u64 = 296674642632900608;
pub const XFLD_EVT_ST_EQTY_REFR_CLOSE_TRADE_VENUE: u64 = 296675166618910720;
pub const XFLD_EVT_ST_EQTY_REFR_CURRENCY: u64 = 296674664107737088;
pub const XFLD_EVT_ST_EQTY_REFR_EXCH_TIME_OFFSET: u64 = 296674810136625152;
pub const XFLD_EVT_ST_EQTY_REFR_GROUP_ID: u64 = 296675080719564800;
pub const XFLD_EVT_ST_EQTY_REFR_HIGH_EXCH: u64 = 296674801546690560;
pub const XFLD_EVT_ST_EQTY_REFR_HIGH_HITIME: u64 = 296675278288060416;
pub const XFLD_EVT_ST_EQTY_REFR_HIGH_PRICE: u64 = 296674792956755968;
pub const XFLD_EVT_ST_EQTY_REFR_HIGH_TRADE_VENUE: u64 = 296675192388714496;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_END_HITIME: u64 = 296675050654793728;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_ID: u64 = 296675042064859136;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_OWNER: u64 = 296675054949761024;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_START_HITIME: u64 = 296675046359826432;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_TYPE: u64 = 296675016295055360;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_FAR_PRICE: u64 = 296675037769891840;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_MARKET_ORDER_TYPE: u64 = 296675239633354752;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 296675235338387456;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_NEAR_PRICE: u64 = 296675033474924544;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 296675093604466688;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_PAIRED_VOLUME: u64 = 296675024884989952;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_QUALS: u64 = 296674999115186176;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_RECEIVE_HITIME: u64 = 296675007705120768;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REFERENCE_PRICE: u64 = 296675029179957248;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 296675097899433984;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 296675123669237760;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_PAIRED_VOLUME: u64 = 296675115079303168;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_TYPE: u64 = 296675102194401280;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 296675106489368576;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 296675119374270464;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_REG_VOLUME: u64 = 296675110784335872;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_SEQUENCE: u64 = 296675003410153472;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_TYPE: u64 = 296675012000088064;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_UNPAIRED_TYPE: u64 = 296675085014532096;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_UNPAIRED_VOLUME: u64 = 296675089309499392;
pub const XFLD_EVT_ST_EQTY_REFR_IMBALANCE_VOLUME: u64 = 296675020590022656;
pub const XFLD_EVT_ST_EQTY_REFR_INSTRUMENT_STATUS: u64 = 296674848791330816;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_ASK_OFFSET_PRICE: u64 = 296675158028976128;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_ASK_ORDER_REF: u64 = 296675136554139648;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_ASK_QUALS: u64 = 296675145144074240;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_BID_OFFSET_PRICE: u64 = 296675153734008832;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_BID_ORDER_REF: u64 = 296675132259172352;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_BID_QUALS: u64 = 296675140849106944;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_OFFSET_PRICE_TYPE: u64 = 296675149439041536;
pub const XFLD_EVT_ST_EQTY_REFR_IOI_ORDER_REF_TYPE: u64 = 296675127964205056;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_EXCH: u64 = 296674741417148416;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_HITIME: u64 = 296675265403158528;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_PRICE: u64 = 296674719942311936;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_QUALS: u64 = 296675200978649088;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_SEQUENCE: u64 = 296675205273616384;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_SIZE: u64 = 296674728532246528;
pub const XFLD_EVT_ST_EQTY_REFR_LAST_TRADE_VENUE: u64 = 296675183798779904;
pub const XFLD_EVT_ST_EQTY_REFR_LIMIT_PRICE_HITIME: u64 = 296675286877995008;
pub const XFLD_EVT_ST_EQTY_REFR_LOT_SIZE: u64 = 296674934690676736;
pub const XFLD_EVT_ST_EQTY_REFR_LOWER_LIMIT_PRICE: u64 = 296674973345382400;
pub const XFLD_EVT_ST_EQTY_REFR_LOW_EXCH: u64 = 296674805841657856;
pub const XFLD_EVT_ST_EQTY_REFR_LOW_HITIME: u64 = 296675282583027712;
pub const XFLD_EVT_ST_EQTY_REFR_LOW_PRICE: u64 = 296674797251723264;
pub const XFLD_EVT_ST_EQTY_REFR_LOW_TRADE_VENUE: u64 = 296675196683681792;
pub const XFLD_EVT_ST_EQTY_REFR_MARKET_STATUS: u64 = 296674857381265408;
pub const XFLD_EVT_ST_EQTY_REFR_OPEN_EXCH: u64 = 296674745712115712;
pub const XFLD_EVT_ST_EQTY_REFR_OPEN_HITIME: u64 = 296675273993093120;
pub const XFLD_EVT_ST_EQTY_REFR_OPEN_INTEREST: u64 = 296674651222835200;
pub const XFLD_EVT_ST_EQTY_REFR_OPEN_PRICE: u64 = 296674724237279232;
pub const XFLD_EVT_ST_EQTY_REFR_OPEN_TRADE_VENUE: u64 = 296675188093747200;
pub const XFLD_EVT_ST_EQTY_REFR_PREV_CLOSE: u64 = 296674827316494336;
pub const XFLD_EVT_ST_EQTY_REFR_PRICE_TYPE: u64 = 296674672697671680;
pub const XFLD_EVT_ST_EQTY_REFR_PRIME_COUNTRY: u64 = 296675162323943424;
pub const XFLD_EVT_ST_EQTY_REFR_PRIME_EXCH: u64 = 296674840201396224;
pub const XFLD_EVT_ST_EQTY_REFR_PRIME_TRADE_VENUE: u64 = 296675170913878016;
pub const XFLD_EVT_ST_EQTY_REFR_QUALS: u64 = 296674814431592448;
pub const XFLD_EVT_ST_EQTY_REFR_QUOTE_QUALS: u64 = 296674981935316992;
pub const XFLD_EVT_ST_EQTY_REFR_QUOTE_SEQUENCE: u64 = 296674986230284288;
pub const XFLD_EVT_ST_EQTY_REFR_REF_CLOSE_PRICE: u64 = 296674646927867904;
pub const XFLD_EVT_ST_EQTY_REFR_RELATIVE_LIMIT_HITIME: u64 = 296675291172962304;
pub const XFLD_EVT_ST_EQTY_REFR_RELATIVE_LIMIT_PRICE: u64 = 296675059244728320;
pub const XFLD_EVT_ST_EQTY_REFR_RELATIVE_LIMIT_PRICE_TYPE: u64 = 296675063539695616;
pub const XFLD_EVT_ST_EQTY_REFR_RELATIVE_LIMIT_TYPE: u64 = 296675067834662912;
pub const XFLD_EVT_ST_EQTY_REFR_SHORT_SALE_RESTRICTED: u64 = 296674861676232704;
pub const XFLD_EVT_ST_EQTY_REFR_STATUS: u64 = 296674831611461632;
pub const XFLD_EVT_ST_EQTY_REFR_SYMBOL_TYPE: u64 = 296674668402704384;
pub const XFLD_EVT_ST_EQTY_REFR_TOTAL_CHANGE: u64 = 296674758597017600;
pub const XFLD_EVT_ST_EQTY_REFR_TOTAL_VOLUME: u64 = 296675243928322048;
pub const XFLD_EVT_ST_EQTY_REFR_TOTAL_VOLUME_FILTERED: u64 = 296675248223289344;
pub const XFLD_EVT_ST_EQTY_REFR_TRADED_VALUE: u64 = 296674780071854080;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_EXCH: u64 = 296675226748452864;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_HITIME: u64 = 296675269698125824;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_PRICE: u64 = 296675209568583680;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_QUALS: u64 = 296674990525251584;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_SEQUENCE: u64 = 296674994820218880;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_SIZE: u64 = 296675213863550976;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_TICK_FLAGS: u64 = 296674750007083008;
pub const XFLD_EVT_ST_EQTY_REFR_TRADE_TRADE_VENUE: u64 = 296675231043420160;
pub const XFLD_EVT_ST_EQTY_REFR_TRADING_SESSION_DATE: u64 = 296675076424597504;
pub const XFLD_EVT_ST_EQTY_REFR_UPPER_LIMIT_PRICE: u64 = 296674969050415104;
pub const XFLD_EVT_ST_EQTY_REFR_VWAP_VOLUME: u64 = 296674767186952192;
pub const XFLD_EVT_ST_CMTY_REFR_ALTERNATE_ID1: u64 = 296956104724709376;
pub const XFLD_EVT_ST_CMTY_REFR_ALTERNATE_ID2: u64 = 296956109019676672;
pub const XFLD_EVT_ST_CMTY_REFR_ASK_HITIME: u64 = 296956577171111936;
pub const XFLD_EVT_ST_CMTY_REFR_ASK_IMPLIED_SIZE: u64 = 296956456912027648;
pub const XFLD_EVT_ST_CMTY_REFR_ASK_PRICE: u64 = 296956134789480448;
pub const XFLD_EVT_ST_CMTY_REFR_ASK_SIZE: u64 = 296956143379415040;
pub const XFLD_EVT_ST_CMTY_REFR_BID_HITIME: u64 = 296956572876144640;
pub const XFLD_EVT_ST_CMTY_REFR_BID_IMPLIED_SIZE: u64 = 296956452617060352;
pub const XFLD_EVT_ST_CMTY_REFR_BID_PRICE: u64 = 296956130494513152;
pub const XFLD_EVT_ST_CMTY_REFR_BID_SIZE: u64 = 296956139084447744;
pub const XFLD_EVT_ST_CMTY_REFR_CLOSE_HITIME: u64 = 296956602940915712;
pub const XFLD_EVT_ST_CMTY_REFR_CLOSE_PRICE_HIGH: u64 = 296956229278760960;
pub const XFLD_EVT_ST_CMTY_REFR_CLOSE_PRICE_LOW: u64 = 296956233573728256;
pub const XFLD_EVT_ST_CMTY_REFR_CURRENCY: u64 = 296956113314643968;
pub const XFLD_EVT_ST_CMTY_REFR_EXCH_TIME_OFFSET: u64 = 296956349537845248;
pub const XFLD_EVT_ST_CMTY_REFR_EXPIRATION: u64 = 296956276523401216;
pub const XFLD_EVT_ST_CMTY_REFR_GROUP_ID: u64 = 296956482681831424;
pub const XFLD_EVT_ST_CMTY_REFR_HIGH_BATE: u64 = 296956177739153408;
pub const XFLD_EVT_ST_CMTY_REFR_HIGH_HITIME: u64 = 296956590056013824;
pub const XFLD_EVT_ST_CMTY_REFR_HIGH_PRICE: u64 = 296956212098891776;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_END_HITIME: u64 = 296956444027125760;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_ID: u64 = 296956435437191168;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_OWNER: u64 = 296956448322093056;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_START_HITIME: u64 = 296956439732158464;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_TYPE: u64 = 296956409667387392;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_FAR_PRICE: u64 = 296956431142223872;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_MARKET_ORDER_TYPE: u64 = 296956534221438976;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 296956529926471680;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_NEAR_PRICE: u64 = 296956426847256576;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_NOMINAL_REFERENCE_PRICE: u64 = 296956495566733312;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_PAIRED_VOLUME: u64 = 296956418257321984;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_QUALS: u64 = 296956392487518208;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_RECEIVE_HITIME: u64 = 296956401077452800;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REFERENCE_PRICE: u64 = 296956422552289280;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 296956499861700608;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 296956525631504384;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_PAIRED_VOLUME: u64 = 296956517041569792;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_TYPE: u64 = 296956504156667904;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 296956508451635200;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 296956521336537088;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_REG_VOLUME: u64 = 296956512746602496;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_SEQUENCE: u64 = 296956396782485504;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_TYPE: u64 = 296956405372420096;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_UNPAIRED_TYPE: u64 = 296956486976798720;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_UNPAIRED_VOLUME: u64 = 296956491271766016;
pub const XFLD_EVT_ST_CMTY_REFR_IMBALANCE_VOLUME: u64 = 296956413962354688;
pub const XFLD_EVT_ST_CMTY_REFR_INSTRUMENT_STATUS: u64 = 296956302293204992;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_BATE: u64 = 296956173444186112;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_HITIME: u64 = 296956581466079232;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_PRICE: u64 = 296956194919022592;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_QUALS: u64 = 296956538516406272;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_SEQUENCE: u64 = 296956542811373568;
pub const XFLD_EVT_ST_CMTY_REFR_LAST_SIZE: u64 = 296956199213989888;
pub const XFLD_EVT_ST_CMTY_REFR_LIMIT_PRICE_HITIME: u64 = 296956615825817600;
pub const XFLD_EVT_ST_CMTY_REFR_LOWER_LIMIT_PRICE: u64 = 296956383897583616;
pub const XFLD_EVT_ST_CMTY_REFR_LOW_BATE: u64 = 296956182034120704;
pub const XFLD_EVT_ST_CMTY_REFR_LOW_HITIME: u64 = 296956594350981120;
pub const XFLD_EVT_ST_CMTY_REFR_LOW_PRICE: u64 = 296956216393859072;
pub const XFLD_EVT_ST_CMTY_REFR_MARKET_STATUS: u64 = 296956310883139584;
pub const XFLD_EVT_ST_CMTY_REFR_OPEN_HITIME: u64 = 296956598645948416;
pub const XFLD_EVT_ST_CMTY_REFR_OPEN_INTEREST: u64 = 296956272228433920;
pub const XFLD_EVT_ST_CMTY_REFR_OPEN_PRICE_HIGH: u64 = 296956220688826368;
pub const XFLD_EVT_ST_CMTY_REFR_OPEN_PRICE_LOW: u64 = 296956224983793664;
pub const XFLD_EVT_ST_CMTY_REFR_PD_SETL_HITIME: u64 = 296956611530850304;
pub const XFLD_EVT_ST_CMTY_REFR_PD_SETL_PRICE: u64 = 296956263638499328;
pub const XFLD_EVT_ST_CMTY_REFR_PD_TOTAL_VOLUME: u64 = 296956568581177344;
pub const XFLD_EVT_ST_CMTY_REFR_PRICE_TYPE: u64 = 296956126199545856;
pub const XFLD_EVT_ST_CMTY_REFR_QUALS: u64 = 296956285113335808;
pub const XFLD_EVT_ST_CMTY_REFR_QUOTE_QUALS: u64 = 296956362422747136;
pub const XFLD_EVT_ST_CMTY_REFR_QUOTE_SEQUENCE: u64 = 296956366717714432;
pub const XFLD_EVT_ST_CMTY_REFR_RELATIVE_LIMIT_HITIME: u64 = 296956620120784896;
pub const XFLD_EVT_ST_CMTY_REFR_RELATIVE_LIMIT_PRICE: u64 = 296956461206994944;
pub const XFLD_EVT_ST_CMTY_REFR_RELATIVE_LIMIT_PRICE_TYPE: u64 = 296956465501962240;
pub const XFLD_EVT_ST_CMTY_REFR_RELATIVE_LIMIT_TYPE: u64 = 296956469796929536;
pub const XFLD_EVT_ST_CMTY_REFR_SETL_BATE: u64 = 296956169149218816;
pub const XFLD_EVT_ST_CMTY_REFR_SETL_HITIME: u64 = 296956607235883008;
pub const XFLD_EVT_ST_CMTY_REFR_SETL_PRICE: u64 = 296956164854251520;
pub const XFLD_EVT_ST_CMTY_REFR_STATUS: u64 = 296956289408303104;
pub const XFLD_EVT_ST_CMTY_REFR_SYMBOL_TYPE: u64 = 296956117609611264;
pub const XFLD_EVT_ST_CMTY_REFR_TOTAL_CHANGE: u64 = 296956207803924480;
pub const XFLD_EVT_ST_CMTY_REFR_TOTAL_VOLUME: u64 = 296956559991242752;
pub const XFLD_EVT_ST_CMTY_REFR_TOTAL_VOLUME_FILTERED: u64 = 296956564286210048;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_HITIME: u64 = 296956585761046528;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_PRICE: u64 = 296956547106340864;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_QUALS: u64 = 296956371012681728;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_SEQUENCE: u64 = 296956375307649024;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_SIZE: u64 = 296956551401308160;
pub const XFLD_EVT_ST_CMTY_REFR_TRADE_TICK_FLAGS: u64 = 296956186329088000;
pub const XFLD_EVT_ST_CMTY_REFR_TRADING_SESSION_DATE: u64 = 296956478386864128;
pub const XFLD_EVT_ST_CMTY_REFR_UPPER_LIMIT_PRICE: u64 = 296956379602616320;
pub const XFLD_EVT_KLDS_STATUS_STRING: u64 = 298644954584973312;
pub const XFLD_EVT_KLDR_CONSTITUENT_COUNT: u64 = 298926442446585856;
pub const XFLD_EVT_KLDR_CONSTITUENT_KEY: u64 = 298926446741553152;
pub const XFLD_EVT_KLDR_CONSTITUENT_KEY_STRING: u64 = 298926455331487744;
pub const XFLD_EVT_KLDR_CONSTITUENT_STATUS: u64 = 298926459626455040;
pub const XFLD_EVT_KLDR_CONSTITUENT_SYMBOL_TYPE: u64 = 298926451036520448;
pub const XFLD_EVT_KLDR_DESCRIPTION: u64 = 298926429561683968;
pub const XFLD_EVT_KLDR_UPDATE_DATE: u64 = 298926433856651264;
pub const XFLD_EVT_KLDR_UPDATE_TIME: u64 = 298926438151618560;
pub const XFLD_EVT_KLFDS_STATUS_STRING: u64 = 299489396694974464;
pub const XFLD_EVT_KLFDR_DESCRIPTION: u64 = 299770854491815936;
pub const XFLD_EVT_KLFDR_FILTER_EXPRESSION: u64 = 299770867376717824;
pub const XFLD_EVT_KLFDR_UPDATE_DATE: u64 = 299770858786783232;
pub const XFLD_EVT_KLFDR_UPDATE_TIME: u64 = 299770863081750528;
pub const XFLD_EVT_KLM_MATCH_COUNT: u64 = 300896758693625856;
pub const XFLD_EVT_KLM_MATCH_KEY: u64 = 300896762988593152;
pub const XFLD_EVT_KLM_MATCH_KEY_STRING: u64 = 300896771578527744;
pub const XFLD_EVT_KLM_MATCH_SYMBOL_TYPE: u64 = 300896767283560448;
pub const XFLD_EVT_KLMR_MATCH_COUNT: u64 = 301178229375369216;
pub const XFLD_EVT_KLMR_MATCH_KEY: u64 = 301178233670336512;
pub const XFLD_EVT_KLMR_MATCH_KEY_STRING: u64 = 301178242260271104;
pub const XFLD_EVT_KLMR_MATCH_SYMBOL_TYPE: u64 = 301178237965303808;
pub const XFLD_EVT_KLCR_KEYLIST_COUNT: u64 = 301459704352079872;
pub const XFLD_EVT_KLCR_KEYLIST_DESCRIPTION: u64 = 301459721531949056;
pub const XFLD_EVT_KLCR_KEYLIST_KEY: u64 = 301459708647047168;
pub const XFLD_EVT_KLCR_KEYLIST_SYMBOL_TYPE: u64 = 301459725826916352;
pub const XFLD_EVT_KLCR_KEYLIST_UPDATE_DATE: u64 = 301459712942014464;
pub const XFLD_EVT_KLCR_KEYLIST_UPDATE_TIME: u64 = 301459717236981760;
pub const XFLD_EVT_KLCU_KEYLIST_DESCRIPTION: u64 = 301741196508659712;
pub const XFLD_EVT_KLCU_KEYLIST_KEY: u64 = 301741183623757824;
pub const XFLD_EVT_KLCU_KEYLIST_SYMBOL_TYPE: u64 = 301741205098594304;
pub const XFLD_EVT_KLCU_KEYLIST_UPDATE_DATE: u64 = 301741187918725120;
pub const XFLD_EVT_KLCU_KEYLIST_UPDATE_TIME: u64 = 301741192213692416;
pub const XFLD_EVT_KLCU_UPDATE_ACTION: u64 = 301741200803627008;
pub const XFLD_EVT_KLCU_UPDATE_COUNT: u64 = 301741179328790528;
pub const XFLD_EVT_IUS_STATUS_STRING: u64 = 302022654305501184;
pub const XFLD_EVT_SPD_LL_ASK_FILTER_ENABLED: u64 = 302304150757048320;
pub const XFLD_EVT_SPD_LL_BID_FILTER_ENABLED: u64 = 302304146462081024;
pub const XFLD_EVT_SPD_QF_ASK_THRESHOLDS: u64 = 302304133577179136;
pub const XFLD_EVT_SPD_QF_BID_THRESHOLDS: u64 = 302304129282211840;
pub const XFLD_EVT_SPD_QV_ASK_THRESHOLDS: u64 = 302304142167113728;
pub const XFLD_EVT_SPD_QV_BID_THRESHOLDS: u64 = 302304137872146432;
pub const XFLD_EVT_SPD_UPDATE_HITIME: u64 = 302304155052015616;
pub const XFLD_EVT_SPD_STATUS_STRING: u64 = 302585604258922496;
pub const XFLD_EVT_OEX_ASK_MMID: u64 = 302867195199750144;
pub const XFLD_EVT_OEX_ASK_ORDER_REF: u64 = 302867186609815552;
pub const XFLD_EVT_OEX_BID_MMID: u64 = 302867190904782848;
pub const XFLD_EVT_OEX_BID_ORDER_REF: u64 = 302867182314848256;
pub const XFLD_EVT_OEX_COUNTRY: u64 = 302867100710469632;
pub const XFLD_EVT_OEX_EXCHANGE: u64 = 302867096415502336;
pub const XFLD_EVT_OEX_EXCHANGE_HITIME: u64 = 302867147955109888;
pub const XFLD_EVT_OEX_INSTRUMENT_STATUS: u64 = 302867156545044480;
pub const XFLD_EVT_OEX_MARKET_STATUS: u64 = 302867165134979072;
pub const XFLD_EVT_OEX_ORDER_REF: u64 = 302867087825567744;
pub const XFLD_EVT_OEX_ORDER_REF_ID_TYPE: u64 = 302867208084652032;
pub const XFLD_EVT_OEX_PRICE: u64 = 302867079235633152;
pub const XFLD_EVT_OEX_PRICE_TYPE: u64 = 302867105005436928;
pub const XFLD_EVT_OEX_QUALS: u64 = 302867113595371520;
pub const XFLD_EVT_OEX_SHORT_SALE_RESTRICTED: u64 = 302867169429946368;
pub const XFLD_EVT_OEX_SIDE_ATTR: u64 = 302867152250077184;
pub const XFLD_EVT_OEX_SIZE: u64 = 302867083530600448;
pub const XFLD_EVT_OEX_SUB_MARKET: u64 = 302867173724913664;
pub const XFLD_EVT_OEX_SYMBOL_TYPE: u64 = 302867135070208000;
pub const XFLD_EVT_OEX_TRADE_REF: u64 = 302867092120535040;
pub const XFLD_EVT_OEX_TRADE_THRU_EXEMPT: u64 = 302867199494717440;
pub const XFLD_EVT_OEX_TRADE_VENUE: u64 = 302867302573932544;
pub const XFLD_EVT_OEX_TRADING_SESSION_DATE: u64 = 302867212379619328;
pub const XFLD_EVT_OEX_TRANSACTION_HITIME: u64 = 302867405653147648;
pub const XFLD_EVT_OIMB_AUCTION_CLEARING_ACCOUNT: u64 = 303148678766395392;
pub const XFLD_EVT_OIMB_AUCTION_CLEARING_COUNT: u64 = 303148665881493504;
pub const XFLD_EVT_OIMB_AUCTION_CLEARING_FIRM: u64 = 303148674471428096;
pub const XFLD_EVT_OIMB_AUCTION_CLEARING_LEG_SECURITY_ID: u64 = 303148670176460800;
pub const XFLD_EVT_OIMB_AUCTION_END_HITIME: u64 = 303148687356329984;
pub const XFLD_EVT_OIMB_AUCTION_ID: u64 = 303148657291558912;
pub const XFLD_EVT_OIMB_AUCTION_OWNER: u64 = 303148661586526208;
pub const XFLD_EVT_OIMB_AUCTION_START_HITIME: u64 = 303148683061362688;
pub const XFLD_EVT_OIMB_AUCTION_TYPE: u64 = 303148558507311104;
pub const XFLD_EVT_OIMB_COUNTRY: u64 = 303148579982147584;
pub const XFLD_EVT_OIMB_EXCHANGE: u64 = 303148575687180288;
pub const XFLD_EVT_OIMB_EXCHANGE_HITIME: u64 = 303148631521755136;
pub const XFLD_EVT_OIMB_FAR_PRICE: u64 = 303148652996591616;
pub const XFLD_EVT_OIMB_IMBALANCE_MARKET_ORDER_TYPE: u64 = 303148743190904832;
pub const XFLD_EVT_OIMB_IMBALANCE_MARKET_ORDER_VOLUME: u64 = 303148738895937536;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_AUCTION_START_HITIME: u64 = 303148704536199168;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_NOMINAL_REFERENCE_PRICE: u64 = 303148730306002944;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_PAIRED_VOLUME: u64 = 303148721716068352;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_TYPE: u64 = 303148708831166464;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_UNPAIRED_TYPE: u64 = 303148713126133760;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_UNPAIRED_VOLUME: u64 = 303148726011035648;
pub const XFLD_EVT_OIMB_IMBALANCE_REG_VOLUME: u64 = 303148717421101056;
pub const XFLD_EVT_OIMB_IMBALANCE_VOLUME: u64 = 303148562802278400;
pub const XFLD_EVT_OIMB_INSTRUMENT_STATUS: u64 = 303148635816722432;
pub const XFLD_EVT_OIMB_MARKET_STATUS: u64 = 303148640111689728;
pub const XFLD_EVT_OIMB_NEAR_PRICE: u64 = 303148648701624320;
pub const XFLD_EVT_OIMB_NOMINAL_REFERENCE_PRICE: u64 = 303148700241231872;
pub const XFLD_EVT_OIMB_PAIRED_VOLUME: u64 = 303148567097245696;
pub const XFLD_EVT_OIMB_PRICE_TYPE: u64 = 303148584277114880;
pub const XFLD_EVT_OIMB_QUALS: u64 = 303148622931820544;
pub const XFLD_EVT_OIMB_REFERENCE_PRICE: u64 = 303148571392212992;
pub const XFLD_EVT_OIMB_SHORT_SALE_RESTRICTED: u64 = 303148644406657024;
pub const XFLD_EVT_OIMB_SYMBOL_TYPE: u64 = 303148601456984064;
pub const XFLD_EVT_OIMB_TRADE_VENUE: u64 = 303148734600970240;
pub const XFLD_EVT_OIMB_TRANSACTION_HITIME: u64 = 303148747485872128;
pub const XFLD_EVT_OIMB_TYPE: u64 = 303148554212343808;
pub const XFLD_EVT_OIMB_UNPAIRED_TYPE: u64 = 303148691651297280;
pub const XFLD_EVT_OIMB_UNPAIRED_VOLUME: u64 = 303148695946264576;
pub const XFLD_EVT_MKTD_COUNTRY: u64 = 303430042073956352;
pub const XFLD_EVT_MKTD_EXCHANGE: u64 = 303430037778989056;
pub const XFLD_EVT_MKTD_EXCHANGE_HITIME: u64 = 303430085023629312;
pub const XFLD_EVT_MKTD_FINANCIAL_STATUS: u64 = 303430029189054464;
pub const XFLD_EVT_MKTD_INSTRUMENT_STATUS: u64 = 303430093613563904;
pub const XFLD_EVT_MKTD_MARKET_SEGMENT: u64 = 303430033484021760;
pub const XFLD_EVT_MKTD_MARKET_STATUS: u64 = 303430097908531200;
pub const XFLD_EVT_MKTD_PRICE_TYPE: u64 = 303430046368923648;
pub const XFLD_EVT_MKTD_PRIME_COUNTRY: u64 = 303430119383367680;
pub const XFLD_EVT_MKTD_PRIME_EXCH: u64 = 303430106498465792;
pub const XFLD_EVT_MKTD_QUALS: u64 = 303430089318596608;
pub const XFLD_EVT_MKTD_SHORT_SALE_RESTRICTED: u64 = 303430102203498496;
pub const XFLD_EVT_MKTD_SYMBOL_TYPE: u64 = 303430059253825536;
pub const XFLD_EVT_MKTD_TRADE_VENUE: u64 = 303430115088400384;
pub const XFLD_EVT_MKTD_TRANSACTION_HITIME: u64 = 303430123678334976;
pub const XFLD_EVT_TRDACT_COUNTRY: u64 = 303711517050667008;
pub const XFLD_EVT_TRDACT_EXCHANGE: u64 = 303711512755699712;
pub const XFLD_EVT_TRDACT_EXCHANGE_HITIME: u64 = 303711564295307264;
pub const XFLD_EVT_TRDACT_GROUP_ID: u64 = 303711607244980224;
pub const XFLD_EVT_TRDACT_INSTRUMENT_STATUS: u64 = 303711568590274560;
pub const XFLD_EVT_TRDACT_LIMIT_PRICE_HITIME: u64 = 303711620129882112;
pub const XFLD_EVT_TRDACT_LOWER_LIMIT_PRICE: u64 = 303711590065111040;
pub const XFLD_EVT_TRDACT_MARKET_STATUS: u64 = 303711577180209152;
pub const XFLD_EVT_TRDACT_PRICE_TYPE: u64 = 303711521345634304;
pub const XFLD_EVT_TRDACT_QUALS: u64 = 303711555705372672;
pub const XFLD_EVT_TRDACT_RELATIVE_LIMIT_HITIME: u64 = 303711624424849408;
pub const XFLD_EVT_TRDACT_RELATIVE_LIMIT_PRICE: u64 = 303711594360078336;
pub const XFLD_EVT_TRDACT_RELATIVE_LIMIT_PRICE_TYPE: u64 = 303711598655045632;
pub const XFLD_EVT_TRDACT_RELATIVE_LIMIT_TYPE: u64 = 303711602950012928;
pub const XFLD_EVT_TRDACT_SHORT_SALE_RESTRICTED: u64 = 303711581475176448;
pub const XFLD_EVT_TRDACT_SYMBOL_TYPE: u64 = 303711534230536192;
pub const XFLD_EVT_TRDACT_TRADE_VENUE: u64 = 303711611539947520;
pub const XFLD_EVT_TRDACT_TRANSACTION_HITIME: u64 = 303711615834914816;
pub const XFLD_EVT_TRDACT_UPPER_LIMIT_PRICE: u64 = 303711585770143744;
pub const XFLD_EVT_TPFR_COUNT: u64 = 307089203886292992;
pub const XFLD_EVT_TPFR_COUNTRY: u64 = 307089246835965952;
pub const XFLD_EVT_TPFR_EXCHANGE: u64 = 307089242540998656;
pub const XFLD_EVT_TPFR_EXCHANGE_HITIME: u64 = 307089285490671616;
pub const XFLD_EVT_TPFR_EXCHANGE_LABEL: u64 = 307089264015835136;
pub const XFLD_EVT_TPFR_FEED_HANDLER_NAME: u64 = 307089233951064064;
pub const XFLD_EVT_TPFR_FEED_HANDLER_VERSION: u64 = 307089238246031360;
pub const XFLD_EVT_TPFR_FEED_IDENTIFIER: u64 = 307089212476227584;
pub const XFLD_EVT_TPFR_FEED_LABEL: u64 = 307089216771194880;
pub const XFLD_EVT_TPFR_MARKET_STATUS: u64 = 307089251130933248;
pub const XFLD_EVT_TPFR_MWCB_LEVEL1_PRICE: u64 = 307089302670540800;
pub const XFLD_EVT_TPFR_MWCB_LEVEL2_PRICE: u64 = 307089306965508096;
pub const XFLD_EVT_TPFR_MWCB_LEVEL3_PRICE: u64 = 307089311260475392;
pub const XFLD_EVT_TPFR_MWCB_PRICE_TYPE: u64 = 307089315555442688;
pub const XFLD_EVT_TPFR_NOMINAL_CLOSE: u64 = 307089276900737024;
pub const XFLD_EVT_TPFR_NOMINAL_OPEN: u64 = 307089272605769728;
pub const XFLD_EVT_TPFR_TIMEZONE: u64 = 307089281195704320;
pub const XFLD_EVT_TPFR_USERBBO_COUNTRY: u64 = 307089294080606208;
pub const XFLD_EVT_TPFR_USERBBO_EXCHANGE: u64 = 307089298375573504;
pub const XFLD_EVT_TPFR_USERBBO_MEMBER: u64 = 307089259720867840;
pub const XFLD_EVT_TPFU_COUNT: u64 = 307370678863003648;
pub const XFLD_EVT_TPFU_COUNTRY: u64 = 307370721812676608;
pub const XFLD_EVT_TPFU_EXCHANGE: u64 = 307370717517709312;
pub const XFLD_EVT_TPFU_EXCHANGE_HITIME: u64 = 307370760467382272;
pub const XFLD_EVT_TPFU_EXCHANGE_LABEL: u64 = 307370738992545792;
pub const XFLD_EVT_TPFU_FEED_HANDLER_NAME: u64 = 307370708927774720;
pub const XFLD_EVT_TPFU_FEED_HANDLER_VERSION: u64 = 307370713222742016;
pub const XFLD_EVT_TPFU_FEED_IDENTIFIER: u64 = 307370687452938240;
pub const XFLD_EVT_TPFU_FEED_LABEL: u64 = 307370691747905536;
pub const XFLD_EVT_TPFU_MARKET_STATUS: u64 = 307370726107643904;
pub const XFLD_EVT_TPFU_NOMINAL_CLOSE: u64 = 307370751877447680;
pub const XFLD_EVT_TPFU_NOMINAL_OPEN: u64 = 307370747582480384;
pub const XFLD_EVT_TPFU_TIMEZONE: u64 = 307370756172414976;
pub const XFLD_EVT_TPFU_UPDATE_ACTION: u64 = 307370683157970944;
pub const XFLD_EVT_TPFU_USERBBO_COUNTRY: u64 = 307370769057316864;
pub const XFLD_EVT_TPFU_USERBBO_EXCHANGE: u64 = 307370773352284160;
pub const XFLD_EVT_TPFU_USERBBO_MEMBER: u64 = 307370734697578496;
pub const XFLD_EVT_TPL_ABORTED: u64 = 307652291278667776;
pub const XFLD_EVT_TPL_ALARM: u64 = 307652286983700480;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_AVG: u64 = 307652368588079104;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 307652385767948288;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 307652420127686656;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 307652390062915584;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 307652424422653952;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 307652394357882880;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 307652428717621248;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 307652398652850176;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 307652433012588544;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 307652402947817472;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 307652437307555840;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 307652407242784768;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 307652441602523136;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 307652411537752064;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 307652445897490432;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 307652415832719360;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 307652450192457728;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_MAX: u64 = 307652372883046400;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_MIN: u64 = 307652377178013696;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_SAMPLES: u64 = 307652364293111808;
pub const XFLD_EVT_TPL_APPLIANCE_LATENCY_STD_DEV: u64 = 307652381472980992;
pub const XFLD_EVT_TPL_BURSTRATE_TIMESPAN: u64 = 307652179609518080;
pub const XFLD_EVT_TPL_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 307652256918929408;
pub const XFLD_EVT_TPL_BYTE_COUNT: u64 = 307652218264223744;
pub const XFLD_EVT_TPL_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 307652244034027520;
pub const XFLD_EVT_TPL_CONNECTED: u64 = 307652278393765888;
pub const XFLD_EVT_TPL_EXCHANGE_SKEW: u64 = 307652209674289152;
pub const XFLD_EVT_TPL_FEED_IDENTIFIER: u64 = 307652265508864000;
pub const XFLD_EVT_TPL_GAP_COUNT: u64 = 307652317048471552;
pub const XFLD_EVT_TPL_HANDLER_NAME: u64 = 307652183904485376;
pub const XFLD_EVT_TPL_HANDLER_VERSION: u64 = 307652188199452672;
pub const XFLD_EVT_TPL_HEARTBEAT_COUNT: u64 = 307652463077359616;
pub const XFLD_EVT_TPL_HIRATE_TIMESPAN: u64 = 307652175314550784;
pub const XFLD_EVT_TPL_IGNORED_COUNT: u64 = 307652458782392320;
pub const XFLD_EVT_TPL_INVALID_COUNT: u64 = 307652454487425024;
pub const XFLD_EVT_TPL_LAST_GAP_TIME: u64 = 307652201084354560;
pub const XFLD_EVT_TPL_LINE_COUNT: u64 = 307652153839714304;
pub const XFLD_EVT_TPL_LINE_IDENTIFIER: u64 = 307652162429648896;
pub const XFLD_EVT_TPL_LINE_NAME: u64 = 307652158134681600;
pub const XFLD_EVT_TPL_LINE_SKEW: u64 = 307652205379321856;
pub const XFLD_EVT_TPL_LINE_STATE: u64 = 307652304163569664;
pub const XFLD_EVT_TPL_LOGGED_IN: u64 = 307652282688733184;
pub const XFLD_EVT_TPL_MESSAGE_COUNT: u64 = 307652213969256448;
pub const XFLD_EVT_TPL_ON_SCHEDULE: u64 = 307652269803831296;
pub const XFLD_EVT_TPL_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 307652261213896704;
pub const XFLD_EVT_TPL_PACKET_COUNT: u64 = 307652222559191040;
pub const XFLD_EVT_TPL_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 307652248328994816;
pub const XFLD_EVT_TPL_PEAK_BYTE_RATE: u64 = 307652231149125632;
pub const XFLD_EVT_TPL_PEAK_MESSAGE_BURSTRATE: u64 = 307652252623962112;
pub const XFLD_EVT_TPL_PEAK_MESSAGE_HIRATE: u64 = 307652239739060224;
pub const XFLD_EVT_TPL_PEAK_MESSAGE_RATE: u64 = 307652226854158336;
pub const XFLD_EVT_TPL_PEAK_PACKET_RATE: u64 = 307652235444092928;
pub const XFLD_EVT_TPL_PEAK_QUOTE_BURSTRATE: u64 = 307652347113242624;
pub const XFLD_EVT_TPL_PEAK_QUOTE_HIRATE: u64 = 307652338523308032;
pub const XFLD_EVT_TPL_PEAK_QUOTE_RATE: u64 = 307652329933373440;
pub const XFLD_EVT_TPL_PEAK_TIME_BURSTRATE: u64 = 307652355703177216;
pub const XFLD_EVT_TPL_PEAK_TIME_HIRATE: u64 = 307652359998144512;
pub const XFLD_EVT_TPL_PEAK_TRADE_BURSTRATE: u64 = 307652351408209920;
pub const XFLD_EVT_TPL_PEAK_TRADE_HIRATE: u64 = 307652342818275328;
pub const XFLD_EVT_TPL_PEAK_TRADE_RATE: u64 = 307652334228340736;
pub const XFLD_EVT_TPL_PENDING_DOWN: u64 = 307652295573635072;
pub const XFLD_EVT_TPL_QUOTE_COUNT: u64 = 307652321343438848;
pub const XFLD_EVT_TPL_TCP_SOCKET_COUNT: u64 = 307652312753504256;
pub const XFLD_EVT_TPL_TEST: u64 = 307652274098798592;
pub const XFLD_EVT_TPL_TIMESPAN: u64 = 307652171019583488;
pub const XFLD_EVT_TPL_TIMESTAMP: u64 = 307652166724616192;
pub const XFLD_EVT_TPL_TRADE_COUNT: u64 = 307652325638406144;
pub const XFLD_EVT_TPL_UDP_SOCKET_COUNT: u64 = 307652308458536960;
pub const XFLD_EVT_TPS_APPLIANCE_ADDRESS: u64 = 307933671766097920;
pub const XFLD_EVT_TPS_BURSTRATE_TIMESPAN: u64 = 307933650291261440;
pub const XFLD_EVT_TPS_BYTE_COUNT: u64 = 307933688945967104;
pub const XFLD_EVT_TPS_CONNECTION_TYPE: u64 = 307933658881196032;
pub const XFLD_EVT_TPS_FEED_ADDRESS: u64 = 307933663176163328;
pub const XFLD_EVT_TPS_FEED_MULTICAST: u64 = 307933667471130624;
pub const XFLD_EVT_TPS_HIRATE_TIMESPAN: u64 = 307933645996294144;
pub const XFLD_EVT_TPS_LINE_IDENTIFIER: u64 = 307933654586228736;
pub const XFLD_EVT_TPS_LINE_NAME: u64 = 307933637406359552;
pub const XFLD_EVT_TPS_MESSAGE_COUNT: u64 = 307933693240934400;
pub const XFLD_EVT_TPS_PACKET_COUNT: u64 = 307933684650999808;
pub const XFLD_EVT_TPS_PEAK_BYTE_BURSTRATE: u64 = 307933727600672768;
pub const XFLD_EVT_TPS_PEAK_BYTE_HIRATE: u64 = 307933714715770880;
pub const XFLD_EVT_TPS_PEAK_BYTE_RATE: u64 = 307933701830868992;
pub const XFLD_EVT_TPS_PEAK_MESSAGE_BURSTRATE: u64 = 307933731895640064;
pub const XFLD_EVT_TPS_PEAK_MESSAGE_HIRATE: u64 = 307933719010738176;
pub const XFLD_EVT_TPS_PEAK_MESSAGE_RATE: u64 = 307933706125836288;
pub const XFLD_EVT_TPS_PEAK_PACKET_BURSTRATE: u64 = 307933723305705472;
pub const XFLD_EVT_TPS_PEAK_PACKET_HIRATE: u64 = 307933710420803584;
pub const XFLD_EVT_TPS_PEAK_PACKET_RATE: u64 = 307933697535901696;
pub const XFLD_EVT_TPS_PORT: u64 = 307933676061065216;
pub const XFLD_EVT_TPS_SOCKET_COUNT: u64 = 307933628816424960;
pub const XFLD_EVT_TPS_TIMESPAN: u64 = 307933641701326848;
pub const XFLD_EVT_TPS_TIMESTAMP: u64 = 307933633111392256;
pub const XFLD_EVT_TPCLI_API_BUILD_OS_VERSION: u64 = 308778088106295296;
pub const XFLD_EVT_TPCLI_API_BUILD_PLATFORM: u64 = 308778083811328000;
pub const XFLD_EVT_TPCLI_API_VERSION: u64 = 308778075221393408;
pub const XFLD_EVT_TPCLI_APPLIANCE_HOSTNAME: u64 = 308778105286164480;
pub const XFLD_EVT_TPCLI_APPLIANCE_LOCAL_ADDRESS: u64 = 308778113876099072;
pub const XFLD_EVT_TPCLI_APPLIANCE_LOCAL_INTERFACE: u64 = 308778109581131776;
pub const XFLD_EVT_TPCLI_APPLIANCE_LOCAL_PORT: u64 = 308778118171066368;
pub const XFLD_EVT_TPCLI_BURSTRATE_TIMESPAN: u64 = 308778062336491520;
pub const XFLD_EVT_TPCLI_CHANNEL_NAME: u64 = 308778100991197184;
pub const XFLD_EVT_TPCLI_CLIENT_COUNT: u64 = 308778066631458816;
pub const XFLD_EVT_TPCLI_CLIENT_HOSTNAME: u64 = 308778122466033664;
pub const XFLD_EVT_TPCLI_CLIENT_LOCAL_ADDRESS: u64 = 308778126761000960;
pub const XFLD_EVT_TPCLI_CLIENT_LOCAL_PORT: u64 = 308778131055968256;
pub const XFLD_EVT_TPCLI_CONNECTION_DATE: u64 = 308778096696229888;
pub const XFLD_EVT_TPCLI_CONNECTION_TIME: u64 = 308778092401262592;
pub const XFLD_EVT_TPCLI_CURRENT_SUBSCRIPTION_COUNT: u64 = 308778143940870144;
pub const XFLD_EVT_TPCLI_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 308778152530804736;
pub const XFLD_EVT_TPCLI_HIRATE_TIMESPAN: u64 = 308778058041524224;
pub const XFLD_EVT_TPCLI_LOCAL_IB_KEY: u64 = 308778135350935552;
pub const XFLD_EVT_TPCLI_MAX_SUBSCRIPTION_COUNT: u64 = 308778148235837440;
pub const XFLD_EVT_TPCLI_REMOTE_IB_KEY: u64 = 308778139645902848;
pub const XFLD_EVT_TPCLI_REMOTE_PROCESS_ID: u64 = 308778079516360704;
pub const XFLD_EVT_TPCLI_TIMESPAN: u64 = 308778053746556928;
pub const XFLD_EVT_TPCLI_USERNAME: u64 = 308778070926426112;
pub const XFLD_EVT_ST_TPL_ABORTED: u64 = 309059666162221056;
pub const XFLD_EVT_ST_TPL_ALARM: u64 = 309059661867253760;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_AVG: u64 = 309059743471632384;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 309059760651501568;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 309059795011239936;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 309059764946468864;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 309059799306207232;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 309059769241436160;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 309059803601174528;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 309059773536403456;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 309059807896141824;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 309059777831370752;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 309059812191109120;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 309059782126338048;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 309059816486076416;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 309059786421305344;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 309059820781043712;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 309059790716272640;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 309059825076011008;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_MAX: u64 = 309059747766599680;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_MIN: u64 = 309059752061566976;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_SAMPLES: u64 = 309059739176665088;
pub const XFLD_EVT_ST_TPL_APPLIANCE_LATENCY_STD_DEV: u64 = 309059756356534272;
pub const XFLD_EVT_ST_TPL_BURSTRATE_TIMESPAN: u64 = 309059554493071360;
pub const XFLD_EVT_ST_TPL_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 309059631802482688;
pub const XFLD_EVT_ST_TPL_BYTE_COUNT: u64 = 309059593147777024;
pub const XFLD_EVT_ST_TPL_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 309059618917580800;
pub const XFLD_EVT_ST_TPL_CONNECTED: u64 = 309059653277319168;
pub const XFLD_EVT_ST_TPL_EXCHANGE_SKEW: u64 = 309059584557842432;
pub const XFLD_EVT_ST_TPL_FEED_IDENTIFIER: u64 = 309059640392417280;
pub const XFLD_EVT_ST_TPL_GAP_COUNT: u64 = 309059691932024832;
pub const XFLD_EVT_ST_TPL_HANDLER_NAME: u64 = 309059558788038656;
pub const XFLD_EVT_ST_TPL_HANDLER_VERSION: u64 = 309059563083005952;
pub const XFLD_EVT_ST_TPL_HEARTBEAT_COUNT: u64 = 309059837960912896;
pub const XFLD_EVT_ST_TPL_HIRATE_TIMESPAN: u64 = 309059550198104064;
pub const XFLD_EVT_ST_TPL_IGNORED_COUNT: u64 = 309059833665945600;
pub const XFLD_EVT_ST_TPL_INVALID_COUNT: u64 = 309059829370978304;
pub const XFLD_EVT_ST_TPL_LAST_GAP_TIME: u64 = 309059575967907840;
pub const XFLD_EVT_ST_TPL_LINE_COUNT: u64 = 309059528723267584;
pub const XFLD_EVT_ST_TPL_LINE_IDENTIFIER: u64 = 309059537313202176;
pub const XFLD_EVT_ST_TPL_LINE_NAME: u64 = 309059533018234880;
pub const XFLD_EVT_ST_TPL_LINE_SKEW: u64 = 309059580262875136;
pub const XFLD_EVT_ST_TPL_LINE_STATE: u64 = 309059679047122944;
pub const XFLD_EVT_ST_TPL_LOGGED_IN: u64 = 309059657572286464;
pub const XFLD_EVT_ST_TPL_MESSAGE_COUNT: u64 = 309059588852809728;
pub const XFLD_EVT_ST_TPL_ON_SCHEDULE: u64 = 309059644687384576;
pub const XFLD_EVT_ST_TPL_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 309059636097449984;
pub const XFLD_EVT_ST_TPL_PACKET_COUNT: u64 = 309059597442744320;
pub const XFLD_EVT_ST_TPL_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 309059623212548096;
pub const XFLD_EVT_ST_TPL_PEAK_BYTE_RATE: u64 = 309059606032678912;
pub const XFLD_EVT_ST_TPL_PEAK_MESSAGE_BURSTRATE: u64 = 309059627507515392;
pub const XFLD_EVT_ST_TPL_PEAK_MESSAGE_HIRATE: u64 = 309059614622613504;
pub const XFLD_EVT_ST_TPL_PEAK_MESSAGE_RATE: u64 = 309059601737711616;
pub const XFLD_EVT_ST_TPL_PEAK_PACKET_RATE: u64 = 309059610327646208;
pub const XFLD_EVT_ST_TPL_PEAK_QUOTE_BURSTRATE: u64 = 309059721996795904;
pub const XFLD_EVT_ST_TPL_PEAK_QUOTE_HIRATE: u64 = 309059713406861312;
pub const XFLD_EVT_ST_TPL_PEAK_QUOTE_RATE: u64 = 309059704816926720;
pub const XFLD_EVT_ST_TPL_PEAK_TIME_BURSTRATE: u64 = 309059730586730496;
pub const XFLD_EVT_ST_TPL_PEAK_TIME_HIRATE: u64 = 309059734881697792;
pub const XFLD_EVT_ST_TPL_PEAK_TRADE_BURSTRATE: u64 = 309059726291763200;
pub const XFLD_EVT_ST_TPL_PEAK_TRADE_HIRATE: u64 = 309059717701828608;
pub const XFLD_EVT_ST_TPL_PEAK_TRADE_RATE: u64 = 309059709111894016;
pub const XFLD_EVT_ST_TPL_PENDING_DOWN: u64 = 309059670457188352;
pub const XFLD_EVT_ST_TPL_QUOTE_COUNT: u64 = 309059696226992128;
pub const XFLD_EVT_ST_TPL_TCP_SOCKET_COUNT: u64 = 309059687637057536;
pub const XFLD_EVT_ST_TPL_TEST: u64 = 309059648982351872;
pub const XFLD_EVT_ST_TPL_TIMESPAN: u64 = 309059545903136768;
pub const XFLD_EVT_ST_TPL_TIMESTAMP: u64 = 309059541608169472;
pub const XFLD_EVT_ST_TPL_TRADE_COUNT: u64 = 309059700521959424;
pub const XFLD_EVT_ST_TPL_UDP_SOCKET_COUNT: u64 = 309059683342090240;
pub const XFLD_EVT_ST_TPS_APPLIANCE_ADDRESS: u64 = 309341046649651200;
pub const XFLD_EVT_ST_TPS_BURSTRATE_TIMESPAN: u64 = 309341025174814720;
pub const XFLD_EVT_ST_TPS_BYTE_COUNT: u64 = 309341063829520384;
pub const XFLD_EVT_ST_TPS_CONNECTION_TYPE: u64 = 309341033764749312;
pub const XFLD_EVT_ST_TPS_FEED_ADDRESS: u64 = 309341038059716608;
pub const XFLD_EVT_ST_TPS_FEED_MULTICAST: u64 = 309341042354683904;
pub const XFLD_EVT_ST_TPS_HIRATE_TIMESPAN: u64 = 309341020879847424;
pub const XFLD_EVT_ST_TPS_LINE_IDENTIFIER: u64 = 309341029469782016;
pub const XFLD_EVT_ST_TPS_LINE_NAME: u64 = 309341012289912832;
pub const XFLD_EVT_ST_TPS_MESSAGE_COUNT: u64 = 309341068124487680;
pub const XFLD_EVT_ST_TPS_PACKET_COUNT: u64 = 309341059534553088;
pub const XFLD_EVT_ST_TPS_PEAK_BYTE_BURSTRATE: u64 = 309341102484226048;
pub const XFLD_EVT_ST_TPS_PEAK_BYTE_HIRATE: u64 = 309341089599324160;
pub const XFLD_EVT_ST_TPS_PEAK_BYTE_RATE: u64 = 309341076714422272;
pub const XFLD_EVT_ST_TPS_PEAK_MESSAGE_BURSTRATE: u64 = 309341106779193344;
pub const XFLD_EVT_ST_TPS_PEAK_MESSAGE_HIRATE: u64 = 309341093894291456;
pub const XFLD_EVT_ST_TPS_PEAK_MESSAGE_RATE: u64 = 309341081009389568;
pub const XFLD_EVT_ST_TPS_PEAK_PACKET_BURSTRATE: u64 = 309341098189258752;
pub const XFLD_EVT_ST_TPS_PEAK_PACKET_HIRATE: u64 = 309341085304356864;
pub const XFLD_EVT_ST_TPS_PEAK_PACKET_RATE: u64 = 309341072419454976;
pub const XFLD_EVT_ST_TPS_PORT: u64 = 309341050944618496;
pub const XFLD_EVT_ST_TPS_SOCKET_COUNT: u64 = 309341003699978240;
pub const XFLD_EVT_ST_TPS_TIMESPAN: u64 = 309341016584880128;
pub const XFLD_EVT_ST_TPS_TIMESTAMP: u64 = 309341007994945536;
pub const XFLD_EVT_ST_TPCLI_API_BUILD_OS_VERSION: u64 = 310185462989848576;
pub const XFLD_EVT_ST_TPCLI_API_BUILD_PLATFORM: u64 = 310185458694881280;
pub const XFLD_EVT_ST_TPCLI_API_VERSION: u64 = 310185450104946688;
pub const XFLD_EVT_ST_TPCLI_APPLIANCE_HOSTNAME: u64 = 310185480169717760;
pub const XFLD_EVT_ST_TPCLI_APPLIANCE_LOCAL_ADDRESS: u64 = 310185488759652352;
pub const XFLD_EVT_ST_TPCLI_APPLIANCE_LOCAL_INTERFACE: u64 = 310185484464685056;
pub const XFLD_EVT_ST_TPCLI_APPLIANCE_LOCAL_PORT: u64 = 310185493054619648;
pub const XFLD_EVT_ST_TPCLI_BURSTRATE_TIMESPAN: u64 = 310185437220044800;
pub const XFLD_EVT_ST_TPCLI_CHANNEL_NAME: u64 = 310185475874750464;
pub const XFLD_EVT_ST_TPCLI_CLIENT_COUNT: u64 = 310185441515012096;
pub const XFLD_EVT_ST_TPCLI_CLIENT_HOSTNAME: u64 = 310185497349586944;
pub const XFLD_EVT_ST_TPCLI_CLIENT_LOCAL_ADDRESS: u64 = 310185501644554240;
pub const XFLD_EVT_ST_TPCLI_CLIENT_LOCAL_PORT: u64 = 310185505939521536;
pub const XFLD_EVT_ST_TPCLI_CONNECTION_DATE: u64 = 310185471579783168;
pub const XFLD_EVT_ST_TPCLI_CONNECTION_TIME: u64 = 310185467284815872;
pub const XFLD_EVT_ST_TPCLI_CURRENT_SUBSCRIPTION_COUNT: u64 = 310185518824423424;
pub const XFLD_EVT_ST_TPCLI_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 310185527414358016;
pub const XFLD_EVT_ST_TPCLI_HIRATE_TIMESPAN: u64 = 310185432925077504;
pub const XFLD_EVT_ST_TPCLI_LOCAL_IB_KEY: u64 = 310185510234488832;
pub const XFLD_EVT_ST_TPCLI_MAX_SUBSCRIPTION_COUNT: u64 = 310185523119390720;
pub const XFLD_EVT_ST_TPCLI_REMOTE_IB_KEY: u64 = 310185514529456128;
pub const XFLD_EVT_ST_TPCLI_REMOTE_PROCESS_ID: u64 = 310185454399913984;
pub const XFLD_EVT_ST_TPCLI_TIMESPAN: u64 = 310185428630110208;
pub const XFLD_EVT_ST_TPCLI_USERNAME: u64 = 310185445809979392;
pub const XFLD_EVT_ST_TPLG_COUNT_MISSING: u64 = 311029866445144064;
pub const XFLD_EVT_ST_TPLG_FEED_IDENTIFIER: u64 = 311029887919980544;
pub const XFLD_EVT_ST_TPLG_FIRST_MISSING: u64 = 311029862150176768;
pub const XFLD_EVT_ST_TPLG_GAP_RANGE_COUNT: u64 = 311029853560242176;
pub const XFLD_EVT_ST_TPLG_LINE_IDENTIFIER: u64 = 311029883625013248;
pub const XFLD_EVT_ST_TPLG_LINE_NAME: u64 = 311029879330045952;
pub const XFLD_EVT_ST_TPLG_SUBLINE: u64 = 311029875035078656;
pub const XFLD_EVT_ST_TPLG_TIME: u64 = 311029870740111360;
pub const XFLD_EVT_ST_TPLG_TIMESTAMP: u64 = 311029857855209472;
pub const XFLD_EVT_DRR_AMERICAN_EXERCISE: u64 = 311874372979654656;
pub const XFLD_EVT_DRR_ASSET_CLASS: u64 = 311874566253182976;
pub const XFLD_EVT_DRR_ATTRIBUTE: u64 = 311874647857561600;
pub const XFLD_EVT_DRR_ATTRIBUTE_COUNT: u64 = 311874643562594304;
pub const XFLD_EVT_DRR_AUCTION_COUNT: u64 = 311874454584033280;
pub const XFLD_EVT_DRR_AUCTION_RULE_ID: u64 = 311874458879000576;
pub const XFLD_EVT_DRR_AUCTION_TYPES: u64 = 311874463173967872;
pub const XFLD_EVT_DRR_CALL: u64 = 311874368684687360;
pub const XFLD_EVT_DRR_CONTRACT_ROOT_STRING: u64 = 311874570548150272;
pub const XFLD_EVT_DRR_CONTRACT_SIZE: u64 = 311874347209850880;
pub const XFLD_EVT_DRR_CURRENCY: u64 = 311874544778346496;
pub const XFLD_EVT_DRR_DELIVERABLE_CASH: u64 = 311874433109196800;
pub const XFLD_EVT_DRR_DELIVERABLE_COUNT: u64 = 311874420224294912;
pub const XFLD_EVT_DRR_DELIVERABLE_CURRENCY: u64 = 311874437404164096;
pub const XFLD_EVT_DRR_DELIVERABLE_FACTOR: u64 = 311874428814229504;
pub const XFLD_EVT_DRR_DELIVERABLE_KEY_STRING: u64 = 311874450289065984;
pub const XFLD_EVT_DRR_DELIVERABLE_PRICE_TYPE: u64 = 311874441699131392;
pub const XFLD_EVT_DRR_DELIVERABLE_SECURITY_ID: u64 = 311874424519262208;
pub const XFLD_EVT_DRR_DELIVERABLE_SYMBOL_TYPE: u64 = 311874445994098688;
pub const XFLD_EVT_DRR_DISPLAY_FACTOR: u64 = 311874579138084864;
pub const XFLD_EVT_DRR_DISPLAY_FACTOR_PRICE_TYPE: u64 = 311874583433052160;
pub const XFLD_EVT_DRR_INSTRUMENT_MARKET_IDENTIFIER_CODE: u64 = 311874574843117568;
pub const XFLD_EVT_DRR_INSTRUMENT_STATUS: u64 = 311874364389720064;
pub const XFLD_EVT_DRR_ISIN: u64 = 311874561958215680;
pub const XFLD_EVT_DRR_LEG_AMERICAN_EXERCISE: u64 = 311874527598477312;
pub const XFLD_EVT_DRR_LEG_ASK_SIDE: u64 = 311874519008542720;
pub const XFLD_EVT_DRR_LEG_CALL: u64 = 311874523303510016;
pub const XFLD_EVT_DRR_LEG_CONTRACT_SIZE: u64 = 311874488943771648;
pub const XFLD_EVT_DRR_LEG_COUNT: u64 = 311874467468935168;
pub const XFLD_EVT_DRR_LEG_KEY_STRING: u64 = 311874536188411904;
pub const XFLD_EVT_DRR_LEG_MARKET_SEGMENT_ID: u64 = 311874476058869760;
pub const XFLD_EVT_DRR_LEG_MATURITY_DATE: u64 = 311874480353837056;
pub const XFLD_EVT_DRR_LEG_MATURITY_TIME: u64 = 311874484648804352;
pub const XFLD_EVT_DRR_LEG_OPTION_DELTA: u64 = 311874639267627008;
pub const XFLD_EVT_DRR_LEG_PRICE_TYPE: u64 = 311874501828673536;
pub const XFLD_EVT_DRR_LEG_PRIMARY_MMID: u64 = 311874510418608128;
pub const XFLD_EVT_DRR_LEG_RATIO: u64 = 311874514713575424;
pub const XFLD_EVT_DRR_LEG_REFERENCE_PRICE: u64 = 311874630677692416;
pub const XFLD_EVT_DRR_LEG_REFERENCE_PRICE_TYPE: u64 = 311874634972659712;
pub const XFLD_EVT_DRR_LEG_SECURITY_ID: u64 = 311874471763902464;
pub const XFLD_EVT_DRR_LEG_STRIKE: u64 = 311874493238738944;
pub const XFLD_EVT_DRR_LEG_STRIKE_CURRENCY: u64 = 311874497533706240;
pub const XFLD_EVT_DRR_LEG_TRADING_STATUS: u64 = 311874506123640832;
pub const XFLD_EVT_DRR_MARKET_SEGMENT_DESC: u64 = 311874291375276032;
pub const XFLD_EVT_DRR_MARKET_SEGMENT_ID: u64 = 311874287080308736;
pub const XFLD_EVT_DRR_MARKET_SEGMENT_STATUS: u64 = 311874312850112512;
pub const XFLD_EVT_DRR_MATCH_ALGO: u64 = 311874411634360320;
pub const XFLD_EVT_DRR_MATCH_COUNT: u64 = 311874403044425728;
pub const XFLD_EVT_DRR_MATCH_CUSTOMER_PRIORITY: u64 = 311874415929327616;
pub const XFLD_EVT_DRR_MATCH_RULE_ID: u64 = 311874407339393024;
pub const XFLD_EVT_DRR_MATURITY_DATE: u64 = 311874338619916288;
pub const XFLD_EVT_DRR_MATURITY_TIME: u64 = 311874342914883584;
pub const XFLD_EVT_DRR_ORIGINAL_STRIKE_PRICE: u64 = 311874587728019456;
pub const XFLD_EVT_DRR_ORIGINAL_STRIKE_PRICE_TYPE: u64 = 311874592022986752;
pub const XFLD_EVT_DRR_PARENT_MARKET_SEGMENT_ID: u64 = 311874317145079808;
pub const XFLD_EVT_DRR_PRIMARY_MMID: u64 = 311874282785341440;
pub const XFLD_EVT_DRR_PRODUCT_BIN_ID: u64 = 311874299965210624;
pub const XFLD_EVT_DRR_PRODUCT_MARKET_IDENTIFIER_CODE: u64 = 311874557663248384;
pub const XFLD_EVT_DRR_PRODUCT_PARTITION_ID: u64 = 311874295670243328;
pub const XFLD_EVT_DRR_QUALS: u64 = 311874652152528896;
pub const XFLD_EVT_DRR_SECURITY_GROUP: u64 = 311874553368281088;
pub const XFLD_EVT_DRR_SECURITY_ID: u64 = 311874334324948992;
pub const XFLD_EVT_DRR_SETTLEMENT_CURRENCY: u64 = 311874549073313792;
pub const XFLD_EVT_DRR_SIZE_RULE_BLOCK_TRADE: u64 = 311874626382725120;
pub const XFLD_EVT_DRR_SIZE_RULE_COUNT: u64 = 311874596317954048;
pub const XFLD_EVT_DRR_SIZE_RULE_ID: u64 = 311874600612921344;
pub const XFLD_EVT_DRR_SIZE_RULE_MAX_TRADE: u64 = 311874609202855936;
pub const XFLD_EVT_DRR_SIZE_RULE_MIN_ASK: u64 = 311874617792790528;
pub const XFLD_EVT_DRR_SIZE_RULE_MIN_BID: u64 = 311874613497823232;
pub const XFLD_EVT_DRR_SIZE_RULE_MIN_TRADE: u64 = 311874604907888640;
pub const XFLD_EVT_DRR_SIZE_RULE_ROUND_LOT: u64 = 311874622087757824;
pub const XFLD_EVT_DRR_STRIKE: u64 = 311874351504818176;
pub const XFLD_EVT_DRR_STRIKE_CURRENCY: u64 = 311874355799785472;
pub const XFLD_EVT_DRR_STRIKE_PRICE_TYPE: u64 = 311874360094752768;
pub const XFLD_EVT_DRR_SYMBOL_TYPE: u64 = 311874540483379200;
pub const XFLD_EVT_DRR_TICK_COUNT: u64 = 311874377274621952;
pub const XFLD_EVT_DRR_TICK_INCREMENT: u64 = 311874394454491136;
pub const XFLD_EVT_DRR_TICK_INCREMENT_PRICE_TYPE: u64 = 311874398749458432;
pub const XFLD_EVT_DRR_TICK_PRICE_RANGE_END: u64 = 311874390159523840;
pub const XFLD_EVT_DRR_TICK_PRICE_RANGE_START: u64 = 311874385864556544;
pub const XFLD_EVT_DRR_TICK_RULE_ID: u64 = 311874381569589248;
pub const XFLD_EVT_DRR_TRADE_START_TIME: u64 = 311874304260177920;
pub const XFLD_EVT_DRR_TRADE_STOP_TIME: u64 = 311874308555145216;
pub const XFLD_EVT_DRR_UNDERLYING_COUNT: u64 = 311874531893444608;
pub const XFLD_EVT_DRR_UNDERLYING_KEY_STRING: u64 = 311874321440047104;
pub const XFLD_EVT_DRR_UNDERLYING_SECURITY_ID: u64 = 311874325735014400;
pub const XFLD_EVT_DRR_UNDERLYING_SYMBOL_TYPE: u64 = 311874330029981696;
pub const XFLD_EVT_OOB_ENTRY_ASK_SIDE: u64 = 312155779236888576;
pub const XFLD_EVT_OOB_ENTRY_COUNT: u64 = 312155774941921280;
pub const XFLD_EVT_OOB_ENTRY_MIN_QUANTITY: u64 = 312155800711725056;
pub const XFLD_EVT_OOB_ENTRY_ORDER_CAPACITY: u64 = 312155805006692352;
pub const XFLD_EVT_OOB_ENTRY_ORDER_QUALS: u64 = 312155792121790464;
pub const XFLD_EVT_OOB_ENTRY_ORDER_REF: u64 = 312155796416757760;
pub const XFLD_EVT_OOB_ENTRY_PRICE: u64 = 312155783531855872;
pub const XFLD_EVT_OOB_ENTRY_SIZE: u64 = 312155787826823168;
pub const XFLD_EVT_OOB_EXCHANGE_HITIME: u64 = 312155770646953984;
pub const XFLD_EVT_OOB_PARTY_COUNT: u64 = 312155809301659648;
pub const XFLD_EVT_OOB_PARTY_ID: u64 = 312155817891594240;
pub const XFLD_EVT_OOB_PARTY_ORDER: u64 = 312155813596626944;
pub const XFLD_EVT_OOB_PARTY_ROLE: u64 = 312155822186561536;
pub const XFLD_EVT_OOB_PRICE_TYPE: u64 = 312155762057019392;
pub const XFLD_EVT_OOB_SYMBOL_TYPE: u64 = 312155757762052096;
pub const XFLD_EVT_OOB_TRADE_VENUE: u64 = 312155826481528832;
pub const XFLD_EVT_OOB_TRANSACTION_HITIME: u64 = 312155830776496128;
pub const XFLD_EVT_FXSPOT_REFR_ACCOUNT_ID: u64 = 312437254213599232;
pub const XFLD_EVT_FXSPOT_REFR_ALTERNATE_ID1: u64 = 312437245623664640;
pub const XFLD_EVT_FXSPOT_REFR_ALTERNATE_ID2: u64 = 312437249918631936;
pub const XFLD_EVT_FXSPOT_REFR_ASK_HITIME: u64 = 312437301458239488;
pub const XFLD_EVT_FXSPOT_REFR_ASK_MIN_SIZE: u64 = 312437292868304896;
pub const XFLD_EVT_FXSPOT_REFR_ASK_PRICE: u64 = 312437275688435712;
pub const XFLD_EVT_FXSPOT_REFR_ASK_SIZE: u64 = 312437284278370304;
pub const XFLD_EVT_FXSPOT_REFR_BID_HITIME: u64 = 312437305753206784;
pub const XFLD_EVT_FXSPOT_REFR_BID_MIN_SIZE: u64 = 312437297163272192;
pub const XFLD_EVT_FXSPOT_REFR_BID_PRICE: u64 = 312437279983403008;
pub const XFLD_EVT_FXSPOT_REFR_BID_SIZE: u64 = 312437288573337600;
pub const XFLD_EVT_FXSPOT_REFR_CURRENCY: u64 = 312437271393468416;
pub const XFLD_EVT_FXSPOT_REFR_EXCHANGE_HITIME: u64 = 312437228443795456;
pub const XFLD_EVT_FXSPOT_REFR_EXCH_TIME_OFFSET: u64 = 312437267098501120;
pub const XFLD_EVT_FXSPOT_REFR_INSTRUMENT_STATUS: u64 = 312437237033730048;
pub const XFLD_EVT_FXSPOT_REFR_MARKET_STATUS: u64 = 312437241328697344;
pub const XFLD_EVT_FXSPOT_REFR_PRICE_TYPE: u64 = 312437262803533824;
pub const XFLD_EVT_FXSPOT_REFR_QUOTE_ID: u64 = 312437322933075968;
pub const XFLD_EVT_FXSPOT_REFR_REQUEST_ID: u64 = 312437318638108672;
pub const XFLD_EVT_FXSPOT_REFR_SETL_DATE: u64 = 312437327228043264;
pub const XFLD_EVT_FXSPOT_REFR_SYMBOL_TYPE: u64 = 312437258508566528;
pub const XFLD_EVT_FXSPOT_REFR_VALID_UNTIL_HITIME: u64 = 312437314343141376;
pub const XFLD_EVT_FXSPOT_QUO_ASK_HITIME: u64 = 312718767845015552;
pub const XFLD_EVT_FXSPOT_QUO_ASK_MIN_SIZE: u64 = 312718759255080960;
pub const XFLD_EVT_FXSPOT_QUO_ASK_PRICE: u64 = 312718742075211776;
pub const XFLD_EVT_FXSPOT_QUO_ASK_SIZE: u64 = 312718750665146368;
pub const XFLD_EVT_FXSPOT_QUO_BID_HITIME: u64 = 312718772139982848;
pub const XFLD_EVT_FXSPOT_QUO_BID_MIN_SIZE: u64 = 312718763550048256;
pub const XFLD_EVT_FXSPOT_QUO_BID_PRICE: u64 = 312718746370179072;
pub const XFLD_EVT_FXSPOT_QUO_BID_SIZE: u64 = 312718754960113664;
pub const XFLD_EVT_FXSPOT_QUO_CURRENCY: u64 = 312718810794688512;
pub const XFLD_EVT_FXSPOT_QUO_EXCHANGE_HITIME: u64 = 312718703420506112;
pub const XFLD_EVT_FXSPOT_QUO_INSTRUMENT_STATUS: u64 = 312718793614819328;
pub const XFLD_EVT_FXSPOT_QUO_MARKET_STATUS: u64 = 312718806499721216;
pub const XFLD_EVT_FXSPOT_QUO_PRICE_TYPE: u64 = 312718716305408000;
pub const XFLD_EVT_FXSPOT_QUO_QUALS: u64 = 312718724895342592;
pub const XFLD_EVT_FXSPOT_QUO_QUOTE_ID: u64 = 312718789319852032;
pub const XFLD_EVT_FXSPOT_QUO_REQUEST_ID: u64 = 312718785024884736;
pub const XFLD_EVT_FXSPOT_QUO_SETL_DATE: u64 = 312718815089655808;
pub const XFLD_EVT_FXSPOT_QUO_SYMBOL_TYPE: u64 = 312718712010440704;
pub const XFLD_EVT_FXSPOT_QUO_VALID_UNTIL_HITIME: u64 = 312718780729917440;
pub const XFLD_EVT_FXFWD_REFR_ACCOUNT_ID: u64 = 313000204167020544;
pub const XFLD_EVT_FXFWD_REFR_ALTERNATE_ID1: u64 = 313000195577085952;
pub const XFLD_EVT_FXFWD_REFR_ALTERNATE_ID2: u64 = 313000199872053248;
pub const XFLD_EVT_FXFWD_REFR_ASK_FORWARD_POINTS: u64 = 313000247116693504;
pub const XFLD_EVT_FXFWD_REFR_ASK_HITIME: u64 = 313000242821726208;
pub const XFLD_EVT_FXFWD_REFR_ASK_MIN_SIZE: u64 = 313000238526758912;
pub const XFLD_EVT_FXFWD_REFR_ASK_PRICE: u64 = 313000229936824320;
pub const XFLD_EVT_FXFWD_REFR_ASK_SIZE: u64 = 313000234231791616;
pub const XFLD_EVT_FXFWD_REFR_ASK_SPOT_PRICE: u64 = 313000225641857024;
pub const XFLD_EVT_FXFWD_REFR_BID_FORWARD_POINTS: u64 = 313000272886497280;
pub const XFLD_EVT_FXFWD_REFR_BID_HITIME: u64 = 313000268591529984;
pub const XFLD_EVT_FXFWD_REFR_BID_MIN_SIZE: u64 = 313000264296562688;
pub const XFLD_EVT_FXFWD_REFR_BID_PRICE: u64 = 313000255706628096;
pub const XFLD_EVT_FXFWD_REFR_BID_SIZE: u64 = 313000260001595392;
pub const XFLD_EVT_FXFWD_REFR_BID_SPOT_PRICE: u64 = 313000251411660800;
pub const XFLD_EVT_FXFWD_REFR_CURRENCY: u64 = 313000221346889728;
pub const XFLD_EVT_FXFWD_REFR_EXCHANGE_HITIME: u64 = 313000178397216768;
pub const XFLD_EVT_FXFWD_REFR_EXCH_TIME_OFFSET: u64 = 313000217051922432;
pub const XFLD_EVT_FXFWD_REFR_INSTRUMENT_STATUS: u64 = 313000186987151360;
pub const XFLD_EVT_FXFWD_REFR_MARKET_STATUS: u64 = 313000191282118656;
pub const XFLD_EVT_FXFWD_REFR_PRICE_TYPE: u64 = 313000212756955136;
pub const XFLD_EVT_FXFWD_REFR_QUOTE_ID: u64 = 313000290066366464;
pub const XFLD_EVT_FXFWD_REFR_REQUEST_ID: u64 = 313000285771399168;
pub const XFLD_EVT_FXFWD_REFR_SETL_DATE: u64 = 313000294361333760;
pub const XFLD_EVT_FXFWD_REFR_SYMBOL_TYPE: u64 = 313000208461987840;
pub const XFLD_EVT_FXFWD_REFR_VALID_UNTIL_HITIME: u64 = 313000281476431872;
pub const XFLD_EVT_FXFWD_QUO_ASK_FORWARD_POINTS: u64 = 313281713503469568;
pub const XFLD_EVT_FXFWD_QUO_ASK_HITIME: u64 = 313281709208502272;
pub const XFLD_EVT_FXFWD_QUO_ASK_MIN_SIZE: u64 = 313281704913534976;
pub const XFLD_EVT_FXFWD_QUO_ASK_PRICE: u64 = 313281696323600384;
pub const XFLD_EVT_FXFWD_QUO_ASK_SIZE: u64 = 313281700618567680;
pub const XFLD_EVT_FXFWD_QUO_ASK_SPOT_PRICE: u64 = 313281692028633088;
pub const XFLD_EVT_FXFWD_QUO_BID_FORWARD_POINTS: u64 = 313281739273273344;
pub const XFLD_EVT_FXFWD_QUO_BID_HITIME: u64 = 313281734978306048;
pub const XFLD_EVT_FXFWD_QUO_BID_MIN_SIZE: u64 = 313281730683338752;
pub const XFLD_EVT_FXFWD_QUO_BID_PRICE: u64 = 313281722093404160;
pub const XFLD_EVT_FXFWD_QUO_BID_SIZE: u64 = 313281726388371456;
pub const XFLD_EVT_FXFWD_QUO_BID_SPOT_PRICE: u64 = 313281717798436864;
pub const XFLD_EVT_FXFWD_QUO_CURRENCY: u64 = 313281777927979008;
pub const XFLD_EVT_FXFWD_QUO_EXCHANGE_HITIME: u64 = 313281653373927424;
pub const XFLD_EVT_FXFWD_QUO_INSTRUMENT_STATUS: u64 = 313281760748109824;
pub const XFLD_EVT_FXFWD_QUO_MARKET_STATUS: u64 = 313281773633011712;
pub const XFLD_EVT_FXFWD_QUO_PRICE_TYPE: u64 = 313281666258829312;
pub const XFLD_EVT_FXFWD_QUO_QUALS: u64 = 313281674848763904;
pub const XFLD_EVT_FXFWD_QUO_QUOTE_ID: u64 = 313281756453142528;
pub const XFLD_EVT_FXFWD_QUO_REQUEST_ID: u64 = 313281752158175232;
pub const XFLD_EVT_FXFWD_QUO_SETL_DATE: u64 = 313281782222946304;
pub const XFLD_EVT_FXFWD_QUO_SYMBOL_TYPE: u64 = 313281661963862016;
pub const XFLD_EVT_FXFWD_QUO_VALID_UNTIL_HITIME: u64 = 313281747863207936;
pub const XFLD_EVT_FXSWAP_REFR_ACCOUNT_ID: u64 = 313563154120441856;
pub const XFLD_EVT_FXSWAP_REFR_ALTERNATE_ID1: u64 = 313563145530507264;
pub const XFLD_EVT_FXSWAP_REFR_ALTERNATE_ID2: u64 = 313563149825474560;
pub const XFLD_EVT_FXSWAP_REFR_ASK_FAR_FORWARD_POINTS: u64 = 313563218544951296;
pub const XFLD_EVT_FXSWAP_REFR_ASK_FAR_PRICE: u64 = 313563184185212928;
pub const XFLD_EVT_FXSWAP_REFR_ASK_FAR_SIZE: u64 = 313563205660049408;
pub const XFLD_EVT_FXSWAP_REFR_ASK_HITIME: u64 = 313563209955016704;
pub const XFLD_EVT_FXSWAP_REFR_ASK_NEAR_FORWARD_POINTS: u64 = 313563214249984000;
pub const XFLD_EVT_FXSWAP_REFR_ASK_NEAR_PRICE: u64 = 313563179890245632;
pub const XFLD_EVT_FXSWAP_REFR_ASK_NEAR_SIZE: u64 = 313563201365082112;
pub const XFLD_EVT_FXSWAP_REFR_ASK_SPOT_PRICE: u64 = 313563175595278336;
pub const XFLD_EVT_FXSWAP_REFR_BID_FAR_FORWARD_POINTS: u64 = 313563240019787776;
pub const XFLD_EVT_FXSWAP_REFR_BID_FAR_PRICE: u64 = 313563197070114816;
pub const XFLD_EVT_FXSWAP_REFR_BID_FAR_SIZE: u64 = 313563227134885888;
pub const XFLD_EVT_FXSWAP_REFR_BID_HITIME: u64 = 313563231429853184;
pub const XFLD_EVT_FXSWAP_REFR_BID_NEAR_FORWARD_POINTS: u64 = 313563235724820480;
pub const XFLD_EVT_FXSWAP_REFR_BID_NEAR_PRICE: u64 = 313563192775147520;
pub const XFLD_EVT_FXSWAP_REFR_BID_NEAR_SIZE: u64 = 313563222839918592;
pub const XFLD_EVT_FXSWAP_REFR_BID_SPOT_PRICE: u64 = 313563188480180224;
pub const XFLD_EVT_FXSWAP_REFR_CURRENCY: u64 = 313563171300311040;
pub const XFLD_EVT_FXSWAP_REFR_EXCHANGE_HITIME: u64 = 313563128350638080;
pub const XFLD_EVT_FXSWAP_REFR_EXCH_TIME_OFFSET: u64 = 313563167005343744;
pub const XFLD_EVT_FXSWAP_REFR_FAR_SETL_DATE: u64 = 313563270084558848;
pub const XFLD_EVT_FXSWAP_REFR_INSTRUMENT_STATUS: u64 = 313563136940572672;
pub const XFLD_EVT_FXSWAP_REFR_MARKET_STATUS: u64 = 313563141235539968;
pub const XFLD_EVT_FXSWAP_REFR_NEAR_SETL_DATE: u64 = 313563265789591552;
pub const XFLD_EVT_FXSWAP_REFR_PRICE_TYPE: u64 = 313563162710376448;
pub const XFLD_EVT_FXSWAP_REFR_QUOTE_ID: u64 = 313563261494624256;
pub const XFLD_EVT_FXSWAP_REFR_REQUEST_ID: u64 = 313563257199656960;
pub const XFLD_EVT_FXSWAP_REFR_SYMBOL_TYPE: u64 = 313563158415409152;
pub const XFLD_EVT_FXSWAP_REFR_VALID_UNTIL_HITIME: u64 = 313563252904689664;
pub const XFLD_EVT_FXSWAP_QUO_ASK_FAR_FORWARD_POINTS: u64 = 313844676341792768;
pub const XFLD_EVT_FXSWAP_QUO_ASK_FAR_PRICE: u64 = 313844641982054400;
pub const XFLD_EVT_FXSWAP_QUO_ASK_FAR_SIZE: u64 = 313844663456890880;
pub const XFLD_EVT_FXSWAP_QUO_ASK_HITIME: u64 = 313844667751858176;
pub const XFLD_EVT_FXSWAP_QUO_ASK_NEAR_FORWARD_POINTS: u64 = 313844672046825472;
pub const XFLD_EVT_FXSWAP_QUO_ASK_NEAR_PRICE: u64 = 313844637687087104;
pub const XFLD_EVT_FXSWAP_QUO_ASK_NEAR_SIZE: u64 = 313844659161923584;
pub const XFLD_EVT_FXSWAP_QUO_ASK_SPOT_PRICE: u64 = 313844633392119808;
pub const XFLD_EVT_FXSWAP_QUO_BID_FAR_FORWARD_POINTS: u64 = 313844697816629248;
pub const XFLD_EVT_FXSWAP_QUO_BID_FAR_PRICE: u64 = 313844654866956288;
pub const XFLD_EVT_FXSWAP_QUO_BID_FAR_SIZE: u64 = 313844684931727360;
pub const XFLD_EVT_FXSWAP_QUO_BID_HITIME: u64 = 313844689226694656;
pub const XFLD_EVT_FXSWAP_QUO_BID_NEAR_FORWARD_POINTS: u64 = 313844693521661952;
pub const XFLD_EVT_FXSWAP_QUO_BID_NEAR_PRICE: u64 = 313844650571988992;
pub const XFLD_EVT_FXSWAP_QUO_BID_NEAR_SIZE: u64 = 313844680636760064;
pub const XFLD_EVT_FXSWAP_QUO_BID_SPOT_PRICE: u64 = 313844646277021696;
pub const XFLD_EVT_FXSWAP_QUO_CURRENCY: u64 = 313844749356236800;
pub const XFLD_EVT_FXSWAP_QUO_EXCHANGE_HITIME: u64 = 313844727881400320;
pub const XFLD_EVT_FXSWAP_QUO_FAR_SETL_DATE: u64 = 313844757946171392;
pub const XFLD_EVT_FXSWAP_QUO_INSTRUMENT_STATUS: u64 = 313844723586433024;
pub const XFLD_EVT_FXSWAP_QUO_MARKET_STATUS: u64 = 313844745061269504;
pub const XFLD_EVT_FXSWAP_QUO_NEAR_SETL_DATE: u64 = 313844753651204096;
pub const XFLD_EVT_FXSWAP_QUO_PRICE_TYPE: u64 = 313844607622316032;
pub const XFLD_EVT_FXSWAP_QUO_QUALS: u64 = 313844616212250624;
pub const XFLD_EVT_FXSWAP_QUO_QUOTE_ID: u64 = 313844719291465728;
pub const XFLD_EVT_FXSWAP_QUO_REQUEST_ID: u64 = 313844714996498432;
pub const XFLD_EVT_FXSWAP_QUO_SYMBOL_TYPE: u64 = 313844603327348736;
pub const XFLD_EVT_FXSWAP_QUO_VALID_UNTIL_HITIME: u64 = 313844710701531136;
pub const XFLD_EVT_TPSUMR_COMPOSITE_SYMBOL_COUNT: u64 = 314126108368830464;
pub const XFLD_EVT_TPSUMR_CONFIGURED_LINES_COUNT: u64 = 314126086893993984;
pub const XFLD_EVT_TPSUMR_CONFIGURED_TCP_SOCKETS_COUNT: u64 = 314126095483928576;
pub const XFLD_EVT_TPSUMR_CONFIGURED_UDP_SOCKETS_COUNT: u64 = 314126091188961280;
pub const XFLD_EVT_TPSUMR_CURRENT_CLIENT_COUNT: u64 = 314126112663797760;
pub const XFLD_EVT_TPSUMR_CURRENT_CLIENT_SUBSCRIPTIONS: u64 = 314126121253732352;
pub const XFLD_EVT_TPSUMR_CURRENT_SUBSCRIPTION_OVERLAP: u64 = 314126129843666944;
pub const XFLD_EVT_TPSUMR_LAST_RESTART_TIME: u64 = 314126082599026688;
pub const XFLD_EVT_TPSUMR_MAX_CLIENT_COUNT: u64 = 314126116958765056;
pub const XFLD_EVT_TPSUMR_MAX_CLIENT_SUBSCRIPTIONS: u64 = 314126125548699648;
pub const XFLD_EVT_TPSUMR_MAX_SUBSCRIPTION_OVERLAP: u64 = 314126134138634240;
pub const XFLD_EVT_TPSUMR_PACKET_DROP_COUNT: u64 = 314126099778895872;
pub const XFLD_EVT_TPSUMR_REGIONAL_SYMBOL_COUNT: u64 = 314126104073863168;
pub const XFLD_EVT_TPSUMR_TICKER_PLANT_VERSION: u64 = 314126078304059392;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_AVG: u64 = 314407557575737344;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 314407574755606528;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 314407609115344896;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 314407579050573824;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 314407613410312192;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 314407583345541120;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 314407617705279488;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 314407587640508416;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 314407622000246784;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 314407591935475712;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 314407626295214080;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 314407596230443008;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 314407630590181376;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 314407600525410304;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 314407634885148672;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 314407604820377600;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 314407639180115968;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_MAX: u64 = 314407561870704640;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_MIN: u64 = 314407566165671936;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_SAMPLES: u64 = 314407553280770048;
pub const XFLD_EVT_TPLATR_APPLIANCE_LATENCY_STD_DEV: u64 = 314407570460639232;
pub const XFLD_EVT_TPCRR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 314689049732317184;
pub const XFLD_EVT_TPCRR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 314689045437349888;
pub const XFLD_EVT_TPCRR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 314689041142382592;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_AVG: u64 = 314689084092055552;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN0_LOWER_BOUND: u64 = 314689101271924736;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN0_SAMPLES: u64 = 314689135631663104;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN1_LOWER_BOUND: u64 = 314689105566892032;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN1_SAMPLES: u64 = 314689139926630400;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN2_LOWER_BOUND: u64 = 314689109861859328;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN2_SAMPLES: u64 = 314689144221597696;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN3_LOWER_BOUND: u64 = 314689114156826624;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN3_SAMPLES: u64 = 314689148516564992;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN4_LOWER_BOUND: u64 = 314689118451793920;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN4_SAMPLES: u64 = 314689152811532288;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN5_LOWER_BOUND: u64 = 314689122746761216;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN5_SAMPLES: u64 = 314689157106499584;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN6_LOWER_BOUND: u64 = 314689127041728512;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN6_SAMPLES: u64 = 314689161401466880;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN7_LOWER_BOUND: u64 = 314689131336695808;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_BIN7_SAMPLES: u64 = 314689165696434176;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_MAX: u64 = 314689096976957440;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_MIN: u64 = 314689092681990144;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_SAMPLES: u64 = 314689079797088256;
pub const XFLD_EVT_TPCRR_CALLBACK_LATENCY_STD_DEV: u64 = 314689088387022848;
pub const XFLD_EVT_TPCRR_CLIENT_COUNT: u64 = 314689032552448000;
pub const XFLD_EVT_TPCRR_CLIENT_ID: u64 = 314689169991401472;
pub const XFLD_EVT_TPCRR_FULL_BUFFER_SEND_COUNT: u64 = 314689075502120960;
pub const XFLD_EVT_TPCRR_MAX_CLIENT_BUFFER_SIZE: u64 = 314689036847415296;
pub const XFLD_EVT_TPCRR_OUTPUT_PEAK_BYTE_RATE: u64 = 314689062617219072;
pub const XFLD_EVT_TPCRR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 314689058322251776;
pub const XFLD_EVT_TPCRR_OUTPUT_PEAK_PACKET_RATE: u64 = 314689054027284480;
pub const XFLD_EVT_TPCRR_PENDING_SEND_BUFFER_COUNT: u64 = 314689066912186368;
pub const XFLD_EVT_TPCRR_PENDING_SEND_BYTE_COUNT: u64 = 314689071207153664;
pub const XFLD_EVT_TPCRR_TIMESPAN: u64 = 314689028257480704;
pub const XFLD_EVT_TPSRR_BURSTRATE_TIMESPAN: u64 = 314970567658700800;
pub const XFLD_EVT_TPSRR_HIRATE_TIMESPAN: u64 = 314970563363733504;
pub const XFLD_EVT_TPSRR_OUTPUT_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970700802686976;
pub const XFLD_EVT_TPSRR_OUTPUT_BYTE_COUNT: u64 = 314970554773798912;
pub const XFLD_EVT_TPSRR_OUTPUT_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 314970687917785088;
pub const XFLD_EVT_TPSRR_OUTPUT_MESSAGE_COUNT: u64 = 314970541888897024;
pub const XFLD_EVT_TPSRR_OUTPUT_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970696507719680;
pub const XFLD_EVT_TPSRR_OUTPUT_PACKET_COUNT: u64 = 314970537593929728;
pub const XFLD_EVT_TPSRR_OUTPUT_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 314970683622817792;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_BYTE_RATE: u64 = 314970675032883200;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_MESSAGE_BURSTRATE: u64 = 314970692212752384;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_MESSAGE_HIRATE: u64 = 314970679327850496;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 314970657853014016;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_PACKET_RATE: u64 = 314970670737915904;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_QUOTE_RATE: u64 = 314970662147981312;
pub const XFLD_EVT_TPSRR_OUTPUT_PEAK_TRADE_RATE: u64 = 314970666442948608;
pub const XFLD_EVT_TPSRR_OUTPUT_QUOTE_COUNT: u64 = 314970546183864320;
pub const XFLD_EVT_TPSRR_OUTPUT_TRADE_COUNT: u64 = 314970550478831616;
pub const XFLD_EVT_TPSRR_POST_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970653558046720;
pub const XFLD_EVT_TPSRR_POST_ARB_BYTE_COUNT: u64 = 314970533298962432;
pub const XFLD_EVT_TPSRR_POST_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 314970640673144832;
pub const XFLD_EVT_TPSRR_POST_ARB_MESSAGE_COUNT: u64 = 314970520414060544;
pub const XFLD_EVT_TPSRR_POST_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970649263079424;
pub const XFLD_EVT_TPSRR_POST_ARB_PACKET_COUNT: u64 = 314970516119093248;
pub const XFLD_EVT_TPSRR_POST_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 314970636378177536;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_BYTE_RATE: u64 = 314970627788242944;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 314970644968112128;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_MESSAGE_HIRATE: u64 = 314970632083210240;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_MESSAGE_RATE: u64 = 314970610608373760;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_PACKET_RATE: u64 = 314970623493275648;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_QUOTE_FILTERED_RATE: u64 = 314970709392621568;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_QUOTE_RATE: u64 = 314970614903341056;
pub const XFLD_EVT_TPSRR_POST_ARB_PEAK_TRADE_RATE: u64 = 314970619198308352;
pub const XFLD_EVT_TPSRR_POST_ARB_QUOTE_COUNT: u64 = 314970524709027840;
pub const XFLD_EVT_TPSRR_POST_ARB_QUOTE_FILTERED_COUNT: u64 = 314970705097654272;
pub const XFLD_EVT_TPSRR_POST_ARB_TRADE_COUNT: u64 = 314970529003995136;
pub const XFLD_EVT_TPSRR_PRE_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970606313406464;
pub const XFLD_EVT_TPSRR_PRE_ARB_BYTE_COUNT: u64 = 314970511824125952;
pub const XFLD_EVT_TPSRR_PRE_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 314970593428504576;
pub const XFLD_EVT_TPSRR_PRE_ARB_MESSAGE_COUNT: u64 = 314970507529158656;
pub const XFLD_EVT_TPSRR_PRE_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 314970602018439168;
pub const XFLD_EVT_TPSRR_PRE_ARB_PACKET_COUNT: u64 = 314970503234191360;
pub const XFLD_EVT_TPSRR_PRE_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 314970589133537280;
pub const XFLD_EVT_TPSRR_PRE_ARB_PEAK_BYTE_RATE: u64 = 314970580543602688;
pub const XFLD_EVT_TPSRR_PRE_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 314970597723471872;
pub const XFLD_EVT_TPSRR_PRE_ARB_PEAK_MESSAGE_HIRATE: u64 = 314970584838569984;
pub const XFLD_EVT_TPSRR_PRE_ARB_PEAK_MESSAGE_RATE: u64 = 314970571953668096;
pub const XFLD_EVT_TPSRR_PRE_ARB_PEAK_PACKET_RATE: u64 = 314970576248635392;
pub const XFLD_EVT_TPSRR_TIMESPAN: u64 = 314970559068766208;
pub const XFLD_EVT_ST_TPSUMR_COMPOSITE_SYMBOL_COUNT: u64 = 315252008275673088;
pub const XFLD_EVT_ST_TPSUMR_CONFIGURED_LINES_COUNT: u64 = 315251986800836608;
pub const XFLD_EVT_ST_TPSUMR_CONFIGURED_TCP_SOCKETS_COUNT: u64 = 315251995390771200;
pub const XFLD_EVT_ST_TPSUMR_CONFIGURED_UDP_SOCKETS_COUNT: u64 = 315251991095803904;
pub const XFLD_EVT_ST_TPSUMR_CURRENT_CLIENT_COUNT: u64 = 315252012570640384;
pub const XFLD_EVT_ST_TPSUMR_CURRENT_CLIENT_SUBSCRIPTIONS: u64 = 315252021160574976;
pub const XFLD_EVT_ST_TPSUMR_CURRENT_SUBSCRIPTION_OVERLAP: u64 = 315252029750509568;
pub const XFLD_EVT_ST_TPSUMR_LAST_RESTART_TIME: u64 = 315251982505869312;
pub const XFLD_EVT_ST_TPSUMR_MAX_CLIENT_COUNT: u64 = 315252016865607680;
pub const XFLD_EVT_ST_TPSUMR_MAX_CLIENT_SUBSCRIPTIONS: u64 = 315252025455542272;
pub const XFLD_EVT_ST_TPSUMR_MAX_SUBSCRIPTION_OVERLAP: u64 = 315252034045476864;
pub const XFLD_EVT_ST_TPSUMR_PACKET_DROP_COUNT: u64 = 315251999685738496;
pub const XFLD_EVT_ST_TPSUMR_REGIONAL_SYMBOL_COUNT: u64 = 315252003980705792;
pub const XFLD_EVT_ST_TPSUMR_TICKER_PLANT_VERSION: u64 = 315251978210902016;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_AVG: u64 = 315533457482579968;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN0_LOWER_BOUND: u64 = 315533474662449152;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN0_SAMPLES: u64 = 315533509022187520;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN1_LOWER_BOUND: u64 = 315533478957416448;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN1_SAMPLES: u64 = 315533513317154816;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN2_LOWER_BOUND: u64 = 315533483252383744;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN2_SAMPLES: u64 = 315533517612122112;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN3_LOWER_BOUND: u64 = 315533487547351040;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN3_SAMPLES: u64 = 315533521907089408;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN4_LOWER_BOUND: u64 = 315533491842318336;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN4_SAMPLES: u64 = 315533526202056704;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN5_LOWER_BOUND: u64 = 315533496137285632;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN5_SAMPLES: u64 = 315533530497024000;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN6_LOWER_BOUND: u64 = 315533500432252928;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN6_SAMPLES: u64 = 315533534791991296;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN7_LOWER_BOUND: u64 = 315533504727220224;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_BIN7_SAMPLES: u64 = 315533539086958592;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_MAX: u64 = 315533461777547264;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_MIN: u64 = 315533466072514560;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_SAMPLES: u64 = 315533453187612672;
pub const XFLD_EVT_ST_TPLATR_APPLIANCE_LATENCY_STD_DEV: u64 = 315533470367481856;
pub const XFLD_EVT_ST_TPCRR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 315814949639159808;
pub const XFLD_EVT_ST_TPCRR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 315814945344192512;
pub const XFLD_EVT_ST_TPCRR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 315814941049225216;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_AVG: u64 = 315814983998898176;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN0_LOWER_BOUND: u64 = 315815001178767360;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN0_SAMPLES: u64 = 315815035538505728;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN1_LOWER_BOUND: u64 = 315815005473734656;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN1_SAMPLES: u64 = 315815039833473024;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN2_LOWER_BOUND: u64 = 315815009768701952;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN2_SAMPLES: u64 = 315815044128440320;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN3_LOWER_BOUND: u64 = 315815014063669248;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN3_SAMPLES: u64 = 315815048423407616;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN4_LOWER_BOUND: u64 = 315815018358636544;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN4_SAMPLES: u64 = 315815052718374912;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN5_LOWER_BOUND: u64 = 315815022653603840;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN5_SAMPLES: u64 = 315815057013342208;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN6_LOWER_BOUND: u64 = 315815026948571136;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN6_SAMPLES: u64 = 315815061308309504;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN7_LOWER_BOUND: u64 = 315815031243538432;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_BIN7_SAMPLES: u64 = 315815065603276800;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_MAX: u64 = 315814996883800064;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_MIN: u64 = 315814992588832768;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_SAMPLES: u64 = 315814979703930880;
pub const XFLD_EVT_ST_TPCRR_CALLBACK_LATENCY_STD_DEV: u64 = 315814988293865472;
pub const XFLD_EVT_ST_TPCRR_CLIENT_COUNT: u64 = 315814932459290624;
pub const XFLD_EVT_ST_TPCRR_CLIENT_ID: u64 = 315815069898244096;
pub const XFLD_EVT_ST_TPCRR_FULL_BUFFER_SEND_COUNT: u64 = 315814975408963584;
pub const XFLD_EVT_ST_TPCRR_MAX_CLIENT_BUFFER_SIZE: u64 = 315814936754257920;
pub const XFLD_EVT_ST_TPCRR_OUTPUT_PEAK_BYTE_RATE: u64 = 315814962524061696;
pub const XFLD_EVT_ST_TPCRR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 315814958229094400;
pub const XFLD_EVT_ST_TPCRR_OUTPUT_PEAK_PACKET_RATE: u64 = 315814953934127104;
pub const XFLD_EVT_ST_TPCRR_PENDING_SEND_BUFFER_COUNT: u64 = 315814966819028992;
pub const XFLD_EVT_ST_TPCRR_PENDING_SEND_BYTE_COUNT: u64 = 315814971113996288;
pub const XFLD_EVT_ST_TPCRR_TIMESPAN: u64 = 315814928164323328;
pub const XFLD_EVT_ST_TPSRR_BURSTRATE_TIMESPAN: u64 = 316096467565543424;
pub const XFLD_EVT_ST_TPSRR_HIRATE_TIMESPAN: u64 = 316096463270576128;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096600709529600;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_BYTE_COUNT: u64 = 316096454680641536;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 316096587824627712;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_MESSAGE_COUNT: u64 = 316096441795739648;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096596414562304;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PACKET_COUNT: u64 = 316096437500772352;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 316096583529660416;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_BYTE_RATE: u64 = 316096574939725824;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_MESSAGE_BURSTRATE: u64 = 316096592119595008;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_MESSAGE_HIRATE: u64 = 316096579234693120;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 316096557759856640;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_PACKET_RATE: u64 = 316096570644758528;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_QUOTE_RATE: u64 = 316096562054823936;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_PEAK_TRADE_RATE: u64 = 316096566349791232;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_QUOTE_COUNT: u64 = 316096446090706944;
pub const XFLD_EVT_ST_TPSRR_OUTPUT_TRADE_COUNT: u64 = 316096450385674240;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096553464889344;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_BYTE_COUNT: u64 = 316096433205805056;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 316096540579987456;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_MESSAGE_COUNT: u64 = 316096420320903168;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096549169922048;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PACKET_COUNT: u64 = 316096416025935872;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 316096536285020160;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_BYTE_RATE: u64 = 316096527695085568;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 316096544874954752;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_MESSAGE_HIRATE: u64 = 316096531990052864;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_MESSAGE_RATE: u64 = 316096510515216384;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_PACKET_RATE: u64 = 316096523400118272;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_QUOTE_FILTERED_RATE: u64 = 316096609299464192;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_QUOTE_RATE: u64 = 316096514810183680;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_PEAK_TRADE_RATE: u64 = 316096519105150976;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_QUOTE_COUNT: u64 = 316096424615870464;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_QUOTE_FILTERED_COUNT: u64 = 316096605004496896;
pub const XFLD_EVT_ST_TPSRR_POST_ARB_TRADE_COUNT: u64 = 316096428910837760;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_BYTE_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096506220249088;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_BYTE_COUNT: u64 = 316096411730968576;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_BYTE_HIRATE_AT_MESSAGE_PEAK: u64 = 316096493335347200;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_MESSAGE_COUNT: u64 = 316096407436001280;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PACKET_BURSTRATE_AT_MESSAGE_PEAK: u64 = 316096501925281792;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PACKET_COUNT: u64 = 316096403141033984;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PACKET_HIRATE_AT_MESSAGE_PEAK: u64 = 316096489040379904;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PEAK_BYTE_RATE: u64 = 316096480450445312;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PEAK_MESSAGE_BURSTRATE: u64 = 316096497630314496;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PEAK_MESSAGE_HIRATE: u64 = 316096484745412608;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PEAK_MESSAGE_RATE: u64 = 316096471860510720;
pub const XFLD_EVT_ST_TPSRR_PRE_ARB_PEAK_PACKET_RATE: u64 = 316096476155478016;
pub const XFLD_EVT_ST_TPSRR_TIMESPAN: u64 = 316096458975608832;
pub const XFLD_EVT_TPMWCBU_LEVEL1_PRICE: u64 = 316377878117744640;
pub const XFLD_EVT_TPMWCBU_LEVEL2_PRICE: u64 = 316377882412711936;
pub const XFLD_EVT_TPMWCBU_LEVEL3_PRICE: u64 = 316377886707679232;
pub const XFLD_EVT_TPMWCBU_PRICE_TYPE: u64 = 316377891002646528;
pub const XFLD_EVT_TPSERR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 317222320227745792;
pub const XFLD_EVT_TPSERR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 317222315932778496;
pub const XFLD_EVT_TPSERR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 317222311637811200;
pub const XFLD_EVT_TPSERR_AVG: u64 = 317222363177418752;
pub const XFLD_EVT_TPSERR_BIN0_LOWER_BOUND: u64 = 317222380357287936;
pub const XFLD_EVT_TPSERR_BIN0_SAMPLES: u64 = 317222414717026304;
pub const XFLD_EVT_TPSERR_BIN1_LOWER_BOUND: u64 = 317222384652255232;
pub const XFLD_EVT_TPSERR_BIN1_SAMPLES: u64 = 317222419011993600;
pub const XFLD_EVT_TPSERR_BIN2_LOWER_BOUND: u64 = 317222388947222528;
pub const XFLD_EVT_TPSERR_BIN2_SAMPLES: u64 = 317222423306960896;
pub const XFLD_EVT_TPSERR_BIN3_LOWER_BOUND: u64 = 317222393242189824;
pub const XFLD_EVT_TPSERR_BIN3_SAMPLES: u64 = 317222427601928192;
pub const XFLD_EVT_TPSERR_BIN4_LOWER_BOUND: u64 = 317222397537157120;
pub const XFLD_EVT_TPSERR_BIN4_SAMPLES: u64 = 317222431896895488;
pub const XFLD_EVT_TPSERR_BIN5_LOWER_BOUND: u64 = 317222401832124416;
pub const XFLD_EVT_TPSERR_BIN5_SAMPLES: u64 = 317222436191862784;
pub const XFLD_EVT_TPSERR_BIN6_LOWER_BOUND: u64 = 317222406127091712;
pub const XFLD_EVT_TPSERR_BIN6_SAMPLES: u64 = 317222440486830080;
pub const XFLD_EVT_TPSERR_BIN7_LOWER_BOUND: u64 = 317222410422059008;
pub const XFLD_EVT_TPSERR_BIN7_SAMPLES: u64 = 317222444781797376;
pub const XFLD_EVT_TPSERR_CLIENT_ID: u64 = 317222354587484160;
pub const XFLD_EVT_TPSERR_FULL_BUFFER_SEND_COUNT: u64 = 317222345997549568;
pub const XFLD_EVT_TPSERR_MAX: u64 = 317222367472386048;
pub const XFLD_EVT_TPSERR_MAX_CLIENT_BUFFER_SIZE: u64 = 317222307342843904;
pub const XFLD_EVT_TPSERR_MIN: u64 = 317222371767353344;
pub const XFLD_EVT_TPSERR_OUTPUT_PEAK_BYTE_RATE: u64 = 317222333112647680;
pub const XFLD_EVT_TPSERR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 317222328817680384;
pub const XFLD_EVT_TPSERR_OUTPUT_PEAK_PACKET_RATE: u64 = 317222324522713088;
pub const XFLD_EVT_TPSERR_PENDING_SEND_BUFFER_COUNT: u64 = 317222337407614976;
pub const XFLD_EVT_TPSERR_PENDING_SEND_BYTE_COUNT: u64 = 317222341702582272;
pub const XFLD_EVT_TPSERR_SAMPLES: u64 = 317222350292516864;
pub const XFLD_EVT_TPSERR_SESSION_COUNT: u64 = 317222303047876608;
pub const XFLD_EVT_TPSERR_SESSION_ID: u64 = 317222358882451456;
pub const XFLD_EVT_TPSERR_STD_DEV: u64 = 317222376062320640;
pub const XFLD_EVT_ST_TPSERR_APPLIANCE_OUTPUT_BYTE_COUNT: u64 = 317503795204456448;
pub const XFLD_EVT_ST_TPSERR_APPLIANCE_OUTPUT_MESSAGE_COUNT: u64 = 317503790909489152;
pub const XFLD_EVT_ST_TPSERR_APPLIANCE_OUTPUT_PACKET_COUNT: u64 = 317503786614521856;
pub const XFLD_EVT_ST_TPSERR_AVG: u64 = 317503838154129408;
pub const XFLD_EVT_ST_TPSERR_BIN0_LOWER_BOUND: u64 = 317503855333998592;
pub const XFLD_EVT_ST_TPSERR_BIN0_SAMPLES: u64 = 317503889693736960;
pub const XFLD_EVT_ST_TPSERR_BIN1_LOWER_BOUND: u64 = 317503859628965888;
pub const XFLD_EVT_ST_TPSERR_BIN1_SAMPLES: u64 = 317503893988704256;
pub const XFLD_EVT_ST_TPSERR_BIN2_LOWER_BOUND: u64 = 317503863923933184;
pub const XFLD_EVT_ST_TPSERR_BIN2_SAMPLES: u64 = 317503898283671552;
pub const XFLD_EVT_ST_TPSERR_BIN3_LOWER_BOUND: u64 = 317503868218900480;
pub const XFLD_EVT_ST_TPSERR_BIN3_SAMPLES: u64 = 317503902578638848;
pub const XFLD_EVT_ST_TPSERR_BIN4_LOWER_BOUND: u64 = 317503872513867776;
pub const XFLD_EVT_ST_TPSERR_BIN4_SAMPLES: u64 = 317503906873606144;
pub const XFLD_EVT_ST_TPSERR_BIN5_LOWER_BOUND: u64 = 317503876808835072;
pub const XFLD_EVT_ST_TPSERR_BIN5_SAMPLES: u64 = 317503911168573440;
pub const XFLD_EVT_ST_TPSERR_BIN6_LOWER_BOUND: u64 = 317503881103802368;
pub const XFLD_EVT_ST_TPSERR_BIN6_SAMPLES: u64 = 317503915463540736;
pub const XFLD_EVT_ST_TPSERR_BIN7_LOWER_BOUND: u64 = 317503885398769664;
pub const XFLD_EVT_ST_TPSERR_BIN7_SAMPLES: u64 = 317503919758508032;
pub const XFLD_EVT_ST_TPSERR_CLIENT_ID: u64 = 317503829564194816;
pub const XFLD_EVT_ST_TPSERR_FULL_BUFFER_SEND_COUNT: u64 = 317503820974260224;
pub const XFLD_EVT_ST_TPSERR_MAX: u64 = 317503842449096704;
pub const XFLD_EVT_ST_TPSERR_MAX_CLIENT_BUFFER_SIZE: u64 = 317503782319554560;
pub const XFLD_EVT_ST_TPSERR_MIN: u64 = 317503846744064000;
pub const XFLD_EVT_ST_TPSERR_OUTPUT_PEAK_BYTE_RATE: u64 = 317503808089358336;
pub const XFLD_EVT_ST_TPSERR_OUTPUT_PEAK_MESSAGE_RATE: u64 = 317503803794391040;
pub const XFLD_EVT_ST_TPSERR_OUTPUT_PEAK_PACKET_RATE: u64 = 317503799499423744;
pub const XFLD_EVT_ST_TPSERR_PENDING_SEND_BUFFER_COUNT: u64 = 317503812384325632;
pub const XFLD_EVT_ST_TPSERR_PENDING_SEND_BYTE_COUNT: u64 = 317503816679292928;
pub const XFLD_EVT_ST_TPSERR_SAMPLES: u64 = 317503825269227520;
pub const XFLD_EVT_ST_TPSERR_SESSION_COUNT: u64 = 317503778024587264;
pub const XFLD_EVT_ST_TPSERR_SESSION_ID: u64 = 317503833859162112;
pub const XFLD_EVT_ST_TPSERR_STD_DEV: u64 = 317503851039031296;
pub const XFLD_EVT_TPSESR_API_BUILD_OS_VERSION: u64 = 317785274476134400;
pub const XFLD_EVT_TPSESR_API_BUILD_PLATFORM: u64 = 317785270181167104;
pub const XFLD_EVT_TPSESR_API_VERSION: u64 = 317785261591232512;
pub const XFLD_EVT_TPSESR_APPLIANCE_HOSTNAME: u64 = 317785291656003584;
pub const XFLD_EVT_TPSESR_APPLIANCE_LOCAL_ADDRESS: u64 = 317785300245938176;
pub const XFLD_EVT_TPSESR_APPLIANCE_LOCAL_INTERFACE: u64 = 317785295950970880;
pub const XFLD_EVT_TPSESR_APPLIANCE_LOCAL_PORT: u64 = 317785304540905472;
pub const XFLD_EVT_TPSESR_CHANNEL_NAME: u64 = 317785287361036288;
pub const XFLD_EVT_TPSESR_CLIENT_HOSTNAME: u64 = 317785308835872768;
pub const XFLD_EVT_TPSESR_CLIENT_ID: u64 = 317785343195611136;
pub const XFLD_EVT_TPSESR_CLIENT_LOCAL_ADDRESS: u64 = 317785313130840064;
pub const XFLD_EVT_TPSESR_CLIENT_LOCAL_PORT: u64 = 317785317425807360;
pub const XFLD_EVT_TPSESR_CONNECTION_DATE: u64 = 317785283066068992;
pub const XFLD_EVT_TPSESR_CONNECTION_TIME: u64 = 317785278771101696;
pub const XFLD_EVT_TPSESR_CURRENT_SUBSCRIPTION_COUNT: u64 = 317785330310709248;
pub const XFLD_EVT_TPSESR_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 317785338900643840;
pub const XFLD_EVT_TPSESR_LOCAL_IB_KEY: u64 = 317785321720774656;
pub const XFLD_EVT_TPSESR_MAX_SUBSCRIPTION_COUNT: u64 = 317785334605676544;
pub const XFLD_EVT_TPSESR_REMOTE_IB_KEY: u64 = 317785326015741952;
pub const XFLD_EVT_TPSESR_REMOTE_PROCESS_ID: u64 = 317785265886199808;
pub const XFLD_EVT_TPSESR_SESSION_COUNT: u64 = 317785253001297920;
pub const XFLD_EVT_TPSESR_SESSION_ID: u64 = 317785347490578432;
pub const XFLD_EVT_TPSESR_USERNAME: u64 = 317785257296265216;
pub const XFLD_EVT_ST_TPSESR_API_BUILD_OS_VERSION: u64 = 318066749452845056;
pub const XFLD_EVT_ST_TPSESR_API_BUILD_PLATFORM: u64 = 318066745157877760;
pub const XFLD_EVT_ST_TPSESR_API_VERSION: u64 = 318066736567943168;
pub const XFLD_EVT_ST_TPSESR_APPLIANCE_HOSTNAME: u64 = 318066766632714240;
pub const XFLD_EVT_ST_TPSESR_APPLIANCE_LOCAL_ADDRESS: u64 = 318066775222648832;
pub const XFLD_EVT_ST_TPSESR_APPLIANCE_LOCAL_INTERFACE: u64 = 318066770927681536;
pub const XFLD_EVT_ST_TPSESR_APPLIANCE_LOCAL_PORT: u64 = 318066779517616128;
pub const XFLD_EVT_ST_TPSESR_CHANNEL_NAME: u64 = 318066762337746944;
pub const XFLD_EVT_ST_TPSESR_CLIENT_HOSTNAME: u64 = 318066783812583424;
pub const XFLD_EVT_ST_TPSESR_CLIENT_ID: u64 = 318066818172321792;
pub const XFLD_EVT_ST_TPSESR_CLIENT_LOCAL_ADDRESS: u64 = 318066788107550720;
pub const XFLD_EVT_ST_TPSESR_CLIENT_LOCAL_PORT: u64 = 318066792402518016;
pub const XFLD_EVT_ST_TPSESR_CONNECTION_DATE: u64 = 318066758042779648;
pub const XFLD_EVT_ST_TPSESR_CONNECTION_TIME: u64 = 318066753747812352;
pub const XFLD_EVT_ST_TPSESR_CURRENT_SUBSCRIPTION_COUNT: u64 = 318066805287419904;
pub const XFLD_EVT_ST_TPSESR_CURRENT_UNIQUE_SUBSCRIPTION_COUNT: u64 = 318066813877354496;
pub const XFLD_EVT_ST_TPSESR_LOCAL_IB_KEY: u64 = 318066796697485312;
pub const XFLD_EVT_ST_TPSESR_MAX_SUBSCRIPTION_COUNT: u64 = 318066809582387200;
pub const XFLD_EVT_ST_TPSESR_REMOTE_IB_KEY: u64 = 318066800992452608;
pub const XFLD_EVT_ST_TPSESR_REMOTE_PROCESS_ID: u64 = 318066740862910464;
pub const XFLD_EVT_ST_TPSESR_SESSION_COUNT: u64 = 318066727978008576;
pub const XFLD_EVT_ST_TPSESR_SESSION_ID: u64 = 318066822467289088;
pub const XFLD_EVT_ST_TPSESR_USERNAME: u64 = 318066732272975872;
pub const XFLD_EVT_RFQ_COUNTRY: u64 = 318911170088009728;
pub const XFLD_EVT_RFQ_EXCHANGE: u64 = 318911165793042432;
pub const XFLD_EVT_RFQ_EXCHANGE_HITIME: u64 = 318911195857813504;
pub const XFLD_EVT_RFQ_PRICE_TYPE: u64 = 318911178677944320;
pub const XFLD_EVT_RFQ_QUALS: u64 = 318911187267878912;
pub const XFLD_EVT_RFQ_QUOTE_REQUEST_ID: u64 = 318911161498075136;
pub const XFLD_EVT_RFQ_REQUESTED_SIZE: u64 = 318911157203107840;
pub const XFLD_EVT_RFQ_SIDE_ATTRIBUTION: u64 = 318911152908140544;
pub const XFLD_EVT_RFQ_SYMBOL_TYPE: u64 = 318911174382977024;
pub const XFLD_EVT_INDPR_EXCHANGE_HITIME: u64 = 319192627884851200;
pub const XFLD_EVT_INDPR_INDICATIVE_TYPE: u64 = 319192649359687680;
pub const XFLD_EVT_INDPR_PRICE: u64 = 319192645064720384;
pub const XFLD_EVT_INDPR_PRICE_TYPE: u64 = 319192636474785792;
pub const XFLD_EVT_INDPR_QUALS: u64 = 319192640769753088;
pub const XFLD_EVT_INDPR_SYMBOL_TYPE: u64 = 319192632179818496;
pub const XFLD_EVT_INDPR_TRADE_VENUE: u64 = 319192653654654976;
pub const XFLD_EVT_INDPR_TRANSACTION_HITIME: u64 = 319192662244589568;
pub const XFLD_EVT_INDPR_VOLUME: u64 = 319192657949622272;
pub const XFLD_EVT_INSTGRP_REFR_GROUP_COUNT: u64 = 319474102861561856;
pub const XFLD_EVT_INSTGRP_REFR_GROUP_ID: u64 = 319474107156529152;
pub const XFLD_EVT_INSTGRP_REFR_GROUP_STATUS: u64 = 319474111451496448;
pub const XFLD_EVT_INSTGRP_UPDATE_ACTION: u64 = 319755582133239808;
pub const XFLD_EVT_INSTGRP_UPDATE_COUNT: u64 = 319755577838272512;
pub const XFLD_EVT_INSTGRP_UPDATE_GROUP_ID: u64 = 319755586428207104;
pub const XFLD_EVT_INSTGRP_UPDATE_GROUP_STATUS: u64 = 319755590723174400;
pub const XFLD_EVT_FXREF_BOOK_SWEEP_MODEL: u64 = 342555068131704832;
pub const XFLD_EVT_FXREF_COUNT: u64 = 342555132556214272;
pub const XFLD_EVT_FXREF_CURRENCY: u64 = 342555072426672128;
pub const XFLD_EVT_FXREF_EXCHANGE_HITIME: u64 = 342555222750527488;
pub const XFLD_EVT_FXREF_EXCH_TIME_OFFSET: u64 = 342555050951835648;
pub const XFLD_EVT_FXREF_FIXING_DATE: u64 = 342555085311574016;
pub const XFLD_EVT_FXREF_FORWARD_POINTS: u64 = 342555179800854528;
pub const XFLD_EVT_FXREF_FORWARD_POINTS_PRICE_TYPE: u64 = 342555184095821824;
pub const XFLD_EVT_FXREF_HITIME: u64 = 342555158326018048;
pub const XFLD_EVT_FXREF_INSTRUMENT_STATUS: u64 = 342555123966279680;
pub const XFLD_EVT_FXREF_LOT_SIZE: u64 = 342555115376345088;
pub const XFLD_EVT_FXREF_LPID: u64 = 342555214160592896;
pub const XFLD_EVT_FXREF_MARKET_MAKER_COUNT: u64 = 342555188390789120;
pub const XFLD_EVT_FXREF_MARKET_STATUS: u64 = 342555128261246976;
pub const XFLD_EVT_FXREF_MAX_DEPTH: u64 = 342555093901508608;
pub const XFLD_EVT_FXREF_MIN_FILL_VOLUME: u64 = 342555119671312384;
pub const XFLD_EVT_FXREF_MIN_SIZE: u64 = 342555154031050752;
pub const XFLD_EVT_FXREF_ORDER_COUNT: u64 = 342555192685756416;
pub const XFLD_EVT_FXREF_PRICE: u64 = 342555145441116160;
pub const XFLD_EVT_FXREF_PRICE_TYPE: u64 = 342555059541770240;
pub const XFLD_EVT_FXREF_PRICING_MODEL: u64 = 342555063836737536;
pub const XFLD_EVT_FXREF_QUALS: u64 = 342555166915952640;
pub const XFLD_EVT_FXREF_QUOTE_ID: u64 = 342555209865625600;
pub const XFLD_EVT_FXREF_REFERENCE_ID: u64 = 342555218455560192;
pub const XFLD_EVT_FXREF_REGULAR_AMOUNT: u64 = 342555106786410496;
pub const XFLD_EVT_FXREF_REGULAR_PRICE: u64 = 342555111081377792;
pub const XFLD_EVT_FXREF_ROW_FIXING_DATE: u64 = 342555201275691008;
pub const XFLD_EVT_FXREF_ROW_LEVEL: u64 = 342555136851181568;
pub const XFLD_EVT_FXREF_ROW_SETTLEMENT_CURRENCY: u64 = 342555205570658304;
pub const XFLD_EVT_FXREF_ROW_VALUE_DATE: u64 = 342555196980723712;
pub const XFLD_EVT_FXREF_SESSION_ID: u64 = 342555089606541312;
pub const XFLD_EVT_FXREF_SETTLEMENT_CURRENCY: u64 = 342555076721639424;
pub const XFLD_EVT_FXREF_SIDE: u64 = 342555141146148864;
pub const XFLD_EVT_FXREF_SIZE: u64 = 342555149736083456;
pub const XFLD_EVT_FXREF_SPOT_RATE: u64 = 342555171210919936;
pub const XFLD_EVT_FXREF_SPOT_RATE_PRICE_TYPE: u64 = 342555175505887232;
pub const XFLD_EVT_FXREF_SYMBOL_TYPE: u64 = 342555055246802944;
pub const XFLD_EVT_FXREF_TICK_SIZE: u64 = 342555102491443200;
pub const XFLD_EVT_FXREF_TRUNCATION_LEVEL: u64 = 342555098196475904;
pub const XFLD_EVT_FXREF_VALID_UNTIL_HITIME: u64 = 342555162620985344;
pub const XFLD_EVT_FXREF_VALUE_DATE: u64 = 342555081016606720;
pub const XFLD_EVT_FXUPD_COUNT: u64 = 342836525928546304;
pub const XFLD_EVT_FXUPD_EXCHANGE_HITIME: u64 = 342836629007761408;
pub const XFLD_EVT_FXUPD_FIXING_DATE: u64 = 342836624712794112;
pub const XFLD_EVT_FXUPD_FORWARD_POINTS: u64 = 342836573173186560;
pub const XFLD_EVT_FXUPD_FORWARD_POINTS_PRICE_TYPE: u64 = 342836577468153856;
pub const XFLD_EVT_FXUPD_HITIME: u64 = 342836551698350080;
pub const XFLD_EVT_FXUPD_LPID: u64 = 342836607532924928;
pub const XFLD_EVT_FXUPD_MARKET_MAKER_COUNT: u64 = 342836581763121152;
pub const XFLD_EVT_FXUPD_MIN_SIZE: u64 = 342836547403382784;
pub const XFLD_EVT_FXUPD_ORDER_COUNT: u64 = 342836586058088448;
pub const XFLD_EVT_FXUPD_PRICE: u64 = 342836538813448192;
pub const XFLD_EVT_FXUPD_QUALS: u64 = 342836560288284672;
pub const XFLD_EVT_FXUPD_QUOTE_ID: u64 = 342836603237957632;
pub const XFLD_EVT_FXUPD_REFERENCE_ID: u64 = 342836611827892224;
pub const XFLD_EVT_FXUPD_ROW_FIXING_DATE: u64 = 342836594648023040;
pub const XFLD_EVT_FXUPD_ROW_LEVEL: u64 = 342836530223513600;
pub const XFLD_EVT_FXUPD_ROW_SETTLEMENT_CURRENCY: u64 = 342836598942990336;
pub const XFLD_EVT_FXUPD_ROW_VALUE_DATE: u64 = 342836590353055744;
pub const XFLD_EVT_FXUPD_SIDE: u64 = 342836534518480896;
pub const XFLD_EVT_FXUPD_SIZE: u64 = 342836543108415488;
pub const XFLD_EVT_FXUPD_SPOT_RATE: u64 = 342836564583251968;
pub const XFLD_EVT_FXUPD_SPOT_RATE_PRICE_TYPE: u64 = 342836568878219264;
pub const XFLD_EVT_FXUPD_UPDATE_TYPE: u64 = 342836616122859520;
pub const XFLD_EVT_FXUPD_VALID_UNTIL_HITIME: u64 = 342836555993317376;
pub const XFLD_EVT_FXUPD_VALUE_DATE: u64 = 342836620417826816;
pub const XFLD_EVT_VOLREF_ASK_IV: u64 = 343118013790158848;
pub const XFLD_EVT_VOLREF_BBO_ASK_EXCHANGE: u64 = 343118155524079616;
pub const XFLD_EVT_VOLREF_BBO_ASK_HITIME: u64 = 343118146934145024;
pub const XFLD_EVT_VOLREF_BBO_ASK_PRICE: u64 = 343118129754275840;
pub const XFLD_EVT_VOLREF_BBO_ASK_SIZE: u64 = 343118138344210432;
pub const XFLD_EVT_VOLREF_BBO_BID_EXCHANGE: u64 = 343118151229112320;
pub const XFLD_EVT_VOLREF_BBO_BID_HITIME: u64 = 343118142639177728;
pub const XFLD_EVT_VOLREF_BBO_BID_PRICE: u64 = 343118125459308544;
pub const XFLD_EVT_VOLREF_BBO_BID_SIZE: u64 = 343118134049243136;
pub const XFLD_EVT_VOLREF_BBO_TRADED_VOLUME: u64 = 343118159819046912;
pub const XFLD_EVT_VOLREF_BID_IV: u64 = 343118009495191552;
pub const XFLD_EVT_VOLREF_BORROW_COST: u64 = 343118112574406656;
pub const XFLD_EVT_VOLREF_CURRENCY: u64 = 343118000905256960;
pub const XFLD_EVT_VOLREF_EOD_IV: u64 = 343118078214668288;
pub const XFLD_EVT_VOLREF_FORWARD_PRICE: u64 = 343118108279439360;
pub const XFLD_EVT_VOLREF_INTRINSIC_VALUE: u64 = 343118116869373952;
pub const XFLD_EVT_VOLREF_LOCAL_CODE: u64 = 343118005200224256;
pub const XFLD_EVT_VOLREF_MID_IV: u64 = 343118018085126144;
pub const XFLD_EVT_VOLREF_QUOTE_RISK_QUALIFIERS: u64 = 343118065329766400;
pub const XFLD_EVT_VOLREF_QUOTE_RISK_SEQUENCE: u64 = 343118061034799104;
pub const XFLD_EVT_VOLREF_THEORETICAL_DELTA: u64 = 343118035264995328;
pub const XFLD_EVT_VOLREF_THEORETICAL_GAMMA: u64 = 343118039559962624;
pub const XFLD_EVT_VOLREF_THEORETICAL_GREEK_HITIME: u64 = 343118056739831808;
pub const XFLD_EVT_VOLREF_THEORETICAL_HITIME: u64 = 343118030970028032;
pub const XFLD_EVT_VOLREF_THEORETICAL_IV: u64 = 343118022380093440;
pub const XFLD_EVT_VOLREF_THEORETICAL_PRICE: u64 = 343118026675060736;
pub const XFLD_EVT_VOLREF_THEORETICAL_RHO: u64 = 343118043854929920;
pub const XFLD_EVT_VOLREF_THEORETICAL_THETA: u64 = 343118048149897216;
pub const XFLD_EVT_VOLREF_THEORETICAL_VEGA: u64 = 343118052444864512;
pub const XFLD_EVT_VOLREF_TIME_VALUE: u64 = 343118121164341248;
pub const XFLD_EVT_VOLREF_TRADE_DELTA: u64 = 343118082509635584;
pub const XFLD_EVT_VOLREF_TRADE_EOD_INDICATOR: u64 = 343118069624733696;
pub const XFLD_EVT_VOLREF_TRADE_EOD_PRICE: u64 = 343118198473752576;
pub const XFLD_EVT_VOLREF_TRADE_EXCHANGE: u64 = 343118185588850688;
pub const XFLD_EVT_VOLREF_TRADE_GAMMA: u64 = 343118086804602880;
pub const XFLD_EVT_VOLREF_TRADE_GREEK_HITIME: u64 = 343118103984472064;
pub const XFLD_EVT_VOLREF_TRADE_HITIME: u64 = 343118202768719872;
pub const XFLD_EVT_VOLREF_TRADE_IV: u64 = 343118073919700992;
pub const XFLD_EVT_VOLREF_TRADE_PRICE: u64 = 343118194178785280;
pub const XFLD_EVT_VOLREF_TRADE_QUALIFIERS: u64 = 343118211358654464;
pub const XFLD_EVT_VOLREF_TRADE_RHO: u64 = 343118091099570176;
pub const XFLD_EVT_VOLREF_TRADE_RISK_QUALIFIERS: u64 = 343118219948589056;
pub const XFLD_EVT_VOLREF_TRADE_RISK_SEQUENCE: u64 = 343118207063687168;
pub const XFLD_EVT_VOLREF_TRADE_SEQUENCE: u64 = 343118224243556352;
pub const XFLD_EVT_VOLREF_TRADE_SIZE: u64 = 343118189883817984;
pub const XFLD_EVT_VOLREF_TRADE_THETA: u64 = 343118095394537472;
pub const XFLD_EVT_VOLREF_TRADE_VEGA: u64 = 343118099689504768;
pub const XFLD_EVT_VOLREF_UNDERLYING_ASK_PRICE: u64 = 343118176998916096;
pub const XFLD_EVT_VOLREF_UNDERLYING_BID_PRICE: u64 = 343118172703948800;
pub const XFLD_EVT_VOLREF_UNDERLYING_EOD_INDICATOR: u64 = 343118164114014208;
pub const XFLD_EVT_VOLREF_UNDERLYING_THEORETICAL: u64 = 343118181293883392;
pub const XFLD_EVT_VOLREF_UNDERLYING_VOLUME: u64 = 343118168408981504;
pub const XFLD_EVT_VOLQR_ASK_IV: u64 = 343399480176934912;
pub const XFLD_EVT_VOLQR_BBO_ASK_EXCHANGE: u64 = 343399583256150016;
pub const XFLD_EVT_VOLQR_BBO_ASK_HITIME: u64 = 343399574666215424;
pub const XFLD_EVT_VOLQR_BBO_ASK_PRICE: u64 = 343399557486346240;
pub const XFLD_EVT_VOLQR_BBO_ASK_SIZE: u64 = 343399566076280832;
pub const XFLD_EVT_VOLQR_BBO_BID_EXCHANGE: u64 = 343399578961182720;
pub const XFLD_EVT_VOLQR_BBO_BID_HITIME: u64 = 343399570371248128;
pub const XFLD_EVT_VOLQR_BBO_BID_PRICE: u64 = 343399553191378944;
pub const XFLD_EVT_VOLQR_BBO_BID_SIZE: u64 = 343399561781313536;
pub const XFLD_EVT_VOLQR_BBO_TRADED_VOLUME: u64 = 343399587551117312;
pub const XFLD_EVT_VOLQR_BID_IV: u64 = 343399475881967616;
pub const XFLD_EVT_VOLQR_BORROW_COST: u64 = 343399540306477056;
pub const XFLD_EVT_VOLQR_FORWARD_PRICE: u64 = 343399536011509760;
pub const XFLD_EVT_VOLQR_INTRINSIC_VALUE: u64 = 343399544601444352;
pub const XFLD_EVT_VOLQR_MID_IV: u64 = 343399484471902208;
pub const XFLD_EVT_VOLQR_QUOTE_RISK_QUALIFIERS: u64 = 343399531716542464;
pub const XFLD_EVT_VOLQR_QUOTE_RISK_SEQUENCE: u64 = 343399527421575168;
pub const XFLD_EVT_VOLQR_THEORETICAL_DELTA: u64 = 343399501651771392;
pub const XFLD_EVT_VOLQR_THEORETICAL_GAMMA: u64 = 343399505946738688;
pub const XFLD_EVT_VOLQR_THEORETICAL_GREEK_HITIME: u64 = 343399523126607872;
pub const XFLD_EVT_VOLQR_THEORETICAL_HITIME: u64 = 343399497356804096;
pub const XFLD_EVT_VOLQR_THEORETICAL_IV: u64 = 343399488766869504;
pub const XFLD_EVT_VOLQR_THEORETICAL_PRICE: u64 = 343399493061836800;
pub const XFLD_EVT_VOLQR_THEORETICAL_RHO: u64 = 343399510241705984;
pub const XFLD_EVT_VOLQR_THEORETICAL_THETA: u64 = 343399514536673280;
pub const XFLD_EVT_VOLQR_THEORETICAL_VEGA: u64 = 343399518831640576;
pub const XFLD_EVT_VOLQR_TIME_VALUE: u64 = 343399548896411648;
pub const XFLD_EVT_VOLQR_UNDERLYING_ASK_PRICE: u64 = 343399604730986496;
pub const XFLD_EVT_VOLQR_UNDERLYING_BID_PRICE: u64 = 343399600436019200;
pub const XFLD_EVT_VOLQR_UNDERLYING_EOD_INDICATOR: u64 = 343399591846084608;
pub const XFLD_EVT_VOLQR_UNDERLYING_THEORETICAL: u64 = 343399609025953792;
pub const XFLD_EVT_VOLQR_UNDERLYING_VOLUME: u64 = 343399596141051904;
pub const XFLD_EVT_VOLTR_BBO_ASK_EXCHANGE: u64 = 343681045347958784;
pub const XFLD_EVT_VOLTR_BBO_ASK_HITIME: u64 = 343681036758024192;
pub const XFLD_EVT_VOLTR_BBO_ASK_PRICE: u64 = 343681019578155008;
pub const XFLD_EVT_VOLTR_BBO_ASK_SIZE: u64 = 343681028168089600;
pub const XFLD_EVT_VOLTR_BBO_BID_EXCHANGE: u64 = 343681041052991488;
pub const XFLD_EVT_VOLTR_BBO_BID_HITIME: u64 = 343681032463056896;
pub const XFLD_EVT_VOLTR_BBO_BID_PRICE: u64 = 343681015283187712;
pub const XFLD_EVT_VOLTR_BBO_BID_SIZE: u64 = 343681023873122304;
pub const XFLD_EVT_VOLTR_BBO_TRADED_VOLUME: u64 = 343681049642926080;
pub const XFLD_EVT_VOLTR_BORROW_COST: u64 = 343681002398285824;
pub const XFLD_EVT_VOLTR_EOD_IV: u64 = 343680959448612864;
pub const XFLD_EVT_VOLTR_FORWARD_PRICE: u64 = 343680998103318528;
pub const XFLD_EVT_VOLTR_INTRINSIC_VALUE: u64 = 343681006693253120;
pub const XFLD_EVT_VOLTR_TIME_VALUE: u64 = 343681010988220416;
pub const XFLD_EVT_VOLTR_TRADE_DELTA: u64 = 343680963743580160;
pub const XFLD_EVT_VOLTR_TRADE_EOD_INDICATOR: u64 = 343680950858678272;
pub const XFLD_EVT_VOLTR_TRADE_EOD_PRICE: u64 = 343681088297631744;
pub const XFLD_EVT_VOLTR_TRADE_EXCHANGE: u64 = 343681075412729856;
pub const XFLD_EVT_VOLTR_TRADE_GAMMA: u64 = 343680968038547456;
pub const XFLD_EVT_VOLTR_TRADE_GREEK_HITIME: u64 = 343680985218416640;
pub const XFLD_EVT_VOLTR_TRADE_HITIME: u64 = 343681092592599040;
pub const XFLD_EVT_VOLTR_TRADE_IV: u64 = 343680955153645568;
pub const XFLD_EVT_VOLTR_TRADE_PRICE: u64 = 343681084002664448;
pub const XFLD_EVT_VOLTR_TRADE_QUALIFIERS: u64 = 343681101182533632;
pub const XFLD_EVT_VOLTR_TRADE_RHO: u64 = 343680972333514752;
pub const XFLD_EVT_VOLTR_TRADE_RISK_QUALIFIERS: u64 = 343680993808351232;
pub const XFLD_EVT_VOLTR_TRADE_RISK_SEQUENCE: u64 = 343681096887566336;
pub const XFLD_EVT_VOLTR_TRADE_SEQUENCE: u64 = 343680989513383936;
pub const XFLD_EVT_VOLTR_TRADE_SIZE: u64 = 343681079707697152;
pub const XFLD_EVT_VOLTR_TRADE_THETA: u64 = 343680976628482048;
pub const XFLD_EVT_VOLTR_TRADE_VEGA: u64 = 343680980923449344;
pub const XFLD_EVT_VOLTR_UNDERLYING_ASK_PRICE: u64 = 343681066822795264;
pub const XFLD_EVT_VOLTR_UNDERLYING_BID_PRICE: u64 = 343681062527827968;
pub const XFLD_EVT_VOLTR_UNDERLYING_EOD_INDICATOR: u64 = 343681053937893376;
pub const XFLD_EVT_VOLTR_UNDERLYING_THEORETICAL: u64 = 343681071117762560;
pub const XFLD_EVT_VOLTR_UNDERLYING_VOLUME: u64 = 343681058232860672;
pub const XFLD_EVT_SRR_ISIN: u64 = 343962447310225408;
pub const XFLD_EVT_SRR_LISTING_MARKET: u64 = 343962443015258112;
pub const XFLD_EVT_SRR_LOT_SIZE: u64 = 343962438720290816;
pub const XFLD_EVT_SRR_SYMBOL_LABEL: u64 = 343962430130356224;
pub const XFLD_EVT_SRR_TEST_SYMBOL: u64 = 343962434425323520;
pub const XFLD_EVT_SIGSTAT_PRICE_TYPE: u64 = 344243905107066880;
pub const XFLD_EVT_SIGSTAT_SIGQF_STATUS: u64 = 344243909402034176;
pub const XFLD_EVT_SIGSTAT_SIGQV_STATUS: u64 = 344243913697001472;
pub const XFLD_EVT_SIGSTAT_SYMBOL_TYPE: u64 = 344243900812099584;
pub const XFLD_EVT_TS_DELETED_VOLUME: u64 = 344525405853581312;
pub const XFLD_EVT_TS_EXCHANGE_HITIME: u64 = 344525423033450496;
pub const XFLD_EVT_TS_FAR_PRICE: u64 = 344525392968679424;
pub const XFLD_EVT_TS_HIDDEN_VOLUME: u64 = 344525401558614016;
pub const XFLD_EVT_TS_LIT_TRADE_COUNT: u64 = 344525418738483200;
pub const XFLD_EVT_TS_PRICE_TYPE: u64 = 344525375788810240;
pub const XFLD_EVT_TS_QUALS: u64 = 344525410148548608;
pub const XFLD_EVT_TS_REMAINING_VOLUME: u64 = 344525414443515904;
pub const XFLD_EVT_TS_SIDE_ATTR: u64 = 344525388673712128;
pub const XFLD_EVT_TS_TRADE_VENUE: u64 = 344525384378744832;
pub const XFLD_EVT_TS_TRANSACTION_HITIME: u64 = 344525380083777536;
pub const XFLD_EVT_TS_VOLUME: u64 = 344525397263646720;
pub const XFLD_EVT_EXCH_STAT_AFTERNOON_VWAP: u64 = 344806863650422784;
pub const XFLD_EVT_EXCH_STAT_ALLDAY_VWAP: u64 = 344806867945390080;
pub const XFLD_EVT_EXCH_STAT_EXCHANGE_HITIME: u64 = 344806850765520896;
pub const XFLD_EVT_EXCH_STAT_HIGH_52WEEK: u64 = 344806889420226560;
pub const XFLD_EVT_EXCH_STAT_LOW_52WEEK: u64 = 344806893715193856;
pub const XFLD_EVT_EXCH_STAT_MORNING_VWAP: u64 = 344806859355455488;
pub const XFLD_EVT_EXCH_STAT_PRICE_TYPE: u64 = 344806855060488192;
pub const XFLD_EVT_EXCH_STAT_QUALS: u64 = 344806906600095744;
pub const XFLD_EVT_EXCH_STAT_SHORT_SELL_SHARES_TRADED: u64 = 344806898010161152;
pub const XFLD_EVT_EXCH_STAT_SHORT_SELL_TURNOVER: u64 = 344806902305128448;
pub const XFLD_EVT_EXCH_STAT_TRADE_COUNT_ON_BOOK: u64 = 344806876535324672;
pub const XFLD_EVT_EXCH_STAT_TRADE_COUNT_TOTAL: u64 = 344806872240357376;
pub const XFLD_EVT_EXCH_STAT_TURNOVER_ON_BOOK: u64 = 344806885125259264;
pub const XFLD_EVT_EXCH_STAT_TURNOVER_TOTAL: u64 = 344806880830291968;
pub const XFGRP_RT_EQTY_ALL_WITH_HITIME: u64 = 144537434900660224;
pub const XFGRP_RT_EQTY_IMBALANCE_AUCTION: u64 = 144537417720791040;
pub const XFGRP_RT_EQTY_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 144537422015758336;
pub const XFGRP_RT_EQTY_IMBALANCE_REGULATORY: u64 = 144537426310725632;
pub const XFGRP_RT_EQTY_INDICATION_OF_INTEREST: u64 = 144537430605692928;
pub const XFGRP_RT_OBS_ASK_WITH_HITIME: u64 = 145100376264146944;
pub const XFGRP_RT_OBS_ASK_WITH_PRIORITY_HITIME: u64 = 145100384854081536;
pub const XFGRP_RT_OBS_BID_WITH_HITIME: u64 = 145100371969179648;
pub const XFGRP_RT_OBS_BID_WITH_PRIORITY_HITIME: u64 = 145100380559114240;
pub const XFGRP_RT_PBS_ASK_WITH_CPMVOL_HITIME: u64 = 145663356282339328;
pub const XFGRP_RT_PBS_ASK_WITH_HITIME: u64 = 145663347692404736;
pub const XFGRP_RT_PBS_BID_WITH_CPMVOL_HITIME: u64 = 145663351987372032;
pub const XFGRP_RT_PBS_BID_WITH_HITIME: u64 = 145663343397437440;
pub const XFGRP_RT_PBS_IMBALANCE_AUCTION: u64 = 145663321922600960;
pub const XFGRP_RT_PBS_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 145663334807502848;
pub const XFGRP_RT_PBS_IMBALANCE_REGULATORY: u64 = 145663339102470144;
pub const XFGRP_RT_BS_ALL: u64 = 146226254696153088;
pub const XFGRP_RT_KLF_HEADER: u64 = 146789204649574400;
pub const XFGRP_RT_KLF_MATCH: u64 = 146789208944541696;
pub const XFGRP_RT_KLC_KEYLIST_ITEM: u64 = 147070679626285056;
pub const XFGRP_RT_CMTY_ALL_WITH_HITIME: u64 = 147352176077832192;
pub const XFGRP_RT_CMTY_IMBALANCE_AUCTION: u64 = 147352163192930304;
pub const XFGRP_RT_CMTY_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 147352167487897600;
pub const XFGRP_RT_CMTY_IMBALANCE_REGULATORY: u64 = 147352171782864896;
pub const XFGRP_RT_TPF_FEED_INFO: u64 = 149322483734937600;
pub const XFGRP_RT_TPF_MWCB: u64 = 149322488029904896;
pub const XFGRP_RT_TPL: u64 = 149603954416680960;
pub const XFGRP_RT_TPL_LATENCY: u64 = 149603958711648256;
pub const XFGRP_RT_TPS: u64 = 149885429393391616;
pub const XFGRP_RT_TPCLI: u64 = 150729854323523584;
pub const XFGRP_RT_DRS: u64 = 151855784295137280;
pub const XFGRP_RT_DRS_AUCTION: u64 = 151855771410235392;
pub const XFGRP_RT_DRS_DELIVERABLE: u64 = 151855767115268096;
pub const XFGRP_RT_DRS_LEG: u64 = 151855792885071872;
pub const XFGRP_RT_DRS_LEG_V3_8: u64 = 151855775705202688;
pub const XFGRP_RT_DRS_MATCH: u64 = 151855762820300800;
pub const XFGRP_RT_DRS_SIZE_RULE: u64 = 151855788590104576;
pub const XFGRP_RT_DRS_TICK: u64 = 151855758525333504;
pub const XFGRP_RT_DRS_UNDERLYING: u64 = 151855780000169984;
pub const XFGRP_RT_DRS_V3_8: u64 = 151855754230366208;
pub const XFGRP_RT_TPSUM: u64 = 153263129113919488;
pub const XFGRP_RT_TPLAT: u64 = 153544604090630144;
pub const XFGRP_RT_TPCR: u64 = 153826079067340800;
pub const XFGRP_RT_TPSR: u64 = 154107554044051456;
pub const XFGRP_RT_TPSE: u64 = 154670503997472768;
pub const XFGRP_RT_TPSER: u64 = 154951978974183424;
pub const XFGRP_RT_INSTGRP: u64 = 155514928927604736;
pub const XFGRP_WO_KLE_CONSTITUENT: u64 = 217439423803949056;
pub const XFGRP_RW_BASKET_CONSTITUENT: u64 = 360710191244640256;
pub const XFGRP_RW_BASKET_HEADER: u64 = 360710186949672960;
pub const XFGRP_RW_KLD_CONSTITUENT: u64 = 360991670516318208;
pub const XFGRP_RW_KLD_HEADER: u64 = 360991666221350912;
pub const XFGRP_RW_KLFD_HEADER: u64 = 361273136903094272;
pub const XFGRP_RW_BCONS_ALL: u64 = 361554611879804928;
pub const XFGRP_ST_EQTY_ALL_WITH_HITIME: u64 = 432767811052371968;
pub const XFGRP_ST_EQTY_IMBALANCE_AUCTION: u64 = 432767793872502784;
pub const XFGRP_ST_EQTY_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 432767798167470080;
pub const XFGRP_ST_EQTY_IMBALANCE_REGULATORY: u64 = 432767802462437376;
pub const XFGRP_ST_EQTY_INDICATION_OF_INTEREST: u64 = 432767806757404672;
pub const XFGRP_ST_CMTY_ALL_WITH_HITIME: u64 = 433049277439148032;
pub const XFGRP_ST_CMTY_IMBALANCE_AUCTION: u64 = 433049264554246144;
pub const XFGRP_ST_CMTY_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 433049268849213440;
pub const XFGRP_ST_CMTY_IMBALANCE_REGULATORY: u64 = 433049273144180736;
pub const XFGRP_ST_TPL: u64 = 434175155871154176;
pub const XFGRP_ST_TPL_LATENCY: u64 = 434175160166121472;
pub const XFGRP_ST_TPS: u64 = 434456630847864832;
pub const XFGRP_ST_TPCLI: u64 = 435301055777996800;
pub const XFGRP_ST_TPLG: u64 = 436145480708128768;
pub const XFGRP_ST_TPLG_LINE_INFO: u64 = 436145485003096064;
pub const XFGRP_ST_TPSUM: u64 = 436989905638260736;
pub const XFGRP_ST_TPLAT: u64 = 437271380614971392;
pub const XFGRP_ST_TPCR: u64 = 437552855591682048;
pub const XFGRP_ST_TPSR: u64 = 437834330568392704;
pub const XFGRP_ST_TPSE: u64 = 438397280521814016;
pub const XFGRP_ST_TPSER: u64 = 438678755498524672;
pub const XFGRP_EVT_TIMING: u64 = 288371152294772736;
pub const XFGRP_EVT_EQTY_TRD: u64 = 289778522883358720;
pub const XFGRP_EVT_EQTY_TRD_ACCUM: u64 = 289778518588391424;
pub const XFGRP_EVT_EQTY_TRD_ALL: u64 = 289778505703489536;
pub const XFGRP_EVT_EQTY_TRD_COMMON: u64 = 289778509998456832;
pub const XFGRP_EVT_EQTY_TRD_REF: u64 = 289778527178326016;
pub const XFGRP_EVT_EQTY_QUO: u64 = 290059989270134784;
pub const XFGRP_EVT_EQTY_QUO_ALL: u64 = 290059980680200192;
pub const XFGRP_EVT_EQTY_QUO_COMMON: u64 = 290059984975167488;
pub const XFGRP_EVT_EQTY_QUO_INDICATION_OF_INTEREST: u64 = 290059997860069376;
pub const XFGRP_EVT_EQTY_QUO_WITH_CPMVOL_ALL: u64 = 290059993565102080;
pub const XFGRP_EVT_EQTY_REFR_ALL_WITH_HITIME: u64 = 290341481426714624;
pub const XFGRP_EVT_EQTY_REFR_COMMON: u64 = 290341455656910848;
pub const XFGRP_EVT_EQTY_REFR_IMBALANCE_AUCTION: u64 = 290341464246845440;
pub const XFGRP_EVT_EQTY_REFR_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 290341468541812736;
pub const XFGRP_EVT_EQTY_REFR_IMBALANCE_REGULATORY: u64 = 290341472836780032;
pub const XFGRP_EVT_EQTY_REFR_INDICATION_OF_INTEREST: u64 = 290341477131747328;
pub const XFGRP_EVT_EQTY_CANC: u64 = 290622939223556096;
pub const XFGRP_EVT_EQTY_CANC_ACCUM: u64 = 290622947813490688;
pub const XFGRP_EVT_EQTY_CANC_ALL: u64 = 290622930633621504;
pub const XFGRP_EVT_EQTY_CANC_COMMON: u64 = 290622934928588800;
pub const XFGRP_EVT_EQTY_CANC_REF: u64 = 290622943518523392;
pub const XFGRP_EVT_EQTY_CORR: u64 = 290904414200266752;
pub const XFGRP_EVT_EQTY_CORR_ACCUM: u64 = 290904427085168640;
pub const XFGRP_EVT_EQTY_CORR_ALL: u64 = 290904405610332160;
pub const XFGRP_EVT_EQTY_CORR_COMMON: u64 = 290904409905299456;
pub const XFGRP_EVT_EQTY_CORR_REF: u64 = 290904422790201344;
pub const XFGRP_EVT_EQTY_CORR_REF_ORIG: u64 = 290904418495234048;
pub const XFGRP_EVT_OBREF_BID_COMMON: u64 = 291185876292075520;
pub const XFGRP_EVT_OBREF_BID_IMBALANCE_AUCTION: u64 = 291185884882010112;
pub const XFGRP_EVT_OBREF_BID_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 291185889176977408;
pub const XFGRP_EVT_OBREF_BID_IMBALANCE_REGULATORY: u64 = 291185893471944704;
pub const XFGRP_EVT_OBREF_BID_WITH_HITIME: u64 = 291185902061879296;
pub const XFGRP_EVT_OBREF_BID_WITH_PRIORITY_HITIME: u64 = 291185906356846592;
pub const XFGRP_EVT_OBREF_ASK_COMMON: u64 = 291467351268786176;
pub const XFGRP_EVT_OBREF_ASK_IMBALANCE_AUCTION: u64 = 291467359858720768;
pub const XFGRP_EVT_OBREF_ASK_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 291467364153688064;
pub const XFGRP_EVT_OBREF_ASK_IMBALANCE_REGULATORY: u64 = 291467368448655360;
pub const XFGRP_EVT_OBREF_ASK_WITH_HITIME: u64 = 291467377038589952;
pub const XFGRP_EVT_OBREF_ASK_WITH_PRIORITY_HITIME: u64 = 291467381333557248;
pub const XFGRP_EVT_OBUPD_COMMON: u64 = 291748834835431424;
pub const XFGRP_EVT_OBUPD_WITH_HITIME: u64 = 291748847720333312;
pub const XFGRP_EVT_OBUPD_WITH_PRIORITY_HITIME: u64 = 291748852015300608;
pub const XFGRP_EVT_PBREF_BID_COMMON: u64 = 292030301222207488;
pub const XFGRP_EVT_PBREF_BID_IMBALANCE_AUCTION: u64 = 292030309812142080;
pub const XFGRP_EVT_PBREF_BID_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 292030318402076672;
pub const XFGRP_EVT_PBREF_BID_IMBALANCE_REGULATORY: u64 = 292030322697043968;
pub const XFGRP_EVT_PBREF_BID_WITH_CPMVOL_HITIME: u64 = 292030331286978560;
pub const XFGRP_EVT_PBREF_BID_WITH_HITIME: u64 = 292030326992011264;
pub const XFGRP_EVT_PBREF_ASK_COMMON: u64 = 292311776198918144;
pub const XFGRP_EVT_PBREF_ASK_IMBALANCE_AUCTION: u64 = 292311784788852736;
pub const XFGRP_EVT_PBREF_ASK_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 292311793378787328;
pub const XFGRP_EVT_PBREF_ASK_IMBALANCE_REGULATORY: u64 = 292311797673754624;
pub const XFGRP_EVT_PBREF_ASK_WITH_CPMVOL_HITIME: u64 = 292311806263689216;
pub const XFGRP_EVT_PBREF_ASK_WITH_HITIME: u64 = 292311801968721920;
pub const XFGRP_EVT_PBUPD_COMMON: u64 = 292593259765563392;
pub const XFGRP_EVT_PBUPD_CPMVOL: u64 = 292593285535367168;
pub const XFGRP_EVT_PBUPD_WITH_HITIME: u64 = 292593294125301760;
pub const XFGRP_EVT_PBUPD_WITH_ROW_LEVEL_HITIME: u64 = 292593298420269056;
pub const XFGRP_EVT_CMTY_REFR_ALL_WITH_HITIME: u64 = 292874747627175936;
pub const XFGRP_EVT_CMTY_REFR_COMMON: u64 = 292874726152339456;
pub const XFGRP_EVT_CMTY_REFR_IMBALANCE_AUCTION: u64 = 292874734742274048;
pub const XFGRP_EVT_CMTY_REFR_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 292874739037241344;
pub const XFGRP_EVT_CMTY_REFR_IMBALANCE_REGULATORY: u64 = 292874743332208640;
pub const XFGRP_EVT_CMTY_REFR_WITH_QUALS_ALL: u64 = 292874730447306752;
pub const XFGRP_EVT_CMTY_TRD: u64 = 293156209718984704;
pub const XFGRP_EVT_CMTY_TRD_ACCUM: u64 = 293156214013952000;
pub const XFGRP_EVT_CMTY_TRD_ALL: u64 = 293156201129050112;
pub const XFGRP_EVT_CMTY_TRD_COMMON: u64 = 293156205424017408;
pub const XFGRP_EVT_CMTY_TRD_REF: u64 = 293156218308919296;
pub const XFGRP_EVT_CMTY_QUO: u64 = 293437684695695360;
pub const XFGRP_EVT_CMTY_QUO_ALL: u64 = 293437676105760768;
pub const XFGRP_EVT_CMTY_QUO_COMMON: u64 = 293437680400728064;
pub const XFGRP_EVT_CMTY_CANC: u64 = 293719159672406016;
pub const XFGRP_EVT_CMTY_CANC_ACCUM: u64 = 293719168262340608;
pub const XFGRP_EVT_CMTY_CANC_ALL: u64 = 293719151082471424;
pub const XFGRP_EVT_CMTY_CANC_COMMON: u64 = 293719155377438720;
pub const XFGRP_EVT_CMTY_CANC_REF: u64 = 293719163967373312;
pub const XFGRP_EVT_CMTY_CORR: u64 = 294000634649116672;
pub const XFGRP_EVT_CMTY_CORR_ACCUM: u64 = 294000647534018560;
pub const XFGRP_EVT_CMTY_CORR_ALL: u64 = 294000626059182080;
pub const XFGRP_EVT_CMTY_CORR_COMMON: u64 = 294000630354149376;
pub const XFGRP_EVT_CMTY_CORR_REF: u64 = 294000643239051264;
pub const XFGRP_EVT_CMTY_CORR_REF_ORIG: u64 = 294000638944083968;
pub const XFGRP_EVT_NAVU_ALL: u64 = 294563567422668800;
pub const XFGRP_EVT_BLU_ALL: u64 = 295126521671057408;
pub const XFGRP_EVT_BDR_CONSTITUENT: u64 = 295407996647768064;
pub const XFGRP_EVT_BDR_HEADER: u64 = 295407992352800768;
pub const XFGRP_EVT_BCONSR_ALL: u64 = 296252417282932736;
pub const XFGRP_EVT_ST_EQTY_REFR_ALL_WITH_HITIME: u64 = 296815393006157824;
pub const XFGRP_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION: u64 = 296815375826288640;
pub const XFGRP_EVT_ST_EQTY_REFR_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 296815380121255936;
pub const XFGRP_EVT_ST_EQTY_REFR_IMBALANCE_REGULATORY: u64 = 296815384416223232;
pub const XFGRP_EVT_ST_EQTY_REFR_INDICATION_OF_INTEREST: u64 = 296815388711190528;
pub const XFGRP_EVT_ST_CMTY_REFR_ALL_WITH_HITIME: u64 = 297096863687901184;
pub const XFGRP_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION: u64 = 297096850802999296;
pub const XFGRP_EVT_ST_CMTY_REFR_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 297096855097966592;
pub const XFGRP_EVT_ST_CMTY_REFR_IMBALANCE_REGULATORY: u64 = 297096859392933888;
pub const XFGRP_EVT_ST_CMTY_REFR_WITH_QUALS_ALL: u64 = 297096846508032000;
pub const XFGRP_EVT_KLDR_CONSTITUENT: u64 = 299067167050039296;
pub const XFGRP_EVT_KLDR_HEADER: u64 = 299067171345006592;
pub const XFGRP_EVT_KLFDR_HEADER: u64 = 299911591980171264;
pub const XFGRP_EVT_KLM_MATCH: u64 = 301037496181981184;
pub const XFGRP_EVT_KLMR_MATCH: u64 = 301318966863724544;
pub const XFGRP_EVT_KLCR_KEYLIST_ITEM: u64 = 301600441840435200;
pub const XFGRP_EVT_KLCU_KEYLIST_ITEM: u64 = 301881916817145856;
pub const XFGRP_EVT_OEX: u64 = 303007846788759552;
pub const XFGRP_EVT_OEX_ALL: u64 = 303007851083726848;
pub const XFGRP_EVT_OEX_ALL_V3_1_7: u64 = 303007825313923072;
pub const XFGRP_EVT_OEX_COMMON: u64 = 303007829608890368;
pub const XFGRP_EVT_OEX_V3_1_7: u64 = 303007833903857664;
pub const XFGRP_EVT_OIMB: u64 = 303289308880568320;
pub const XFGRP_EVT_OIMB_ALL: u64 = 303289300290633728;
pub const XFGRP_EVT_OIMB_COMMON: u64 = 303289304585601024;
pub const XFGRP_EVT_OIMB_IMBALANCE_AUCTION: u64 = 303289313175535616;
pub const XFGRP_EVT_OIMB_IMBALANCE_AUCTION_CLEARING: u64 = 303289317470502912;
pub const XFGRP_EVT_OIMB_IMBALANCE_AUCTION_WITH_UNPAIRED: u64 = 303289321765470208;
pub const XFGRP_EVT_OIMB_IMBALANCE_REGULATORY: u64 = 303289326060437504;
pub const XFGRP_EVT_MKTD: u64 = 303570783857278976;
pub const XFGRP_EVT_MKTD_ALL: u64 = 303570775267344384;
pub const XFGRP_EVT_MKTD_COMMON: u64 = 303570779562311680;
pub const XFGRP_EVT_TRDACT_ALL: u64 = 303852250244055040;
pub const XFGRP_EVT_TRDACT_COMMON: u64 = 303852263128956928;
pub const XFGRP_EVT_TRDACT_WITH_LULD_ALL: u64 = 303852267423924224;
pub const XFGRP_EVT_TPFR: u64 = 307229941374648320;
pub const XFGRP_EVT_TPFR_MWCB: u64 = 307229945669615616;
pub const XFGRP_EVT_TPFU: u64 = 307511416351358976;
pub const XFGRP_EVT_TPL: u64 = 307792891328069632;
pub const XFGRP_EVT_TPL_LATENCY: u64 = 307792895623036928;
pub const XFGRP_EVT_TPS: u64 = 308074366304780288;
pub const XFGRP_EVT_TPCLI: u64 = 308918791234912256;
pub const XFGRP_EVT_ST_TPL: u64 = 309200266211622912;
pub const XFGRP_EVT_ST_TPL_LATENCY: u64 = 309200270506590208;
pub const XFGRP_EVT_ST_TPS: u64 = 309481741188333568;
pub const XFGRP_EVT_ST_TPCLI: u64 = 310326166118465536;
pub const XFGRP_EVT_ST_TPLG: u64 = 311170591048597504;
pub const XFGRP_EVT_ST_TPLG_LINE_INFO: u64 = 311170595343564800;
pub const XFGRP_EVT_DRR_AUCTION: u64 = 312015037453565952;
pub const XFGRP_EVT_DRR_DELIVERABLE: u64 = 312015033158598656;
pub const XFGRP_EVT_DRR_INSTRUMENT: u64 = 312015063223369728;
pub const XFGRP_EVT_DRR_LEG: u64 = 312015058928402432;
pub const XFGRP_EVT_DRR_LEG_V3_8: u64 = 312015041748533248;
pub const XFGRP_EVT_DRR_MATCH: u64 = 312015028863631360;
pub const XFGRP_EVT_DRR_PRODUCT: u64 = 312015067518337024;
pub const XFGRP_EVT_DRR_SIZE_RULE: u64 = 312015054633435136;
pub const XFGRP_EVT_DRR_TICK: u64 = 312015024568664064;
pub const XFGRP_EVT_DRR_UNDERLYING: u64 = 312015046043500544;
pub const XFGRP_EVT_DRR_V3_8: u64 = 312015020273696768;
pub const XFGRP_EVT_OOB: u64 = 312296495250407424;
pub const XFGRP_EVT_OOB_COMMON: u64 = 312296490955440128;
pub const XFGRP_EVT_OOB_ENTRY: u64 = 312296499545374720;
pub const XFGRP_EVT_OOB_PARTY: u64 = 312296503840342016;
pub const XFGRP_EVT_FXSPOT_REFR_ALL: u64 = 312577965932150784;
pub const XFGRP_EVT_FXSPOT_QUO_ALL: u64 = 312859440908861440;
pub const XFGRP_EVT_FXFWD_REFR_ALL: u64 = 313140915885572096;
pub const XFGRP_EVT_FXFWD_QUO_ALL: u64 = 313422390862282752;
pub const XFGRP_EVT_FXSWAP_REFR_ALL: u64 = 313703865838993408;
pub const XFGRP_EVT_FXSWAP_QUO_ALL: u64 = 313985340815704064;
pub const XFGRP_EVT_TPSUMR: u64 = 314266815792414720;
pub const XFGRP_EVT_TPLATR: u64 = 314548290769125376;
pub const XFGRP_EVT_TPCRR: u64 = 314829765745836032;
pub const XFGRP_EVT_TPSRR: u64 = 315111240722546688;
pub const XFGRP_EVT_ST_TPSUMR: u64 = 315392715699257344;
pub const XFGRP_EVT_ST_TPLATR: u64 = 315674190675968000;
pub const XFGRP_EVT_ST_TPCRR: u64 = 315955665652678656;
pub const XFGRP_EVT_ST_TPSRR: u64 = 316237140629389312;
pub const XFGRP_EVT_TPMWCBU: u64 = 316518615606099968;
pub const XFGRP_EVT_TPSERR: u64 = 317363040536231936;
pub const XFGRP_EVT_ST_TPSERR: u64 = 317644515512942592;
pub const XFGRP_EVT_TPSESR: u64 = 317925990489653248;
pub const XFGRP_EVT_ST_TPSESR: u64 = 318207465466363904;
pub const XFGRP_EVT_RFQ: u64 = 319051890396495872;
pub const XFGRP_EVT_RFQ_ALL: u64 = 319051894691463168;
pub const XFGRP_EVT_INDPR: u64 = 319333369668173824;
pub const XFGRP_EVT_INDPR_COMMON: u64 = 319333365373206528;
pub const XFGRP_EVT_INSTGRP_REFR: u64 = 319614840349917184;
pub const XFGRP_EVT_INSTGRP_UPDATE: u64 = 319896315326627840;
pub const XFGRP_EVT_VOLREF_VOLATILITY_BBO: u64 = 343258742688579584;
pub const XFGRP_EVT_VOLREF_VOLATILITY_MISC: u64 = 343258738393612288;
pub const XFGRP_EVT_VOLREF_VOLATILITY_TRADE: u64 = 343258751278514176;
pub const XFGRP_EVT_VOLREF_VOLATILITY_UNDERLYING: u64 = 343258746983546880;
pub const XFGRP_EVT_VOLQR_VOLATILITY_BBO: u64 = 343540217665290240;
pub const XFGRP_EVT_VOLQR_VOLATILITY_MISC: u64 = 343540213370322944;
pub const XFGRP_EVT_VOLQR_VOLATILITY_UNDERLYING: u64 = 343540221960257536;
pub const XFGRP_EVT_VOLTR_VOLATILITY_BBO: u64 = 343821692642000896;
pub const XFGRP_EVT_VOLTR_VOLATILITY_MISC: u64 = 343821688347033600;
pub const XFGRP_EVT_VOLTR_VOLATILITY_TRADE: u64 = 343821701231935488;
pub const XFGRP_EVT_VOLTR_VOLATILITY_UNDERLYING: u64 = 343821696936968192;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XM_DATA_TYPE_INFO"][::std::mem::size_of::<XM_DATA_TYPE_INFO>() - 72usize];
    ["Alignment of XM_DATA_TYPE_INFO"][::std::mem::align_of::<XM_DATA_TYPE_INFO>() - 4usize];
    ["Offset of field: XM_DATA_TYPE_INFO::xdti_datatype"]
        [::std::mem::offset_of!(XM_DATA_TYPE_INFO, xdti_datatype) - 0usize];
    ["Offset of field: XM_DATA_TYPE_INFO::xdti_type"]
        [::std::mem::offset_of!(XM_DATA_TYPE_INFO, xdti_type) - 2usize];
    ["Offset of field: XM_DATA_TYPE_INFO::xdti_bitsize"]
        [::std::mem::offset_of!(XM_DATA_TYPE_INFO, xdti_bitsize) - 4usize];
    ["Offset of field: XM_DATA_TYPE_INFO::xdti_name"]
        [::std::mem::offset_of!(XM_DATA_TYPE_INFO, xdti_name) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XM_STRUCTFIELD_INFO"][::std::mem::size_of::<XM_STRUCTFIELD_INFO>() - 80usize];
    ["Alignment of XM_STRUCTFIELD_INFO"][::std::mem::align_of::<XM_STRUCTFIELD_INFO>() - 4usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_datatype"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_datatype) - 0usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_struct_datatype"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_struct_datatype) - 2usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_bitsize"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_bitsize) - 4usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_bitoffset"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_bitoffset) - 8usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_prefix_len"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_prefix_len) - 10usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_array_count"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_array_count) - 12usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::XSFI_RESERVED_01"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, XSFI_RESERVED_01) - 14usize];
    ["Offset of field: XM_STRUCTFIELD_INFO::xsfi_name"]
        [::std::mem::offset_of!(XM_STRUCTFIELD_INFO, xsfi_name) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XM_ENUM_VALUE_INFO"][::std::mem::size_of::<XM_ENUM_VALUE_INFO>() - 80usize];
    ["Alignment of XM_ENUM_VALUE_INFO"][::std::mem::align_of::<XM_ENUM_VALUE_INFO>() - 8usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::xevi_datatype"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, xevi_datatype) - 0usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::xevi_prefix_len"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, xevi_prefix_len) - 2usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::XEVI_RESERVED_00"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, XEVI_RESERVED_00) - 3usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::XEVI_RESERVED_01"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, XEVI_RESERVED_01) - 4usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::xevi_value"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, xevi_value) - 8usize];
    ["Offset of field: XM_ENUM_VALUE_INFO::xevi_name"]
        [::std::mem::offset_of!(XM_ENUM_VALUE_INFO, xevi_name) - 16usize];
};
pub const XC_EXTIME_OLDEST_POSSIBLE: XC_EXTIME = -9223372036854775808;
pub const XC_TIME_DATE_CUTOFF: XC_TIME = -2145386496;
pub const XC_TIME_DAYSBACK_CUTOFF: XC_TIME = -2143289344;
pub const XC_EXTIME_DATE_CUTOFF: XC_EXTIME = -140735338774528;
pub const XC_EXTIME_MSECSBACK_CUTOFF: XC_EXTIME = -70368744177664;
pub const XC_DATE_ID_PATTERN: xuint32 = 1024;
pub const XC_DAYSBACK_ID_PATTERN: xuint32 = 1025;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DATE__bindgen_ty_1"][::std::mem::size_of::<XC_DATE__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_DATE__bindgen_ty_1"]
        [::std::mem::align_of::<XC_DATE__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DATE"][::std::mem::size_of::<XC_DATE>() - 4usize];
    ["Alignment of XC_DATE"][::std::mem::align_of::<XC_DATE>() - 1usize];
    ["Offset of field: XC_DATE::xdt_raw"][::std::mem::offset_of!(XC_DATE, xdt_raw) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DAYSBACK"][::std::mem::size_of::<XC_DAYSBACK>() - 4usize];
    ["Alignment of XC_DAYSBACK"][::std::mem::align_of::<XC_DAYSBACK>() - 1usize];
};
pub const XC_MAX_DAYSBACK: xuint32 = 2048;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DATETIME"][::std::mem::size_of::<XC_DATETIME>() - 8usize];
    ["Alignment of XC_DATETIME"][::std::mem::align_of::<XC_DATETIME>() - 1usize];
    ["Offset of field: XC_DATETIME::xdtm_time"]
        [::std::mem::offset_of!(XC_DATETIME, xdtm_time) - 0usize];
    ["Offset of field: XC_DATETIME::xdtm_date"]
        [::std::mem::offset_of!(XC_DATETIME, xdtm_date) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_IPV4_ADDRESS"][::std::mem::size_of::<XC_IPV4_ADDRESS>() - 4usize];
    ["Alignment of XC_IPV4_ADDRESS"][::std::mem::align_of::<XC_IPV4_ADDRESS>() - 1usize];
    ["Offset of field: XC_IPV4_ADDRESS::xip_u32"]
        [::std::mem::offset_of!(XC_IPV4_ADDRESS, xip_u32) - 0usize];
    ["Offset of field: XC_IPV4_ADDRESS::xip_octets"]
        [::std::mem::offset_of!(XC_IPV4_ADDRESS, xip_octets) - 0usize];
};
pub const XC_BLANK_PRICE: xint32 = -2147483648;
pub const XC_BLANK_PRICE_HIGH: xint32 = 2147483647;
pub const XC_MARKET_PRICE: xint32 = 2147483646;
pub const XC_OVERFLOW_PRICE: xint32 = 2147483645;
pub const XC_UNDERFLOW_PRICE: xint32 = -2147483646;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_PRICE_DESC"][::std::mem::size_of::<XC_PRICE_DESC>() - 8usize];
    ["Alignment of XC_PRICE_DESC"][::std::mem::align_of::<XC_PRICE_DESC>() - 1usize];
    ["Offset of field: XC_PRICE_DESC::xpd_price"]
        [::std::mem::offset_of!(XC_PRICE_DESC, xpd_price) - 0usize];
    ["Offset of field: XC_PRICE_DESC::XPD_RESERVED_01"]
        [::std::mem::offset_of!(XC_PRICE_DESC, XPD_RESERVED_01) - 5usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EXCHANGE_ID"][::std::mem::size_of::<XC_EXCHANGE_ID>() - 2usize];
    ["Alignment of XC_EXCHANGE_ID"][::std::mem::align_of::<XC_EXCHANGE_ID>() - 1usize];
    ["Offset of field: XC_EXCHANGE_ID::xex_ch"]
        [::std::mem::offset_of!(XC_EXCHANGE_ID, xex_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_COUNTRY_ID"][::std::mem::size_of::<XC_COUNTRY_ID>() - 2usize];
    ["Alignment of XC_COUNTRY_ID"][::std::mem::align_of::<XC_COUNTRY_ID>() - 1usize];
    ["Offset of field: XC_COUNTRY_ID::xcc_ch"]
        [::std::mem::offset_of!(XC_COUNTRY_ID, xcc_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_CURRENCY_ID"][::std::mem::size_of::<XC_CURRENCY_ID>() - 3usize];
    ["Alignment of XC_CURRENCY_ID"][::std::mem::align_of::<XC_CURRENCY_ID>() - 1usize];
    ["Offset of field: XC_CURRENCY_ID::xcur_ch"]
        [::std::mem::offset_of!(XC_CURRENCY_ID, xcur_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_AUTHORIZATION"][::std::mem::size_of::<XC_AUTHORIZATION>() - 4usize];
    ["Alignment of XC_AUTHORIZATION"][::std::mem::align_of::<XC_AUTHORIZATION>() - 1usize];
    ["Offset of field: XC_AUTHORIZATION::authorization"]
        [::std::mem::offset_of!(XC_AUTHORIZATION, authorization) - 0usize];
    ["Offset of field: XC_AUTHORIZATION::u32_"]
        [::std::mem::offset_of!(XC_AUTHORIZATION, u32_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ALTERNATE_ID"][::std::mem::size_of::<XC_ALTERNATE_ID>() - 16usize];
    ["Alignment of XC_ALTERNATE_ID"][::std::mem::align_of::<XC_ALTERNATE_ID>() - 1usize];
    ["Offset of field: XC_ALTERNATE_ID::xalt_ch"]
        [::std::mem::offset_of!(XC_ALTERNATE_ID, xalt_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_REFERENCE_STRING"][::std::mem::size_of::<XC_REFERENCE_STRING>() - 72usize];
    ["Alignment of XC_REFERENCE_STRING"][::std::mem::align_of::<XC_REFERENCE_STRING>() - 1usize];
    ["Offset of field: XC_REFERENCE_STRING::str_"]
        [::std::mem::offset_of!(XC_REFERENCE_STRING, str_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_MMID"][::std::mem::size_of::<XC_MMID>() - 6usize];
    ["Alignment of XC_MMID"][::std::mem::align_of::<XC_MMID>() - 1usize];
    ["Offset of field: XC_MMID::xmmid_ch"][::std::mem::offset_of!(XC_MMID, xmmid_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADE_VENUE"][::std::mem::size_of::<XC_TRADE_VENUE>() - 4usize];
    ["Alignment of XC_TRADE_VENUE"][::std::mem::align_of::<XC_TRADE_VENUE>() - 1usize];
    ["Offset of field: XC_TRADE_VENUE::ch"][::std::mem::offset_of!(XC_TRADE_VENUE, ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_1"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_1>() - 12usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_1"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_1::xoid_ch"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_1, xoid_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_2"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_2>() - 12usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_2"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_2>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_2::xoid_bcd_pair"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_2, xoid_bcd_pair) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_3"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_3>() - 8usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_3"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_3>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_3::xoid_uint1"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_3, xoid_uint1) - 0usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_3::xoid_uint2"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_3, xoid_uint2) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_4"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_4>() - 8usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_4"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_4>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_4::xoid_alpha36"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_4, xoid_alpha36) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_5"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_5>() - 8usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_5"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_5>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_5::xoid_raw64"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_5, xoid_raw64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID__bindgen_ty_6"]
        [::std::mem::size_of::<XC_ORDER_REF_ID__bindgen_ty_6>() - 12usize];
    ["Alignment of XC_ORDER_REF_ID__bindgen_ty_6"]
        [::std::mem::align_of::<XC_ORDER_REF_ID__bindgen_ty_6>() - 1usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_6::xoid_sym_uint_symbol"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_6, xoid_sym_uint_symbol) - 0usize];
    ["Offset of field: XC_ORDER_REF_ID__bindgen_ty_6::xoid_sym_uint_refid"]
        [::std::mem::offset_of!(XC_ORDER_REF_ID__bindgen_ty_6, xoid_sym_uint_refid) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_ORDER_REF_ID"][::std::mem::size_of::<XC_ORDER_REF_ID>() - 12usize];
    ["Alignment of XC_ORDER_REF_ID"][::std::mem::align_of::<XC_ORDER_REF_ID>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_SYMBOL"][::std::mem::size_of::<XC_SYMBOL>() - 20usize];
    ["Alignment of XC_SYMBOL"][::std::mem::align_of::<XC_SYMBOL>() - 1usize];
    ["Offset of field: XC_SYMBOL::xsym_ch"][::std::mem::offset_of!(XC_SYMBOL, xsym_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_KEY"][::std::mem::size_of::<XC_KEY>() - 24usize];
    ["Alignment of XC_KEY"][::std::mem::align_of::<XC_KEY>() - 1usize];
    ["Offset of field: XC_KEY::xk_exchange"][::std::mem::offset_of!(XC_KEY, xk_exchange) - 0usize];
    ["Offset of field: XC_KEY::xk_country"][::std::mem::offset_of!(XC_KEY, xk_country) - 2usize];
    ["Offset of field: XC_KEY::xk_symbol"][::std::mem::offset_of!(XC_KEY, xk_symbol) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_KEY_DESC"][::std::mem::size_of::<XC_KEY_DESC>() - 32usize];
    ["Alignment of XC_KEY_DESC"][::std::mem::align_of::<XC_KEY_DESC>() - 1usize];
    ["Offset of field: XC_KEY_DESC::xkd_key"]
        [::std::mem::offset_of!(XC_KEY_DESC, xkd_key) - 0usize];
    ["Offset of field: XC_KEY_DESC::XKD_RESERVED_01"]
        [::std::mem::offset_of!(XC_KEY_DESC, XKD_RESERVED_01) - 25usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1::xfds_string_type"][::std::mem::offset_of!(
        XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1,
        xfds_string_type
    ) - 0usize];
    ["Offset of field: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1::xfds_field_width"][::std::mem::offset_of!(
        XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1,
        xfds_field_width
    ) - 2usize];
    ["Offset of field: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1::xfds_options"]
        [::std::mem::offset_of!(XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1, xfds_options) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Alignment of XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2::xfdb_convert_type"][::std::mem::offset_of!(
        XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2,
        xfdb_convert_type
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FIELD_DESC__bindgen_ty_1"]
        [::std::mem::size_of::<XC_FIELD_DESC__bindgen_ty_1>() - 12usize];
    ["Alignment of XC_FIELD_DESC__bindgen_ty_1"]
        [::std::mem::align_of::<XC_FIELD_DESC__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_FIELD_DESC__bindgen_ty_1::RESERVED_02"]
        [::std::mem::offset_of!(XC_FIELD_DESC__bindgen_ty_1, RESERVED_02) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FIELD_DESC"][::std::mem::size_of::<XC_FIELD_DESC>() - 48usize];
    ["Alignment of XC_FIELD_DESC"][::std::mem::align_of::<XC_FIELD_DESC>() - 1usize];
    ["Offset of field: XC_FIELD_DESC::xfd_id"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_id) - 0usize];
    ["Offset of field: XC_FIELD_DESC::xfd_buffer_address"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_buffer_address) - 8usize];
    ["Offset of field: XC_FIELD_DESC::xfd_elmsiz"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_elmsiz) - 16usize];
    ["Offset of field: XC_FIELD_DESC::xfd_in_count"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_in_count) - 20usize];
    ["Offset of field: XC_FIELD_DESC::xfd_out_count"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_out_count) - 24usize];
    ["Offset of field: XC_FIELD_DESC::xfd_status"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_status) - 28usize];
    ["Offset of field: XC_FIELD_DESC::xfd_desc_size"]
        [::std::mem::offset_of!(XC_FIELD_DESC, xfd_desc_size) - 32usize];
    ["Offset of field: XC_FIELD_DESC::XFD_RESERVED_00"]
        [::std::mem::offset_of!(XC_FIELD_DESC, XFD_RESERVED_00) - 33usize];
    ["Offset of field: XC_FIELD_DESC::XFD_RESERVED_01"]
        [::std::mem::offset_of!(XC_FIELD_DESC, XFD_RESERVED_01) - 34usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EVENT_DESC"][::std::mem::size_of::<XC_EVENT_DESC>() - 32usize];
    ["Alignment of XC_EVENT_DESC"][::std::mem::align_of::<XC_EVENT_DESC>() - 1usize];
    ["Offset of field: XC_EVENT_DESC::xvi_type"]
        [::std::mem::offset_of!(XC_EVENT_DESC, xvi_type) - 0usize];
    ["Offset of field: XC_EVENT_DESC::XVI_RESERVED_00"]
        [::std::mem::offset_of!(XC_EVENT_DESC, XVI_RESERVED_00) - 2usize];
    ["Offset of field: XC_EVENT_DESC::xvi_status"]
        [::std::mem::offset_of!(XC_EVENT_DESC, xvi_status) - 4usize];
    ["Offset of field: XC_EVENT_DESC::xvi_event"]
        [::std::mem::offset_of!(XC_EVENT_DESC, xvi_event) - 8usize];
    ["Offset of field: XC_EVENT_DESC::XVI_RESERVED_01"]
        [::std::mem::offset_of!(XC_EVENT_DESC, XVI_RESERVED_01) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_SLOT_CONTEXT"][::std::mem::size_of::<XC_SLOT_CONTEXT>() - 48usize];
    ["Alignment of XC_SLOT_CONTEXT"][::std::mem::align_of::<XC_SLOT_CONTEXT>() - 1usize];
    ["Offset of field: XC_SLOT_CONTEXT::xcreq_key"]
        [::std::mem::offset_of!(XC_SLOT_CONTEXT, xcreq_key) - 0usize];
    ["Offset of field: XC_SLOT_CONTEXT::XCREQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_SLOT_CONTEXT, XCREQ_RESERVED_01) - 25usize];
    ["Offset of field: XC_SLOT_CONTEXT::XCREQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_SLOT_CONTEXT, XCREQ_RESERVED_02) - 28usize];
    ["Offset of field: XC_SLOT_CONTEXT::xcreq_turnkey"]
        [::std::mem::offset_of!(XC_SLOT_CONTEXT, xcreq_turnkey) - 32usize];
    ["Offset of field: XC_SLOT_CONTEXT::XCREQ_RESERVED_03"]
        [::std::mem::offset_of!(XC_SLOT_CONTEXT, XCREQ_RESERVED_03) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1::xlu_index"]
        [::std::mem::offset_of!(XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1, xlu_index) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2::xlu_key_offset"][::std::mem::offset_of!(
        XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2,
        xlu_key_offset
    ) - 0usize];
    ["Offset of field: XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2::xlu_key_size"]
        [::std::mem::offset_of!(XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2, xlu_key_size) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_LIST_UPDATE__bindgen_ty_1"]
        [::std::mem::size_of::<XC_LIST_UPDATE__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_LIST_UPDATE__bindgen_ty_1"]
        [::std::mem::align_of::<XC_LIST_UPDATE__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_LIST_UPDATE__bindgen_ty_1::pos"]
        [::std::mem::offset_of!(XC_LIST_UPDATE__bindgen_ty_1, pos) - 0usize];
    ["Offset of field: XC_LIST_UPDATE__bindgen_ty_1::key"]
        [::std::mem::offset_of!(XC_LIST_UPDATE__bindgen_ty_1, key) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_LIST_UPDATE"][::std::mem::size_of::<XC_LIST_UPDATE>() - 8usize];
    ["Alignment of XC_LIST_UPDATE"][::std::mem::align_of::<XC_LIST_UPDATE>() - 1usize];
    ["Offset of field: XC_LIST_UPDATE::XLU_RESERVED_01"]
        [::std::mem::offset_of!(XC_LIST_UPDATE, XLU_RESERVED_01) - 1usize];
    ["Offset of field: XC_LIST_UPDATE::var"][::std::mem::offset_of!(XC_LIST_UPDATE, var) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADING_STATE_FILTER__bindgen_ty_1"]
        [::std::mem::size_of::<XC_TRADING_STATE_FILTER__bindgen_ty_1>() - 1usize];
    ["Alignment of XC_TRADING_STATE_FILTER__bindgen_ty_1"]
        [::std::mem::align_of::<XC_TRADING_STATE_FILTER__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADING_STATE_FILTER"][::std::mem::size_of::<XC_TRADING_STATE_FILTER>() - 1usize];
    ["Alignment of XC_TRADING_STATE_FILTER"]
        [::std::mem::align_of::<XC_TRADING_STATE_FILTER>() - 1usize];
    ["Offset of field: XC_TRADING_STATE_FILTER::xtsf_u8"]
        [::std::mem::offset_of!(XC_TRADING_STATE_FILTER, xtsf_u8) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FEED_ID"][::std::mem::size_of::<XC_FEED_ID>() - 8usize];
    ["Alignment of XC_FEED_ID"][::std::mem::align_of::<XC_FEED_ID>() - 1usize];
    ["Offset of field: XC_FEED_ID::xfeed_handle"]
        [::std::mem::offset_of!(XC_FEED_ID, xfeed_handle) - 0usize];
    ["Offset of field: XC_FEED_ID::xfeed_id"]
        [::std::mem::offset_of!(XC_FEED_ID, xfeed_id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_INSTRUMENT_GROUP_ID__bindgen_ty_1"]
        [::std::mem::size_of::<XC_INSTRUMENT_GROUP_ID__bindgen_ty_1>() - 24usize];
    ["Alignment of XC_INSTRUMENT_GROUP_ID__bindgen_ty_1"]
        [::std::mem::align_of::<XC_INSTRUMENT_GROUP_ID__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID__bindgen_ty_1::group_id_integer"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID__bindgen_ty_1, group_id_integer) - 0usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID__bindgen_ty_1::group_id_ascii"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID__bindgen_ty_1, group_id_ascii) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_INSTRUMENT_GROUP_ID"][::std::mem::size_of::<XC_INSTRUMENT_GROUP_ID>() - 32usize];
    ["Alignment of XC_INSTRUMENT_GROUP_ID"]
        [::std::mem::align_of::<XC_INSTRUMENT_GROUP_ID>() - 1usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID::country"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID, country) - 0usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID::exchange"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID, exchange) - 2usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID::type_"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID, type_) - 4usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID::priority"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID, priority) - 5usize];
    ["Offset of field: XC_INSTRUMENT_GROUP_ID::RESERVED_00"]
        [::std::mem::offset_of!(XC_INSTRUMENT_GROUP_ID, RESERVED_00) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EVENT_ID"][::std::mem::size_of::<XC_EVENT_ID>() - 32usize];
    ["Alignment of XC_EVENT_ID"][::std::mem::align_of::<XC_EVENT_ID>() - 1usize];
    ["Offset of field: XC_EVENT_ID::xei_ch"][::std::mem::offset_of!(XC_EVENT_ID, xei_ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EQUITY_TRADE_UPDATE_FLAGS"]
        [::std::mem::size_of::<XC_EQUITY_TRADE_UPDATE_FLAGS>() - 2usize];
    ["Alignment of XC_EQUITY_TRADE_UPDATE_FLAGS"]
        [::std::mem::align_of::<XC_EQUITY_TRADE_UPDATE_FLAGS>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_COMMODITY_TRADE_UPDATE_FLAGS"]
        [::std::mem::size_of::<XC_COMMODITY_TRADE_UPDATE_FLAGS>() - 1usize];
    ["Alignment of XC_COMMODITY_TRADE_UPDATE_FLAGS"]
        [::std::mem::align_of::<XC_COMMODITY_TRADE_UPDATE_FLAGS>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DFLOAT_64__bindgen_ty_1"]
        [::std::mem::size_of::<XC_DFLOAT_64__bindgen_ty_1>() - 8usize];
    ["Alignment of XC_DFLOAT_64__bindgen_ty_1"]
        [::std::mem::align_of::<XC_DFLOAT_64__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_DFLOAT_64"][::std::mem::size_of::<XC_DFLOAT_64>() - 8usize];
    ["Alignment of XC_DFLOAT_64"][::std::mem::align_of::<XC_DFLOAT_64>() - 1usize];
    ["Offset of field: XC_DFLOAT_64::s64"][::std::mem::offset_of!(XC_DFLOAT_64, s64) - 0usize];
};
pub const XC_BLANK_DFLOAT_64_LOW_MANTISSA: xint64 = -576460752303423486;
pub const XC_BLANK_DFLOAT_64_LOW: xint64 = -9223372036854775761;
pub const XC_BLANK_DFLOAT_64_HIGH_MANTISSA: xint64 = 576460752303423486;
pub const XC_BLANK_DFLOAT_64_HIGH: xint64 = 9223372036854775791;
pub const XC_MARKET_DFLOAT_64_LOW_MANTISSA: xint64 = -576460752303423487;
pub const XC_MARKET_DFLOAT_64_LOW: xint64 = -9223372036854775777;
pub const XC_MARKET_DFLOAT_64_HIGH_MANTISSA: xint64 = 576460752303423487;
pub const XC_MARKET_DFLOAT_64_HIGH: xint64 = 9223372036854775807;
pub const XC_OVERFLOW_DFLOAT_64_MANTISSA: xint64 = 576460752303423482;
pub const XC_OVERFLOW_DFLOAT_64: xint64 = 9223372036854775727;
pub const XC_UNDERFLOW_DFLOAT_64: xint64 = -9223372036854775697;
pub const XC_RESERVED_DFLOAT_64_HIGH_1: xint64 = 9223372036854775775;
pub const XC_RESERVED_DFLOAT_64_HIGH_2: xint64 = 9223372036854775759;
pub const XC_RESERVED_DFLOAT_64_HIGH_3: xint64 = 9223372036854775743;
pub const XC_RESERVED_DFLOAT_64_LOW_1: xint64 = -9223372036854775745;
pub const XC_RESERVED_DFLOAT_64_LOW_2: xint64 = -9223372036854775729;
pub const XC_RESERVED_DFLOAT_64_LOW_3: xint64 = -9223372036854775713;
pub const MAX_DFLOAT_64_MANTISSA: xint64 = 576460752303423481;
pub const MIN_DFLOAT_64_MANTISSA: xint64 = -576460752303423481;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_SYMBOL_LABEL"][::std::mem::size_of::<XC_SYMBOL_LABEL>() - 256usize];
    ["Alignment of XC_SYMBOL_LABEL"][::std::mem::align_of::<XC_SYMBOL_LABEL>() - 1usize];
    ["Offset of field: XC_SYMBOL_LABEL::ch"][::std::mem::offset_of!(XC_SYMBOL_LABEL, ch) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_THRESHOLDS"][::std::mem::size_of::<XC_THRESHOLDS>() - 8usize];
    ["Alignment of XC_THRESHOLDS"][::std::mem::align_of::<XC_THRESHOLDS>() - 1usize];
    ["Offset of field: XC_THRESHOLDS::thresholds"]
        [::std::mem::offset_of!(XC_THRESHOLDS, thresholds) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EVENT_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_EVENT_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_EVENT_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_EVENT_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_EVENT_QUALS__bindgen_ty_1::q1"]
        [::std::mem::offset_of!(XC_EVENT_QUALS__bindgen_ty_1, q1) - 0usize];
    ["Offset of field: XC_EVENT_QUALS__bindgen_ty_1::q2"]
        [::std::mem::offset_of!(XC_EVENT_QUALS__bindgen_ty_1, q2) - 1usize];
    ["Offset of field: XC_EVENT_QUALS__bindgen_ty_1::q3"]
        [::std::mem::offset_of!(XC_EVENT_QUALS__bindgen_ty_1, q3) - 2usize];
    ["Offset of field: XC_EVENT_QUALS__bindgen_ty_1::q4"]
        [::std::mem::offset_of!(XC_EVENT_QUALS__bindgen_ty_1, q4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_EVENT_QUALS"][::std::mem::size_of::<XC_EVENT_QUALS>() - 4usize];
    ["Alignment of XC_EVENT_QUALS"][::std::mem::align_of::<XC_EVENT_QUALS>() - 1usize];
    ["Offset of field: XC_EVENT_QUALS::xq_arr"]
        [::std::mem::offset_of!(XC_EVENT_QUALS, xq_arr) - 0usize];
    ["Offset of field: XC_EVENT_QUALS::xq_u32"]
        [::std::mem::offset_of!(XC_EVENT_QUALS, xq_u32) - 0usize];
    ["Offset of field: XC_EVENT_QUALS::quals"]
        [::std::mem::offset_of!(XC_EVENT_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_QUOTE_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_QUOTE_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_QUOTE_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_QUOTE_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_QUOTE_QUALS__bindgen_ty_1::qq1"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS__bindgen_ty_1, qq1) - 0usize];
    ["Offset of field: XC_QUOTE_QUALS__bindgen_ty_1::qq2"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS__bindgen_ty_1, qq2) - 1usize];
    ["Offset of field: XC_QUOTE_QUALS__bindgen_ty_1::qq3"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS__bindgen_ty_1, qq3) - 2usize];
    ["Offset of field: XC_QUOTE_QUALS__bindgen_ty_1::qq4"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS__bindgen_ty_1, qq4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_QUOTE_QUALS"][::std::mem::size_of::<XC_QUOTE_QUALS>() - 4usize];
    ["Alignment of XC_QUOTE_QUALS"][::std::mem::align_of::<XC_QUOTE_QUALS>() - 1usize];
    ["Offset of field: XC_QUOTE_QUALS::xqq_arr"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS, xqq_arr) - 0usize];
    ["Offset of field: XC_QUOTE_QUALS::xqq_u32"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS, xqq_u32) - 0usize];
    ["Offset of field: XC_QUOTE_QUALS::quals"]
        [::std::mem::offset_of!(XC_QUOTE_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADE_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_TRADE_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_TRADE_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_TRADE_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_TRADE_QUALS__bindgen_ty_1::tq1"]
        [::std::mem::offset_of!(XC_TRADE_QUALS__bindgen_ty_1, tq1) - 0usize];
    ["Offset of field: XC_TRADE_QUALS__bindgen_ty_1::tq2"]
        [::std::mem::offset_of!(XC_TRADE_QUALS__bindgen_ty_1, tq2) - 1usize];
    ["Offset of field: XC_TRADE_QUALS__bindgen_ty_1::tq3"]
        [::std::mem::offset_of!(XC_TRADE_QUALS__bindgen_ty_1, tq3) - 2usize];
    ["Offset of field: XC_TRADE_QUALS__bindgen_ty_1::tq4"]
        [::std::mem::offset_of!(XC_TRADE_QUALS__bindgen_ty_1, tq4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADE_QUALS"][::std::mem::size_of::<XC_TRADE_QUALS>() - 4usize];
    ["Alignment of XC_TRADE_QUALS"][::std::mem::align_of::<XC_TRADE_QUALS>() - 1usize];
    ["Offset of field: XC_TRADE_QUALS::xtq_arr"]
        [::std::mem::offset_of!(XC_TRADE_QUALS, xtq_arr) - 0usize];
    ["Offset of field: XC_TRADE_QUALS::xtq_u32"]
        [::std::mem::offset_of!(XC_TRADE_QUALS, xtq_u32) - 0usize];
    ["Offset of field: XC_TRADE_QUALS::quals"]
        [::std::mem::offset_of!(XC_TRADE_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_REFRESH_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_REFRESH_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_REFRESH_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_REFRESH_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_REFRESH_QUALS__bindgen_ty_1::rq1"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS__bindgen_ty_1, rq1) - 0usize];
    ["Offset of field: XC_REFRESH_QUALS__bindgen_ty_1::rq2"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS__bindgen_ty_1, rq2) - 1usize];
    ["Offset of field: XC_REFRESH_QUALS__bindgen_ty_1::rq3"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS__bindgen_ty_1, rq3) - 2usize];
    ["Offset of field: XC_REFRESH_QUALS__bindgen_ty_1::rq4"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS__bindgen_ty_1, rq4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_REFRESH_QUALS"][::std::mem::size_of::<XC_REFRESH_QUALS>() - 4usize];
    ["Alignment of XC_REFRESH_QUALS"][::std::mem::align_of::<XC_REFRESH_QUALS>() - 1usize];
    ["Offset of field: XC_REFRESH_QUALS::xrq_arr"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS, xrq_arr) - 0usize];
    ["Offset of field: XC_REFRESH_QUALS::xrq_u32"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS, xrq_u32) - 0usize];
    ["Offset of field: XC_REFRESH_QUALS::quals"]
        [::std::mem::offset_of!(XC_REFRESH_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_INDICATIVE_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_INDICATIVE_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_INDICATIVE_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_INDICATIVE_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_INDICATIVE_QUALS__bindgen_ty_1::iq1"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS__bindgen_ty_1, iq1) - 0usize];
    ["Offset of field: XC_INDICATIVE_QUALS__bindgen_ty_1::iq2"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS__bindgen_ty_1, iq2) - 1usize];
    ["Offset of field: XC_INDICATIVE_QUALS__bindgen_ty_1::iq3"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS__bindgen_ty_1, iq3) - 2usize];
    ["Offset of field: XC_INDICATIVE_QUALS__bindgen_ty_1::iq4"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS__bindgen_ty_1, iq4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_INDICATIVE_QUALS"][::std::mem::size_of::<XC_INDICATIVE_QUALS>() - 4usize];
    ["Alignment of XC_INDICATIVE_QUALS"][::std::mem::align_of::<XC_INDICATIVE_QUALS>() - 1usize];
    ["Offset of field: XC_INDICATIVE_QUALS::xiq_arr"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS, xiq_arr) - 0usize];
    ["Offset of field: XC_INDICATIVE_QUALS::xiq_u32"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS, xiq_u32) - 0usize];
    ["Offset of field: XC_INDICATIVE_QUALS::quals"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_STAT_QUALS__bindgen_ty_1"]
        [::std::mem::size_of::<XC_STAT_QUALS__bindgen_ty_1>() - 4usize];
    ["Alignment of XC_STAT_QUALS__bindgen_ty_1"]
        [::std::mem::align_of::<XC_STAT_QUALS__bindgen_ty_1>() - 1usize];
    ["Offset of field: XC_STAT_QUALS__bindgen_ty_1::eq1"]
        [::std::mem::offset_of!(XC_STAT_QUALS__bindgen_ty_1, eq1) - 0usize];
    ["Offset of field: XC_STAT_QUALS__bindgen_ty_1::eq2"]
        [::std::mem::offset_of!(XC_STAT_QUALS__bindgen_ty_1, eq2) - 1usize];
    ["Offset of field: XC_STAT_QUALS__bindgen_ty_1::eq3"]
        [::std::mem::offset_of!(XC_STAT_QUALS__bindgen_ty_1, eq3) - 2usize];
    ["Offset of field: XC_STAT_QUALS__bindgen_ty_1::eq4"]
        [::std::mem::offset_of!(XC_STAT_QUALS__bindgen_ty_1, eq4) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_STAT_QUALS"][::std::mem::size_of::<XC_STAT_QUALS>() - 4usize];
    ["Alignment of XC_STAT_QUALS"][::std::mem::align_of::<XC_STAT_QUALS>() - 1usize];
    ["Offset of field: XC_STAT_QUALS::xeq_arr"]
        [::std::mem::offset_of!(XC_STAT_QUALS, xeq_arr) - 0usize];
    ["Offset of field: XC_STAT_QUALS::xeq_u32"]
        [::std::mem::offset_of!(XC_STAT_QUALS, xeq_u32) - 0usize];
    ["Offset of field: XC_STAT_QUALS::quals"]
        [::std::mem::offset_of!(XC_STAT_QUALS, quals) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_QUALIFIERS"][::std::mem::size_of::<XC_QUALIFIERS>() - 16usize];
    ["Alignment of XC_QUALIFIERS"][::std::mem::align_of::<XC_QUALIFIERS>() - 1usize];
    ["Offset of field: XC_QUALIFIERS::entries"]
        [::std::mem::offset_of!(XC_QUALIFIERS, entries) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_QUOTE_QUALIFIERS"][::std::mem::size_of::<XC_QUOTE_QUALIFIERS>() - 16usize];
    ["Alignment of XC_QUOTE_QUALIFIERS"][::std::mem::align_of::<XC_QUOTE_QUALIFIERS>() - 1usize];
    ["Offset of field: XC_QUOTE_QUALIFIERS::entries"]
        [::std::mem::offset_of!(XC_QUOTE_QUALIFIERS, entries) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADE_QUALIFIERS"][::std::mem::size_of::<XC_TRADE_QUALIFIERS>() - 16usize];
    ["Alignment of XC_TRADE_QUALIFIERS"][::std::mem::align_of::<XC_TRADE_QUALIFIERS>() - 1usize];
    ["Offset of field: XC_TRADE_QUALIFIERS::entries"]
        [::std::mem::offset_of!(XC_TRADE_QUALIFIERS, entries) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_REFRESH_QUALIFIERS"][::std::mem::size_of::<XC_REFRESH_QUALIFIERS>() - 16usize];
    ["Alignment of XC_REFRESH_QUALIFIERS"]
        [::std::mem::align_of::<XC_REFRESH_QUALIFIERS>() - 1usize];
    ["Offset of field: XC_REFRESH_QUALIFIERS::entries"]
        [::std::mem::offset_of!(XC_REFRESH_QUALIFIERS, entries) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_INDICATIVE_QUALIFIERS"]
        [::std::mem::size_of::<XC_INDICATIVE_QUALIFIERS>() - 16usize];
    ["Alignment of XC_INDICATIVE_QUALIFIERS"]
        [::std::mem::align_of::<XC_INDICATIVE_QUALIFIERS>() - 1usize];
    ["Offset of field: XC_INDICATIVE_QUALIFIERS::entries"]
        [::std::mem::offset_of!(XC_INDICATIVE_QUALIFIERS, entries) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TICK_FLAGS"][::std::mem::size_of::<XC_TICK_FLAGS>() - 1usize];
    ["Alignment of XC_TICK_FLAGS"][::std::mem::align_of::<XC_TICK_FLAGS>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TS_REQUEST_TYPE"][::std::mem::size_of::<XC_TS_REQUEST_TYPE>() - 2usize];
    ["Alignment of XC_TS_REQUEST_TYPE"][::std::mem::align_of::<XC_TS_REQUEST_TYPE>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FINANCIAL_STATUS"][::std::mem::size_of::<XC_FINANCIAL_STATUS>() - 1usize];
    ["Alignment of XC_FINANCIAL_STATUS"][::std::mem::align_of::<XC_FINANCIAL_STATUS>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_CC_FLAGS"][::std::mem::size_of::<XC_CC_FLAGS>() - 1usize];
    ["Alignment of XC_CC_FLAGS"][::std::mem::align_of::<XC_CC_FLAGS>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADING_STATE__bindgen_ty_1"]
        [::std::mem::size_of::<XC_TRADING_STATE__bindgen_ty_1>() - 1usize];
    ["Alignment of XC_TRADING_STATE__bindgen_ty_1"]
        [::std::mem::align_of::<XC_TRADING_STATE__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_TRADING_STATE"][::std::mem::size_of::<XC_TRADING_STATE>() - 1usize];
    ["Alignment of XC_TRADING_STATE"][::std::mem::align_of::<XC_TRADING_STATE>() - 1usize];
    ["Offset of field: XC_TRADING_STATE::u8_"]
        [::std::mem::offset_of!(XC_TRADING_STATE, u8_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EVENT_COMMON"][::std::mem::size_of::<XC_GROUP_EVENT_COMMON>() - 40usize];
    ["Alignment of XC_GROUP_EVENT_COMMON"]
        [::std::mem::align_of::<XC_GROUP_EVENT_COMMON>() - 1usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_quals"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_quals) - 8usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::XEV_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, XEV_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EVENT_COMMON::xev_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_COMMON, xev_sequence) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EVENT_TIMING"][::std::mem::size_of::<XC_GROUP_EVENT_TIMING>() - 64usize];
    ["Alignment of XC_GROUP_EVENT_TIMING"]
        [::std::mem::align_of::<XC_GROUP_EVENT_TIMING>() - 1usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_sequence) - 0usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_exchange_hitime) - 8usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_receive_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_transmit_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_transmit_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_xcapi_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_xcapi_receive_hitime) - 32usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::xtev_xcapi_callback_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, xtev_xcapi_callback_hitime) - 40usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::XTEV_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, XTEV_RESERVED_00) - 48usize];
    ["Offset of field: XC_GROUP_EVENT_TIMING::XTEV_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_EVENT_TIMING, XTEV_RESERVED_01) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_QUOTE"][::std::mem::size_of::<XC_GROUP_EQUITY_QUOTE>() - 24usize];
    ["Alignment of XC_GROUP_EQUITY_QUOTE"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_QUOTE>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::XCQ_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, XCQ_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_bid_exch) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_bid_price) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_bid_size) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_bid_tick_flags) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::XCQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, XCQ_RESERVED_01) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_ask_exch) - 14usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_ask_price) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE::xcq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE, xcq_ask_size) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_QUOTE_ALL>() - 64usize];
    ["Alignment of XC_GROUP_EQUITY_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::XCQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, XCQ_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::XCQ_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, XCQ_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_bid_exch) - 42usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_bid_price) - 44usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_bid_size) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_bid_tick_flags) - 52usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::XCQ_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, XCQ_RESERVED_04) - 53usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_ask_exch) - 54usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_ask_price) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_ALL::xcq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_ALL, xcq_ask_size) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL>() - 88usize];
    ["Alignment of XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_instrument_status
    ) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_market_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_market_status
    ) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::XCQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, XCQ_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_exchange_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_receive_hitime
    ) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::XCQ_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, XCQ_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_bid_exch) - 42usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_bid_price) - 44usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_bid_size) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_bid_tick_flags
    ) - 52usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::XCQ_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, XCQ_RESERVED_04) - 53usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_ask_exch) - 54usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_ask_price) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL, xcq_ask_size) - 60usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_bid_customer_size
    ) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_bid_professional_size
    )
        - 68usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_bid_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_bid_market_maker_size
    )
        - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_ask_customer_size
    ) - 76usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_ask_professional_size
    )
        - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL::xcq_ask_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL,
        xcq_ask_market_maker_size
    )
        - 84usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_TRADE"][::std::mem::size_of::<XC_GROUP_EQUITY_TRADE>() - 16usize];
    ["Alignment of XC_GROUP_EQUITY_TRADE"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_TRADE>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE::XCT_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE, XCT_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE::xct_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE, xct_sub_market) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE::XCT_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE, XCT_RESERVED_01) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE::xct_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE, xct_price) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE::xct_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE, xct_size) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_TRADE_ACCUM"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_TRADE_ACCUM>() - 40usize];
    ["Alignment of XC_GROUP_EQUITY_TRADE_ACCUM"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_TRADE_ACCUM>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_close_price) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_trade_tick_flags) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::XCT_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, XCT_RESERVED_00) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::XCT_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, XCT_RESERVED_01) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_volume) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_vwap_volume) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_traded_value) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_open_price) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_total_change) - 28usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_high_price) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ACCUM::xct_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ACCUM, xct_low_price) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_TRADE_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_TRADE_ALL>() - 96usize];
    ["Alignment of XC_GROUP_EQUITY_TRADE_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_TRADE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_05) - 42usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_sub_market) - 44usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_06) - 46usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_price) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_size) - 52usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_close_price) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_trade_tick_flags) - 60usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_07) - 61usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::XCT_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, XCT_RESERVED_08) - 62usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_volume) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_vwap_volume) - 68usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_traded_value) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_open_price) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_total_change) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_high_price) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_TRADE_ALL::xct_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_TRADE_ALL, xct_low_price) - 92usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_CANCEL_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_CANCEL_ALL>() - 96usize];
    ["Alignment of XC_GROUP_EQUITY_CANCEL_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_CANCEL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_05) - 42usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_sub_market) - 44usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_06) - 46usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_price) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_size) - 52usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_close_price) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_trade_tick_flags) - 60usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_07) - 61usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::XCA_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, XCA_RESERVED_08) - 62usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_volume) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_vwap_volume) - 68usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_traded_value) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_open_price) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_total_change) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_high_price) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_CANCEL_ALL::xca_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CANCEL_ALL, xca_low_price) - 92usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_CORRECTION"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_CORRECTION>() - 32usize];
    ["Alignment of XC_GROUP_EQUITY_CORRECTION"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_CORRECTION>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::XCC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, XCC_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_cancel_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_cancel_sub_market) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::XCC_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, XCC_RESERVED_01) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_cancel_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_cancel_price) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_cancel_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_cancel_size) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::XCC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, XCC_RESERVED_02) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_correct_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_correct_sub_market) - 20usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::XCC_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, XCC_RESERVED_03) - 22usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_correct_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_correct_price) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION::xcc_correct_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION, xcc_correct_size) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_CORRECTION_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_CORRECTION_ALL>() - 112usize];
    ["Alignment of XC_GROUP_EQUITY_CORRECTION_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_CORRECTION_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_05) - 42usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_cancel_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_cancel_sub_market) - 44usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_06) - 46usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_cancel_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_cancel_price) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_cancel_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_cancel_size) - 52usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_07) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_09) - 58usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_correct_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_correct_sub_market) - 60usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_10) - 62usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_correct_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_correct_price) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_correct_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_correct_size) - 68usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_close_price) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_trade_tick_flags) - 76usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_11) - 77usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::XCC_RESERVED_12"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, XCC_RESERVED_12) - 78usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_volume) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_vwap_volume) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_traded_value) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_open_price) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_total_change) - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_high_price) - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_CORRECTION_ALL::xcc_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_CORRECTION_ALL, xcc_low_price) - 108usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME>() - 360usize];
    ["Alignment of XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_country_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_market_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_market_status
    ) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_02
    ) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_exchange_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_receive_hitime
    ) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_03
    ) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_alternate_id1
    ) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_alternate_id2
    ) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_currency"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_currency) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_04
    ) - 83usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_05
    ) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_06
    ) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_close_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_close_exch) - 90usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_close_price
    ) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_close_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_close_size) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_07
    ) - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ref_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_ref_close_price
    ) - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_open_interest"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_interest
    ) - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_exch_time_offset
    )
        - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_prime_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_prime_exch
    ) - 116usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_lot_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_lot_size) - 118usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_close_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_close_hitime
    ) - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_08
    ) - 128usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_bid_exch) - 138usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_bid_price) - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_bid_size) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_tick_flags
    ) - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_09
    ) - 149usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_ask_exch) - 150usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_ask_price) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_ask_size) - 156usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_hitime
    ) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_hitime
    ) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_10
    ) - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_prev_close"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_prev_close
    ) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_last_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_last_exch) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_tick_flags
    )
        - 190usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_11
    ) - 191usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_last_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_last_price
    ) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_last_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_last_size) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_volume) - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_vwap_volume"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_vwap_volume
    ) - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_trading_session_date
    )
        - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_12"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_12
    ) - 212usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_traded_value"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_traded_value
    ) - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_13"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_13
    ) - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_14"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_14
    ) - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_open_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_price
    ) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_total_change"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_total_change
    ) - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_high_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_high_price
    ) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_low_price) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_high_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_high_exch) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_low_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_low_exch) - 258usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_open_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME, xcr_open_exch) - 260usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_15"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_15
    ) - 262usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_last_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_last_hitime
    ) - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_open_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_hitime
    ) - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_high_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_high_hitime
    ) - 280usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_low_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_low_hitime
    ) - 288usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_customer_size
    )
        - 296usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_professional_size
    )
        - 300usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_bid_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_market_maker_size
    )
        - 304usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_customer_size
    )
        - 308usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_professional_size
    )
        - 312usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_ask_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_market_maker_size
    )
        - 316usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_upper_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_upper_limit_price
    )
        - 320usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_lower_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_lower_limit_price
    )
        - 324usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_limit_price_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_limit_price_hitime
    )
        - 328usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_quote_quals
    ) - 336usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_quals
    ) - 340usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_quote_sequence
    ) - 344usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME::xcr_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_sequence
    ) - 352usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_REFRESH_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_REFRESH_ALL>() - 296usize];
    ["Alignment of XC_GROUP_EQUITY_REFRESH_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_REFRESH_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_line_id"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_line_id) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_market_status) - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_sequence"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_sequence) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_alternate_id1"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_alternate_id1) - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_alternate_id2"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_alternate_id2) - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_currency"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_currency) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_04) - 83usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_05) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_06) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_close_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_close_exch) - 90usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_close_price) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_close_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_close_size) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_07) - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_ref_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_ref_close_price) - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_open_interest"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_open_interest) - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_exch_time_offset"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_exch_time_offset) - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_prime_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_prime_exch) - 116usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_lot_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_lot_size) - 118usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_close_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_close_extime) - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_08) - 128usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_bid_exch) - 138usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_bid_price) - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_bid_size) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_bid_tick_flags) - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_09) - 149usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_ask_exch) - 150usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_ask_price) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_ask_size) - 156usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_bid_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_bid_extime) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_ask_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_ask_extime) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_10) - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_prev_close"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_prev_close) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_last_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_last_exch) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_trade_tick_flags) - 190usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_11) - 191usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_last_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_last_price) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_last_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_last_size) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_volume) - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_vwap_volume) - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_trading_session_date"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_trading_session_date) - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_12"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_12) - 212usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_traded_value) - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_13"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_13) - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_14"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_14) - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_open_price) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_total_change) - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_high_price) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_low_price) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_high_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_high_exch) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_low_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_low_exch) - 258usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_open_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_open_exch) - 260usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::XCR_RESERVED_15"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, XCR_RESERVED_15) - 262usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_last_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_last_extime) - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_open_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_open_extime) - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_high_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_high_extime) - 280usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_ALL::xcr_low_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_ALL, xcr_low_extime) - 288usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL>() - 360usize];
    ["Alignment of XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_exchange_code
    )
        - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_country_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_symbol_type
    ) - 5usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_line_id"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_line_id
    ) - 6usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_market_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_market_status
    )
        - 13usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_02
    ) - 15usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_exchange_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_receive_hitime
    )
        - 24usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_sequence
    ) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_03
    ) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_alternate_id1
    )
        - 48usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_alternate_id2
    )
        - 64usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_currency"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_currency
    ) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_04
    ) - 83usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_05
    ) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_06
    ) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_close_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_close_exch
    ) - 90usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_close_price
    ) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_close_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_close_size
    ) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_07
    )
        - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ref_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ref_close_price
    )
        - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_open_interest"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_open_interest
    )
        - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_exch_time_offset
    )
        - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_prime_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_prime_exch
    ) - 116usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_lot_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_lot_size
    ) - 118usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_close_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_close_extime
    )
        - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_08
    )
        - 128usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_exch
    ) - 138usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_price
    ) - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_size
    ) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_tick_flags
    )
        - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_09
    )
        - 149usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_exch
    ) - 150usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_price
    ) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_size
    ) - 156usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_extime
    ) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_extime
    ) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_10
    )
        - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_prev_close"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_prev_close
    ) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_last_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_last_exch
    ) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_trade_tick_flags
    )
        - 190usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_11
    )
        - 191usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_last_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_last_price
    ) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_last_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_last_size
    ) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_volume"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_volume
    ) - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_vwap_volume"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_vwap_volume
    )
        - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_trading_session_date
    )
        - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_12"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_12
    )
        - 212usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_traded_value"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_traded_value
    )
        - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_13"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_13
    )
        - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_14"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_14
    )
        - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_open_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_open_price
    ) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_total_change"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_total_change
    )
        - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_high_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_high_price
    ) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_low_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_low_price
    ) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_high_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_high_exch
    ) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_low_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_low_exch
    ) - 258usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_open_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_open_exch
    ) - 260usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::XCR_RESERVED_15"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        XCR_RESERVED_15
    )
        - 262usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_last_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_last_extime
    )
        - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_open_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_open_extime
    )
        - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_high_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_high_extime
    )
        - 280usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_low_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_low_extime
    ) - 288usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_customer_size
    )
        - 296usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_professional_size
    )
        - 300usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_bid_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_bid_market_maker_size
    )
        - 304usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_customer_size
    )
        - 308usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_professional_size
    )
        - 312usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_ask_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_ask_market_maker_size
    )
        - 316usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_upper_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_upper_limit_price
    )
        - 320usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_lower_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_lower_limit_price
    )
        - 324usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_limit_price_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_limit_price_extime
    )
        - 328usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_quote_quals
    )
        - 336usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_trade_quals
    )
        - 340usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_quote_sequence
    )
        - 344usize];
    ["Offset of field: XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL::xcr_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL,
        xcr_trade_sequence
    )
        - 352usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME>() - 288usize];
    ["Alignment of XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_symbol_type) - 25usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_instrument_status
    ) - 26usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_market_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_market_status
    ) - 27usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_02) - 29usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_03) - 30usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_04) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_alternate_id1
    ) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_alternate_id2
    ) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_currency"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_currency) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_05) - 75usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_06) - 76usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_07) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_close_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_close_exch) - 82usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_close_price) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_close_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_close_size) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_08) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_ref_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_ref_close_price
    ) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_open_interest"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_open_interest
    ) - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_exch_time_offset
    ) - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_prime_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_prime_exch) - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_lot_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_lot_size) - 110usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_close_hitime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_close_hitime
    ) - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_09) - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_bid_exch) - 130usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_bid_price) - 132usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_bid_size) - 136usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_bid_tick_flags
    ) - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_10) - 141usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_ask_exch) - 142usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_ask_price) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_ask_size) - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_bid_hitime) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_ask_hitime) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_11) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_prev_close"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_prev_close) - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_last_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_last_exch) - 180usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_trade_tick_flags
    ) - 182usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_12"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_12) - 183usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_last_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_last_price) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_last_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_last_size) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_volume) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_vwap_volume) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_trading_session_date
    )
        - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_13"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_13) - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_traded_value"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_traded_value
    ) - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_14"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_14) - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_15"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_15) - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_open_price) - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_total_change"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME,
        xci_total_change
    ) - 236usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_high_price) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_low_price) - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_high_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_high_exch) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_low_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_low_exch) - 250usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_open_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_open_exch) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_16"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, XCI_RESERVED_16) - 254usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_last_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_last_hitime) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_open_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_open_hitime) - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_high_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_high_hitime) - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME::xci_low_hitime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME, xci_low_hitime) - 280usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_IMAGE_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_IMAGE_ALL>() - 288usize];
    ["Alignment of XC_GROUP_EQUITY_IMAGE_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_IMAGE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_country_code"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_country_code) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_symbol_type) - 25usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_instrument_status) - 26usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_market_status"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_market_status) - 27usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_02) - 29usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_03) - 30usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_04) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_alternate_id1"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_alternate_id1) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_alternate_id2"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_alternate_id2) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_currency"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_currency) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_05) - 75usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_06) - 76usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_07) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_close_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_close_exch) - 82usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_close_price) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_close_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_close_size) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_08) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_ref_close_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_ref_close_price) - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_open_interest"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_open_interest) - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_exch_time_offset"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_exch_time_offset) - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_prime_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_prime_exch) - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_lot_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_lot_size) - 110usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_close_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_close_extime) - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_09) - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_bid_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_bid_exch) - 130usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_bid_price) - 132usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_bid_size) - 136usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_bid_tick_flags) - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_10) - 141usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_ask_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_ask_exch) - 142usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_ask_price) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_ask_size) - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_bid_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_bid_extime) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_ask_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_ask_extime) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_11) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_prev_close"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_prev_close) - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_last_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_last_exch) - 180usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_trade_tick_flags) - 182usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_12"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_12) - 183usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_last_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_last_price) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_last_size"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_last_size) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_volume) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_vwap_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_vwap_volume) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_trading_session_date"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_trading_session_date) - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_13"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_13) - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_traded_value"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_traded_value) - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_14"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_14) - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_15"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_15) - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_open_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_open_price) - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_total_change"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_total_change) - 236usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_high_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_high_price) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_low_price"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_low_price) - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_high_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_high_exch) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_low_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_low_exch) - 250usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_open_exch"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_open_exch) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::XCI_RESERVED_16"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, XCI_RESERVED_16) - 254usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_last_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_last_extime) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_open_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_open_extime) - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_high_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_high_extime) - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_ALL::xci_low_extime"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_ALL, xci_low_extime) - 280usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL"]
        [::std::mem::size_of::<XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL>() - 352usize];
    ["Alignment of XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL"]
        [::std::mem::align_of::<XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_country_code"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_symbol_type
    ) - 25usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_instrument_status
    )
        - 26usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_market_status"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_market_status
    ) - 27usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_02
    ) - 29usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_03
    ) - 30usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_04
    ) - 32usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_alternate_id1
    ) - 40usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_alternate_id2
    ) - 56usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_currency"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_currency
    ) - 72usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_05
    ) - 75usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_06
    ) - 76usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_07
    ) - 80usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_close_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_close_exch
    ) - 82usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_close_price
    ) - 84usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_close_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_close_size
    ) - 88usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_08
    ) - 92usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ref_close_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ref_close_price
    )
        - 96usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_open_interest"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_open_interest
    )
        - 100usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_exch_time_offset
    )
        - 104usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_prime_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_prime_exch
    ) - 108usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_lot_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_lot_size
    ) - 110usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_close_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_close_extime
    ) - 112usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_09
    ) - 120usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_exch
    ) - 130usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_price
    ) - 132usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_size
    ) - 136usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_tick_flags
    )
        - 140usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_10
    ) - 141usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_exch
    ) - 142usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_price
    ) - 144usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_size
    ) - 148usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_extime
    ) - 152usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_extime
    ) - 160usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_11
    ) - 168usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_prev_close"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_prev_close
    ) - 176usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_last_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_last_exch
    ) - 180usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_trade_tick_flags
    )
        - 182usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_12"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_12
    ) - 183usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_last_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_last_price
    ) - 184usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_last_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_last_size
    ) - 188usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL, xci_volume) - 192usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_vwap_volume"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_vwap_volume
    ) - 196usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_trading_session_date
    )
        - 200usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_13"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_13
    ) - 204usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_traded_value"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_traded_value
    ) - 208usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_14"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_14
    ) - 216usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_15"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_15
    ) - 224usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_open_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_open_price
    ) - 232usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_total_change"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_total_change
    ) - 236usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_high_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_high_price
    ) - 240usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_low_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_low_price
    ) - 244usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_high_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_high_exch
    ) - 248usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_low_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_low_exch
    ) - 250usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_open_exch"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_open_exch
    ) - 252usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::XCI_RESERVED_16"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        XCI_RESERVED_16
    ) - 254usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_last_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_last_extime
    ) - 256usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_open_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_open_extime
    ) - 264usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_high_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_high_extime
    ) - 272usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_low_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_low_extime
    ) - 280usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_customer_size
    )
        - 288usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_professional_size
    )
        - 292usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_bid_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_bid_market_maker_size
    )
        - 296usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_customer_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_customer_size
    )
        - 300usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_professional_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_professional_size
    )
        - 304usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_ask_market_maker_size"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_ask_market_maker_size
    )
        - 308usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_upper_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_upper_limit_price
    )
        - 312usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_lower_limit_price"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_lower_limit_price
    )
        - 316usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_limit_price_extime"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_limit_price_extime
    )
        - 320usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_quote_quals
    ) - 328usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_trade_quals
    ) - 332usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_quote_sequence
    )
        - 336usize];
    ["Offset of field: XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL::xci_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL,
        xci_trade_sequence
    )
        - 344usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TRADE_REF"][::std::mem::size_of::<XC_GROUP_TRADE_REF>() - 48usize];
    ["Alignment of XC_GROUP_TRADE_REF"][::std::mem::align_of::<XC_GROUP_TRADE_REF>() - 1usize];
    ["Offset of field: XC_GROUP_TRADE_REF::xct_bid_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_TRADE_REF, xct_bid_order_ref) - 0usize];
    ["Offset of field: XC_GROUP_TRADE_REF::xct_ask_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_TRADE_REF, xct_ask_order_ref) - 12usize];
    ["Offset of field: XC_GROUP_TRADE_REF::xct_bid_mmid"]
        [::std::mem::offset_of!(XC_GROUP_TRADE_REF, xct_bid_mmid) - 24usize];
    ["Offset of field: XC_GROUP_TRADE_REF::xct_ask_mmid"]
        [::std::mem::offset_of!(XC_GROUP_TRADE_REF, xct_ask_mmid) - 30usize];
    ["Offset of field: XC_GROUP_TRADE_REF::xct_trade_ref"]
        [::std::mem::offset_of!(XC_GROUP_TRADE_REF, xct_trade_ref) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_QUOTE"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_QUOTE>() - 24usize];
    ["Alignment of XC_GROUP_COMMODITY_QUOTE"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_QUOTE>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::XCQ_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, XCQ_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::xcq_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, xcq_bid_tick_flags) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::XCQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, XCQ_RESERVED_01) - 3usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::XCQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, XCQ_RESERVED_02) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::xcq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, xcq_bid_price) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::xcq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, xcq_bid_size) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::xcq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, xcq_ask_price) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE::xcq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE, xcq_ask_size) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_QUOTE_ALL>() - 64usize];
    ["Alignment of XC_GROUP_COMMODITY_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_market_status) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::XCQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, XCQ_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::XCQ_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, XCQ_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_bid_tick_flags) - 42usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::XCQ_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, XCQ_RESERVED_04) - 43usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::XCQ_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, XCQ_RESERVED_05) - 44usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_bid_price) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_bid_size) - 52usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_ask_price) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_QUOTE_ALL::xcq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_QUOTE_ALL, xcq_ask_size) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_TRADE"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_TRADE>() - 16usize];
    ["Alignment of XC_GROUP_COMMODITY_TRADE"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_TRADE>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::XCT_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, XCT_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::xct_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, xct_trade_tick_flags) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::XCT_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, XCT_RESERVED_02) - 3usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::XCT_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, XCT_RESERVED_03) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::xct_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, xct_price) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE::xct_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE, xct_size) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_TRADE_ACCUM"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_TRADE_ACCUM>() - 8usize];
    ["Alignment of XC_GROUP_COMMODITY_TRADE_ACCUM"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_TRADE_ACCUM>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ACCUM::xct_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ACCUM, xct_volume) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ACCUM::xct_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ACCUM, xct_total_change) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_TRADE_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_TRADE_ALL>() - 64usize];
    ["Alignment of XC_GROUP_COMMODITY_TRADE_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_TRADE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_market_status) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::XCT_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, XCT_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::XCT_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, XCT_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_trade_tick_flags) - 42usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::XCT_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, XCT_RESERVED_05) - 43usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::XCT_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, XCT_RESERVED_06) - 44usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_price) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_size) - 52usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_volume) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_TRADE_ALL::xct_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_TRADE_ALL, xct_total_change) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_CANCEL_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_CANCEL_ALL>() - 64usize];
    ["Alignment of XC_GROUP_COMMODITY_CANCEL_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_CANCEL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_market_status) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::XCA_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, XCA_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::XCA_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, XCA_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_trade_tick_flags) - 42usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::XCA_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, XCA_RESERVED_05) - 43usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::XCA_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, XCA_RESERVED_06) - 44usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_price) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_size) - 52usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_volume) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_CANCEL_ALL::xca_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CANCEL_ALL, xca_total_change) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_CORRECTION"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_CORRECTION>() - 32usize];
    ["Alignment of XC_GROUP_COMMODITY_CORRECTION"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_CORRECTION>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_cancel_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_CORRECTION,
        xcc_cancel_trade_tick_flags
    ) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_02) - 3usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_03) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_cancel_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, xcc_cancel_price) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_cancel_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, xcc_cancel_size) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_04) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_correct_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_CORRECTION,
        xcc_correct_trade_tick_flags
    ) - 18usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_06) - 19usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::XCC_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, XCC_RESERVED_07) - 20usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_correct_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, xcc_correct_price) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION::xcc_correct_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION, xcc_correct_size) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_CORRECTION_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_CORRECTION_ALL>() - 80usize];
    ["Alignment of XC_GROUP_COMMODITY_CORRECTION_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_CORRECTION_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_CORRECTION_ALL,
        xcc_instrument_status
    ) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_market_status) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_cancel_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_CORRECTION_ALL,
        xcc_cancel_trade_tick_flags
    )
        - 42usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_05) - 43usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_06) - 44usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_cancel_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_cancel_price) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_cancel_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_cancel_size) - 52usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_07) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_correct_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_CORRECTION_ALL,
        xcc_correct_trade_tick_flags
    )
        - 58usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_09) - 59usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::XCC_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, XCC_RESERVED_10) - 60usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_correct_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_correct_price) - 64usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_correct_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_correct_size) - 68usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_volume) - 72usize];
    ["Offset of field: XC_GROUP_COMMODITY_CORRECTION_ALL::xcc_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_CORRECTION_ALL, xcc_total_change) - 76usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME>() - 304usize];
    ["Alignment of XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_country_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_symbol_type
    ) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME, xcr_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_market_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_market_status
    ) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_02
    ) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_exchange_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_receive_hitime
    )
        - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_sequence
    ) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_03
    ) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_alternate_id1
    ) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_alternate_id2
    ) - 64usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_currency"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_currency
    ) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_04
    ) - 83usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_05
    ) - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_06
    ) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_exch_time_offset
    )
        - 92usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_07
    ) - 96usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_tick_flags
    )
        - 106usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_08
    ) - 107usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_expiration"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_expiration
    ) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_bid_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_price
    ) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_bid_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_size
    ) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_ask_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_price
    ) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_ask_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_size
    ) - 124usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_bid_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_hitime
    ) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_ask_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_hitime
    ) - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_bid_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_bid_implied_size
    )
        - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_ask_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_ask_implied_size
    )
        - 148usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_pd_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_pd_setl_price
    )
        - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_09
    ) - 157usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_tick_flags
    )
        - 158usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_10
    ) - 159usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_last_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_last_price
    ) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_last_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_last_size
    ) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME, xcr_volume) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_total_change"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_total_change
    ) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_high_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_high_price
    ) - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_low_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_low_price
    ) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_open_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_price_high
    )
        - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_open_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_price_low
    )
        - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_close_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_close_price_high
    )
        - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_close_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_close_price_low
    )
        - 196usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_pd_setl_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_pd_setl_hitime
    )
        - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_last_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_last_hitime
    ) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_high_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_high_hitime
    ) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_low_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_low_hitime
    ) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_open_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_hitime
    ) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_close_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_close_hitime
    ) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_setl_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_setl_hitime
    ) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_setl_price
    ) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_trading_session_date
    )
        - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_open_interest"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_open_interest
    )
        - 264usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_pd_volume"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_pd_volume
    ) - 268usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::XCR_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        XCR_RESERVED_11
    ) - 272usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_quote_quals
    ) - 280usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_quals
    ) - 284usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_quote_sequence
    )
        - 288usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME::xcr_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME,
        xcr_trade_sequence
    )
        - 296usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_REFRESH_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_REFRESH_ALL>() - 280usize];
    ["Alignment of XC_GROUP_COMMODITY_REFRESH_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_REFRESH_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_market_status) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_alternate_id1"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_alternate_id1) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_alternate_id2"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_alternate_id2) - 64usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_currency"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_currency) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_04) - 83usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_05) - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_06) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_exch_time_offset"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_exch_time_offset) - 92usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_07) - 96usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_bid_tick_flags) - 106usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_08) - 107usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_expiration"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_expiration) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_bid_price) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_bid_size) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_ask_price) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_ask_size) - 124usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_bid_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_bid_extime) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_ask_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_ask_extime) - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_bid_implied_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_bid_implied_size) - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_ask_implied_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_ask_implied_size) - 148usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_pd_setl_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_pd_setl_price) - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_09) - 157usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_trade_tick_flags) - 158usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_10) - 159usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_last_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_last_price) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_last_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_last_size) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_volume) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_total_change) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_high_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_high_price) - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_low_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_low_price) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_open_price_high"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_open_price_high) - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_open_price_low"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_open_price_low) - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_close_price_high"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_close_price_high) - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_close_price_low"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_close_price_low) - 196usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_pd_setl_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_pd_setl_extime) - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_last_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_last_extime) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_high_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_high_extime) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_low_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_low_extime) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_open_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_open_extime) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_close_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_close_extime) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_setl_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_setl_extime) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_setl_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_setl_price) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_ALL,
        xcr_trading_session_date
    ) - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_open_interest"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_open_interest) - 264usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::xcr_pd_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, xcr_pd_volume) - 268usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_ALL::XCR_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_ALL, XCR_RESERVED_11) - 272usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL>() - 304usize];
    ["Alignment of XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_country_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_symbol_type
    ) - 5usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_line_id"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL, xcr_line_id) - 6usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_quals"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL, xcr_quals) - 8usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_market_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_market_status
    ) - 13usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_02
    ) - 15usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_exchange_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_receive_hitime
    ) - 24usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_sequence"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL, xcr_sequence) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_03
    ) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_alternate_id1
    ) - 48usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_alternate_id2
    ) - 64usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_currency"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL, xcr_currency) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_04
    ) - 83usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_05
    ) - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_06
    ) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_exch_time_offset
    )
        - 92usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_07
    ) - 96usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_bid_tick_flags
    )
        - 106usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_08
    ) - 107usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_expiration"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_expiration
    ) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_bid_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_bid_price
    ) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_bid_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_bid_size
    ) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_ask_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_ask_price
    ) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_ask_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_ask_size
    ) - 124usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_bid_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_bid_extime
    ) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_ask_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_ask_extime
    ) - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_bid_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_bid_implied_size
    )
        - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_ask_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_ask_implied_size
    )
        - 148usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_pd_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_pd_setl_price
    ) - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_09
    ) - 157usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_trade_tick_flags
    )
        - 158usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_10
    ) - 159usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_last_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_last_price
    ) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_last_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_last_size
    ) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL, xcr_volume) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_total_change"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_total_change
    ) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_high_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_high_price
    ) - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_low_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_low_price
    ) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_open_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_open_price_high
    )
        - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_open_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_open_price_low
    )
        - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_close_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_close_price_high
    )
        - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_close_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_close_price_low
    )
        - 196usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_pd_setl_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_pd_setl_extime
    )
        - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_last_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_last_extime
    ) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_high_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_high_extime
    ) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_low_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_low_extime
    ) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_open_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_open_extime
    ) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_close_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_close_extime
    ) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_setl_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_setl_extime
    ) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_setl_price
    ) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_trading_session_date
    )
        - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_open_interest"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_open_interest
    ) - 264usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_pd_volume"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_pd_volume
    ) - 268usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::XCR_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        XCR_RESERVED_11
    ) - 272usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_quote_quals
    ) - 280usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_trade_quals
    ) - 284usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_quote_sequence
    )
        - 288usize];
    ["Offset of field: XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL::xcr_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL,
        xcr_trade_sequence
    )
        - 296usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME>() - 272usize];
    ["Alignment of XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_country_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_symbol_type
    ) - 25usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_instrument_status
    )
        - 26usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_market_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_market_status
    ) - 27usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_02
    ) - 29usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_03
    ) - 30usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_04
    ) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_alternate_id1
    ) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_alternate_id2
    ) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_currency"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME, xci_currency) - 72usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_05
    ) - 75usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_06
    ) - 76usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_07
    ) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_exch_time_offset
    )
        - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_08
    ) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_bid_tick_flags
    ) - 98usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_09
    ) - 99usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_expiration"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_expiration
    ) - 100usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_bid_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_bid_price
    ) - 104usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME, xci_bid_size) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_ask_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_ask_price
    ) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME, xci_ask_size) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_bid_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_bid_hitime
    ) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_ask_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_ask_hitime
    ) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_bid_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_bid_implied_size
    )
        - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_ask_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_ask_implied_size
    )
        - 140usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_pd_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_pd_setl_price
    ) - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_10
    ) - 149usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_trade_tick_flags
    )
        - 150usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_11
    ) - 151usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_last_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_last_price
    ) - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_last_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_last_size
    ) - 156usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME, xci_volume) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_total_change"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_total_change
    ) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_high_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_high_price
    ) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_low_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_low_price
    ) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_open_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_open_price_high
    )
        - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_open_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_open_price_low
    ) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_close_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_close_price_high
    )
        - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_close_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_close_price_low
    )
        - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_pd_setl_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_pd_setl_hitime
    ) - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_last_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_last_hitime
    ) - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_high_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_high_hitime
    ) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_low_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_low_hitime
    ) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_open_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_open_hitime
    ) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_close_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_close_hitime
    ) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_setl_hitime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_setl_hitime
    ) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_setl_price
    ) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_trading_session_date
    )
        - 252usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_open_interest"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_open_interest
    ) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::xci_pd_volume"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        xci_pd_volume
    ) - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME::XCI_RESERVED_12"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME,
        XCI_RESERVED_12
    ) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_IMAGE_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_IMAGE_ALL>() - 272usize];
    ["Alignment of XC_GROUP_COMMODITY_IMAGE_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_IMAGE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_country_code"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_country_code) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_symbol_type) - 25usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_instrument_status) - 26usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_market_status"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_market_status) - 27usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_02) - 29usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_03) - 30usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_04) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_alternate_id1"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_alternate_id1) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_alternate_id2"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_alternate_id2) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_currency"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_currency) - 72usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_05) - 75usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_06) - 76usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_07) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_exch_time_offset"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_exch_time_offset) - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_08"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_08) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_bid_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_bid_tick_flags) - 98usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_09"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_09) - 99usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_expiration"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_expiration) - 100usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_bid_price) - 104usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_bid_size) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_ask_price) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_ask_size) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_bid_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_bid_extime) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_ask_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_ask_extime) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_bid_implied_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_bid_implied_size) - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_ask_implied_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_ask_implied_size) - 140usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_pd_setl_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_pd_setl_price) - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_10"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_10) - 149usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_trade_tick_flags"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_trade_tick_flags) - 150usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_11"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_11) - 151usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_last_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_last_price) - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_last_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_last_size) - 156usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_volume) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_total_change"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_total_change) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_high_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_high_price) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_low_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_low_price) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_open_price_high"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_open_price_high) - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_open_price_low"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_open_price_low) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_close_price_high"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_close_price_high) - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_close_price_low"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_close_price_low) - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_pd_setl_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_pd_setl_extime) - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_last_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_last_extime) - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_high_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_high_extime) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_low_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_low_extime) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_open_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_open_extime) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_close_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_close_extime) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_setl_extime"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_setl_extime) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_setl_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_setl_price) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_trading_session_date"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_trading_session_date) - 252usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_open_interest"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_open_interest) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::xci_pd_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, xci_pd_volume) - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_ALL::XCI_RESERVED_12"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_ALL, XCI_RESERVED_12) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL"]
        [::std::mem::size_of::<XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL>() - 296usize];
    ["Alignment of XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL"]
        [::std::mem::align_of::<XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_country_code"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_symbol"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_symbol) - 4usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_symbol_type
    ) - 25usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_instrument_status
    )
        - 26usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_market_status"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_market_status
    ) - 27usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_02
    ) - 29usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_03
    ) - 30usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_04
    ) - 32usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_alternate_id1"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_alternate_id1
    ) - 40usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_alternate_id2"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_alternate_id2
    ) - 56usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_currency"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_currency) - 72usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_05
    ) - 75usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_06
    ) - 76usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_07"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_07
    ) - 80usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_exch_time_offset"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_exch_time_offset
    ) - 84usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_08"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_08
    ) - 88usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_bid_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_bid_tick_flags
    ) - 98usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_09"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_09
    ) - 99usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_expiration"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_expiration
    ) - 100usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_bid_price) - 104usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_bid_size) - 108usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_ask_price) - 112usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_ask_size) - 116usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_bid_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_bid_extime
    ) - 120usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_ask_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_ask_extime
    ) - 128usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_bid_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_bid_implied_size
    )
        - 136usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_ask_implied_size"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_ask_implied_size
    )
        - 140usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_pd_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_pd_setl_price
    ) - 144usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_10"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_10
    ) - 149usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_trade_tick_flags"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_trade_tick_flags
    )
        - 150usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_11"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_11
    ) - 151usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_last_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_last_price
    ) - 152usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_last_size"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_last_size) - 156usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_volume) - 160usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_total_change"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_total_change
    ) - 164usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_high_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_high_price
    ) - 168usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_low_price"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_low_price) - 172usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_open_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_open_price_high
    ) - 176usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_open_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_open_price_low
    ) - 180usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_close_price_high"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_close_price_high
    )
        - 184usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_close_price_low"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_close_price_low
    ) - 188usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_pd_setl_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_pd_setl_extime
    ) - 192usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_last_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_last_extime
    ) - 200usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_high_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_high_extime
    ) - 208usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_low_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_low_extime
    ) - 216usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_open_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_open_extime
    ) - 224usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_close_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_close_extime
    ) - 232usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_setl_extime"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_setl_extime
    ) - 240usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_setl_price"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_setl_price
    ) - 248usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_trading_session_date"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_trading_session_date
    )
        - 252usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_open_interest"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_open_interest
    ) - 256usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_pd_volume"]
        [::std::mem::offset_of!(XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL, xci_pd_volume) - 260usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::XCI_RESERVED_12"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        XCI_RESERVED_12
    ) - 264usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_quote_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_quote_quals
    ) - 272usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_trade_quals"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_trade_quals
    ) - 276usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_quote_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_quote_sequence
    ) - 280usize];
    ["Offset of field: XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL::xci_trade_sequence"][::std::mem::offset_of!(
        XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL,
        xci_trade_sequence
    ) - 288usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_ENTRY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_ENTRY>() - 48usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_ENTRY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_ENTRY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::XOB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, XOB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_order_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_order_quals) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_order_ref) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_origin_extime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_origin_extime) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_exch"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_exch) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::xob_country"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, xob_country) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY::XOB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY, XOB_RESERVED_02) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY>() - 56usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::XOB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, XOB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_order_quals"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY,
        xob_order_quals
    ) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_order_ref) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_origin_extime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY,
        xob_origin_extime
    ) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_exch"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_exch) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_country"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY, xob_country) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::XOB_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY,
        XOB_RESERVED_02
    ) - 44usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY::xob_order_priority"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY,
        xob_order_priority
    ) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_ENTRY"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_ENTRY>() - 24usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_ENTRY"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_ENTRY>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY::xpb_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY, xpb_extime) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL>() - 40usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, xpb_extime) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_customer_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL,
        xpb_customer_volume
    ) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_professional_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL,
        xpb_professional_volume
    )
        - 28usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::xpb_market_maker_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL,
        xpb_market_maker_volume
    )
        - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL::XPB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL, XPB_RESERVED_02) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_LEVEL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_LEVEL>() - 32usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_LEVEL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_LEVEL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_extime) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::XPB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, XPB_RESERVED_02) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL::xpb_implied_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL, xpb_implied_volume) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL>() - 48usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, xpb_extime) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::XPB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, XPB_RESERVED_02) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_implied_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL,
        xpb_implied_volume
    ) - 28usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_customer_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL,
        xpb_customer_volume
    ) - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_professional_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL,
        xpb_professional_volume
    )
        - 36usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::xpb_market_maker_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL,
        xpb_market_maker_volume
    )
        - 40usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL::XPB_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL, XPB_RESERVED_03) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_UPDATE"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_UPDATE>() - 40usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_UPDATE"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_UPDATE>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::xobu_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, xobu_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::xobu_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, xobu_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::xobu_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, xobu_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::XOBU_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, XOBU_RESERVED_03) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::xobu_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, xobu_order_ref) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE::xobu_origin_extime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE, xobu_origin_extime) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY>() - 48usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY, xobu_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY, xobu_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY, xobu_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::XOBU_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY,
        XOBU_RESERVED_03
    ) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_order_ref"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY,
        xobu_order_ref
    ) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_origin_extime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY,
        xobu_origin_extime
    ) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY::xobu_order_priority"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY,
        xobu_order_priority
    ) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_UPDATE_ALL"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_UPDATE_ALL>() - 80usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_UPDATE_ALL"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_UPDATE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_country_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_country_code) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_line_id"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_line_id) - 6usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_quals) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_market_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_market_status) - 13usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::XOBU_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, XOBU_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_sequence"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_sequence) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_mmid) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_price) - 48usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_size) - 52usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::XOBU_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, XOBU_RESERVED_06) - 56usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_order_ref) - 60usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_ALL::xobu_origin_extime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_ALL, xobu_origin_extime) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE>() - 20usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE::xpbu_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE, xpbu_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE::xpbu_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE, xpbu_price) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE::xpbu_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE, xpbu_volume) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE::xpbu_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE, xpbu_extime) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_CPMVOL"][::std::mem::size_of::<XC_GROUP_CPMVOL>() - 16usize];
    ["Alignment of XC_GROUP_CPMVOL"][::std::mem::align_of::<XC_GROUP_CPMVOL>() - 1usize];
    ["Offset of field: XC_GROUP_CPMVOL::xcpm_customer_volume"]
        [::std::mem::offset_of!(XC_GROUP_CPMVOL, xcpm_customer_volume) - 0usize];
    ["Offset of field: XC_GROUP_CPMVOL::xcpm_professional_volume"]
        [::std::mem::offset_of!(XC_GROUP_CPMVOL, xcpm_professional_volume) - 4usize];
    ["Offset of field: XC_GROUP_CPMVOL::xcpm_market_maker_volume"]
        [::std::mem::offset_of!(XC_GROUP_CPMVOL, xcpm_market_maker_volume) - 8usize];
    ["Offset of field: XC_GROUP_CPMVOL::XCPM_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_CPMVOL, XCPM_RESERVED_00) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_ALL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_ALL>() - 60usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_ALL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_country_code"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_country_code) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_line_id"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_line_id) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_quals"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_quals) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_market_status"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_market_status) - 13usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::XPBU_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, XPBU_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_sequence"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_sequence) - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_order_count) - 42usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_price) - 44usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_volume) - 48usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_ALL::xpbu_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_ALL, xpbu_extime) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL>() - 76usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_exchange_code
    ) - 0usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_country_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_country_code
    ) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_symbol_type
    ) - 5usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_line_id"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL, xpbu_line_id) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_quals"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL, xpbu_quals) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_market_status"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_market_status
    )
        - 13usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::XPBU_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        XPBU_RESERVED_02
    ) - 15usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_exchange_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_receive_hitime
    )
        - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_sequence"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_sequence
    ) - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_order_count
    ) - 42usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL, xpbu_price) - 44usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL, xpbu_volume) - 48usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL, xpbu_extime) - 52usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_customer_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_customer_volume
    )
        - 60usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_professional_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_professional_volume
    )
        - 64usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::xpbu_market_maker_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        xpbu_market_maker_volume
    )
        - 68usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL::XPBU_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL,
        XPBU_RESERVED_05
    ) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL>() - 24usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::xpbu_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL,
        xpbu_order_count
    ) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::xpbu_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL, xpbu_price) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::xpbu_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL, xpbu_volume) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::xpbu_extime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL, xpbu_extime) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::xpbu_row_level"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL,
        xpbu_row_level
    ) - 20usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL::XPBU_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL,
        XPBU_RESERVED_02
    ) - 22usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL>() - 64usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_exchange_code
    )
        - 0usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_country_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_country_code
    )
        - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_symbol_type
    )
        - 5usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_line_id"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_line_id
    ) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_quals"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_quals
    ) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_instrument_status
    )
        - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_market_status"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_market_status
    )
        - 13usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::XPBU_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        XPBU_RESERVED_02
    )
        - 15usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_exchange_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_receive_hitime
    )
        - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_sequence"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_sequence
    ) - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_order_count
    )
        - 42usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_price"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_price
    ) - 44usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_volume
    ) - 48usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_extime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_extime
    ) - 52usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::xpbu_row_level"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        xpbu_row_level
    ) - 60usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL::XPBU_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL,
        XPBU_RESERVED_05
    )
        - 62usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL>() - 80usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_exchange_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_exchange_code
    )
        - 0usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_country_code"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_country_code
    )
        - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_symbol_type
    )
        - 5usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_line_id"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_line_id
    )
        - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_quals"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_quals
    )
        - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_instrument_status"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_instrument_status) - 12usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_market_status"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_market_status
    )
        - 13usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::XPBU_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        XPBU_RESERVED_02
    )
        - 15usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_exchange_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_exchange_hitime) - 16usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_receive_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_receive_hitime) - 24usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_sequence"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_sequence
    )
        - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_order_count
    )
        - 42usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_price"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_price
    )
        - 44usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_volume
    )
        - 48usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_extime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_extime
    )
        - 52usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_row_level"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        xpbu_row_level
    )
        - 60usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::XPBU_RESERVED_05"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        XPBU_RESERVED_05
    )
        - 62usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_customer_volume"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_customer_volume) - 64usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_professional_volume"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_professional_volume) - 68usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::xpbu_market_maker_volume"] [:: std :: mem :: offset_of ! (XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL , xpbu_market_maker_volume) - 72usize] ;
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL::XPBU_RESERVED_06"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL,
        XPBU_RESERVED_06
    )
        - 76usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME>() - 48usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::XOB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, XOB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_order_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_order_quals) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_order_ref) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_origin_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME,
        xob_origin_hitime
    ) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_exch"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_exch) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::xob_country"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, xob_country) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME::XOB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME, XOB_RESERVED_02) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME>() - 56usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::XOB_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        XOB_RESERVED_01
    )
        - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME, xob_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_price"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_price
    ) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_size"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_size
    ) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_order_quals"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_order_quals
    )
        - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_order_ref"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_order_ref
    ) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_origin_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_origin_hitime
    )
        - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_exch"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_exch
    ) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_country"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_country
    ) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::XOB_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        XOB_RESERVED_02
    )
        - 44usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME::xob_order_priority"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME,
        xob_order_priority
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME>() - 24usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME::xpb_hitime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME, xpb_hitime) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME>() - 40usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::XPB_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        XPB_RESERVED_01
    ) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_order_count
    ) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_country"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_country
    ) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_volume
    ) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_customer_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_customer_volume
    )
        - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_professional_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_professional_volume
    )
        - 28usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::xpb_market_maker_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        xpb_market_maker_volume
    )
        - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME::XPB_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME,
        XPB_RESERVED_02
    ) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME>() - 32usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::XPB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, XPB_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_country"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_country) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_volume) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_hitime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, xpb_hitime) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::XPB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME, XPB_RESERVED_02) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME::xpb_implied_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME,
        xpb_implied_volume
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME>() - 48usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::XPB_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        XPB_RESERVED_01
    ) - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_order_count
    ) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_exch"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME, xpb_exch) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_country"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_country
    ) - 6usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME, xpb_price) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_volume
    ) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::XPB_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        XPB_RESERVED_02
    ) - 24usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_implied_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_implied_volume
    )
        - 28usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_customer_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_customer_volume
    )
        - 32usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_professional_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_professional_volume
    )
        - 36usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::xpb_market_maker_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        xpb_market_maker_volume
    )
        - 40usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME::XPB_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME,
        XPB_RESERVED_03
    ) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME>() - 40usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::xobu_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME, xobu_mmid) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::xobu_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME, xobu_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::xobu_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME, xobu_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::XOBU_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME,
        XOBU_RESERVED_03
    ) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::xobu_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME, xobu_order_ref) - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME::xobu_origin_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME,
        xobu_origin_hitime
    ) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME"]
        [::std::mem::size_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME>() - 48usize];
    ["Alignment of XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME"]
        [::std::mem::align_of::<XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_mmid"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_mmid
    ) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_price"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_price
    ) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_size"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_size
    ) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::XOBU_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        XOBU_RESERVED_03
    )
        - 16usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_order_ref"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_order_ref
    )
        - 20usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_origin_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_origin_hitime
    )
        - 32usize];
    ["Offset of field: XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME::xobu_order_priority"][::std::mem::offset_of!(
        XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME,
        xobu_order_priority
    )
        - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME>() - 20usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME::xpbu_order_count"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME, xpbu_order_count) - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME::xpbu_price"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME, xpbu_price) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME::xpbu_volume"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME, xpbu_volume) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME::xpbu_hitime"]
        [::std::mem::offset_of!(XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME, xpbu_hitime) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME"]
        [::std::mem::size_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME>() - 24usize];
    ["Alignment of XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME"]
        [::std::mem::align_of::<XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME>() - 1usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::xpbu_order_count"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        xpbu_order_count
    )
        - 2usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::xpbu_price"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        xpbu_price
    ) - 4usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::xpbu_volume"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        xpbu_volume
    ) - 8usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::xpbu_hitime"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        xpbu_hitime
    ) - 12usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::xpbu_row_level"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        xpbu_row_level
    )
        - 20usize];
    ["Offset of field: XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME::XPBU_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME,
        XPBU_RESERVED_02
    )
        - 22usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_EXECUTION_V3_1_7"]
        [::std::mem::size_of::<XC_GROUP_ORDER_EXECUTION_V3_1_7>() - 40usize];
    ["Alignment of XC_GROUP_ORDER_EXECUTION_V3_1_7"]
        [::std::mem::align_of::<XC_GROUP_ORDER_EXECUTION_V3_1_7>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::XOEX_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, XOEX_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::xoex_order_ref_id_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, xoex_order_ref_id_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::XOEX_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, XOEX_RESERVED_02) - 6usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::xoex_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, xoex_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::xoex_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, xoex_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::xoex_trade_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, xoex_trade_ref) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_V3_1_7::xoex_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_V3_1_7, xoex_order_ref) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_EXECUTION"]
        [::std::mem::size_of::<XC_GROUP_ORDER_EXECUTION>() - 80usize];
    ["Alignment of XC_GROUP_ORDER_EXECUTION"]
        [::std::mem::align_of::<XC_GROUP_ORDER_EXECUTION>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::XOEX_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, XOEX_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_order_ref_id_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_order_ref_id_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::XOEX_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, XOEX_RESERVED_03) - 7usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_price) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_size) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_trade_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_trade_ref) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_order_ref) - 28usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_sub_market) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::XOEX_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, XOEX_RESERVED_04) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_bid_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_bid_order_ref) - 44usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_ask_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_ask_order_ref) - 56usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_bid_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_bid_mmid) - 68usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION::xoex_ask_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION, xoex_ask_mmid) - 74usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7"]
        [::std::mem::size_of::<XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7>() - 80usize];
    ["Alignment of XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7"]
        [::std::mem::align_of::<XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_country_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_country_code) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_line_id"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_line_id) - 6usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_quals) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7,
        xoex_instrument_status
    ) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_market_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_market_status) - 13usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::XOEX_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, XOEX_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7,
        xoex_exchange_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7,
        xoex_receive_hitime
    ) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_sequence"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_sequence) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::XOEX_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, XOEX_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_order_ref_id_type"][::std::mem::offset_of!(
        XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7,
        xoex_order_ref_id_type
    ) - 45usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::XOEX_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, XOEX_RESERVED_05) - 46usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_price) - 48usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_size) - 52usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_trade_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_trade_ref) - 56usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7::xoex_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7, xoex_order_ref) - 68usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_EXECUTION_ALL"]
        [::std::mem::size_of::<XC_GROUP_ORDER_EXECUTION_ALL>() - 120usize];
    ["Alignment of XC_GROUP_ORDER_EXECUTION_ALL"]
        [::std::mem::align_of::<XC_GROUP_ORDER_EXECUTION_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_country_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_country_code) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_line_id"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_line_id) - 6usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_quals) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_market_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_market_status) - 13usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::XOEX_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, XOEX_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_sequence"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_sequence) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::XOEX_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, XOEX_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_order_ref_id_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_order_ref_id_type) - 45usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::XOEX_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, XOEX_RESERVED_06) - 47usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_price) - 48usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_size) - 52usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_trade_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_trade_ref) - 56usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_order_ref) - 68usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_sub_market"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_sub_market) - 80usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::XOEX_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, XOEX_RESERVED_07) - 82usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_bid_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_bid_order_ref) - 84usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_ask_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_ask_order_ref) - 96usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_bid_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_bid_mmid) - 108usize];
    ["Offset of field: XC_GROUP_ORDER_EXECUTION_ALL::xoex_ask_mmid"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_EXECUTION_ALL, xoex_ask_mmid) - 114usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE>() - 24usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::XOIMB_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, XOIMB_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_type) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_auction_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_auction_type) - 3usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_imbalance_volume"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_imbalance_volume) - 4usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_paired_volume"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_paired_volume) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_reference_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_reference_price) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_near_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_near_price) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE::xoimb_far_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE, xoimb_far_price) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE_ALL"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE_ALL>() - 64usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE_ALL"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_country_code"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_country_code) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_line_id"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_line_id) - 6usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_quals) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_market_status"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_market_status) - 13usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::XOIMB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, XOIMB_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_sequence"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_sequence) - 32usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::XOIMB_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, XOIMB_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_type) - 42usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_auction_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_auction_type) - 43usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_imbalance_volume"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_imbalance_volume) - 44usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_paired_volume"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_paired_volume) - 48usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_reference_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_reference_price) - 52usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_near_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_near_price) - 56usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_ALL::xoimb_far_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_ALL, xoimb_far_price) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE_AUCTION"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION>() - 104usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE_AUCTION"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::XOIMB_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_AUCTION, XOIMB_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_AUCTION, xoimb_imbalance_quals) - 4usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_sequence"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_sequence
    ) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_receive_hitime
    )
        - 16usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_type"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_AUCTION, xoimb_imbalance_type) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_auction_type"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_auction_type
    )
        - 25usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::XOIMB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_AUCTION, XOIMB_RESERVED_01) - 26usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_volume
    ) - 28usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_paired_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_paired_volume
    )
        - 32usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_reference_price"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_reference_price
    )
        - 36usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_near_price"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_near_price
    ) - 40usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_far_price"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_far_price
    ) - 44usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_auction_id"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_auction_id
    ) - 48usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_auction_start_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_auction_start_hitime
    )
        - 80usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_auction_end_hitime"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_auction_end_hitime
    )
        - 88usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION::xoimb_imbalance_auction_owner"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION,
        xoimb_imbalance_auction_owner
    )
        - 96usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED>() - 112usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::XOIMB_RESERVED_00"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        XOIMB_RESERVED_00
    )
        - 0usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_quals"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        xoimb_imbalance_quals
    )
        - 4usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_sequence"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        xoimb_imbalance_sequence
    )
        - 8usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_receive_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_receive_hitime) - 16usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_type"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        xoimb_imbalance_type
    )
        - 24usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_unpaired_type"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_unpaired_type) - 25usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_auction_type"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_auction_type) - 26usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::XOIMB_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        XOIMB_RESERVED_01
    )
        - 27usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED,
        xoimb_imbalance_volume
    )
        - 28usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_paired_volume"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_paired_volume) - 32usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_unpaired_volume"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_unpaired_volume) - 36usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_reference_price"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_reference_price) - 40usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_nominal_reference_price"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_nominal_reference_price) - 44usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_near_price"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_near_price) - 48usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_far_price"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_far_price) - 52usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_auction_id"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_auction_id) - 56usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_auction_start_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_auction_start_hitime) - 88usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_auction_end_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_auction_end_hitime) - 96usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED::xoimb_imbalance_auction_owner"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_WITH_UNPAIRED , xoimb_imbalance_auction_owner) - 104usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE_REGULATORY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE_REGULATORY>() - 32usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE_REGULATORY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE_REGULATORY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::XOIMB_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_REGULATORY, XOIMB_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_type"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_REGULATORY,
        xoimb_imbalance_reg_type
    ) - 2usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_unpaired_type"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_REGULATORY,
        xoimb_imbalance_reg_unpaired_type
    )
        - 3usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::XOIMB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_IMBALANCE_REGULATORY, XOIMB_RESERVED_01) - 4usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_REGULATORY,
        xoimb_imbalance_reg_volume
    )
        - 8usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_paired_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_REGULATORY,
        xoimb_imbalance_reg_paired_volume
    )
        - 12usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_unpaired_volume"][::std::mem::offset_of!(
        XC_GROUP_ORDER_IMBALANCE_REGULATORY,
        xoimb_imbalance_reg_unpaired_volume
    )
        - 16usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_nominal_reference_price"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_REGULATORY , xoimb_imbalance_reg_nominal_reference_price) - 20usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_REGULATORY::xoimb_imbalance_reg_auction_start_hitime"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_REGULATORY , xoimb_imbalance_reg_auction_start_hitime) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_INDICATION_OF_INTEREST"]
        [::std::mem::size_of::<XC_GROUP_INDICATION_OF_INTEREST>() - 48usize];
    ["Alignment of XC_GROUP_INDICATION_OF_INTEREST"]
        [::std::mem::align_of::<XC_GROUP_INDICATION_OF_INTEREST>() - 1usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_bid_offset_price"][::std::mem::offset_of!(
        XC_GROUP_INDICATION_OF_INTEREST,
        ioi_ioi_bid_offset_price
    ) - 0usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_ask_offset_price"][::std::mem::offset_of!(
        XC_GROUP_INDICATION_OF_INTEREST,
        ioi_ioi_ask_offset_price
    ) - 4usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_bid_quals"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, ioi_ioi_bid_quals) - 8usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_ask_quals"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, ioi_ioi_ask_quals) - 12usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_bid_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, ioi_ioi_bid_order_ref) - 16usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_ask_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, ioi_ioi_ask_order_ref) - 28usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::ioi_ioi_order_ref_type"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, ioi_ioi_order_ref_type) - 40usize];
    ["Offset of field: XC_GROUP_INDICATION_OF_INTEREST::IOI_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_INDICATION_OF_INTEREST, IOI_RESERVED_01) - 42usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING"]
        [::std::mem::size_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING>() - 24usize];
    ["Alignment of XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING"]
        [::std::mem::align_of::<XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING::xoimb_imbalance_auction_clearing_leg_security_id"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING , xoimb_imbalance_auction_clearing_leg_security_id) - 0usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING::xoimb_imbalance_auction_clearing_firm"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING , xoimb_imbalance_auction_clearing_firm) - 8usize] ;
    ["Offset of field: XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING::xoimb_imbalance_auction_clearing_account"] [:: std :: mem :: offset_of ! (XC_GROUP_ORDER_IMBALANCE_AUCTION_CLEARING , xoimb_imbalance_auction_clearing_account) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_MARKET_DIRECTORY"]
        [::std::mem::size_of::<XC_GROUP_MARKET_DIRECTORY>() - 8usize];
    ["Alignment of XC_GROUP_MARKET_DIRECTORY"]
        [::std::mem::align_of::<XC_GROUP_MARKET_DIRECTORY>() - 1usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY::XMD_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY, XMD_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY::xmd_financial_status"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY, xmd_financial_status) - 4usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY::xmd_market_segment"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY, xmd_market_segment) - 5usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY::xmd_prime_exch"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY, xmd_prime_exch) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_MARKET_DIRECTORY_ALL"]
        [::std::mem::size_of::<XC_GROUP_MARKET_DIRECTORY_ALL>() - 48usize];
    ["Alignment of XC_GROUP_MARKET_DIRECTORY_ALL"]
        [::std::mem::align_of::<XC_GROUP_MARKET_DIRECTORY_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_country_code"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_country_code) - 2usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_line_id"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_line_id) - 6usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_quals"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_quals) - 8usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_market_status"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_market_status) - 13usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::XMD_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, XMD_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_sequence"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_sequence) - 32usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::XMD_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, XMD_RESERVED_03) - 40usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_financial_status"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_financial_status) - 44usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_market_segment"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_market_segment) - 45usize];
    ["Offset of field: XC_GROUP_MARKET_DIRECTORY_ALL::xmd_prime_exch"]
        [::std::mem::offset_of!(XC_GROUP_MARKET_DIRECTORY_ALL, xmd_prime_exch) - 46usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_REQUEST_FOR_QUOTE"]
        [::std::mem::size_of::<XC_GROUP_REQUEST_FOR_QUOTE>() - 40usize];
    ["Alignment of XC_GROUP_REQUEST_FOR_QUOTE"]
        [::std::mem::align_of::<XC_GROUP_REQUEST_FOR_QUOTE>() - 1usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE::xrfq_requested_size"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE, xrfq_requested_size) - 0usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE::XRFQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE, XRFQ_RESERVED_01) - 5usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE::xrfq_quote_request_id"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE, xrfq_quote_request_id) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_REQUEST_FOR_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_REQUEST_FOR_QUOTE_ALL>() - 80usize];
    ["Alignment of XC_GROUP_REQUEST_FOR_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_REQUEST_FOR_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_country_code"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_country_code) - 2usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_line_id"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_line_id) - 6usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_quals"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_quals) - 8usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_market_status"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_market_status) - 13usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::XRFQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, XRFQ_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_sequence"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_sequence) - 32usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_requested_size"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_requested_size) - 40usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::XRFQ_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, XRFQ_RESERVED_04) - 45usize];
    ["Offset of field: XC_GROUP_REQUEST_FOR_QUOTE_ALL::xrfq_quote_request_id"]
        [::std::mem::offset_of!(XC_GROUP_REQUEST_FOR_QUOTE_ALL, xrfq_quote_request_id) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TRADING_ACTION_ALL"]
        [::std::mem::size_of::<XC_GROUP_TRADING_ACTION_ALL>() - 40usize];
    ["Alignment of XC_GROUP_TRADING_ACTION_ALL"]
        [::std::mem::align_of::<XC_GROUP_TRADING_ACTION_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_country_code"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_country_code) - 2usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_line_id"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_line_id) - 6usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_quals"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_quals) - 8usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_instrument_status) - 12usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_market_status"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_market_status) - 13usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::XTA_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, XTA_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_exchange_hitime) - 16usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_receive_hitime"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_receive_hitime) - 24usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_ALL::xta_sequence"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_ALL, xta_sequence) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TRADING_ACTION_WITH_LULD_ALL"]
        [::std::mem::size_of::<XC_GROUP_TRADING_ACTION_WITH_LULD_ALL>() - 48usize];
    ["Alignment of XC_GROUP_TRADING_ACTION_WITH_LULD_ALL"]
        [::std::mem::align_of::<XC_GROUP_TRADING_ACTION_WITH_LULD_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_exchange_code) - 0usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_country_code"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_country_code) - 2usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_symbol_type) - 5usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_line_id"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_line_id) - 6usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_quals"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_quals) - 8usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_instrument_status
    ) - 12usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_market_status"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_market_status
    ) - 13usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::XTA_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, XTA_RESERVED_02) - 15usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_exchange_hitime"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_exchange_hitime
    ) - 16usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_receive_hitime"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_receive_hitime
    ) - 24usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_sequence"]
        [::std::mem::offset_of!(XC_GROUP_TRADING_ACTION_WITH_LULD_ALL, xta_sequence) - 32usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_upper_limit_price"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_upper_limit_price
    ) - 40usize];
    ["Offset of field: XC_GROUP_TRADING_ACTION_WITH_LULD_ALL::xta_lower_limit_price"][::std::mem::offset_of!(
        XC_GROUP_TRADING_ACTION_WITH_LULD_ALL,
        xta_lower_limit_price
    ) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_NAV_UPDATE_ALL"][::std::mem::size_of::<XC_GROUP_NAV_UPDATE_ALL>() - 24usize];
    ["Alignment of XC_GROUP_NAV_UPDATE_ALL"]
        [::std::mem::align_of::<XC_GROUP_NAV_UPDATE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::NAV_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, NAV_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::NAV_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, NAV_RESERVED_02) - 2usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::NAV_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, NAV_RESERVED_03) - 4usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::nav_unopened_count"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, nav_unopened_count) - 8usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::nav_halted_count"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, nav_halted_count) - 10usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::nav_last"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, nav_last) - 12usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::nav_bid"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, nav_bid) - 16usize];
    ["Offset of field: XC_GROUP_NAV_UPDATE_ALL::nav_ask"]
        [::std::mem::offset_of!(XC_GROUP_NAV_UPDATE_ALL, nav_ask) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_BASKET_HEADER"][::std::mem::size_of::<XC_GROUP_BASKET_HEADER>() - 56usize];
    ["Alignment of XC_GROUP_BASKET_HEADER"]
        [::std::mem::align_of::<XC_GROUP_BASKET_HEADER>() - 1usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_divisor"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_divisor) - 0usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_cash_position"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_cash_position) - 8usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_delta_last"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_delta_last) - 16usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_delta_bid"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_delta_bid) - 24usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_delta_ask"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_delta_ask) - 32usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_user_nav1"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_user_nav1) - 40usize];
    ["Offset of field: XC_GROUP_BASKET_HEADER::bskh_user_nav2"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_HEADER, bskh_user_nav2) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_BASKET_CONSTITUENT"]
        [::std::mem::size_of::<XC_GROUP_BASKET_CONSTITUENT>() - 104usize];
    ["Alignment of XC_GROUP_BASKET_CONSTITUENT"]
        [::std::mem::align_of::<XC_GROUP_BASKET_CONSTITUENT>() - 1usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::bskc_key_string"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, bskc_key_string) - 0usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::bskc_status"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, bskc_status) - 80usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::BSKC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, BSKC_RESERVED_00) - 84usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::bskc_weight"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, bskc_weight) - 88usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::bskc_halted_price"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, bskc_halted_price) - 96usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT::BSKC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT, BSKC_RESERVED_02) - 101usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_BASKET_CONSTITUENT_INFO"]
        [::std::mem::size_of::<XC_GROUP_BASKET_CONSTITUENT_INFO>() - 8usize];
    ["Alignment of XC_GROUP_BASKET_CONSTITUENT_INFO"]
        [::std::mem::align_of::<XC_GROUP_BASKET_CONSTITUENT_INFO>() - 1usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT_INFO::BCONS_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT_INFO, BCONS_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT_INFO::BCONS_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT_INFO, BCONS_RESERVED_02) - 2usize];
    ["Offset of field: XC_GROUP_BASKET_CONSTITUENT_INFO::bcons_halted_price"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CONSTITUENT_INFO, bcons_halted_price) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_BASKET_CATALOG_UPDATE_ALL"]
        [::std::mem::size_of::<XC_GROUP_BASKET_CATALOG_UPDATE_ALL>() - 88usize];
    ["Alignment of XC_GROUP_BASKET_CATALOG_UPDATE_ALL"]
        [::std::mem::align_of::<XC_GROUP_BASKET_CATALOG_UPDATE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_BASKET_CATALOG_UPDATE_ALL::blu_key_string"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CATALOG_UPDATE_ALL, blu_key_string) - 0usize];
    ["Offset of field: XC_GROUP_BASKET_CATALOG_UPDATE_ALL::blu_update_info"]
        [::std::mem::offset_of!(XC_GROUP_BASKET_CATALOG_UPDATE_ALL, blu_update_info) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_KEYLIST_HEADER"][::std::mem::size_of::<XC_GROUP_KEYLIST_HEADER>() - 72usize];
    ["Alignment of XC_GROUP_KEYLIST_HEADER"]
        [::std::mem::align_of::<XC_GROUP_KEYLIST_HEADER>() - 1usize];
    ["Offset of field: XC_GROUP_KEYLIST_HEADER::klh_update_date"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_HEADER, klh_update_date) - 0usize];
    ["Offset of field: XC_GROUP_KEYLIST_HEADER::klh_update_time"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_HEADER, klh_update_time) - 4usize];
    ["Offset of field: XC_GROUP_KEYLIST_HEADER::klh_description"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_HEADER, klh_description) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_KEYLIST_ITEM"][::std::mem::size_of::<XC_GROUP_KEYLIST_ITEM>() - 32usize];
    ["Alignment of XC_GROUP_KEYLIST_ITEM"]
        [::std::mem::align_of::<XC_GROUP_KEYLIST_ITEM>() - 1usize];
    ["Offset of field: XC_GROUP_KEYLIST_ITEM::kli_key"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_ITEM, kli_key) - 0usize];
    ["Offset of field: XC_GROUP_KEYLIST_ITEM::kli_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_ITEM, kli_symbol_type) - 24usize];
    ["Offset of field: XC_GROUP_KEYLIST_ITEM::KLI_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_ITEM, KLI_RESERVED_00) - 25usize];
    ["Offset of field: XC_GROUP_KEYLIST_ITEM::KLI_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_ITEM, KLI_RESERVED_01) - 26usize];
    ["Offset of field: XC_GROUP_KEYLIST_ITEM::KLI_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_ITEM, KLI_RESERVED_02) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_KEYLIST_CATALOG_ITEM"]
        [::std::mem::size_of::<XC_GROUP_KEYLIST_CATALOG_ITEM>() - 112usize];
    ["Alignment of XC_GROUP_KEYLIST_CATALOG_ITEM"]
        [::std::mem::align_of::<XC_GROUP_KEYLIST_CATALOG_ITEM>() - 1usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_key"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_key) - 0usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_symbol_type) - 24usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::KLCI_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, KLCI_RESERVED_00) - 25usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::KLCI_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, KLCI_RESERVED_01) - 26usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::KLCI_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, KLCI_RESERVED_02) - 28usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_update_date"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_update_date) - 32usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_update_time"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_update_time) - 36usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_description"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_description) - 40usize];
    ["Offset of field: XC_GROUP_KEYLIST_CATALOG_ITEM::klci_update_info"]
        [::std::mem::offset_of!(XC_GROUP_KEYLIST_CATALOG_ITEM, klci_update_info) - 104usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_LINE_STATS"][::std::mem::size_of::<XC_GROUP_LINE_STATS>() - 312usize];
    ["Alignment of XC_GROUP_LINE_STATS"][::std::mem::align_of::<XC_GROUP_LINE_STATS>() - 1usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_identifier"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_identifier) - 0usize];
    ["Offset of field: XC_GROUP_LINE_STATS::LST_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, LST_RESERVED_02) - 4usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_udp_socket_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_udp_socket_count) - 6usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_tcp_socket_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_tcp_socket_count) - 7usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_timestamp"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_timestamp) - 8usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_name"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_name) - 16usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_feed_id"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_feed_id) - 48usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_handler_name"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_handler_name) - 56usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_handler_version"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_handler_version) - 88usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_gap_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_gap_count) - 120usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_last_gap_time"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_last_gap_time) - 128usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_line_skew"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_line_skew) - 136usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_exchange_skew"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_exchange_skew) - 144usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_message_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_message_count) - 152usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_message_rate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_message_rate) - 160usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_byte_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_byte_count) - 168usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_byte_rate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_byte_rate) - 176usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_packet_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_packet_count) - 184usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_packet_rate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_packet_rate) - 192usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_trade_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_trade_count) - 200usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_trade_rate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_trade_rate) - 208usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_quote_count"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_quote_count) - 216usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_quote_rate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_quote_rate) - 224usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_peak_message_burstrate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_peak_message_burstrate) - 232usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_packet_burstrate_at_message_peak"][::std::mem::offset_of!(
        XC_GROUP_LINE_STATS,
        lst_packet_burstrate_at_message_peak
    ) - 240usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_byte_burstrate_at_message_peak"][::std::mem::offset_of!(
        XC_GROUP_LINE_STATS,
        lst_byte_burstrate_at_message_peak
    ) - 248usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_peak_message_hirate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_peak_message_hirate) - 256usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_packet_hirate_at_message_peak"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_packet_hirate_at_message_peak) - 264usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_byte_hirate_at_message_peak"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_byte_hirate_at_message_peak) - 272usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_peak_time_burstrate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_peak_time_burstrate) - 280usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_peak_time_hirate"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_peak_time_hirate) - 288usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_burstrate_timespan"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_burstrate_timespan) - 296usize];
    ["Offset of field: XC_GROUP_LINE_STATS::lst_hirate_timespan"]
        [::std::mem::offset_of!(XC_GROUP_LINE_STATS, lst_hirate_timespan) - 304usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_SOCKET_STATS"][::std::mem::size_of::<XC_GROUP_SOCKET_STATS>() - 128usize];
    ["Alignment of XC_GROUP_SOCKET_STATS"]
        [::std::mem::align_of::<XC_GROUP_SOCKET_STATS>() - 1usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_identifier"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_identifier) - 0usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::SST_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, SST_RESERVED_00) - 2usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::SST_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, SST_RESERVED_01) - 4usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_line_name"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_line_name) - 8usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_timestamp"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_timestamp) - 40usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_connection_type"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_connection_type) - 48usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_feed_address"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_feed_address) - 56usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_feed_multicast"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_feed_multicast) - 60usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_appliance_address"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_appliance_address) - 64usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_port"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_port) - 68usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::SST_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, SST_RESERVED_02) - 70usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_message_count"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_message_count) - 72usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_message_rate"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_message_rate) - 80usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_byte_count"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_byte_count) - 88usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_byte_rate"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_byte_rate) - 96usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_packet_count"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_packet_count) - 104usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::sst_packet_rate"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, sst_packet_rate) - 112usize];
    ["Offset of field: XC_GROUP_SOCKET_STATS::SST_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_SOCKET_STATS, SST_RESERVED_03) - 120usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_LINE_GAP_LINE_INFO"]
        [::std::mem::size_of::<XC_GROUP_LINE_GAP_LINE_INFO>() - 56usize];
    ["Alignment of XC_GROUP_LINE_GAP_LINE_INFO"]
        [::std::mem::align_of::<XC_GROUP_LINE_GAP_LINE_INFO>() - 1usize];
    ["Offset of field: XC_GROUP_LINE_GAP_LINE_INFO::lginf_line_identifier"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAP_LINE_INFO, lginf_line_identifier) - 0usize];
    ["Offset of field: XC_GROUP_LINE_GAP_LINE_INFO::LGINF_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAP_LINE_INFO, LGINF_RESERVED_00) - 2usize];
    ["Offset of field: XC_GROUP_LINE_GAP_LINE_INFO::lginf_timestamp"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAP_LINE_INFO, lginf_timestamp) - 8usize];
    ["Offset of field: XC_GROUP_LINE_GAP_LINE_INFO::lginf_feed_id"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAP_LINE_INFO, lginf_feed_id) - 16usize];
    ["Offset of field: XC_GROUP_LINE_GAP_LINE_INFO::lginf_line_name"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAP_LINE_INFO, lginf_line_name) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_LINE_GAPS"][::std::mem::size_of::<XC_GROUP_LINE_GAPS>() - 32usize];
    ["Alignment of XC_GROUP_LINE_GAPS"][::std::mem::align_of::<XC_GROUP_LINE_GAPS>() - 1usize];
    ["Offset of field: XC_GROUP_LINE_GAPS::lgi_first_missing"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAPS, lgi_first_missing) - 0usize];
    ["Offset of field: XC_GROUP_LINE_GAPS::lgi_count_missing"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAPS, lgi_count_missing) - 8usize];
    ["Offset of field: XC_GROUP_LINE_GAPS::lgi_time"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAPS, lgi_time) - 16usize];
    ["Offset of field: XC_GROUP_LINE_GAPS::lgi_subline"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAPS, lgi_subline) - 24usize];
    ["Offset of field: XC_GROUP_LINE_GAPS::LGI_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_LINE_GAPS, LGI_RESERVED_00) - 25usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FEED_INFO"][::std::mem::size_of::<XC_GROUP_FEED_INFO>() - 272usize];
    ["Alignment of XC_GROUP_FEED_INFO"][::std::mem::align_of::<XC_GROUP_FEED_INFO>() - 1usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_feed_id"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_feed_id) - 0usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_country_code"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_country_code) - 8usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_exchange_code"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_exchange_code) - 10usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_market_status"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_market_status) - 12usize];
    ["Offset of field: XC_GROUP_FEED_INFO::FI_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, FI_RESERVED_01) - 14usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_exchange_label"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_exchange_label) - 16usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_feed_label"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_feed_label) - 80usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_feed_handler_name"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_feed_handler_name) - 144usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_feed_handler_version"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_feed_handler_version) - 176usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_nominal_open"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_nominal_open) - 208usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_nominal_close"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_nominal_close) - 216usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_timezone"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_timezone) - 224usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_exchange_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_exchange_hitime) - 256usize];
    ["Offset of field: XC_GROUP_FEED_INFO::fi_update_info"]
        [::std::mem::offset_of!(XC_GROUP_FEED_INFO, fi_update_info) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_MWCB"][::std::mem::size_of::<XC_GROUP_MWCB>() - 16usize];
    ["Alignment of XC_GROUP_MWCB"][::std::mem::align_of::<XC_GROUP_MWCB>() - 1usize];
    ["Offset of field: XC_GROUP_MWCB::mwcb_level1_price"]
        [::std::mem::offset_of!(XC_GROUP_MWCB, mwcb_level1_price) - 0usize];
    ["Offset of field: XC_GROUP_MWCB::mwcb_level2_price"]
        [::std::mem::offset_of!(XC_GROUP_MWCB, mwcb_level2_price) - 4usize];
    ["Offset of field: XC_GROUP_MWCB::mwcb_level3_price"]
        [::std::mem::offset_of!(XC_GROUP_MWCB, mwcb_level3_price) - 8usize];
    ["Offset of field: XC_GROUP_MWCB::MWCB_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_MWCB, MWCB_RESERVED_01) - 13usize];
    ["Offset of field: XC_GROUP_MWCB::MWCB_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_MWCB, MWCB_RESERVED_02) - 14usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_V3_8"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_V3_8>() - 112usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_V3_8"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_V3_8>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::DRC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, DRC_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_primary_mmid"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_primary_mmid) - 2usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_market_segment_id
    ) - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_market_segment_desc"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_market_segment_desc
    ) - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_product_partition_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_product_partition_id
    ) - 24usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_product_bin_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_product_bin_id) - 28usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_trade_start_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_trade_start_time
    ) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_trade_stop_time"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_trade_stop_time) - 36usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_tick_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_tick_count) - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_match_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_match_count) - 41usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_auction_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_auction_count) - 42usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_underlying_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_underlying_count
    ) - 43usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_parent_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_parent_market_segment_id
    )
        - 44usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_market_segment_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_market_segment_status
    ) - 56usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::DRC_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, DRC_RESERVED_01) - 57usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_security_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_security_id) - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_maturity_date"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_maturity_date) - 72usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_maturity_time"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_maturity_time) - 76usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_contract_size"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_contract_size) - 80usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_strike"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_strike) - 84usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_strike_currency"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_strike_currency) - 88usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_instrument_status
    ) - 91usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_deliverable_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_deliverable_count
    ) - 92usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_leg_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_leg_count) - 93usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::DRC_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, DRC_RESERVED_03) - 95usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_contract_root_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_V3_8,
        drc_contract_root_string
    ) - 96usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::drc_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, drc_symbol_type) - 105usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_V3_8::DRC_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_V3_8, DRC_RESERVED_05) - 106usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE>() - 192usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_primary_mmid"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_primary_mmid) - 2usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_market_segment_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_market_segment_id) - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_market_segment_desc"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_market_segment_desc) - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_product_partition_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_product_partition_id) - 24usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_product_bin_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_product_bin_id) - 28usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_trade_start_time"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_trade_start_time) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_trade_stop_time"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_trade_stop_time) - 36usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_tick_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_tick_count) - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_match_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_match_count) - 41usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_auction_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_auction_count) - 42usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_underlying_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_underlying_count) - 43usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_parent_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_parent_market_segment_id
    ) - 44usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_market_segment_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_market_segment_status
    ) - 56usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_currency"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_currency) - 57usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_settlement_currency"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_settlement_currency) - 60usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_size_rule_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_size_rule_count) - 63usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_security_group"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_security_group) - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_product_market_identifier_code"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_product_market_identifier_code
    )
        - 72usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_isin"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_isin) - 76usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_asset_class"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_asset_class) - 88usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_01) - 90usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_02) - 96usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_security_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_security_id) - 112usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_maturity_date"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_maturity_date) - 120usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_maturity_time"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_maturity_time) - 124usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_contract_size"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_contract_size) - 128usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_strike"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_strike) - 132usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_strike_currency"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_strike_currency) - 136usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_instrument_status) - 139usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_deliverable_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_deliverable_count) - 140usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_leg_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_leg_count) - 141usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_attribute_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_attribute_count) - 143usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_contract_root_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_contract_root_string
    ) - 144usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_symbol_type"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_symbol_type) - 153usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_05) - 154usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_instrument_market_identifier_code"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_instrument_market_identifier_code
    )
        - 160usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_display_factor"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, drc_display_factor) - 164usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::drc_original_strike_price"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE,
        drc_original_strike_price
    ) - 168usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_06) - 173usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE::DRC_RESERVED_07"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE, DRC_RESERVED_07) - 176usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT>() - 88usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_product_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_product_market_segment_id
    )
        - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_security_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_security_id
    ) - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_maturity_date"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_maturity_date
    ) - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_maturity_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_maturity_time
    ) - 20usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_contract_size"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_contract_size
    ) - 24usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_strike"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT, dri_strike) - 28usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_strike_currency"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_strike_currency
    ) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_instrument_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_instrument_status
    )
        - 35usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_deliverable_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_deliverable_count
    )
        - 36usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_leg_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT, dri_leg_count) - 37usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_attribute_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_attribute_count
    ) - 39usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_contract_root_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_contract_root_string
    )
        - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_symbol_type
    ) - 49usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::DRI_RESERVED_02"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        DRI_RESERVED_02
    ) - 50usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_instrument_market_identifier_code"] [:: std :: mem :: offset_of ! (XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT , dri_instrument_market_identifier_code) - 56usize] ;
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_display_factor"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_display_factor
    ) - 60usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::dri_original_strike_price"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        dri_original_strike_price
    )
        - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::DRI_RESERVED_03"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        DRI_RESERVED_03
    ) - 69usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT::DRI_RESERVED_04"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT,
        DRI_RESERVED_04
    ) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT>() - 112usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::DRP_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, DRP_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_primary_mmid"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_primary_mmid) - 2usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_market_segment_id
    ) - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_market_segment_desc"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_market_segment_desc
    )
        - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_product_partition_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_product_partition_id
    )
        - 24usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_product_bin_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_product_bin_id
    ) - 28usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_trade_start_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_trade_start_time
    ) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_trade_stop_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_trade_stop_time
    ) - 36usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_tick_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_tick_count) - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_match_count"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_match_count) - 41usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_auction_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_auction_count
    ) - 42usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_underlying_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_underlying_count
    ) - 43usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_parent_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_parent_market_segment_id
    )
        - 44usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_market_segment_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_market_segment_status
    )
        - 56usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_currency"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_currency) - 57usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_settlement_currency"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_settlement_currency
    )
        - 60usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_size_rule_count"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_size_rule_count
    ) - 63usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_security_group"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT,
        drp_security_group
    ) - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_product_market_identifier_code"] [:: std :: mem :: offset_of ! (XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT , drp_product_market_identifier_code) - 72usize] ;
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_isin"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_isin) - 76usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::drp_asset_class"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, drp_asset_class) - 88usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::DRP_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, DRP_RESERVED_01) - 90usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT::DRP_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_PRODUCT, DRP_RESERVED_02) - 96usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_TICK"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_TICK>() - 16usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_TICK"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_TICK>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_TICK::drt_tick_price_range_start"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_TICK,
        drt_tick_price_range_start
    ) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_TICK::drt_tick_price_range_end"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_TICK,
        drt_tick_price_range_end
    ) - 4usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_TICK::drt_tick_increment"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_TICK, drt_tick_increment) - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_TICK::drt_tick_rule_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_TICK, drt_tick_rule_id) - 13usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_TICK::DRT_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_TICK, DRT_RESERVED_01) - 14usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_MATCH"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_MATCH>() - 8usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_MATCH"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_MATCH>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_MATCH::DRM_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_MATCH, DRM_RESERVED_01) - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_MATCH::drm_match_rule_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_MATCH, drm_match_rule_id) - 4usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_MATCH::DRM_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_MATCH, DRM_RESERVED_02) - 5usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE>() - 56usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_security_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_security_id
    )
        - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_factor"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_factor
    )
        - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_cash"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_cash
    )
        - 12usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_currency"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_currency
    )
        - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_symbol_type
    )
        - 20usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::DRD_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        DRD_RESERVED_01
    ) - 21usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE::drd_deliverable_key_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE,
        drd_deliverable_key_string
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_AUCTION"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_AUCTION>() - 48usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_AUCTION"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_AUCTION>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_AUCTION::dra_auction_types"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_AUCTION, dra_auction_types) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_AUCTION::dra_auction_rule_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_AUCTION,
        dra_auction_rule_id
    ) - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_AUCTION::DRA_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_AUCTION, DRA_RESERVED_00) - 41usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING>() - 48usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING::dru_underlying_key_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING,
        dru_underlying_key_string
    )
        - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING::dru_underlying_security_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING,
        dru_underlying_security_id
    )
        - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING::dru_underlying_symbol_type"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING,
        dru_underlying_symbol_type
    )
        - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING::DRU_RESERVED_00"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_UNDERLYING,
        DRU_RESERVED_00
    ) - 41usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE>() - 40usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_min_trade"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_min_trade
    )
        - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_max_trade"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_max_trade
    )
        - 4usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_min_bid"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_min_bid
    )
        - 8usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_min_ask"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_min_ask
    )
        - 12usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_round_lot"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_round_lot
    )
        - 16usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_block_trade"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_block_trade
    )
        - 20usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::drsr_size_rule_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        drsr_size_rule_id
    ) - 24usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::DRSR_RESERVED_00"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        DRSR_RESERVED_00
    ) - 25usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE::DRSR_RESERVED_01"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_SIZE_RULE,
        DRSR_RESERVED_01
    ) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8>() - 88usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_key_string"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_key_string
    ) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_security_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_security_id
    ) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_market_segment_id
    )
        - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_ratio"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8, drl_leg_ratio) - 48usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_maturity_date"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_maturity_date
    ) - 56usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_maturity_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_maturity_time
    ) - 60usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_contract_size"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_contract_size
    ) - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_strike"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8, drl_leg_strike) - 68usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_strike_currency"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_strike_currency
    )
        - 72usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_trading_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_trading_status
    )
        - 75usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::drl_leg_primary_mmid"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8,
        drl_leg_primary_mmid
    ) - 76usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::DRL_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8, DRL_RESERVED_01) - 83usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8::DRL_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8, DRL_RESERVED_03) - 85usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_DERIVATIVE_REFERENCE_LEG"]
        [::std::mem::size_of::<XC_GROUP_DERIVATIVE_REFERENCE_LEG>() - 120usize];
    ["Alignment of XC_GROUP_DERIVATIVE_REFERENCE_LEG"]
        [::std::mem::align_of::<XC_GROUP_DERIVATIVE_REFERENCE_LEG>() - 1usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_key_string"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_key_string) - 0usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_security_id"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_security_id) - 32usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_market_segment_id"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_market_segment_id
    ) - 40usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_ratio"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_ratio) - 48usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_maturity_date"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_maturity_date
    ) - 56usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_maturity_time"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_maturity_time
    ) - 60usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_contract_size"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_contract_size
    ) - 64usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_strike"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_strike) - 68usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_strike_currency"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_strike_currency
    ) - 72usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_trading_status"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_trading_status
    ) - 75usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_primary_mmid"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_primary_mmid) - 76usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::DRL_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, DRL_RESERVED_01) - 83usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::DRL_RESERVED_04"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, DRL_RESERVED_04) - 86usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_option_delta"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, drl_leg_option_delta) - 88usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::drl_leg_reference_price"][::std::mem::offset_of!(
        XC_GROUP_DERIVATIVE_REFERENCE_LEG,
        drl_leg_reference_price
    ) - 96usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::DRL_RESERVED_05"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, DRL_RESERVED_05) - 100usize];
    ["Offset of field: XC_GROUP_DERIVATIVE_REFERENCE_LEG::DRL_RESERVED_06"]
        [::std::mem::offset_of!(XC_GROUP_DERIVATIVE_REFERENCE_LEG, DRL_RESERVED_06) - 104usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_ON_BOOK"][::std::mem::size_of::<XC_GROUP_ORDER_ON_BOOK>() - 8usize];
    ["Alignment of XC_GROUP_ORDER_ON_BOOK"]
        [::std::mem::align_of::<XC_GROUP_ORDER_ON_BOOK>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK::oobc_entry_count"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK, oobc_entry_count) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK::oobc_party_count"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK, oobc_party_count) - 1usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK::OOBC_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK, OOBC_RESERVED_00) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_ON_BOOK_ENTRY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_ON_BOOK_ENTRY>() - 32usize];
    ["Alignment of XC_GROUP_ORDER_ON_BOOK_ENTRY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_ON_BOOK_ENTRY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_price"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_price) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_size"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_size) - 4usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_order_quals"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_order_quals) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_min_quantity"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_min_quantity) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_order_ref"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_order_ref) - 16usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::oobe_entry_order_capacity"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, oobe_entry_order_capacity) - 24usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::OOBE_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, OOBE_RESERVED_00) - 25usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_ENTRY::OOBE_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_ENTRY, OOBE_RESERVED_02) - 29usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_ORDER_ON_BOOK_PARTY"]
        [::std::mem::size_of::<XC_GROUP_ORDER_ON_BOOK_PARTY>() - 16usize];
    ["Alignment of XC_GROUP_ORDER_ON_BOOK_PARTY"]
        [::std::mem::align_of::<XC_GROUP_ORDER_ON_BOOK_PARTY>() - 1usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_PARTY::oobp_party_id"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_PARTY, oobp_party_id) - 0usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_PARTY::oobp_party_role"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_PARTY, oobp_party_role) - 8usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_PARTY::oobp_party_order"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_PARTY, oobp_party_order) - 12usize];
    ["Offset of field: XC_GROUP_ORDER_ON_BOOK_PARTY::OOBP_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_ORDER_ON_BOOK_PARTY, OOBP_RESERVED_00) - 13usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_CLIENT_STATS"][::std::mem::size_of::<XC_GROUP_CLIENT_STATS>() - 416usize];
    ["Alignment of XC_GROUP_CLIENT_STATS"]
        [::std::mem::align_of::<XC_GROUP_CLIENT_STATS>() - 1usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_username"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_username) - 0usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_api_version"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_api_version) - 16usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_remote_process_id"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_remote_process_id) - 20usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_api_build_platform"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_api_build_platform) - 24usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_API_BUILD_OS_VERSION"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_API_BUILD_OS_VERSION) - 40usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_connection_time"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_connection_time) - 72usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_connection_date"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_connection_date) - 76usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_channel_name"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_channel_name) - 80usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_appliance_hostname"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_appliance_hostname) - 104usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_appliance_local_interface"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_appliance_local_interface) - 136usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_appliance_local_address"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_appliance_local_address) - 168usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_appliance_local_port"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_appliance_local_port) - 232usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_client_hostname"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_client_hostname) - 236usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_client_local_address"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_client_local_address) - 268usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_client_local_port"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_client_local_port) - 332usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_local_ib_key"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_local_ib_key) - 336usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_remote_ib_key"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_remote_ib_key) - 368usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_current_subscription_count"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_current_subscription_count) - 400usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_max_subscription_count"]
        [::std::mem::offset_of!(XC_GROUP_CLIENT_STATS, clst_max_subscription_count) - 404usize];
    ["Offset of field: XC_GROUP_CLIENT_STATS::clst_current_unique_subscription_count"][::std::mem::offset_of!(
        XC_GROUP_CLIENT_STATS,
        clst_current_unique_subscription_count
    )
        - 412usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TICKER_PLANT_SUMMARY_RATES"]
        [::std::mem::size_of::<XC_GROUP_TICKER_PLANT_SUMMARY_RATES>() - 392usize];
    ["Alignment of XC_GROUP_TICKER_PLANT_SUMMARY_RATES"]
        [::std::mem::align_of::<XC_GROUP_TICKER_PLANT_SUMMARY_RATES>() - 1usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_packet_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_packet_count
    ) - 0usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_message_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_message_count
    )
        - 8usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_byte_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_byte_count
    ) - 16usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_packet_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_packet_count
    )
        - 24usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_message_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_message_count
    )
        - 32usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_quote_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_quote_count
    )
        - 40usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_quote_filtered_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_quote_filtered_count
    )
        - 48usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_trade_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_trade_count
    )
        - 56usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_byte_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_byte_count
    ) - 64usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_packet_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_packet_count
    ) - 72usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_message_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_message_count
    )
        - 80usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_quote_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_quote_count
    ) - 88usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_trade_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_trade_count
    ) - 96usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_byte_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_byte_count
    ) - 104usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_timespan"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY_RATES, tpsr_timespan) - 112usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_hirate_timespan"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_hirate_timespan
    ) - 120usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_burstrate_timespan"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_burstrate_timespan
    ) - 128usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_peak_message_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_peak_message_rate
    )
        - 136usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_peak_packet_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_peak_packet_rate
    )
        - 144usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_peak_byte_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_peak_byte_rate
    )
        - 152usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_peak_message_hirate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_peak_message_hirate
    )
        - 160usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_packet_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_pre_arb_packet_hirate_at_message_peak) - 168usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_byte_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_pre_arb_byte_hirate_at_message_peak) - 176usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_peak_message_burstrate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_pre_arb_peak_message_burstrate
    )
        - 184usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_packet_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_pre_arb_packet_burstrate_at_message_peak) - 192usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_pre_arb_byte_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_pre_arb_byte_burstrate_at_message_peak) - 200usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_message_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_message_rate
    )
        - 208usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_quote_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_quote_rate
    )
        - 216usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_quote_filtered_rate"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_peak_quote_filtered_rate) - 224usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_trade_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_trade_rate
    )
        - 232usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_packet_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_packet_rate
    )
        - 240usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_byte_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_byte_rate
    )
        - 248usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_message_hirate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_post_arb_peak_message_hirate
    )
        - 256usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_packet_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_packet_hirate_at_message_peak) - 264usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_byte_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_byte_hirate_at_message_peak) - 272usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_peak_message_burstrate"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_peak_message_burstrate) - 280usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_packet_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_packet_burstrate_at_message_peak) - 288usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_post_arb_byte_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_post_arb_byte_burstrate_at_message_peak) - 296usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_message_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_message_rate
    )
        - 304usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_quote_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_quote_rate
    )
        - 312usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_trade_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_trade_rate
    )
        - 320usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_packet_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_packet_rate
    )
        - 328usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_byte_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_byte_rate
    )
        - 336usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_message_hirate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_message_hirate
    )
        - 344usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_packet_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_output_packet_hirate_at_message_peak) - 352usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_byte_hirate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_output_byte_hirate_at_message_peak) - 360usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_peak_message_burstrate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY_RATES,
        tpsr_output_peak_message_burstrate
    )
        - 368usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_packet_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_output_packet_burstrate_at_message_peak) - 376usize] ;
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY_RATES::tpsr_output_byte_burstrate_at_message_peak"] [:: std :: mem :: offset_of ! (XC_GROUP_TICKER_PLANT_SUMMARY_RATES , tpsr_output_byte_burstrate_at_message_peak) - 384usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TICKER_PLANT_LATENCY"]
        [::std::mem::size_of::<XC_GROUP_TICKER_PLANT_LATENCY>() - 136usize];
    ["Alignment of XC_GROUP_TICKER_PLANT_LATENCY"]
        [::std::mem::align_of::<XC_GROUP_TICKER_PLANT_LATENCY>() - 1usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_samples) - 0usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::TPLS_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, TPLS_RESERVED_00) - 4usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_avg"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_avg) - 8usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_max"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_max) - 16usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_min"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_min) - 24usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_std_dev"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_std_dev) - 32usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin0_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin0_lower_bound) - 40usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin1_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin1_lower_bound) - 48usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin2_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin2_lower_bound) - 56usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin3_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin3_lower_bound) - 64usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin4_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin4_lower_bound) - 72usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin5_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin5_lower_bound) - 80usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin6_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin6_lower_bound) - 88usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin7_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin7_lower_bound) - 96usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin0_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin0_samples) - 104usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin1_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin1_samples) - 108usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin2_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin2_samples) - 112usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin3_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin3_samples) - 116usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin4_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin4_samples) - 120usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin5_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin5_samples) - 124usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin6_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin6_samples) - 128usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_LATENCY::tpls_bin7_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_LATENCY, tpls_bin7_samples) - 132usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TICKER_PLANT_CLIENTS_RATES"]
        [::std::mem::size_of::<XC_GROUP_TICKER_PLANT_CLIENTS_RATES>() - 216usize];
    ["Alignment of XC_GROUP_TICKER_PLANT_CLIENTS_RATES"]
        [::std::mem::align_of::<XC_GROUP_TICKER_PLANT_CLIENTS_RATES>() - 1usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_max_client_buffer_size"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_max_client_buffer_size
    )
        - 0usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_appliance_output_packet_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_appliance_output_packet_count
    )
        - 8usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_appliance_output_message_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_appliance_output_message_count
    )
        - 16usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_appliance_output_byte_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_appliance_output_byte_count
    )
        - 24usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_output_peak_packet_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_output_peak_packet_rate
    )
        - 32usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_output_peak_message_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_output_peak_message_rate
    )
        - 40usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_output_peak_byte_rate"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_output_peak_byte_rate
    )
        - 48usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_pending_send_buffer_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_pending_send_buffer_count
    )
        - 56usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_pending_send_byte_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_pending_send_byte_count
    )
        - 64usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_full_buffer_send_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_full_buffer_send_count
    )
        - 72usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_samples) - 80usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_client_id"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_client_id) - 84usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::TPCR_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, TPCR_RESERVED_00) - 86usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_avg"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_avg) - 88usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_max"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_max) - 96usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_min"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_min) - 104usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_std_dev"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_std_dev) - 112usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin0_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin0_lower_bound
    ) - 120usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin1_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin1_lower_bound
    ) - 128usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin2_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin2_lower_bound
    ) - 136usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin3_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin3_lower_bound
    ) - 144usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin4_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin4_lower_bound
    ) - 152usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin5_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin5_lower_bound
    ) - 160usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin6_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin6_lower_bound
    ) - 168usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin7_lower_bound"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_CLIENTS_RATES,
        tpcr_bin7_lower_bound
    ) - 176usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin0_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin0_samples) - 184usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin1_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin1_samples) - 188usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin2_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin2_samples) - 192usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin3_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin3_samples) - 196usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin4_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin4_samples) - 200usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin5_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin5_samples) - 204usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin6_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin6_samples) - 208usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_CLIENTS_RATES::tpcr_bin7_samples"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_CLIENTS_RATES, tpcr_bin7_samples) - 212usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_TICKER_PLANT_SUMMARY"]
        [::std::mem::size_of::<XC_GROUP_TICKER_PLANT_SUMMARY>() - 116usize];
    ["Alignment of XC_GROUP_TICKER_PLANT_SUMMARY"]
        [::std::mem::align_of::<XC_GROUP_TICKER_PLANT_SUMMARY>() - 1usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_ticker_plant_version"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, tpsm_ticker_plant_version) - 0usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_last_restart_time"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, tpsm_last_restart_time) - 32usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_configured_lines_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_configured_lines_count
    ) - 64usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_configured_udp_sockets_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_configured_udp_sockets_count
    )
        - 68usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_configured_tcp_sockets_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_configured_tcp_sockets_count
    )
        - 72usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::TPSM_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, TPSM_RESERVED_00) - 76usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_packet_drop_count"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, tpsm_packet_drop_count) - 80usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_regional_symbol_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_regional_symbol_count
    ) - 88usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_composite_symbol_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_composite_symbol_count
    ) - 92usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_current_client_count"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_current_client_count
    ) - 96usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_max_client_count"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, tpsm_max_client_count) - 100usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::TPSM_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_TICKER_PLANT_SUMMARY, TPSM_RESERVED_01) - 102usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_current_client_subscriptions"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_current_client_subscriptions
    )
        - 104usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_max_client_subscriptions"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_max_client_subscriptions
    ) - 108usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_current_subscription_overlap"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_current_subscription_overlap
    )
        - 112usize];
    ["Offset of field: XC_GROUP_TICKER_PLANT_SUMMARY::tpsm_max_subscription_overlap"][::std::mem::offset_of!(
        XC_GROUP_TICKER_PLANT_SUMMARY,
        tpsm_max_subscription_overlap
    ) - 114usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXSPOT_REFRESH_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXSPOT_REFRESH_ALL>() - 128usize];
    ["Alignment of XC_GROUP_FXSPOT_REFRESH_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXSPOT_REFRESH_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::XGFXSR_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, XGFXSR_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_ask_price) - 8usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_bid_price) - 12usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_ask_size) - 16usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_bid_size) - 20usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_ask_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_ask_min_size) - 24usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_bid_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_bid_min_size) - 28usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_ask_hitime) - 32usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_bid_hitime) - 40usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_valid_until_hitime) - 48usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_request_id) - 56usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_quote_id) - 88usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_setl_date) - 120usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::xgfxsr_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, xgfxsr_instrument_status) - 124usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::XGFXSR_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, XGFXSR_RESERVED_01) - 125usize];
    ["Offset of field: XC_GROUP_FXSPOT_REFRESH_ALL::XGFXSR_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_REFRESH_ALL, XGFXSR_RESERVED_02) - 126usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXSPOT_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXSPOT_QUOTE_ALL>() - 128usize];
    ["Alignment of XC_GROUP_FXSPOT_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXSPOT_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::XGFXSQ_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, XGFXSQ_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_ask_price) - 8usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_bid_price) - 12usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_ask_size) - 16usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_bid_size) - 20usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_ask_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_ask_min_size) - 24usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_bid_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_bid_min_size) - 28usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_ask_hitime) - 32usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_bid_hitime) - 40usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_valid_until_hitime) - 48usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_request_id) - 56usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_quote_id) - 88usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_setl_date) - 120usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::xgfxsq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, xgfxsq_instrument_status) - 124usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::XGFXSQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, XGFXSQ_RESERVED_01) - 125usize];
    ["Offset of field: XC_GROUP_FXSPOT_QUOTE_ALL::XGFXSQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXSPOT_QUOTE_ALL, XGFXSQ_RESERVED_02) - 126usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXFWD_REFRESH_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXFWD_REFRESH_ALL>() - 152usize];
    ["Alignment of XC_GROUP_FXFWD_REFRESH_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXFWD_REFRESH_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::XGFXFR_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, XGFXFR_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_spot_price) - 8usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_price) - 12usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_size) - 16usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_min_size) - 20usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_hitime) - 24usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_ask_forward_points"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_ask_forward_points) - 32usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_spot_price) - 40usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_price) - 44usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_size) - 48usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_min_size) - 52usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_hitime) - 56usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_bid_forward_points"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_bid_forward_points) - 64usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_valid_until_hitime) - 72usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_request_id) - 80usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_quote_id) - 112usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_setl_date) - 144usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::xgfxfr_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, xgfxfr_instrument_status) - 148usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::XGFXFR_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, XGFXFR_RESERVED_01) - 149usize];
    ["Offset of field: XC_GROUP_FXFWD_REFRESH_ALL::XGFXFR_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_REFRESH_ALL, XGFXFR_RESERVED_02) - 150usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXFWD_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXFWD_QUOTE_ALL>() - 152usize];
    ["Alignment of XC_GROUP_FXFWD_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXFWD_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::XGFXFQ_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, XGFXFQ_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_spot_price) - 8usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_price) - 12usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_size) - 16usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_min_size) - 20usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_hitime) - 24usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_ask_forward_points"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_ask_forward_points) - 32usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_spot_price) - 40usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_price) - 44usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_size) - 48usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_min_size"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_min_size) - 52usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_hitime) - 56usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_bid_forward_points"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_bid_forward_points) - 64usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_valid_until_hitime) - 72usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_request_id) - 80usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_quote_id) - 112usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_setl_date) - 144usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::xgfxfq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, xgfxfq_instrument_status) - 148usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::XGFXFQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, XGFXFQ_RESERVED_01) - 149usize];
    ["Offset of field: XC_GROUP_FXFWD_QUOTE_ALL::XGFXFQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXFWD_QUOTE_ALL, XGFXFQ_RESERVED_02) - 150usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXSWAP_REFRESH_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXSWAP_REFRESH_ALL>() - 184usize];
    ["Alignment of XC_GROUP_FXSWAP_REFRESH_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXSWAP_REFRESH_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::XGFXWR_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, XGFXWR_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_spot_price) - 8usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_near_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_near_price) - 12usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_far_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_far_price) - 16usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_spot_price) - 20usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_near_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_near_price) - 24usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_far_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_far_price) - 28usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_near_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_near_size) - 32usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_far_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_far_size) - 36usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_ask_hitime) - 40usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_near_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_REFRESH_ALL,
        xgfxwr_ask_near_forward_points
    ) - 48usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_ask_far_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_REFRESH_ALL,
        xgfxwr_ask_far_forward_points
    ) - 56usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_near_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_near_size) - 64usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_far_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_far_size) - 68usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_bid_hitime) - 72usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_near_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_REFRESH_ALL,
        xgfxwr_bid_near_forward_points
    ) - 80usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_bid_far_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_REFRESH_ALL,
        xgfxwr_bid_far_forward_points
    ) - 88usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_near_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_near_setl_date) - 96usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_far_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_far_setl_date) - 100usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_valid_until_hitime) - 104usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_request_id) - 112usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_quote_id) - 144usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::xgfxwr_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, xgfxwr_instrument_status) - 176usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::XGFXWR_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, XGFXWR_RESERVED_01) - 177usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::XGFXWR_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, XGFXWR_RESERVED_02) - 178usize];
    ["Offset of field: XC_GROUP_FXSWAP_REFRESH_ALL::XGFXWR_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_REFRESH_ALL, XGFXWR_RESERVED_03) - 180usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_FXSWAP_QUOTE_ALL"]
        [::std::mem::size_of::<XC_GROUP_FXSWAP_QUOTE_ALL>() - 184usize];
    ["Alignment of XC_GROUP_FXSWAP_QUOTE_ALL"]
        [::std::mem::align_of::<XC_GROUP_FXSWAP_QUOTE_ALL>() - 1usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::XGFXWQ_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, XGFXWQ_RESERVED_00) - 0usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_spot_price) - 8usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_near_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_near_price) - 12usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_far_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_far_price) - 16usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_spot_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_spot_price) - 20usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_near_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_near_price) - 24usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_far_price"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_far_price) - 28usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_near_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_near_size) - 32usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_far_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_far_size) - 36usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_ask_hitime) - 40usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_near_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_QUOTE_ALL,
        xgfxwq_ask_near_forward_points
    ) - 48usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_ask_far_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_QUOTE_ALL,
        xgfxwq_ask_far_forward_points
    ) - 56usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_near_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_near_size) - 64usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_far_size"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_far_size) - 68usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_bid_hitime) - 72usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_near_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_QUOTE_ALL,
        xgfxwq_bid_near_forward_points
    ) - 80usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_bid_far_forward_points"][::std::mem::offset_of!(
        XC_GROUP_FXSWAP_QUOTE_ALL,
        xgfxwq_bid_far_forward_points
    ) - 88usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_near_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_near_setl_date) - 96usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_far_setl_date"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_far_setl_date) - 100usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_valid_until_hitime"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_valid_until_hitime) - 104usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_request_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_request_id) - 112usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_quote_id"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_quote_id) - 144usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::xgfxwq_instrument_status"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, xgfxwq_instrument_status) - 176usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::XGFXWQ_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, XGFXWQ_RESERVED_01) - 177usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::XGFXWQ_RESERVED_02"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, XGFXWQ_RESERVED_02) - 178usize];
    ["Offset of field: XC_GROUP_FXSWAP_QUOTE_ALL::XGFXWQ_RESERVED_03"]
        [::std::mem::offset_of!(XC_GROUP_FXSWAP_QUOTE_ALL, XGFXWQ_RESERVED_03) - 180usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_SESSIONS_RATES"]
        [::std::mem::size_of::<XC_GROUP_SESSIONS_RATES>() - 216usize];
    ["Alignment of XC_GROUP_SESSIONS_RATES"]
        [::std::mem::align_of::<XC_GROUP_SESSIONS_RATES>() - 1usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_max_client_buffer_size"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_max_client_buffer_size) - 0usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_appliance_output_packet_count"][::std::mem::offset_of!(
        XC_GROUP_SESSIONS_RATES,
        tpsr_appliance_output_packet_count
    ) - 8usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_appliance_output_message_count"][::std::mem::offset_of!(
        XC_GROUP_SESSIONS_RATES,
        tpsr_appliance_output_message_count
    ) - 16usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_appliance_output_byte_count"][::std::mem::offset_of!(
        XC_GROUP_SESSIONS_RATES,
        tpsr_appliance_output_byte_count
    ) - 24usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_output_peak_packet_rate"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_output_peak_packet_rate) - 32usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_output_peak_message_rate"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_output_peak_message_rate) - 40usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_output_peak_byte_rate"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_output_peak_byte_rate) - 48usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_pending_send_buffer_count"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_pending_send_buffer_count) - 56usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_pending_send_byte_count"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_pending_send_byte_count) - 64usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_full_buffer_send_count"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_full_buffer_send_count) - 72usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_samples) - 80usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_client_id"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_client_id) - 84usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_session_id"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_session_id) - 86usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::TPSR_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, TPSR_RESERVED_00) - 87usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_avg"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_avg) - 88usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_max"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_max) - 96usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_min"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_min) - 104usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_std_dev"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_std_dev) - 112usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin0_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin0_lower_bound) - 120usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin1_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin1_lower_bound) - 128usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin2_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin2_lower_bound) - 136usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin3_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin3_lower_bound) - 144usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin4_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin4_lower_bound) - 152usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin5_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin5_lower_bound) - 160usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin6_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin6_lower_bound) - 168usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin7_lower_bound"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin7_lower_bound) - 176usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin0_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin0_samples) - 184usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin1_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin1_samples) - 188usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin2_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin2_samples) - 192usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin3_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin3_samples) - 196usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin4_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin4_samples) - 200usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin5_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin5_samples) - 204usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin6_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin6_samples) - 208usize];
    ["Offset of field: XC_GROUP_SESSIONS_RATES::tpsr_bin7_samples"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS_RATES, tpsr_bin7_samples) - 212usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_SESSIONS"][::std::mem::size_of::<XC_GROUP_SESSIONS>() - 424usize];
    ["Alignment of XC_GROUP_SESSIONS"][::std::mem::align_of::<XC_GROUP_SESSIONS>() - 1usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_client_id"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_client_id) - 0usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_session_id"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_session_id) - 2usize];
    ["Offset of field: XC_GROUP_SESSIONS::SEST_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, SEST_RESERVED_00) - 3usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_username"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_username) - 8usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_api_version"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_api_version) - 24usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_remote_process_id"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_remote_process_id) - 28usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_api_build_platform"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_api_build_platform) - 32usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_api_build_os_version"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_api_build_os_version) - 48usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_connection_time"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_connection_time) - 80usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_connection_date"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_connection_date) - 84usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_channel_name"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_channel_name) - 88usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_appliance_hostname"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_appliance_hostname) - 112usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_appliance_local_interface"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_appliance_local_interface) - 144usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_appliance_local_address"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_appliance_local_address) - 176usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_appliance_local_port"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_appliance_local_port) - 240usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_client_hostname"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_client_hostname) - 244usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_client_local_address"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_client_local_address) - 276usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_client_local_port"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_client_local_port) - 340usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_local_ib_key"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_local_ib_key) - 344usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_remote_ib_key"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_remote_ib_key) - 376usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_current_subscription_count"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_current_subscription_count) - 408usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_max_subscription_count"]
        [::std::mem::offset_of!(XC_GROUP_SESSIONS, sest_max_subscription_count) - 412usize];
    ["Offset of field: XC_GROUP_SESSIONS::sest_current_unique_subscription_count"][::std::mem::offset_of!(
        XC_GROUP_SESSIONS,
        sest_current_unique_subscription_count
    ) - 420usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_INDICATIVE_PRICE"]
        [::std::mem::size_of::<XC_GROUP_INDICATIVE_PRICE>() - 24usize];
    ["Alignment of XC_GROUP_INDICATIVE_PRICE"]
        [::std::mem::align_of::<XC_GROUP_INDICATIVE_PRICE>() - 1usize];
    ["Offset of field: XC_GROUP_INDICATIVE_PRICE::xip_price"]
        [::std::mem::offset_of!(XC_GROUP_INDICATIVE_PRICE, xip_price) - 0usize];
    ["Offset of field: XC_GROUP_INDICATIVE_PRICE::xip_indicative_type"]
        [::std::mem::offset_of!(XC_GROUP_INDICATIVE_PRICE, xip_indicative_type) - 4usize];
    ["Offset of field: XC_GROUP_INDICATIVE_PRICE::XIP_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_INDICATIVE_PRICE, XIP_RESERVED_00) - 5usize];
    ["Offset of field: XC_GROUP_INDICATIVE_PRICE::XIP_RESERVED_01"]
        [::std::mem::offset_of!(XC_GROUP_INDICATIVE_PRICE, XIP_RESERVED_01) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_INSTRUMENT_GROUP"]
        [::std::mem::size_of::<XC_GROUP_INSTRUMENT_GROUP>() - 40usize];
    ["Alignment of XC_GROUP_INSTRUMENT_GROUP"]
        [::std::mem::align_of::<XC_GROUP_INSTRUMENT_GROUP>() - 1usize];
    ["Offset of field: XC_GROUP_INSTRUMENT_GROUP::xig_group_id"]
        [::std::mem::offset_of!(XC_GROUP_INSTRUMENT_GROUP, xig_group_id) - 0usize];
    ["Offset of field: XC_GROUP_INSTRUMENT_GROUP::xig_group_status"]
        [::std::mem::offset_of!(XC_GROUP_INSTRUMENT_GROUP, xig_group_status) - 32usize];
    ["Offset of field: XC_GROUP_INSTRUMENT_GROUP::XIG_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_INSTRUMENT_GROUP, XIG_RESERVED_00) - 33usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_VOLATILITY_BBO"][::std::mem::size_of::<XC_GROUP_VOLATILITY_BBO>() - 48usize];
    ["Alignment of XC_GROUP_VOLATILITY_BBO"]
        [::std::mem::align_of::<XC_GROUP_VOLATILITY_BBO>() - 1usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_bid_price) - 0usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_ask_price) - 8usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_bid_size"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_bid_size) - 16usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_ask_size"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_ask_size) - 20usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_bid_time"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_bid_time) - 24usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_ask_time"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_ask_time) - 32usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_bid_exchange"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_bid_exchange) - 40usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_ask_exchange"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_ask_exchange) - 42usize];
    ["Offset of field: XC_GROUP_VOLATILITY_BBO::xvb_traded_volume"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_BBO, xvb_traded_volume) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_VOLATILITY_UNDERLYING"]
        [::std::mem::size_of::<XC_GROUP_VOLATILITY_UNDERLYING>() - 32usize];
    ["Alignment of XC_GROUP_VOLATILITY_UNDERLYING"]
        [::std::mem::align_of::<XC_GROUP_VOLATILITY_UNDERLYING>() - 1usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::xvu_underlying_bid_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_UNDERLYING, xvu_underlying_bid_price) - 0usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::xvu_underlying_ask_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_UNDERLYING, xvu_underlying_ask_price) - 8usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::xvu_underlying_theoretical_price"][::std::mem::offset_of!(
        XC_GROUP_VOLATILITY_UNDERLYING,
        xvu_underlying_theoretical_price
    )
        - 16usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::xvu_underlying_volume"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_UNDERLYING, xvu_underlying_volume) - 24usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::xvu_underlying_eod_indicator"][::std::mem::offset_of!(
        XC_GROUP_VOLATILITY_UNDERLYING,
        xvu_underlying_eod_indicator
    ) - 28usize];
    ["Offset of field: XC_GROUP_VOLATILITY_UNDERLYING::XVU_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_UNDERLYING, XVU_RESERVED_00) - 29usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_VOLATILITY_TRADE"]
        [::std::mem::size_of::<XC_GROUP_VOLATILITY_TRADE>() - 48usize];
    ["Alignment of XC_GROUP_VOLATILITY_TRADE"]
        [::std::mem::align_of::<XC_GROUP_VOLATILITY_TRADE>() - 1usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_eod_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_eod_price) - 0usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_sequence"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_sequence) - 8usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_time"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_time) - 16usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_price) - 24usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_size"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_size) - 32usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_qualifiers"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_qualifiers) - 36usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::xvt_trade_exchange"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, xvt_trade_exchange) - 40usize];
    ["Offset of field: XC_GROUP_VOLATILITY_TRADE::XVT_RESERVED_00"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_TRADE, XVT_RESERVED_00) - 42usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_GROUP_VOLATILITY_MISC"]
        [::std::mem::size_of::<XC_GROUP_VOLATILITY_MISC>() - 32usize];
    ["Alignment of XC_GROUP_VOLATILITY_MISC"]
        [::std::mem::align_of::<XC_GROUP_VOLATILITY_MISC>() - 1usize];
    ["Offset of field: XC_GROUP_VOLATILITY_MISC::xvt_forward_price"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_MISC, xvt_forward_price) - 0usize];
    ["Offset of field: XC_GROUP_VOLATILITY_MISC::xvt_borrow_cost"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_MISC, xvt_borrow_cost) - 8usize];
    ["Offset of field: XC_GROUP_VOLATILITY_MISC::xvt_intrinsic_value"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_MISC, xvt_intrinsic_value) - 16usize];
    ["Offset of field: XC_GROUP_VOLATILITY_MISC::xvt_time_value"]
        [::std::mem::offset_of!(XC_GROUP_VOLATILITY_MISC, xvt_time_value) - 24usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_DATE {
    pub __bindgen_anon_1: XC_DATE__bindgen_ty_1,
    pub xdt_raw: xuint32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_IPV4_ADDRESS {
    #[doc = "< address as a 32-bit unsigned integer"]
    pub xip_u32: xuint32,
    #[doc = "< address as an array of 8-bit unsigned integers"]
    pub xip_octets: [xuint8; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_AUTHORIZATION {
    #[doc = "< Authorization as char"]
    pub authorization: [::std::os::raw::c_char; 4usize],
    #[doc = "< Authorization as int"]
    pub u32_: xuint32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XC_ORDER_REF_ID {
    pub __bindgen_anon_1: XC_ORDER_REF_ID__bindgen_ty_1,
    pub __bindgen_anon_2: XC_ORDER_REF_ID__bindgen_ty_2,
    pub __bindgen_anon_3: XC_ORDER_REF_ID__bindgen_ty_3,
    pub __bindgen_anon_4: XC_ORDER_REF_ID__bindgen_ty_4,
    pub __bindgen_anon_5: XC_ORDER_REF_ID__bindgen_ty_5,
    pub __bindgen_anon_6: XC_ORDER_REF_ID__bindgen_ty_6,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_FIELD_DESC__bindgen_ty_1 {
    #[doc = "< placeholder for variable part of structure"]
    pub RESERVED_02: [xuint32; 3usize],
    pub __bindgen_anon_1: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: XC_FIELD_DESC__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XC_LIST_UPDATE__bindgen_ty_1 {
    pub pos: XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_1,
    pub key: XC_LIST_UPDATE__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XC_TRADING_STATE_FILTER {
    #[doc = "< 2: pre-market, 4: open-market; 8: post-market"]
    pub xtsf_u8: xuint8,
    pub __bindgen_anon_1: XC_TRADING_STATE_FILTER__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_FEED_ID {
    #[doc = "< Numerical value"]
    pub xfeed_handle: xuint64,
    #[doc = "< ASCII identifier (NUL-padded, not NUL-terminated)"]
    pub xfeed_id: [::std::os::raw::c_char; 8usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_INSTRUMENT_GROUP_ID__bindgen_ty_1 {
    #[doc = "< Numerical value"]
    pub group_id_integer: xuint64,
    #[doc = "< ASCII identifier (NUL-padded, not NUL-terminated)"]
    pub group_id_ascii: [::std::os::raw::c_char; 24usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_DFLOAT_64 {
    #[doc = "<"]
    pub s64: xint64,
    pub __bindgen_anon_1: XC_DFLOAT_64__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_EVENT_QUALS {
    #[doc = "< list of qualifiers"]
    pub xq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xq_u32: xuint32,
    pub quals: XC_EVENT_QUALS__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_QUOTE_QUALS {
    #[doc = "< list of (untyped) qualifiers"]
    pub xqq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xqq_u32: xuint32,
    pub quals: XC_QUOTE_QUALS__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_TRADE_QUALS {
    #[doc = "< list of (untyped) qualifiers"]
    pub xtq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xtq_u32: xuint32,
    pub quals: XC_TRADE_QUALS__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_REFRESH_QUALS {
    #[doc = "< list of (untyped) qualifiers"]
    pub xrq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xrq_u32: xuint32,
    pub quals: XC_REFRESH_QUALS__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_INDICATIVE_QUALS {
    #[doc = "< list of (untyped) qualifiers"]
    pub xiq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xiq_u32: xuint32,
    pub quals: XC_INDICATIVE_QUALS__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union XC_STAT_QUALS {
    #[doc = "< list of (untyped) qualifiers"]
    pub xeq_arr: [XC_EVENT_QUAL; 4usize],
    #[doc = "< Set of four as an integer"]
    pub xeq_u32: xuint32,
    pub quals: XC_STAT_QUALS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XC_TRADING_STATE {
    pub u8_: xuint8,
    pub __bindgen_anon_1: XC_TRADING_STATE__bindgen_ty_1,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
impl XM_DATA_TYPE_INFO {
    #[inline]
    pub fn xdti_representation(&self) -> XM_DATA_TYPE_REPRESENTATION {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xdti_representation(&mut self, val: XM_DATA_TYPE_REPRESENTATION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdti_representation_raw(this: *const Self) -> XM_DATA_TYPE_REPRESENTATION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xdti_representation_raw(this: *mut Self, val: XM_DATA_TYPE_REPRESENTATION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdti_is_array(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xdti_is_array(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdti_is_array_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xdti_is_array_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XDTI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_XDTI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XDTI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XDTI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xdti_representation: XM_DATA_TYPE_REPRESENTATION,
        xdti_is_array: xbool,
        XDTI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xdti_representation: u8 = unsafe { ::std::mem::transmute(xdti_representation) };
            xdti_representation as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let xdti_is_array: u8 = unsafe { ::std::mem::transmute(xdti_is_array) };
            xdti_is_array as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let XDTI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XDTI_RESERVED_00) };
            XDTI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XM_STRUCTFIELD_INFO {
    #[inline]
    pub fn xsfi_is_pointer(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xsfi_is_pointer(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xsfi_is_pointer_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xsfi_is_pointer_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xsfi_is_reserved(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xsfi_is_reserved(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xsfi_is_reserved_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xsfi_is_reserved_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XSFI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XSFI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XSFI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XSFI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xsfi_is_pointer: xuint8,
        xsfi_is_reserved: xuint8,
        XSFI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xsfi_is_pointer: u8 = unsafe { ::std::mem::transmute(xsfi_is_pointer) };
            xsfi_is_pointer as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xsfi_is_reserved: u8 = unsafe { ::std::mem::transmute(xsfi_is_reserved) };
            xsfi_is_reserved as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XSFI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XSFI_RESERVED_00) };
            XSFI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_DATE__bindgen_ty_1 {
    #[inline]
    pub fn xdt_day(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_xdt_day(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdt_day_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdt_day_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdt_month(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_xdt_month(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdt_month_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdt_month_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdt_year(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_xdt_year(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdt_year_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                12u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdt_year_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdt_id_pattern(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_xdt_id_pattern(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdt_id_pattern_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdt_id_pattern_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xdt_day: xuint32,
        xdt_month: xuint32,
        xdt_year: xuint32,
        xdt_id_pattern: xuint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let xdt_day: u32 = unsafe { ::std::mem::transmute(xdt_day) };
            xdt_day as u64
        });
        __bindgen_bitfield_unit.set(5usize, 4u8, {
            let xdt_month: u32 = unsafe { ::std::mem::transmute(xdt_month) };
            xdt_month as u64
        });
        __bindgen_bitfield_unit.set(9usize, 12u8, {
            let xdt_year: u32 = unsafe { ::std::mem::transmute(xdt_year) };
            xdt_year as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let xdt_id_pattern: u32 = unsafe { ::std::mem::transmute(xdt_id_pattern) };
            xdt_id_pattern as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_DAYSBACK {
    #[inline]
    pub fn xdb_ordinal(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_xdb_ordinal(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdb_ordinal_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdb_ordinal_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdb_day_count(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_xdb_day_count(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdb_day_count_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdb_day_count_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xdb_id_pattern(&self) -> xuint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_xdb_id_pattern(&mut self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xdb_id_pattern_raw(this: *const Self) -> xuint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_xdb_id_pattern_raw(this: *mut Self, val: xuint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xdb_ordinal: xuint32,
        xdb_day_count: xuint32,
        xdb_id_pattern: xuint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let xdb_ordinal: u32 = unsafe { ::std::mem::transmute(xdb_ordinal) };
            xdb_ordinal as u64
        });
        __bindgen_bitfield_unit.set(10usize, 11u8, {
            let xdb_day_count: u32 = unsafe { ::std::mem::transmute(xdb_day_count) };
            xdb_day_count as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let xdb_id_pattern: u32 = unsafe { ::std::mem::transmute(xdb_id_pattern) };
            xdb_id_pattern as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_PRICE_DESC {
    #[inline]
    pub fn xpd_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xpd_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpd_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpd_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPD_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPD_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPD_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPD_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpd_price_type: XC_PRICE_TYPE,
        XPD_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xpd_price_type: u8 = unsafe { ::std::mem::transmute(xpd_price_type) };
            xpd_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPD_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPD_RESERVED_00) };
            XPD_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_KEY_DESC {
    #[inline]
    pub fn xkd_symbol_namespace(&self) -> XC_SYMBOL_NAMESPACE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xkd_symbol_namespace(&mut self, val: XC_SYMBOL_NAMESPACE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xkd_symbol_namespace_raw(this: *const Self) -> XC_SYMBOL_NAMESPACE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xkd_symbol_namespace_raw(this: *mut Self, val: XC_SYMBOL_NAMESPACE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XKD_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XKD_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XKD_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XKD_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xkd_symbol_namespace: XC_SYMBOL_NAMESPACE,
        XKD_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xkd_symbol_namespace: u8 = unsafe { ::std::mem::transmute(xkd_symbol_namespace) };
            xkd_symbol_namespace as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XKD_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XKD_RESERVED_00) };
            XKD_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_SLOT_CONTEXT {
    #[inline]
    pub fn xcreq_symbol_namespace(&self) -> XC_SYMBOL_NAMESPACE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcreq_symbol_namespace(&mut self, val: XC_SYMBOL_NAMESPACE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcreq_symbol_namespace_raw(this: *const Self) -> XC_SYMBOL_NAMESPACE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcreq_symbol_namespace_raw(this: *mut Self, val: XC_SYMBOL_NAMESPACE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCREQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCREQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCREQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCREQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcreq_symbol_namespace: XC_SYMBOL_NAMESPACE,
        XCREQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcreq_symbol_namespace: u8 =
                unsafe { ::std::mem::transmute(xcreq_symbol_namespace) };
            xcreq_symbol_namespace as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCREQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCREQ_RESERVED_00) };
            XCREQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_LIST_UPDATE {
    #[inline]
    pub fn xlu_action(&self) -> XC_LIST_UPDATE_ACTION {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xlu_action(&mut self, val: XC_LIST_UPDATE_ACTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xlu_action_raw(this: *const Self) -> XC_LIST_UPDATE_ACTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xlu_action_raw(this: *mut Self, val: XC_LIST_UPDATE_ACTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XLU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XLU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XLU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XLU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xlu_variant(&self) -> XC_LIST_UPDATE_VARIANT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xlu_variant(&mut self, val: XC_LIST_UPDATE_VARIANT) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xlu_variant_raw(this: *const Self) -> XC_LIST_UPDATE_VARIANT {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xlu_variant_raw(this: *mut Self, val: XC_LIST_UPDATE_VARIANT) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xlu_action: XC_LIST_UPDATE_ACTION,
        XLU_RESERVED_00: xuint8,
        xlu_variant: XC_LIST_UPDATE_VARIANT,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xlu_action: u8 = unsafe { ::std::mem::transmute(xlu_action) };
            xlu_action as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let XLU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XLU_RESERVED_00) };
            XLU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xlu_variant: u8 = unsafe { ::std::mem::transmute(xlu_variant) };
            xlu_variant as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_TRADING_STATE_FILTER__bindgen_ty_1 {
    #[inline]
    pub fn RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RESERVED_00: xuint8,
        pre_market: xbool,
        open_market: xbool,
        post_market: xbool,
        RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let RESERVED_00: u8 = unsafe { ::std::mem::transmute(RESERVED_00) };
            RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pre_market: u8 = unsafe { ::std::mem::transmute(pre_market) };
            pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let open_market: u8 = unsafe { ::std::mem::transmute(open_market) };
            open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let post_market: u8 = unsafe { ::std::mem::transmute(post_market) };
            post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let RESERVED_01: u8 = unsafe { ::std::mem::transmute(RESERVED_01) };
            RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_EQUITY_TRADE_UPDATE_FLAGS {
    #[inline]
    pub fn update_last(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_update_last(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_last_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_update_last_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_open(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_update_open(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_open_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_update_open_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_high(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_update_high(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_high_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_update_high_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_low(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_update_low(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_low_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_update_low_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RESERVED_00(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_RESERVED_00(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RESERVED_00_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_RESERVED_00_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_close(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_update_close(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_close_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_update_close_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RESERVED_01(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_RESERVED_01(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RESERVED_01_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                9u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_RESERVED_01_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        update_last: xuint16,
        update_open: xuint16,
        update_high: xuint16,
        update_low: xuint16,
        RESERVED_00: xuint16,
        update_close: xuint16,
        RESERVED_01: xuint16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let update_last: u16 = unsafe { ::std::mem::transmute(update_last) };
            update_last as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let update_open: u16 = unsafe { ::std::mem::transmute(update_open) };
            update_open as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let update_high: u16 = unsafe { ::std::mem::transmute(update_high) };
            update_high as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_low: u16 = unsafe { ::std::mem::transmute(update_low) };
            update_low as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let RESERVED_00: u16 = unsafe { ::std::mem::transmute(RESERVED_00) };
            RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let update_close: u16 = unsafe { ::std::mem::transmute(update_close) };
            update_close as u64
        });
        __bindgen_bitfield_unit.set(7usize, 9u8, {
            let RESERVED_01: u16 = unsafe { ::std::mem::transmute(RESERVED_01) };
            RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_COMMODITY_TRADE_UPDATE_FLAGS {
    #[inline]
    pub fn update_last(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_last(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_last_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_update_last_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_open(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_open(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_open_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_update_open_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_high(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_high(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_high_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_update_high_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_low(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_low(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_low_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_update_low_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        update_last: xuint8,
        update_open: xuint8,
        update_high: xuint8,
        update_low: xuint8,
        RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let update_last: u8 = unsafe { ::std::mem::transmute(update_last) };
            update_last as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let update_open: u8 = unsafe { ::std::mem::transmute(update_open) };
            update_open as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let update_high: u8 = unsafe { ::std::mem::transmute(update_high) };
            update_high as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_low: u8 = unsafe { ::std::mem::transmute(update_low) };
            update_low as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let RESERVED_00: u8 = unsafe { ::std::mem::transmute(RESERVED_00) };
            RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_DFLOAT_64__bindgen_ty_1 {
    #[inline]
    pub fn exponent(&self) -> xuint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_exponent(&mut self, val: xuint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn exponent_raw(this: *const Self) -> xuint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_exponent_raw(this: *mut Self, val: xuint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mantissa(&self) -> xint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 60u8) as u64) }
    }
    #[inline]
    pub fn set_mantissa(&mut self, val: xint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 60u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mantissa_raw(this: *const Self) -> xint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                60u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_mantissa_raw(this: *mut Self, val: xint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                60u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        exponent: xuint64,
        mantissa: xint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let exponent: u64 = unsafe { ::std::mem::transmute(exponent) };
            exponent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 60u8, {
            let mantissa: u64 = unsafe { ::std::mem::transmute(mantissa) };
            mantissa as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_TICK_FLAGS {
    #[inline]
    pub fn xtf_tick_up(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xtf_tick_up(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtf_tick_up_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtf_tick_up_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xtf_tick_down(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xtf_tick_down(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtf_tick_down_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtf_tick_down_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xtf_price_up(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xtf_price_up(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtf_price_up_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtf_price_up_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xtf_price_down(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xtf_price_down(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtf_price_down_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtf_price_down_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XTF_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XTF_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XTF_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XTF_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xtf_tick_up: xuint8,
        xtf_tick_down: xuint8,
        xtf_price_up: xuint8,
        xtf_price_down: xuint8,
        XTF_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xtf_tick_up: u8 = unsafe { ::std::mem::transmute(xtf_tick_up) };
            xtf_tick_up as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xtf_tick_down: u8 = unsafe { ::std::mem::transmute(xtf_tick_down) };
            xtf_tick_down as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xtf_price_up: u8 = unsafe { ::std::mem::transmute(xtf_price_up) };
            xtf_price_up as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xtf_price_down: u8 = unsafe { ::std::mem::transmute(xtf_price_down) };
            xtf_price_down as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XTF_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XTF_RESERVED_00) };
            XTF_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_TS_REQUEST_TYPE {
    #[inline]
    pub fn tsrt_trades(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tsrt_trades(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tsrt_trades_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tsrt_trades_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tsrt_quotes(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tsrt_quotes(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tsrt_quotes_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tsrt_quotes_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tsrt_order_book(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tsrt_order_book(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tsrt_order_book_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tsrt_order_book_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tsrt_price_book(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tsrt_price_book(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tsrt_price_book_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tsrt_price_book_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tsrt_order_executions(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tsrt_order_executions(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tsrt_order_executions_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tsrt_order_executions_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn TSRT_RESERVED_00(&self) -> xuint16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_TSRT_RESERVED_00(&mut self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TSRT_RESERVED_00_raw(this: *const Self) -> xuint16 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_TSRT_RESERVED_00_raw(this: *mut Self, val: xuint16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tsrt_trades: xuint16,
        tsrt_quotes: xuint16,
        tsrt_order_book: xuint16,
        tsrt_price_book: xuint16,
        tsrt_order_executions: xuint16,
        TSRT_RESERVED_00: xuint16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tsrt_trades: u16 = unsafe { ::std::mem::transmute(tsrt_trades) };
            tsrt_trades as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tsrt_quotes: u16 = unsafe { ::std::mem::transmute(tsrt_quotes) };
            tsrt_quotes as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tsrt_order_book: u16 = unsafe { ::std::mem::transmute(tsrt_order_book) };
            tsrt_order_book as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tsrt_price_book: u16 = unsafe { ::std::mem::transmute(tsrt_price_book) };
            tsrt_price_book as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tsrt_order_executions: u16 =
                unsafe { ::std::mem::transmute(tsrt_order_executions) };
            tsrt_order_executions as u64
        });
        __bindgen_bitfield_unit.set(5usize, 11u8, {
            let TSRT_RESERVED_00: u16 = unsafe { ::std::mem::transmute(TSRT_RESERVED_00) };
            TSRT_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_FINANCIAL_STATUS {
    #[inline]
    pub fn xfns_deficient(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xfns_deficient(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xfns_deficient_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xfns_deficient_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xfns_delinquent(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xfns_delinquent(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xfns_delinquent_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xfns_delinquent_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xfns_bankrupt(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xfns_bankrupt(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xfns_bankrupt_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xfns_bankrupt_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xfns_suspended(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xfns_suspended(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xfns_suspended_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xfns_suspended_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XFNS_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XFNS_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XFNS_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XFNS_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xfns_deficient: xuint8,
        xfns_delinquent: xuint8,
        xfns_bankrupt: xuint8,
        xfns_suspended: xuint8,
        XFNS_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xfns_deficient: u8 = unsafe { ::std::mem::transmute(xfns_deficient) };
            xfns_deficient as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xfns_delinquent: u8 = unsafe { ::std::mem::transmute(xfns_delinquent) };
            xfns_delinquent as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xfns_bankrupt: u8 = unsafe { ::std::mem::transmute(xfns_bankrupt) };
            xfns_bankrupt as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xfns_suspended: u8 = unsafe { ::std::mem::transmute(xfns_suspended) };
            xfns_suspended as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XFNS_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XFNS_RESERVED_00) };
            XFNS_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_CC_FLAGS {
    #[inline]
    pub fn tscc_cancel(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tscc_cancel(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tscc_cancel_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tscc_cancel_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tscc_correct(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tscc_correct(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tscc_correct_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_tscc_correct_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn TSCC_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_TSCC_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TSCC_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_TSCC_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tscc_cancel: xuint8,
        tscc_correct: xuint8,
        TSCC_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tscc_cancel: u8 = unsafe { ::std::mem::transmute(tscc_cancel) };
            tscc_cancel as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tscc_correct: u8 = unsafe { ::std::mem::transmute(tscc_correct) };
            tscc_correct as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let TSCC_RESERVED_00: u8 = unsafe { ::std::mem::transmute(TSCC_RESERVED_00) };
            TSCC_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_TRADING_STATE__bindgen_ty_1 {
    #[inline]
    pub fn xtrst_status(&self) -> XC_TRADING_STATUS {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xtrst_status(&mut self, val: XC_TRADING_STATUS) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtrst_status_raw(this: *const Self) -> XC_TRADING_STATUS {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtrst_status_raw(this: *mut Self, val: XC_TRADING_STATUS) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xtrst_substatus(&self) -> XC_TRADING_SUBSTATUS {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xtrst_substatus(&mut self, val: XC_TRADING_SUBSTATUS) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xtrst_substatus_raw(this: *const Self) -> XC_TRADING_SUBSTATUS {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xtrst_substatus_raw(this: *mut Self, val: XC_TRADING_SUBSTATUS) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xtrst_status: XC_TRADING_STATUS,
        xtrst_substatus: XC_TRADING_SUBSTATUS,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xtrst_status: u8 = unsafe { ::std::mem::transmute(xtrst_status) };
            xtrst_status as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let xtrst_substatus: u8 = unsafe { ::std::mem::transmute(xtrst_substatus) };
            xtrst_substatus as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EVENT_COMMON {
    #[inline]
    pub fn xev_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xev_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xev_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xev_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XEV_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XEV_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XEV_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XEV_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xev_price_type: XC_PRICE_TYPE,
        XEV_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xev_price_type: u8 = unsafe { ::std::mem::transmute(xev_price_type) };
            xev_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XEV_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XEV_RESERVED_00) };
            XEV_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xev_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xev_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xev_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xev_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XEV_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XEV_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XEV_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XEV_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xev_short_sale_restricted: xbool,
        XEV_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xev_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xev_short_sale_restricted) };
            xev_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XEV_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XEV_RESERVED_01) };
            XEV_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_QUOTE_ALL {
    #[inline]
    pub fn xcq_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcq_price_type: XC_PRICE_TYPE,
        XCQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcq_price_type: u8 = unsafe { ::std::mem::transmute(xcq_price_type) };
            xcq_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_00) };
            XCQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcq_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcq_short_sale_restricted: xbool,
        XCQ_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcq_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcq_short_sale_restricted) };
            xcq_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCQ_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_01) };
            XCQ_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_QUOTE_WITH_CPMVOL_ALL {
    #[inline]
    pub fn xcq_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcq_price_type: XC_PRICE_TYPE,
        XCQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcq_price_type: u8 = unsafe { ::std::mem::transmute(xcq_price_type) };
            xcq_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_00) };
            XCQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcq_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcq_short_sale_restricted: xbool,
        XCQ_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcq_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcq_short_sale_restricted) };
            xcq_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCQ_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_01) };
            XCQ_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_TRADE_ALL {
    #[inline]
    pub fn xct_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xct_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xct_price_type: XC_PRICE_TYPE,
        XCT_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xct_price_type: u8 = unsafe { ::std::mem::transmute(xct_price_type) };
            xct_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCT_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_00) };
            XCT_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xct_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xct_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xct_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xct_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xct_short_sale_restricted: xbool,
        xct_trade_thru_exempt: xbool,
        XCT_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xct_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xct_short_sale_restricted) };
            xct_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xct_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xct_trade_thru_exempt) };
            xct_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCT_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_01) };
            XCT_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xct_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xct_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xct_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCT_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xct_side_attr: u8 = unsafe { ::std::mem::transmute(xct_side_attr) };
            xct_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCT_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_04) };
            XCT_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_CANCEL_ALL {
    #[inline]
    pub fn xca_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xca_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xca_price_type: XC_PRICE_TYPE,
        XCA_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xca_price_type: u8 = unsafe { ::std::mem::transmute(xca_price_type) };
            xca_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCA_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_00) };
            XCA_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xca_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xca_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xca_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xca_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xca_short_sale_restricted: xbool,
        xca_trade_thru_exempt: xbool,
        XCA_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xca_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xca_short_sale_restricted) };
            xca_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xca_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xca_trade_thru_exempt) };
            xca_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCA_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_01) };
            XCA_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xca_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xca_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xca_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCA_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xca_side_attr: u8 = unsafe { ::std::mem::transmute(xca_side_attr) };
            xca_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCA_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_04) };
            XCA_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_CORRECTION_ALL {
    #[inline]
    pub fn xcc_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcc_price_type: XC_PRICE_TYPE,
        XCC_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcc_price_type: u8 = unsafe { ::std::mem::transmute(xcc_price_type) };
            xcc_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCC_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_00) };
            XCC_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcc_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcc_short_sale_restricted: xbool,
        xcc_trade_thru_exempt: xbool,
        XCC_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcc_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcc_short_sale_restricted) };
            xcc_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xcc_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xcc_trade_thru_exempt) };
            xcc_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_01) };
            XCC_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_cancel_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_cancel_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_cancel_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_cancel_side_attr_raw(
        this: *mut Self,
        val: XC_EXECUTION_SIDE_ATTRIBUTION,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xcc_cancel_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCC_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_cancel_side_attr: u8 = unsafe { ::std::mem::transmute(xcc_cancel_side_attr) };
            xcc_cancel_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_04) };
            XCC_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_correct_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_correct_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_correct_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_correct_side_attr_raw(
        this: *mut Self,
        val: XC_EXECUTION_SIDE_ATTRIBUTION,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_08(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_08(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_08_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_08_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        xcc_correct_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCC_RESERVED_08: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_correct_side_attr: u8 = unsafe { ::std::mem::transmute(xcc_correct_side_attr) };
            xcc_correct_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_08: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_08) };
            XCC_RESERVED_08 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_REFRESH_ALL_WITH_HITIME {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_REFRESH_ALL {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_REFRESH_WITH_LULD_CPMVOL_ALL {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_IMAGE_ALL_WITH_HITIME {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_IMAGE_ALL {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_EQUITY_IMAGE_WITH_LULD_CPMVOL_ALL {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_QUOTE_ALL {
    #[inline]
    pub fn xcq_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcq_price_type: XC_PRICE_TYPE,
        XCQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcq_price_type: u8 = unsafe { ::std::mem::transmute(xcq_price_type) };
            xcq_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_00) };
            XCQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcq_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcq_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcq_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcq_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCQ_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCQ_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCQ_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCQ_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcq_short_sale_restricted: xbool,
        XCQ_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcq_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcq_short_sale_restricted) };
            xcq_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCQ_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCQ_RESERVED_01) };
            XCQ_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_TRADE {
    #[inline]
    pub fn xct_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xct_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xct_bate: XC_BATE_CODE,
        XCT_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xct_bate: u8 = unsafe { ::std::mem::transmute(xct_bate) };
            xct_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCT_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_01) };
            XCT_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_TRADE_ALL {
    #[inline]
    pub fn xct_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xct_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xct_price_type: XC_PRICE_TYPE,
        XCT_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xct_price_type: u8 = unsafe { ::std::mem::transmute(xct_price_type) };
            xct_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCT_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_00) };
            XCT_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xct_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xct_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xct_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xct_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xct_short_sale_restricted: xbool,
        xct_trade_thru_exempt: xbool,
        XCT_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xct_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xct_short_sale_restricted) };
            xct_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xct_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xct_trade_thru_exempt) };
            xct_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCT_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_01) };
            XCT_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xct_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xct_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xct_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xct_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xct_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xct_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCT_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCT_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCT_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCT_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xct_bate: XC_BATE_CODE,
        xct_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCT_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xct_bate: u8 = unsafe { ::std::mem::transmute(xct_bate) };
            xct_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xct_side_attr: u8 = unsafe { ::std::mem::transmute(xct_side_attr) };
            xct_side_attr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCT_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCT_RESERVED_04) };
            XCT_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_CANCEL_ALL {
    #[inline]
    pub fn xca_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xca_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xca_price_type: XC_PRICE_TYPE,
        XCA_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xca_price_type: u8 = unsafe { ::std::mem::transmute(xca_price_type) };
            xca_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCA_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_00) };
            XCA_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xca_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xca_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xca_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xca_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xca_short_sale_restricted: xbool,
        xca_trade_thru_exempt: xbool,
        XCA_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xca_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xca_short_sale_restricted) };
            xca_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xca_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xca_trade_thru_exempt) };
            xca_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCA_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_01) };
            XCA_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xca_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xca_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xca_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xca_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xca_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xca_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCA_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCA_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCA_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCA_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xca_bate: XC_BATE_CODE,
        xca_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCA_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xca_bate: u8 = unsafe { ::std::mem::transmute(xca_bate) };
            xca_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xca_side_attr: u8 = unsafe { ::std::mem::transmute(xca_side_attr) };
            xca_side_attr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCA_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCA_RESERVED_04) };
            XCA_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_CORRECTION {
    #[inline]
    pub fn xcc_cancel_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_cancel_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_cancel_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_cancel_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcc_cancel_bate: XC_BATE_CODE,
        XCC_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_cancel_bate: u8 = unsafe { ::std::mem::transmute(xcc_cancel_bate) };
            xcc_cancel_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_01) };
            XCC_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_correct_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_correct_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_correct_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_correct_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_05(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_05(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_05_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_05_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcc_correct_bate: XC_BATE_CODE,
        XCC_RESERVED_05: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_correct_bate: u8 = unsafe { ::std::mem::transmute(xcc_correct_bate) };
            xcc_correct_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_05: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_05) };
            XCC_RESERVED_05 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_CORRECTION_ALL {
    #[inline]
    pub fn xcc_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcc_price_type: XC_PRICE_TYPE,
        XCC_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcc_price_type: u8 = unsafe { ::std::mem::transmute(xcc_price_type) };
            xcc_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCC_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_00) };
            XCC_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcc_trade_thru_exempt(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_trade_thru_exempt(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_trade_thru_exempt_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_trade_thru_exempt_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcc_short_sale_restricted: xbool,
        xcc_trade_thru_exempt: xbool,
        XCC_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcc_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcc_short_sale_restricted) };
            xcc_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xcc_trade_thru_exempt: u8 = unsafe { ::std::mem::transmute(xcc_trade_thru_exempt) };
            xcc_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XCC_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_01) };
            XCC_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_cancel_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_cancel_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_cancel_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_cancel_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcc_cancel_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_cancel_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_cancel_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_cancel_side_attr_raw(
        this: *mut Self,
        val: XC_EXECUTION_SIDE_ATTRIBUTION,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xcc_cancel_bate: XC_BATE_CODE,
        xcc_cancel_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCC_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_cancel_bate: u8 = unsafe { ::std::mem::transmute(xcc_cancel_bate) };
            xcc_cancel_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xcc_cancel_side_attr: u8 = unsafe { ::std::mem::transmute(xcc_cancel_side_attr) };
            xcc_cancel_side_attr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCC_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_04) };
            XCC_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcc_correct_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_correct_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_correct_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_correct_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcc_correct_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcc_correct_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcc_correct_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcc_correct_side_attr_raw(
        this: *mut Self,
        val: XC_EXECUTION_SIDE_ATTRIBUTION,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCC_RESERVED_08(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCC_RESERVED_08(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCC_RESERVED_08_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCC_RESERVED_08_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        xcc_correct_bate: XC_BATE_CODE,
        xcc_correct_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XCC_RESERVED_08: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcc_correct_bate: u8 = unsafe { ::std::mem::transmute(xcc_correct_bate) };
            xcc_correct_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xcc_correct_side_attr: u8 = unsafe { ::std::mem::transmute(xcc_correct_side_attr) };
            xcc_correct_side_attr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCC_RESERVED_08: u8 = unsafe { ::std::mem::transmute(XCC_RESERVED_08) };
            XCC_RESERVED_08 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_REFRESH_ALL_WITH_HITIME {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xcr_setl_bate: XC_BATE_CODE,
        xcr_last_bate: XC_BATE_CODE,
        xcr_high_bate: XC_BATE_CODE,
        xcr_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcr_setl_bate: u8 = unsafe { ::std::mem::transmute(xcr_setl_bate) };
            xcr_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xcr_last_bate: u8 = unsafe { ::std::mem::transmute(xcr_last_bate) };
            xcr_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xcr_high_bate: u8 = unsafe { ::std::mem::transmute(xcr_high_bate) };
            xcr_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xcr_low_bate: u8 = unsafe { ::std::mem::transmute(xcr_low_bate) };
            xcr_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_REFRESH_ALL {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xcr_setl_bate: XC_BATE_CODE,
        xcr_last_bate: XC_BATE_CODE,
        xcr_high_bate: XC_BATE_CODE,
        xcr_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcr_setl_bate: u8 = unsafe { ::std::mem::transmute(xcr_setl_bate) };
            xcr_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xcr_last_bate: u8 = unsafe { ::std::mem::transmute(xcr_last_bate) };
            xcr_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xcr_high_bate: u8 = unsafe { ::std::mem::transmute(xcr_high_bate) };
            xcr_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xcr_low_bate: u8 = unsafe { ::std::mem::transmute(xcr_low_bate) };
            xcr_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_REFRESH_WITH_QUALS_ALL {
    #[inline]
    pub fn xcr_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xcr_price_type: XC_PRICE_TYPE,
        XCR_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xcr_price_type: u8 = unsafe { ::std::mem::transmute(xcr_price_type) };
            xcr_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCR_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_00) };
            XCR_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCR_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCR_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCR_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCR_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xcr_short_sale_restricted: xbool,
        XCR_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xcr_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xcr_short_sale_restricted) };
            xcr_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCR_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCR_RESERVED_01) };
            XCR_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xcr_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xcr_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xcr_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xcr_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xcr_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xcr_setl_bate: XC_BATE_CODE,
        xcr_last_bate: XC_BATE_CODE,
        xcr_high_bate: XC_BATE_CODE,
        xcr_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xcr_setl_bate: u8 = unsafe { ::std::mem::transmute(xcr_setl_bate) };
            xcr_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xcr_last_bate: u8 = unsafe { ::std::mem::transmute(xcr_last_bate) };
            xcr_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xcr_high_bate: u8 = unsafe { ::std::mem::transmute(xcr_high_bate) };
            xcr_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xcr_low_bate: u8 = unsafe { ::std::mem::transmute(xcr_low_bate) };
            xcr_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_IMAGE_ALL_WITH_HITIME {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xci_setl_bate: XC_BATE_CODE,
        xci_last_bate: XC_BATE_CODE,
        xci_high_bate: XC_BATE_CODE,
        xci_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xci_setl_bate: u8 = unsafe { ::std::mem::transmute(xci_setl_bate) };
            xci_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xci_last_bate: u8 = unsafe { ::std::mem::transmute(xci_last_bate) };
            xci_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xci_high_bate: u8 = unsafe { ::std::mem::transmute(xci_high_bate) };
            xci_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xci_low_bate: u8 = unsafe { ::std::mem::transmute(xci_low_bate) };
            xci_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_IMAGE_ALL {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xci_setl_bate: XC_BATE_CODE,
        xci_last_bate: XC_BATE_CODE,
        xci_high_bate: XC_BATE_CODE,
        xci_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xci_setl_bate: u8 = unsafe { ::std::mem::transmute(xci_setl_bate) };
            xci_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xci_last_bate: u8 = unsafe { ::std::mem::transmute(xci_last_bate) };
            xci_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xci_high_bate: u8 = unsafe { ::std::mem::transmute(xci_high_bate) };
            xci_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xci_low_bate: u8 = unsafe { ::std::mem::transmute(xci_low_bate) };
            xci_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_COMMODITY_IMAGE_WITH_QUALS_ALL {
    #[inline]
    pub fn xci_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xci_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xci_price_type: XC_PRICE_TYPE,
        XCI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xci_price_type: u8 = unsafe { ::std::mem::transmute(xci_price_type) };
            xci_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XCI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_00) };
            XCI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xci_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XCI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XCI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XCI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XCI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xci_short_sale_restricted: xbool,
        XCI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xci_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xci_short_sale_restricted) };
            xci_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XCI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XCI_RESERVED_01) };
            XCI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xci_setl_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_setl_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_setl_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_setl_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_last_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_last_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_last_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_last_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_high_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_high_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_high_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_high_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xci_low_bate(&self) -> XC_BATE_CODE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xci_low_bate(&mut self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xci_low_bate_raw(this: *const Self) -> XC_BATE_CODE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xci_low_bate_raw(this: *mut Self, val: XC_BATE_CODE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xci_setl_bate: XC_BATE_CODE,
        xci_last_bate: XC_BATE_CODE,
        xci_high_bate: XC_BATE_CODE,
        xci_low_bate: XC_BATE_CODE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xci_setl_bate: u8 = unsafe { ::std::mem::transmute(xci_setl_bate) };
            xci_setl_bate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xci_last_bate: u8 = unsafe { ::std::mem::transmute(xci_last_bate) };
            xci_last_bate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let xci_high_bate: u8 = unsafe { ::std::mem::transmute(xci_high_bate) };
            xci_high_bate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let xci_low_bate: u8 = unsafe { ::std::mem::transmute(xci_low_bate) };
            xci_low_bate as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_ENTRY {
    #[inline]
    pub fn xob_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xob_implied: xbool,
        xob_pre_market: xbool,
        xob_open_market: xbool,
        xob_post_market: xbool,
        XOB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xob_implied: u8 = unsafe { ::std::mem::transmute(xob_implied) };
            xob_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xob_pre_market: u8 = unsafe { ::std::mem::transmute(xob_pre_market) };
            xob_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xob_open_market: u8 = unsafe { ::std::mem::transmute(xob_open_market) };
            xob_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xob_post_market: u8 = unsafe { ::std::mem::transmute(xob_post_market) };
            xob_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOB_RESERVED_00) };
            XOB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY {
    #[inline]
    pub fn xob_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xob_implied: xbool,
        xob_pre_market: xbool,
        xob_open_market: xbool,
        xob_post_market: xbool,
        XOB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xob_implied: u8 = unsafe { ::std::mem::transmute(xob_implied) };
            xob_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xob_pre_market: u8 = unsafe { ::std::mem::transmute(xob_pre_market) };
            xob_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xob_open_market: u8 = unsafe { ::std::mem::transmute(xob_open_market) };
            xob_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xob_post_market: u8 = unsafe { ::std::mem::transmute(xob_post_market) };
            xob_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOB_RESERVED_00) };
            XOB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_ENTRY {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        xpb_pre_market: xbool,
        xpb_open_market: xbool,
        xpb_post_market: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpb_pre_market: u8 = unsafe { ::std::mem::transmute(xpb_pre_market) };
            xpb_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xpb_open_market: u8 = unsafe { ::std::mem::transmute(xpb_open_market) };
            xpb_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xpb_post_market: u8 = unsafe { ::std::mem::transmute(xpb_post_market) };
            xpb_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        xpb_pre_market: xbool,
        xpb_open_market: xbool,
        xpb_post_market: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpb_pre_market: u8 = unsafe { ::std::mem::transmute(xpb_pre_market) };
            xpb_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xpb_open_market: u8 = unsafe { ::std::mem::transmute(xpb_open_market) };
            xpb_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xpb_post_market: u8 = unsafe { ::std::mem::transmute(xpb_post_market) };
            xpb_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_LEVEL {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_UPDATE {
    #[inline]
    pub fn XOBU_RESERVED_00(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_00(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_00_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_00_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        XOBU_RESERVED_00: xbool,
        xobu_ask_side: xbool,
        xobu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XOBU_RESERVED_01: xuint8,
        xobu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xobu_implied: xbool,
        xobu_pre_market: xbool,
        xobu_open_market: xbool,
        xobu_post_market: xbool,
        XOBU_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let XOBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_00) };
            XOBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xobu_ask_side: u8 = unsafe { ::std::mem::transmute(xobu_ask_side) };
            xobu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xobu_update_type: u8 = unsafe { ::std::mem::transmute(xobu_update_type) };
            xobu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XOBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_01) };
            XOBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xobu_transaction_type: u8 = unsafe { ::std::mem::transmute(xobu_transaction_type) };
            xobu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xobu_implied: u8 = unsafe { ::std::mem::transmute(xobu_implied) };
            xobu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xobu_pre_market: u8 = unsafe { ::std::mem::transmute(xobu_pre_market) };
            xobu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xobu_open_market: u8 = unsafe { ::std::mem::transmute(xobu_open_market) };
            xobu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xobu_post_market: u8 = unsafe { ::std::mem::transmute(xobu_post_market) };
            xobu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XOBU_RESERVED_02: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_02) };
            XOBU_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY {
    #[inline]
    pub fn XOBU_RESERVED_00(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_00(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_00_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_00_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        XOBU_RESERVED_00: xbool,
        xobu_ask_side: xbool,
        xobu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XOBU_RESERVED_01: xuint8,
        xobu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xobu_implied: xbool,
        xobu_pre_market: xbool,
        xobu_open_market: xbool,
        xobu_post_market: xbool,
        XOBU_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let XOBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_00) };
            XOBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xobu_ask_side: u8 = unsafe { ::std::mem::transmute(xobu_ask_side) };
            xobu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xobu_update_type: u8 = unsafe { ::std::mem::transmute(xobu_update_type) };
            xobu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XOBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_01) };
            XOBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xobu_transaction_type: u8 = unsafe { ::std::mem::transmute(xobu_transaction_type) };
            xobu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xobu_implied: u8 = unsafe { ::std::mem::transmute(xobu_implied) };
            xobu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xobu_pre_market: u8 = unsafe { ::std::mem::transmute(xobu_pre_market) };
            xobu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xobu_open_market: u8 = unsafe { ::std::mem::transmute(xobu_open_market) };
            xobu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xobu_post_market: u8 = unsafe { ::std::mem::transmute(xobu_post_market) };
            xobu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XOBU_RESERVED_02: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_02) };
            XOBU_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_UPDATE_ALL {
    #[inline]
    pub fn xobu_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xobu_price_type: XC_PRICE_TYPE,
        XOBU_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xobu_price_type: u8 = unsafe { ::std::mem::transmute(xobu_price_type) };
            xobu_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_00) };
            XOBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xobu_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xobu_short_sale_restricted: xbool,
        XOBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xobu_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xobu_short_sale_restricted) };
            xobu_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XOBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_01) };
            XOBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn XOBU_RESERVED_03(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_03(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_03_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_03_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_05(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_05(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_05_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_05_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        XOBU_RESERVED_03: xbool,
        xobu_ask_side: xbool,
        xobu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XOBU_RESERVED_04: xuint8,
        xobu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xobu_implied: xbool,
        xobu_pre_market: xbool,
        xobu_open_market: xbool,
        xobu_post_market: xbool,
        XOBU_RESERVED_05: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let XOBU_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_03) };
            XOBU_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xobu_ask_side: u8 = unsafe { ::std::mem::transmute(xobu_ask_side) };
            xobu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xobu_update_type: u8 = unsafe { ::std::mem::transmute(xobu_update_type) };
            xobu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XOBU_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_04) };
            XOBU_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xobu_transaction_type: u8 = unsafe { ::std::mem::transmute(xobu_transaction_type) };
            xobu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xobu_implied: u8 = unsafe { ::std::mem::transmute(xobu_implied) };
            xobu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xobu_pre_market: u8 = unsafe { ::std::mem::transmute(xobu_pre_market) };
            xobu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xobu_open_market: u8 = unsafe { ::std::mem::transmute(xobu_open_market) };
            xobu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xobu_post_market: u8 = unsafe { ::std::mem::transmute(xobu_post_market) };
            xobu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XOBU_RESERVED_05: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_05) };
            XOBU_RESERVED_05 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE {
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_00: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_ALL {
    #[inline]
    pub fn xpbu_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_price_type: XC_PRICE_TYPE,
        XPBU_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xpbu_price_type: u8 = unsafe { ::std::mem::transmute(xpbu_price_type) };
            xpbu_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xpbu_short_sale_restricted: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xpbu_short_sale_restricted) };
            xpbu_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_03: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_03) };
            XPBU_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_04) };
            XPBU_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_CPMVOL_ALL {
    #[inline]
    pub fn xpbu_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_price_type: XC_PRICE_TYPE,
        XPBU_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xpbu_price_type: u8 = unsafe { ::std::mem::transmute(xpbu_price_type) };
            xpbu_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xpbu_short_sale_restricted: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xpbu_short_sale_restricted) };
            xpbu_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_03: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_03) };
            XPBU_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_04) };
            XPBU_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL {
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_00: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_ALL {
    #[inline]
    pub fn xpbu_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_price_type: XC_PRICE_TYPE,
        XPBU_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xpbu_price_type: u8 = unsafe { ::std::mem::transmute(xpbu_price_type) };
            xpbu_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xpbu_short_sale_restricted: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xpbu_short_sale_restricted) };
            xpbu_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_03: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_03) };
            XPBU_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_04) };
            XPBU_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_CPMVOL_ALL {
    #[inline]
    pub fn xpbu_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_price_type: XC_PRICE_TYPE,
        XPBU_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xpbu_price_type: u8 = unsafe { ::std::mem::transmute(xpbu_price_type) };
            xpbu_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xpbu_short_sale_restricted: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xpbu_short_sale_restricted) };
            xpbu_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_03: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_03) };
            XPBU_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_04) };
            XPBU_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_ENTRY_WITH_HITIME {
    #[inline]
    pub fn xob_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xob_implied: xbool,
        xob_pre_market: xbool,
        xob_open_market: xbool,
        xob_post_market: xbool,
        XOB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xob_implied: u8 = unsafe { ::std::mem::transmute(xob_implied) };
            xob_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xob_pre_market: u8 = unsafe { ::std::mem::transmute(xob_pre_market) };
            xob_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xob_open_market: u8 = unsafe { ::std::mem::transmute(xob_open_market) };
            xob_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xob_post_market: u8 = unsafe { ::std::mem::transmute(xob_post_market) };
            xob_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOB_RESERVED_00) };
            XOB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_ENTRY_WITH_PRIORITY_HITIME {
    #[inline]
    pub fn xob_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xob_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xob_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xob_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xob_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xob_implied: xbool,
        xob_pre_market: xbool,
        xob_open_market: xbool,
        xob_post_market: xbool,
        XOB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xob_implied: u8 = unsafe { ::std::mem::transmute(xob_implied) };
            xob_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xob_pre_market: u8 = unsafe { ::std::mem::transmute(xob_pre_market) };
            xob_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xob_open_market: u8 = unsafe { ::std::mem::transmute(xob_open_market) };
            xob_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xob_post_market: u8 = unsafe { ::std::mem::transmute(xob_post_market) };
            xob_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOB_RESERVED_00) };
            XOB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_ENTRY_WITH_HITIME {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        xpb_pre_market: xbool,
        xpb_open_market: xbool,
        xpb_post_market: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpb_pre_market: u8 = unsafe { ::std::mem::transmute(xpb_pre_market) };
            xpb_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xpb_open_market: u8 = unsafe { ::std::mem::transmute(xpb_open_market) };
            xpb_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xpb_post_market: u8 = unsafe { ::std::mem::transmute(xpb_post_market) };
            xpb_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_ENTRY_WITH_CPMVOL_HITIME {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpb_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        xpb_pre_market: xbool,
        xpb_open_market: xbool,
        xpb_post_market: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpb_pre_market: u8 = unsafe { ::std::mem::transmute(xpb_pre_market) };
            xpb_pre_market as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xpb_open_market: u8 = unsafe { ::std::mem::transmute(xpb_open_market) };
            xpb_open_market as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xpb_post_market: u8 = unsafe { ::std::mem::transmute(xpb_post_market) };
            xpb_post_market as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_LEVEL_WITH_HITIME {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_LEVEL_WITH_CPMVOL_HITIME {
    #[inline]
    pub fn xpb_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpb_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpb_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpb_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XPB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpb_implied: xbool,
        XPB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpb_implied: u8 = unsafe { ::std::mem::transmute(xpb_implied) };
            xpb_implied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XPB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPB_RESERVED_00) };
            XPB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_UPDATE_WITH_HITIME {
    #[inline]
    pub fn XOBU_RESERVED_00(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_00(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_00_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_00_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        XOBU_RESERVED_00: xbool,
        xobu_ask_side: xbool,
        xobu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XOBU_RESERVED_01: xuint8,
        xobu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xobu_implied: xbool,
        xobu_pre_market: xbool,
        xobu_open_market: xbool,
        xobu_post_market: xbool,
        XOBU_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let XOBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_00) };
            XOBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xobu_ask_side: u8 = unsafe { ::std::mem::transmute(xobu_ask_side) };
            xobu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xobu_update_type: u8 = unsafe { ::std::mem::transmute(xobu_update_type) };
            xobu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XOBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_01) };
            XOBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xobu_transaction_type: u8 = unsafe { ::std::mem::transmute(xobu_transaction_type) };
            xobu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xobu_implied: u8 = unsafe { ::std::mem::transmute(xobu_implied) };
            xobu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xobu_pre_market: u8 = unsafe { ::std::mem::transmute(xobu_pre_market) };
            xobu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xobu_open_market: u8 = unsafe { ::std::mem::transmute(xobu_open_market) };
            xobu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xobu_post_market: u8 = unsafe { ::std::mem::transmute(xobu_post_market) };
            xobu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XOBU_RESERVED_02: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_02) };
            XOBU_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_BOOK_UPDATE_WITH_PRIORITY_HITIME {
    #[inline]
    pub fn XOBU_RESERVED_00(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_00(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_00_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_00_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xobu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xobu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xobu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xobu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOBU_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOBU_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOBU_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOBU_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        XOBU_RESERVED_00: xbool,
        xobu_ask_side: xbool,
        xobu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XOBU_RESERVED_01: xuint8,
        xobu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xobu_implied: xbool,
        xobu_pre_market: xbool,
        xobu_open_market: xbool,
        xobu_post_market: xbool,
        XOBU_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let XOBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_00) };
            XOBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xobu_ask_side: u8 = unsafe { ::std::mem::transmute(xobu_ask_side) };
            xobu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xobu_update_type: u8 = unsafe { ::std::mem::transmute(xobu_update_type) };
            xobu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XOBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_01) };
            XOBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xobu_transaction_type: u8 = unsafe { ::std::mem::transmute(xobu_transaction_type) };
            xobu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xobu_implied: u8 = unsafe { ::std::mem::transmute(xobu_implied) };
            xobu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xobu_pre_market: u8 = unsafe { ::std::mem::transmute(xobu_pre_market) };
            xobu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xobu_open_market: u8 = unsafe { ::std::mem::transmute(xobu_open_market) };
            xobu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xobu_post_market: u8 = unsafe { ::std::mem::transmute(xobu_post_market) };
            xobu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XOBU_RESERVED_02: u8 = unsafe { ::std::mem::transmute(XOBU_RESERVED_02) };
            XOBU_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_HITIME {
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_00: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_PRICE_BOOK_UPDATE_WITH_ROW_LEVEL_HITIME {
    #[inline]
    pub fn xpbu_synthetic(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_synthetic(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_synthetic_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_synthetic_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_update_type(&self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_update_type(&mut self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_update_type_raw(this: *const Self) -> XC_ORDER_BOOK_UPDATE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_update_type_raw(this: *mut Self, val: XC_ORDER_BOOK_UPDATE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_transaction_type(&self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_transaction_type(&mut self, val: XC_ORDER_BOOK_TRANSACTION_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_transaction_type_raw(this: *const Self) -> XC_ORDER_BOOK_TRANSACTION_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_transaction_type_raw(
        this: *mut Self,
        val: XC_ORDER_BOOK_TRANSACTION_TYPE,
    ) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_implied(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_implied(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_implied_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_implied_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_pre_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_pre_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_pre_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_pre_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_open_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_open_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_open_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_open_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xpbu_post_market(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xpbu_post_market(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xpbu_post_market_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xpbu_post_market_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XPBU_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XPBU_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XPBU_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XPBU_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpbu_synthetic: xbool,
        xpbu_ask_side: xbool,
        xpbu_update_type: XC_ORDER_BOOK_UPDATE_TYPE,
        XPBU_RESERVED_00: xuint8,
        xpbu_transaction_type: XC_ORDER_BOOK_TRANSACTION_TYPE,
        xpbu_implied: xbool,
        xpbu_pre_market: xbool,
        xpbu_open_market: xbool,
        xpbu_post_market: xbool,
        XPBU_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpbu_synthetic: u8 = unsafe { ::std::mem::transmute(xpbu_synthetic) };
            xpbu_synthetic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xpbu_ask_side: u8 = unsafe { ::std::mem::transmute(xpbu_ask_side) };
            xpbu_ask_side as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let xpbu_update_type: u8 = unsafe { ::std::mem::transmute(xpbu_update_type) };
            xpbu_update_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let XPBU_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_00) };
            XPBU_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let xpbu_transaction_type: u8 = unsafe { ::std::mem::transmute(xpbu_transaction_type) };
            xpbu_transaction_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpbu_implied: u8 = unsafe { ::std::mem::transmute(xpbu_implied) };
            xpbu_implied as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let xpbu_pre_market: u8 = unsafe { ::std::mem::transmute(xpbu_pre_market) };
            xpbu_pre_market as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let xpbu_open_market: u8 = unsafe { ::std::mem::transmute(xpbu_open_market) };
            xpbu_open_market as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let xpbu_post_market: u8 = unsafe { ::std::mem::transmute(xpbu_post_market) };
            xpbu_post_market as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let XPBU_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XPBU_RESERVED_01) };
            XPBU_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_EXECUTION_V3_1_7 {
    #[inline]
    pub fn xoex_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xoex_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XOEX_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xoex_side_attr: u8 = unsafe { ::std::mem::transmute(xoex_side_attr) };
            xoex_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XOEX_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_01) };
            XOEX_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_EXECUTION {
    #[inline]
    pub fn xoex_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xoex_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XOEX_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xoex_side_attr: u8 = unsafe { ::std::mem::transmute(xoex_side_attr) };
            xoex_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XOEX_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_01) };
            XOEX_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn XOEX_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xoex_trade_thru_exempt(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_trade_thru_exempt(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_trade_thru_exempt_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_trade_thru_exempt_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        XOEX_RESERVED_02: xuint8,
        xoex_trade_thru_exempt: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let XOEX_RESERVED_02: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_02) };
            XOEX_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let xoex_trade_thru_exempt: u8 =
                unsafe { ::std::mem::transmute(xoex_trade_thru_exempt) };
            xoex_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_EXECUTION_ALL_V3_1_7 {
    #[inline]
    pub fn xoex_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xoex_price_type: XC_PRICE_TYPE,
        XOEX_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xoex_price_type: u8 = unsafe { ::std::mem::transmute(xoex_price_type) };
            xoex_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOEX_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_00) };
            XOEX_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xoex_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xoex_short_sale_restricted: xbool,
        XOEX_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xoex_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xoex_short_sale_restricted) };
            xoex_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XOEX_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_01) };
            XOEX_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xoex_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xoex_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XOEX_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xoex_side_attr: u8 = unsafe { ::std::mem::transmute(xoex_side_attr) };
            xoex_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XOEX_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_04) };
            XOEX_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_EXECUTION_ALL {
    #[inline]
    pub fn xoex_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xoex_price_type: XC_PRICE_TYPE,
        XOEX_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xoex_price_type: u8 = unsafe { ::std::mem::transmute(xoex_price_type) };
            xoex_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOEX_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_00) };
            XOEX_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xoex_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xoex_short_sale_restricted: xbool,
        XOEX_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xoex_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xoex_short_sale_restricted) };
            xoex_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XOEX_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_01) };
            XOEX_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xoex_side_attr(&self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_side_attr(&mut self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_side_attr_raw(this: *const Self) -> XC_EXECUTION_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_side_attr_raw(this: *mut Self, val: XC_EXECUTION_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOEX_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xoex_side_attr: XC_EXECUTION_SIDE_ATTRIBUTION,
        XOEX_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xoex_side_attr: u8 = unsafe { ::std::mem::transmute(xoex_side_attr) };
            xoex_side_attr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XOEX_RESERVED_04: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_04) };
            XOEX_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn XOEX_RESERVED_05(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOEX_RESERVED_05(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOEX_RESERVED_05_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOEX_RESERVED_05_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn xoex_trade_thru_exempt(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_4.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xoex_trade_thru_exempt(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_4.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoex_trade_thru_exempt_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_4),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoex_trade_thru_exempt_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_4),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        XOEX_RESERVED_05: xuint8,
        xoex_trade_thru_exempt: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let XOEX_RESERVED_05: u8 = unsafe { ::std::mem::transmute(XOEX_RESERVED_05) };
            XOEX_RESERVED_05 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let xoex_trade_thru_exempt: u8 =
                unsafe { ::std::mem::transmute(xoex_trade_thru_exempt) };
            xoex_trade_thru_exempt as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_IMBALANCE_ALL {
    #[inline]
    pub fn xoimb_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xoimb_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoimb_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoimb_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOIMB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XOIMB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOIMB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOIMB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xoimb_price_type: XC_PRICE_TYPE,
        XOIMB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xoimb_price_type: u8 = unsafe { ::std::mem::transmute(xoimb_price_type) };
            xoimb_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XOIMB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XOIMB_RESERVED_00) };
            XOIMB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xoimb_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xoimb_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xoimb_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xoimb_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XOIMB_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XOIMB_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XOIMB_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XOIMB_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xoimb_short_sale_restricted: xbool,
        XOIMB_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xoimb_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xoimb_short_sale_restricted) };
            xoimb_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XOIMB_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XOIMB_RESERVED_01) };
            XOIMB_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_INDICATION_OF_INTEREST {
    #[inline]
    pub fn ioi_ioi_offset_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ioi_ioi_offset_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ioi_ioi_offset_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ioi_ioi_offset_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IOI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_IOI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IOI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IOI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ioi_ioi_offset_price_type: XC_PRICE_TYPE,
        IOI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ioi_ioi_offset_price_type: u8 =
                unsafe { ::std::mem::transmute(ioi_ioi_offset_price_type) };
            ioi_ioi_offset_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let IOI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(IOI_RESERVED_00) };
            IOI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_MARKET_DIRECTORY_ALL {
    #[inline]
    pub fn xmd_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xmd_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xmd_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xmd_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XMD_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XMD_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XMD_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XMD_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xmd_price_type: XC_PRICE_TYPE,
        XMD_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xmd_price_type: u8 = unsafe { ::std::mem::transmute(xmd_price_type) };
            xmd_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XMD_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XMD_RESERVED_00) };
            XMD_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xmd_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xmd_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xmd_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xmd_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XMD_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XMD_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XMD_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XMD_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xmd_short_sale_restricted: xbool,
        XMD_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xmd_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xmd_short_sale_restricted) };
            xmd_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XMD_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XMD_RESERVED_01) };
            XMD_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_REQUEST_FOR_QUOTE {
    #[inline]
    pub fn xrfq_side_attribution(&self) -> XC_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xrfq_side_attribution(&mut self, val: XC_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xrfq_side_attribution_raw(this: *const Self) -> XC_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xrfq_side_attribution_raw(this: *mut Self, val: XC_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XRFQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XRFQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XRFQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XRFQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xrfq_side_attribution: XC_SIDE_ATTRIBUTION,
        XRFQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xrfq_side_attribution: u8 = unsafe { ::std::mem::transmute(xrfq_side_attribution) };
            xrfq_side_attribution as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XRFQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XRFQ_RESERVED_00) };
            XRFQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_REQUEST_FOR_QUOTE_ALL {
    #[inline]
    pub fn xrfq_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xrfq_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xrfq_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xrfq_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XRFQ_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XRFQ_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XRFQ_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XRFQ_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xrfq_price_type: XC_PRICE_TYPE,
        XRFQ_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xrfq_price_type: u8 = unsafe { ::std::mem::transmute(xrfq_price_type) };
            xrfq_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XRFQ_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XRFQ_RESERVED_00) };
            XRFQ_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xrfq_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xrfq_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xrfq_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xrfq_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XRFQ_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XRFQ_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XRFQ_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XRFQ_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xrfq_short_sale_restricted: xbool,
        XRFQ_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xrfq_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xrfq_short_sale_restricted) };
            xrfq_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XRFQ_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XRFQ_RESERVED_01) };
            XRFQ_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xrfq_side_attribution(&self) -> XC_SIDE_ATTRIBUTION {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_xrfq_side_attribution(&mut self, val: XC_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xrfq_side_attribution_raw(this: *const Self) -> XC_SIDE_ATTRIBUTION {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xrfq_side_attribution_raw(this: *mut Self, val: XC_SIDE_ATTRIBUTION) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XRFQ_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_XRFQ_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XRFQ_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XRFQ_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        xrfq_side_attribution: XC_SIDE_ATTRIBUTION,
        XRFQ_RESERVED_03: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let xrfq_side_attribution: u8 = unsafe { ::std::mem::transmute(xrfq_side_attribution) };
            xrfq_side_attribution as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let XRFQ_RESERVED_03: u8 = unsafe { ::std::mem::transmute(XRFQ_RESERVED_03) };
            XRFQ_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_TRADING_ACTION_ALL {
    #[inline]
    pub fn xta_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xta_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xta_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xta_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XTA_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XTA_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XTA_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XTA_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xta_price_type: XC_PRICE_TYPE,
        XTA_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xta_price_type: u8 = unsafe { ::std::mem::transmute(xta_price_type) };
            xta_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XTA_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XTA_RESERVED_00) };
            XTA_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xta_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xta_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xta_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xta_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XTA_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XTA_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XTA_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XTA_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xta_short_sale_restricted: xbool,
        XTA_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xta_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xta_short_sale_restricted) };
            xta_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XTA_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XTA_RESERVED_01) };
            XTA_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_TRADING_ACTION_WITH_LULD_ALL {
    #[inline]
    pub fn xta_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_xta_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xta_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xta_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XTA_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_XTA_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XTA_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XTA_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xta_price_type: XC_PRICE_TYPE,
        XTA_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xta_price_type: u8 = unsafe { ::std::mem::transmute(xta_price_type) };
            xta_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let XTA_RESERVED_00: u8 = unsafe { ::std::mem::transmute(XTA_RESERVED_00) };
            XTA_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn xta_short_sale_restricted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xta_short_sale_restricted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn xta_short_sale_restricted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_xta_short_sale_restricted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn XTA_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_XTA_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn XTA_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_XTA_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        xta_short_sale_restricted: xbool,
        XTA_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xta_short_sale_restricted: u8 =
                unsafe { ::std::mem::transmute(xta_short_sale_restricted) };
            xta_short_sale_restricted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let XTA_RESERVED_01: u8 = unsafe { ::std::mem::transmute(XTA_RESERVED_01) };
            XTA_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_NAV_UPDATE_ALL {
    #[inline]
    pub fn nav_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_nav_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nav_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_nav_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NAV_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_NAV_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NAV_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_NAV_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nav_price_type: XC_PRICE_TYPE,
        NAV_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let nav_price_type: u8 = unsafe { ::std::mem::transmute(nav_price_type) };
            nav_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let NAV_RESERVED_01: u8 = unsafe { ::std::mem::transmute(NAV_RESERVED_01) };
            NAV_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_BASKET_CONSTITUENT {
    #[inline]
    pub fn bskc_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bskc_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bskc_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_bskc_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BSKC_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_BSKC_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BSKC_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_BSKC_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bskc_price_type: XC_PRICE_TYPE,
        BSKC_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let bskc_price_type: u8 = unsafe { ::std::mem::transmute(bskc_price_type) };
            bskc_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let BSKC_RESERVED_01: u8 = unsafe { ::std::mem::transmute(BSKC_RESERVED_01) };
            BSKC_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_BASKET_CONSTITUENT_INFO {
    #[inline]
    pub fn bcons_is_halted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bcons_is_halted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bcons_is_halted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_bcons_is_halted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BCONS_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_BCONS_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BCONS_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_BCONS_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bcons_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bcons_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bcons_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_bcons_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bcons_is_halted: xbool,
        BCONS_RESERVED_00: xuint8,
        bcons_price_type: XC_PRICE_TYPE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bcons_is_halted: u8 = unsafe { ::std::mem::transmute(bcons_is_halted) };
            bcons_is_halted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let BCONS_RESERVED_00: u8 = unsafe { ::std::mem::transmute(BCONS_RESERVED_00) };
            BCONS_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bcons_price_type: u8 = unsafe { ::std::mem::transmute(bcons_price_type) };
            bcons_price_type as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_LINE_STATS {
    #[inline]
    pub fn lst_state(&self) -> XC_LINE_STATE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_lst_state(&mut self, val: XC_LINE_STATE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_state_raw(this: *const Self) -> XC_LINE_STATE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_state_raw(this: *mut Self, val: XC_LINE_STATE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LST_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_LST_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LST_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_LST_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_on_schedule(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_on_schedule(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_on_schedule_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_on_schedule_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_test(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_test(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_test_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_test_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_connected(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_connected(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_connected_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_connected_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_logged_in(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_logged_in(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_logged_in_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_logged_in_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_alarm(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_alarm(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_alarm_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_alarm_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_aborted(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_aborted(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_aborted_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_aborted_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lst_pending_down(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lst_pending_down(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lst_pending_down_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lst_pending_down_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LST_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_LST_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LST_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_LST_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lst_state: XC_LINE_STATE,
        LST_RESERVED_00: xuint8,
        lst_on_schedule: xbool,
        lst_test: xbool,
        lst_connected: xbool,
        lst_logged_in: xbool,
        lst_alarm: xbool,
        lst_aborted: xbool,
        lst_pending_down: xbool,
        LST_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let lst_state: u8 = unsafe { ::std::mem::transmute(lst_state) };
            lst_state as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let LST_RESERVED_00: u8 = unsafe { ::std::mem::transmute(LST_RESERVED_00) };
            LST_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let lst_on_schedule: u8 = unsafe { ::std::mem::transmute(lst_on_schedule) };
            lst_on_schedule as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let lst_test: u8 = unsafe { ::std::mem::transmute(lst_test) };
            lst_test as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let lst_connected: u8 = unsafe { ::std::mem::transmute(lst_connected) };
            lst_connected as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let lst_logged_in: u8 = unsafe { ::std::mem::transmute(lst_logged_in) };
            lst_logged_in as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let lst_alarm: u8 = unsafe { ::std::mem::transmute(lst_alarm) };
            lst_alarm as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let lst_aborted: u8 = unsafe { ::std::mem::transmute(lst_aborted) };
            lst_aborted as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let lst_pending_down: u8 = unsafe { ::std::mem::transmute(lst_pending_down) };
            lst_pending_down as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let LST_RESERVED_01: u8 = unsafe { ::std::mem::transmute(LST_RESERVED_01) };
            LST_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_FEED_INFO {
    #[inline]
    pub fn fi_userbbo_member(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fi_userbbo_member(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fi_userbbo_member_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_fi_userbbo_member_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_FI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_FI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fi_userbbo_member: xbool,
        FI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fi_userbbo_member: u8 = unsafe { ::std::mem::transmute(fi_userbbo_member) };
            fi_userbbo_member as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let FI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(FI_RESERVED_00) };
            FI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_MWCB {
    #[inline]
    pub fn mwcb_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_mwcb_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mwcb_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_mwcb_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MWCB_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_MWCB_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MWCB_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_MWCB_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mwcb_price_type: XC_PRICE_TYPE,
        MWCB_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let mwcb_price_type: u8 = unsafe { ::std::mem::transmute(mwcb_price_type) };
            mwcb_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let MWCB_RESERVED_00: u8 = unsafe { ::std::mem::transmute(MWCB_RESERVED_00) };
            MWCB_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_V3_8 {
    #[inline]
    pub fn drc_call(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drc_call(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_call_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_call_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drc_american_exercise(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drc_american_exercise(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_american_exercise_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_american_exercise_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRC_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_DRC_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRC_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRC_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drc_call: xbool,
        drc_american_exercise: xbool,
        DRC_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let drc_call: u8 = unsafe { ::std::mem::transmute(drc_call) };
            drc_call as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let drc_american_exercise: u8 = unsafe { ::std::mem::transmute(drc_american_exercise) };
            drc_american_exercise as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let DRC_RESERVED_02: u8 = unsafe { ::std::mem::transmute(DRC_RESERVED_02) };
            DRC_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn drc_strike_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drc_strike_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_strike_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_strike_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRC_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRC_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRC_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRC_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        drc_strike_price_type: XC_PRICE_TYPE,
        DRC_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drc_strike_price_type: u8 = unsafe { ::std::mem::transmute(drc_strike_price_type) };
            drc_strike_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRC_RESERVED_04: u8 = unsafe { ::std::mem::transmute(DRC_RESERVED_04) };
            DRC_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE {
    #[inline]
    pub fn drc_call(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drc_call(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_call_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_call_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drc_american_exercise(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drc_american_exercise(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_american_exercise_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_american_exercise_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRC_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_DRC_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRC_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRC_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drc_call: xbool,
        drc_american_exercise: xbool,
        DRC_RESERVED_03: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let drc_call: u8 = unsafe { ::std::mem::transmute(drc_call) };
            drc_call as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let drc_american_exercise: u8 = unsafe { ::std::mem::transmute(drc_american_exercise) };
            drc_american_exercise as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let DRC_RESERVED_03: u8 = unsafe { ::std::mem::transmute(DRC_RESERVED_03) };
            DRC_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn drc_strike_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drc_strike_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_strike_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_strike_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRC_RESERVED_04(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRC_RESERVED_04(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRC_RESERVED_04_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRC_RESERVED_04_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        drc_strike_price_type: XC_PRICE_TYPE,
        DRC_RESERVED_04: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drc_strike_price_type: u8 = unsafe { ::std::mem::transmute(drc_strike_price_type) };
            drc_strike_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRC_RESERVED_04: u8 = unsafe { ::std::mem::transmute(DRC_RESERVED_04) };
            DRC_RESERVED_04 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn drc_display_factor_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drc_display_factor_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_display_factor_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_display_factor_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drc_original_strike_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drc_original_strike_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drc_original_strike_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drc_original_strike_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        drc_display_factor_price_type: XC_PRICE_TYPE,
        drc_original_strike_price_type: XC_PRICE_TYPE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drc_display_factor_price_type: u8 =
                unsafe { ::std::mem::transmute(drc_display_factor_price_type) };
            drc_display_factor_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let drc_original_strike_price_type: u8 =
                unsafe { ::std::mem::transmute(drc_original_strike_price_type) };
            drc_original_strike_price_type as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_INSTRUMENT {
    #[inline]
    pub fn dri_call(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dri_call(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dri_call_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dri_call_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dri_american_exercise(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dri_american_exercise(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dri_american_exercise_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dri_american_exercise_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRI_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_DRI_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRI_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRI_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dri_call: xbool,
        dri_american_exercise: xbool,
        DRI_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dri_call: u8 = unsafe { ::std::mem::transmute(dri_call) };
            dri_call as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dri_american_exercise: u8 = unsafe { ::std::mem::transmute(dri_american_exercise) };
            dri_american_exercise as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let DRI_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRI_RESERVED_00) };
            DRI_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn dri_strike_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dri_strike_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dri_strike_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dri_strike_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRI_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRI_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRI_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRI_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        dri_strike_price_type: XC_PRICE_TYPE,
        DRI_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let dri_strike_price_type: u8 = unsafe { ::std::mem::transmute(dri_strike_price_type) };
            dri_strike_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRI_RESERVED_01: u8 = unsafe { ::std::mem::transmute(DRI_RESERVED_01) };
            DRI_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn dri_display_factor_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dri_display_factor_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dri_display_factor_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dri_display_factor_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dri_original_strike_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dri_original_strike_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dri_original_strike_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dri_original_strike_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        dri_display_factor_price_type: XC_PRICE_TYPE,
        dri_original_strike_price_type: XC_PRICE_TYPE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let dri_display_factor_price_type: u8 =
                unsafe { ::std::mem::transmute(dri_display_factor_price_type) };
            dri_display_factor_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let dri_original_strike_price_type: u8 =
                unsafe { ::std::mem::transmute(dri_original_strike_price_type) };
            dri_original_strike_price_type as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_TICK {
    #[inline]
    pub fn drt_tick_increment_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drt_tick_increment_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drt_tick_increment_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drt_tick_increment_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRT_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRT_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRT_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRT_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drt_tick_increment_price_type: XC_PRICE_TYPE,
        DRT_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drt_tick_increment_price_type: u8 =
                unsafe { ::std::mem::transmute(drt_tick_increment_price_type) };
            drt_tick_increment_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRT_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRT_RESERVED_00) };
            DRT_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_MATCH {
    #[inline]
    pub fn drm_match_algo(&self) -> XC_MATCH_ALGO {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drm_match_algo(&mut self, val: XC_MATCH_ALGO) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drm_match_algo_raw(this: *const Self) -> XC_MATCH_ALGO {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drm_match_algo_raw(this: *mut Self, val: XC_MATCH_ALGO) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drm_match_customer_priority(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drm_match_customer_priority(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drm_match_customer_priority_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drm_match_customer_priority_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRM_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_DRM_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRM_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRM_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drm_match_algo: XC_MATCH_ALGO,
        drm_match_customer_priority: xbool,
        DRM_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drm_match_algo: u8 = unsafe { ::std::mem::transmute(drm_match_algo) };
            drm_match_algo as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let drm_match_customer_priority: u8 =
                unsafe { ::std::mem::transmute(drm_match_customer_priority) };
            drm_match_customer_priority as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let DRM_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRM_RESERVED_00) };
            DRM_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_DELIVERABLE {
    #[inline]
    pub fn drd_deliverable_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drd_deliverable_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drd_deliverable_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drd_deliverable_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRD_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRD_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRD_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRD_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drd_deliverable_price_type: XC_PRICE_TYPE,
        DRD_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drd_deliverable_price_type: u8 =
                unsafe { ::std::mem::transmute(drd_deliverable_price_type) };
            drd_deliverable_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRD_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRD_RESERVED_00) };
            DRD_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_LEG_V3_8 {
    #[inline]
    pub fn drl_leg_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drl_leg_call(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_call(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_call_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_call_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drl_leg_american_exercise(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_american_exercise(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_american_exercise_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_american_exercise_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRL_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_DRL_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRL_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRL_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drl_leg_ask_side: xbool,
        drl_leg_call: xbool,
        drl_leg_american_exercise: xbool,
        DRL_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let drl_leg_ask_side: u8 = unsafe { ::std::mem::transmute(drl_leg_ask_side) };
            drl_leg_ask_side as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let drl_leg_call: u8 = unsafe { ::std::mem::transmute(drl_leg_call) };
            drl_leg_call as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let drl_leg_american_exercise: u8 =
                unsafe { ::std::mem::transmute(drl_leg_american_exercise) };
            drl_leg_american_exercise as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let DRL_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRL_RESERVED_00) };
            DRL_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn drl_leg_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRL_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRL_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRL_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRL_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        drl_leg_price_type: XC_PRICE_TYPE,
        DRL_RESERVED_02: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drl_leg_price_type: u8 = unsafe { ::std::mem::transmute(drl_leg_price_type) };
            drl_leg_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRL_RESERVED_02: u8 = unsafe { ::std::mem::transmute(DRL_RESERVED_02) };
            DRL_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_DERIVATIVE_REFERENCE_LEG {
    #[inline]
    pub fn drl_leg_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drl_leg_call(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_call(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_call_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_call_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drl_leg_american_exercise(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_american_exercise(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_american_exercise_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_american_exercise_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRL_RESERVED_00(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_DRL_RESERVED_00(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRL_RESERVED_00_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRL_RESERVED_00_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        drl_leg_ask_side: xbool,
        drl_leg_call: xbool,
        drl_leg_american_exercise: xbool,
        DRL_RESERVED_00: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let drl_leg_ask_side: u8 = unsafe { ::std::mem::transmute(drl_leg_ask_side) };
            drl_leg_ask_side as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let drl_leg_call: u8 = unsafe { ::std::mem::transmute(drl_leg_call) };
            drl_leg_call as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let drl_leg_american_exercise: u8 =
                unsafe { ::std::mem::transmute(drl_leg_american_exercise) };
            drl_leg_american_exercise as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let DRL_RESERVED_00: u8 = unsafe { ::std::mem::transmute(DRL_RESERVED_00) };
            DRL_RESERVED_00 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn drl_leg_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRL_RESERVED_02(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRL_RESERVED_02(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRL_RESERVED_02_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRL_RESERVED_02_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn drl_leg_reference_price_type(&self) -> XC_PRICE_TYPE {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_drl_leg_reference_price_type(&mut self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn drl_leg_reference_price_type_raw(this: *const Self) -> XC_PRICE_TYPE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                8usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_drl_leg_reference_price_type_raw(this: *mut Self, val: XC_PRICE_TYPE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                8usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DRL_RESERVED_03(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_DRL_RESERVED_03(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DRL_RESERVED_03_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DRL_RESERVED_03_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        drl_leg_price_type: XC_PRICE_TYPE,
        DRL_RESERVED_02: xuint8,
        drl_leg_reference_price_type: XC_PRICE_TYPE,
        DRL_RESERVED_03: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let drl_leg_price_type: u8 = unsafe { ::std::mem::transmute(drl_leg_price_type) };
            drl_leg_price_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let DRL_RESERVED_02: u8 = unsafe { ::std::mem::transmute(DRL_RESERVED_02) };
            DRL_RESERVED_02 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let drl_leg_reference_price_type: u8 =
                unsafe { ::std::mem::transmute(drl_leg_reference_price_type) };
            drl_leg_reference_price_type as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let DRL_RESERVED_03: u8 = unsafe { ::std::mem::transmute(DRL_RESERVED_03) };
            DRL_RESERVED_03 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl XC_GROUP_ORDER_ON_BOOK_ENTRY {
    #[inline]
    pub fn oobe_entry_ask_side(&self) -> xbool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_oobe_entry_ask_side(&mut self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn oobe_entry_ask_side_raw(this: *const Self) -> xbool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_oobe_entry_ask_side_raw(this: *mut Self, val: xbool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn OOBE_RESERVED_01(&self) -> xuint8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_OOBE_RESERVED_01(&mut self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn OOBE_RESERVED_01_raw(this: *const Self) -> xuint8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_OOBE_RESERVED_01_raw(this: *mut Self, val: xuint8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        oobe_entry_ask_side: xbool,
        OOBE_RESERVED_01: xuint8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let oobe_entry_ask_side: u8 = unsafe { ::std::mem::transmute(oobe_entry_ask_side) };
            oobe_entry_ask_side as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let OOBE_RESERVED_01: u8 = unsafe { ::std::mem::transmute(OOBE_RESERVED_01) };
            OOBE_RESERVED_01 as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    #[doc = " @brief Create a session with an Exegy Server.\n\n Initiate operations with an Exegy Server by making a connection to the\n server, authenticates and authorizes the user, and is used to create all\n other objects.\n\n ** The function is synchronous, and will not return until a connection\n ** with the Ticker Plant is either successfully established or it is\n ** determined that a connection cannot be established. If no connection\n ** with the Ticker Plant is established, the session object is automatically\n ** destroyed before xcCreateSession() returns.  Note that the callback\n ** (if one is specified) may return before or after xcCreateSession()\n ** returns.\n\n @param session_type [IN] The XC Object Type ID, specifying the type of\n    session object to create. Pass in XOBJ_SESSION_TICKER to establish a\n    standard (market data) session with the ticker plant. For a special\n    monitoring-only session, pass in XOBJ_SESSION_TICKER_MONITORING.\n @param session [OUT] The address of  an xhandle variable to receive the\n    session object's handle.\n @param callback [IN] Name of the client callback function to be notified\n    when session events occur (i.e., when the Session object first attempts a\n    connection with the Ticker Plant, and subsequently when the state of the\n    connection changes). If set to NULL, no event notification occurs for the\n    object. See \"Restrictions, Notes\" at the end of this section and\n    \"Session Events\" for more on event notification for Session.\n @param turnkey [IN] Opaque, user-specified value to be passed to the\n    callback function when events occur for this session.\n @param server_list [IN] IP address of the Exegy Ticker Plant being\n    connected to. A comma-delimited list of IP addresses may be specified for\n    failover purposes (i.e., the first machine in the list is primary, the\n    second is secondary, and so on). If no value is specified, the default\n    value from the config file is used. Note that the parameter can\n    optionally be set as a comma-delimited list of ip:port pairs if something\n    other than the default port (4001) is to be used. For InfiniBand\n    connections, \"ib::\" must be prepended to the server address list. To\n    summarize, the server address string format is as follows:\n    [ib::]&lt;server address&gt; where \"ib::\" is a required parameter for\n    InfiniBand connections only; &lt;server address&gt; is a list of one or\n    more IP addresses or ip:port pairs (either list is comma delimited, if\n    delimiter needed).\n @param username [IN] The username for login to the Exegy Ticker Plant.\n @param password [IN] The password for login to Exegy Ticker Plant.\n\n @return An xerr type indicating the status of the creation operation.\n\n Common error codes include:\n @retval XINVAL Invalid parameter, object not created.\n @retval XCONNREFUSED Connection refused.\n @retval XCONNRESET Connection reset by peer.\n @retval XADDR Connection failed due to bad address or host name.\n @retval XSOCKET Unable to connect to specified socket.\n @retval XLOGINFAILED Connection refused due to incorrect login credentials.\n @retval XSLOWCONSUMER Client was disconnected because it is a slow consumer.\n @retval XPROTO Connection failed because client and ticker plant could not\n    negotiate a connection.\n @retval XTIMEOUT Active connection timed out.\n @retval XTIME Connection request timed out waiting for server response.\n @retval XVERSION Connection refused due to version mismatch (between Exegy\n    Ticker Plant and XC API).\n @retval XBADHANDLE Invalid handle.\n @retval XSUCCESS Connection and login to the Exegy Ticker Plant were successful.\n @retval XSUCCESS Connection and login to the Exegy Ticker Plant were successful."]
    pub fn xcCreateSession(
        session_type: XC_OBJECT_TYPE,
        session: *mut xhandle,
        callback: xcObjectCallback,
        turnkey: xuint64,
        server_list: *const ::std::os::raw::c_char,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCreateSessionSet(
        session_type: XC_OBJECT_TYPE,
        object_count: xuint16,
        session: *mut xhandle,
        callback: xcObjectCallback,
        turnkey: xuint64,
        server_list: *const ::std::os::raw::c_char,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Migrate an existing session to a new Exegy Server or login with\n new credentials.\n\n ** THIS FUNCTION IS SYNCHRONOUS.  It will not return until the session  **\n ** is either successfully re-established, or cannot be.  The callback   **\n ** function associated with the session will be called as the old       **\n ** connection is terminated, and again as/if the new connection is      **\n ** established.  All callbacks must return before xcMigrateSession()    **\n ** will return.                                                         **\n\n ** IT IS POSSIBLE TO LEAVE YOUR SESSION IN A DISCONNECTED STATE WITH    **\n ** THIS FUNCTION.  Each server address in the supplied list will be     **\n ** tried once -- if all of them fail, xcMigrateSession() will return    **\n ** with an error code.  xcMigrateSession() will then have to be called  **\n ** again (perhaps with a different server_list parameter) to get the **\n ** session back into a connected state.                                 **\n\n @param session [IN] Handle to the session object for the session being\n    migrated.\n @param server_list [IN] The IP address and (optional) port number of the\n    Exegy Ticker Plant to be connected to. Accepts a comma-delimited list of\n    IP addresses or \"ip:port\" pairs (or a single IP address or single ip:port\n    pair). The port number need not be specified if the default port (4001)\n    is to be used. If a list is submitted, each address in the list is tried\n    once. Note that if this parameter is set to an empty string, the list in\n    the configuration file is used. If set to NULL, the previously-active\n    ip:port list is used, with the next Ticker Plant in the list tried first\n    (just as if the connection had been terminated by a connectivity problem\n    or by the Ticker Plant itself).\n @param username [IN] The username for login to the Exegy Ticker Plant.\n @param password [IN] The password for login to Exegy Ticker Plant.\n\n @return An xerr type indicating the status of the creation operation.\n\n Common error codes include:\n @retval XSUCCESS Connection and login to the Exegy Ticker Plant were\n    successful.\n @retval XINVAL Invalid parameter.\n @retval XCONNREFUSED Connection refused.\n @retval XCONNRESET Connection reset by peer.\n @retval XADDR Connection failed due to bad address.\n @retval XSOCKET Unable to connect to specified socket.\n @retval XLOGINFAILED Connection refused due to incorrect login credentials.\n @retval XPROTO Connection failed because client and ticker plant could not\n    negotiate a connection.\n @retval XTIMEOUT Active connection timed out.\n @retval XTIME Connection request timed out waiting for server response.\n @retval XVERSION Connection refused due to version mismatch (between Exegy\n    Ticker Plant and XC API).\n @retval XBADHANDLE Invalid handle."]
    pub fn xcMigrateSession(
        session: xhandle,
        server_list: *const ::std::os::raw::c_char,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Create a container object and register a real-time callback for\n individual event notifications.\n\n Creates a container content object of the specified type. Container\n objects created with this call deliver events one at a time.  A\n container object starts out empty. Subsequent calls to\n xcRequestItemByString() cause the container to become populated with\n content.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param session [IN] The handle to the parent SessionTicker or\n    SessionTickerMonitoring object.\n @param object_type [IN] The XC Object Type ID, specifying the type of\n    container object to create.\n @param object [OUT] The address of an xhandle variable to receive the handle\n    to the newly created container object.\n @param callback [IN] Name of the client callback function to call with event\n    notifications for the object. (May be set to NULL to ignore all events).\n @param turnkey [IN] Opaque, user-specified value which may be of use in\n    identifying the object. (It can be requested from the object.)\n @param max_slots [IN] The number of slots for the new container. Slots are\n    numbered from 0 to (max_slots - 1).\n\n @return An xerr type indicating the status of the creation operation.\n\n Common error codes include:\n @retval XSUCCESS The container object was successfully created.\n @retval XINVAL Invalid parameter, object not created.\n @retval XTYPE An invalid object type parameter was supplied.\n @retval XTHREAD Called from an invalid thread.\n @retval XNOTCONNECTED Session not connected\n @retval XBADHANDLE Invalid handle.\n @retval XNOMEM The value of max_slots is too large"]
    pub fn xcCreateContainer(
        session: xhandle,
        object_type: XC_OBJECT_TYPE,
        object: *mut xhandle,
        callback: xcObjectCallback,
        turnkey: xuint64,
        max_slots: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Create a container object and register a real-time callback for\n vectors of events.\n\n Creates a container content object of the specified type. Container\n objects created with this call deliver vectors of events. A container\n object starts out empty. Subsequent calls to xcRequestItemByString()\n cause the container to become populated with content.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param session [IN] The handle to the parent SessionTicker object.\n @param object_type [IN] The XC Object Type ID, specifying the type of\n    container object to create.\n @param object [OUT] The address of an xhandle variable to receive the handle\n    to the newly created container object.\n @param callback [IN] Name of the client callback function to call with event\n    notifications for the object. (May be set to NULL to ignore all events).\n @param turnkey [IN] Opaque, user-specified value which may be of use in\n    identifying the object. (It can be requested from the object.)\n @param max_slots [IN] The number of slots for the new container. Slots are\n    numbered from 0 to (max_slots - 1).\n\n @return An xerr type indicating the status of the creation operation.\n\n Common error codes include:\n @retval XSUCCESS The container object was successfully created.\n @retval XINVAL Invalid parameter, object not created.\n @retval XTYPE An invalid object type parameter was supplied.\n @retval XTHREAD Called from an invalid thread.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle.\n @retval XNOMEM The value of max_slots is too large"]
    pub fn xcCreateContainerWithVectoredEvents(
        session: xhandle,
        object_type: XC_OBJECT_TYPE,
        object: *mut xhandle,
        callback: xcObjectVectoredCallback,
        turnkey: xuint64,
        max_slots: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Destroy a container or session object.\n\n If a session is passed in, then the session will be disconnected and\n destroyed and any objects spawned with that session will be invalidated.\n\n If a container is passed in, then all slots from the container are removed\n and the container is destroyed and invalidated. With a container, this\n function waits for the object's outstanding callbacks (if any) to return;\n this will have implications if a callback takes excessive time to return\n (or if it completely fails to return).\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to object to be destroyed.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS Successfully destroyed.\n @retval XINVAL An invalid parameter was supplied.\n @retval XTYPE An invalid object type was specified (e.g., an event object)\n @retval XTHREAD Called from any invalid thread.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcDestroyObject(object: *mut xhandle) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Adds named items to a container object's set of content items.\n\n Add the named items to the list of content items contained within the\n object and enable the flow of notification events associated with those\n items.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to the container object.\n @param contexts [IN] The address of an array of request information\n    identifying the desired items. The request information (type\n    XC_SLOT_CONTEXT) includes an XC_KEY and a user-specified Exegy turnkey\n    for each item. See the note above for important information about using\n    XC_KEYs which include a long symbol.\n @param context_count [IN] The number of contexts (i.e., requested items).\n @param slot [IN/OUT] Address of variable that holds the slot number of the\n    slot to be subscribed to the requested data item. (The specified slot\n    must be EMPTY at the time of the call.) If more than one item is being\n    requested, the slot number represents the first slot in a contiguous\n    block of slots, all of which must be EMPTY to receive the named items. A\n    slot number of XC_NEXT_AVAILABLE_SLOT indicates that the requested\n    item(s) are to be added starting at the first free slot in the object.\n    Returns the number of the (first) slot allocated.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS At least one item was successfully requested. (See\n    \"Checking the status of individual item requests\", below, for more\n    information.)\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTCONNECTED Session not connected.\n @retval XTHREAD Invalid field.\n @retval XBUSY At least one slot in given range already has an existing item.\n @retval XSOCKET Socket error when sending request. Connection in an invalid\n    state.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcRequestItems(
        object: xhandle,
        contexts: *mut XC_SLOT_CONTEXT,
        context_count: xuint32,
        slot: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Adds a named item to a container object's set of content items.\n\n Add the named item to the list of content items contained within the\n object and enable the flow of notification events associated with that\n item. This function is distinguished from xcRequestItems() in two ways:\n    1. Only one item at a time may be added to the object.\n    2. Specifying the item is done by string instead of with an\n       XC_SLOT_CONTEXT structure. This allows for long symbols that exceed\n       the size of an XC_KEY.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to the container object the data item is to be\n    added to.\n @param key_string [IN] An Exegy key string identifying the data item to be\n    subscribed to by the container object. An Exegy instrument key string\n    takes the form: &lt;i&gt; countrycode:exchangeid:symbol &lt;/i&gt;, where\n     &lt;i&gt;countrycode &lt;/i&gt; is the 2-character Exegy country\n    identifier,  &lt;i &gt;exchangeid &lt;/i&gt; the 1- or 2 character Exegy\n    exchange ID, and  &lt;i &gt;symbol &lt;/i&gt;  a string of up to 250\n    characters identifying a unique financial instrument on the exchange.\n    Baskets, keylists, and keylist filters have key strings of the same form,\n    in which the  &lt;i &gt;countrycode &lt;/i &gt; and  &lt;i &gt;exchangeid\n    &lt;/i &gt; are fixed (XX:BX for baskets, XX:UX for keylists, XX:RX for\n    keylist filters) and the symbol portion is a user-supplied name for the\n    item.\n @param turnkey [IN] Opaque value that will be stored in the targeted\n    container object and passed to callback function when the latter is\n    triggered for this data item.\n @param slot [IN/OUT] Address of the variable that holds the slot number of\n    the slot to receive this data item. An input slot number of\n    XC_NEXT_AVAILABLE_SLOT indicates the item is to be added at the next free\n    slot. Returns the number of the actual slot used for this item.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The item request was successful.\n @retval XINVAL An invalid parameter was supplied.\n @retval XNOTCONNECTED Session not connected.\n @retval XSOCKET Socket error when sending request. Connection in an invalid\n    state.\n @retval XTHREAD Called from an invalid thread.\n @retval XBUSY Specified slot already has an existing item.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcRequestItemByString(
        object: xhandle,
        key_string: *const ::std::os::raw::c_char,
        turnkey: xuint64,
        slot: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Removes specified items from an object's set of content items.\n\n Remove the named items from the list of items contained within the object\n and disable the flow of notification events associated with those items.\n NOTE: No further callbacks for the specified content item(s) will be made\n       and the slot is immediately available for reuse.\n\n To clear ALL the slots in a container, simply pass NULL for the slots\n parameter and 0 for the count.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] The handle to the container object.\n @param slots [IN] The address of an array of one or more slot numbers\n    indicating the slots to be cleared.\n @param count [IN] The number of slots to be cleared.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XTHREAD Called from an invalid thread.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcClearSlots(object: xhandle, slots: *mut xuint32, count: xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Suspend notification callbacks for a set of slots.\n\n Suspend the notification callbacks for a given set of items contained\n within a container object.  Note that the associated content items in the\n container continue to be updated in response to messages from the Exegy\n Server, but the calling application will not be informed that these\n updates are happening (until xcResumeCallbacks() is called).\n\n To suspend ALL items in a container, simply pass NULL for the slots\n parameter and 0 for the count.\n\n Restrictions:\n    -This function may not be called from within a callback function for an\n     exchange-stream container.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to the container object.\n @param slots [IN] The address of an array of one or more slot numbers,\n    indicating which items/slots in the object are to have their event\n    notification callbacks suspended. To suspend callbacks for all\n    slots/items in the object, set slots to NULL  and count to 0.\n @param count [IN] The number of slots to be suspended.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XTHREAD Called from an invalid thread.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTSUP Not supported for the object (e.g., callbacks cannot\n    be suspended for a STATIC object)."]
    pub fn xcSuspendCallbacks(object: xhandle, slots: *mut xuint32, count: xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Resume notification callbacks for a set of slots.\n\n Resume the notification callbacks for a set of items that were temporarily\n suspended.\n\n To resume notifications for ALL suspended items in a container, simply pass\n NULL for the slots parameter and 0 for the count.\n\n Restrictions:\n    -This function may not be called from within a callback function for an\n     exchange-stream container.\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to the real-time container object.\n @param slots [IN] The address for an array of one or more slot numbers\n    indicating the desired data items to resume.\n @param count [IN] Count of the number of slots.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XTHREAD Called from an invalid thread.\n @retval XBADSLOT Invalid slot number."]
    pub fn xcResumeCallbacks(object: xhandle, slots: *mut xuint32, count: xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Access individual field values from a single item in an object.\n\n Reads an individual field value from an item contained within an object.\n Note that the obufsiz passed in must be large enough to contain the\n requested field, but may also be larger -- the bytes beyond the end of the\n size required by the field itself will not be touched, allowing user data\n to be stored alongside the retrieved field data.\n\n @param object [IN] The handle to the object. * @param slot [IN] Slot number (or slot constant) identifying the targeted\n    field's data item.  A slot constant is used in two situations:  (1) If\n    an event or session object field is targeted, the slot constant\n    \"XC_EVENT\" (for  an event object), or \"XC_SESSION\" (for a session\n    object) must be used. (These objects always have a single slot,\n    therefore, numerical slot identification is never required for them.) (2)\n    If an object-Level (as opposed to item-Level) container field is\n    targeted, the slot constant \"XC_CONTAINER\" is used.\n @param fieldID [IN] ID of field to be extracted. For array fields, index\n    notation can be appended to the Field ID, as \"fieldID+n\", where n is\n    the index number for the desired element in the field array. (The\n    default, if no index notation is appended, is assumed to be \"+0\",\n    i.e., the zeroeth element.).\n @param obuf [IN] Address of output buffer.\n @param obufsiz [IN] Size of output buffer (in bytes). Note that the\n    specified output buffer size must be large enough to contain the\n    requested field value, but may also be larger. Bytes beyond those\n    required by the field itself will not be written to by this function.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XMOREDATA Successful completion, but only partial data returned\n    due to buffer size. (Applicable to variable-length fields only.)\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XTIME Timer expired.\n @retval XOVERFLOW Result would overflow supplied buffer.\n @retval XNODATA Could not find requested data.\n @retval XUNINIT Slot has not been subscribed to data.\n @retval XPENDING Object has not received data yet.\n @retval XBADSTATE Slot is empty.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcGetField(
        object: xhandle,
        slot: xuint32,
        fieldID: XC_FIELD_ID,
        obuf: *mut ::std::os::raw::c_void,
        obufsiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Access individual field values from one or more items in an object.\n\n Reads individual field values from one or more contiguous items contained\n within an object.  Note that the elmsiz passed in must be large enough to\n contain the requested field, but may also be larger -- the bytes beyond the\n end of the size required by the field itself will not be touched, allowing\n user data to be stored alongside the retrieved field data.\n\n @param object [IN] The handle to the object.\n @param slot [IN] Slot number (or slot constant) identifying the targeted\n    field's data item. A slot constant is used in two situations:  (1) If\n    an event or session object field is targeted, the slot constant\n    \"XC_EVENT\" (for  an event object), or \"XC_SESSION\" (for a session\n    object) must be used. (These objects always have a single slot;\n    therefore, numerical slot identification is never required for them.).\n    (2) If an object-Level (as opposed to item-Level) container field is\n    targeted, the slot constant \"XC_CONTAINER\" is used.\n @param fieldID [IN] ID of the array field + the index number for the\n    initial element to extract: thus \"fieldID+n\", where n is the index\n    number of the initial element to be extracted.  The default, if no index\n    notation is appended, is assumed to be \"+0\", i.e., the zeroeth\n    element. (The number of contiguous elements to be extracted is set as the\n    elmcnt parameter.)\n @param obuf [IN] Address of output buffer.\n @param elmsiz [IN] Size of each element to be retrieved (in bytes). Note\n    that the size passed in must be large enough to contain each of the\n    requested element values, but may also be larger.  Bytes beyond those\n    required by the field itself will not be written to by this function.\n @param elmcnt [IN/OUT] Maximum number of elements to retrieve (output is\n    actual number retrieved).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field. (For example, variable length fields are\n    invalid for array retrieval. This status is also returned if\n    xcGetFieldArray() is called for an element other than the zeroeth in a\n    non-array-type field.)\n @retval XOVERFLOW Result would overflow supplied buffer.\n @retval XPENDING Object has not received data yet.\n @retval XNODATA Could not find requested data.\n @retval XUNINIT Slot has not been subscribed to data.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSTATE Slot is empty.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcGetFieldArray(
        object: xhandle,
        slot: xuint32,
        fieldID: XC_FIELD_ID,
        obuf: *mut ::std::os::raw::c_void,
        elmsiz: xuint32,
        elmcnt: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Access a group of field values from a single item in an object.\n\n Reads a group of field values from an item contained within an object. Note\n that the obufsiz passed in must be large enough to contain the requested\n field group, but may also be larger -- the bytes beyond the end of the size\n required by the field group itself will not be touched, allowing user data\n to be stored alongside the retrieved field data.\n\n @param object [IN] The handle to the object.\n @param slot [IN] Slot number (or slot constant) identifying the targeted *    field group's data item. A slot constant is used if an event or session\n    object's field group is targeted: then the slot constant \"XC_EVENT\"\n    (for  an event object), or \"XC_SESSION\" (for a session object) must\n    be used.\n @param groupID [IN] Group ID of field group to be retrieved. Note that\n    indexing notation may be appended to the Group ID to target array-field\n    elements other than the zeroeth; thus \"groupID+n\", where n is the\n    index number of the element to be extracted from each array field in the\n    group.\n @param obuf [IN] Address of output buffer to receive the field values.\n @param obufsiz [IN/OUT] Size of the output buffer (in bytes). Note that\n    the obufsiz must be large enough to contain the requested field group\n    values, but may also be larger. Bytes beyond those required for the field\n    group itself will not be touched, allowing user data to be stored\n    alongside the extracted field data, if desired.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XOVERFLOW Result would overflow supplied buffer.\n @retval XPENDING Object has not received data yet.\n @retval XNODATA Could not find requested data.\n @retval XUNINIT Slot has not been subscribed to data.\n @retval XBADSTATE Slot is empty.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcGetFieldGroup(
        object: xhandle,
        slot: xuint32,
        groupID: XC_FIELD_GROUP_ID,
        obuf: *mut ::std::os::raw::c_void,
        obufsiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Access a group of field values from a single item in an object.\n\n Reads a group of field values from an item contained within an object. Note\n that the elmsiz passed in must be large enough to contain the requested\n field group, but may also be larger -- the bytes beyond the end of the size\n required by the field group itself will not be touched, allowing user data\n to be stored alongside the retrieved field data.\n\n @param object [IN] The handle to the object.\n @param slot [IN] Slot number (or slot constant) identifying the targeted\n    field group's data item. A slot constant is used if an event or session\n    object's field group is targeted: then the slot constant \"XC_EVENT\"\n    (for  an event object), or \"XC_SESSION\" (for a session object) must\n    be used.\n @param groupID [IN] Group ID of field group to be retrieved. Indexing\n    notation may be appended to specify an initial element other than the\n    zeroeth, thus \"groupID+n\", where n is the index number of the initial\n    element to be extracted. (Number of contiguous elements to be extracted\n    is set as the elmcnt parameter.)\n @param obuf [IN] Address of output buffer.\n @param elmsiz [IN] Size of each element to be retrieved (in bytes). This\n    value must be large enough to accommodate each of the values in the\n    requested group, but may also be larger. Bytes beyond those required for\n    the field values will not be written to by this function, allowing user\n    data to be stored alongside the retrieved field data, if desired.\n @param elmcnt [IN/OUT] Maximum number of elements to retrieve (output is\n    actual number retrieved).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field. (Returned if function is called for an\n    element other than the zeroeth for a non-array-type field group.)\n @retval XOVERFLOW Result would overflow supplied buffer.\n @retval XPENDING Object has not received data yet.\n @retval XNODATA Could not find requested data.\n @retval XUNINIT Slot has not been subscribed to data.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSTATE Slot is empty.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcGetFieldGroupArray(
        object: xhandle,
        slot: xuint32,
        groupID: XC_FIELD_GROUP_ID,
        obuf: *mut ::std::os::raw::c_void,
        elmsiz: xuint32,
        elmcnt: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Access a set of fields or field groups in a single call.\n\n This call takes an array of descriptors that identify which fields and/or\n field groups to retrieve.  Individual fields and field groups may be\n retrieved by this mechanism, as well as field arrays and field group\n arrays, in any combination as specified by the array of descriptors\n passed into the function.\n\n All data will be retrieved \"as a unit\", meaning that the underlying\n data is guaranteed not to change during the call.  If a bad status is\n returned from this call, no data was written to any output buffers;\n conversely, if one of the good statuses is returned, at least some\n data was written to the caller's specified buffer(s).\n\n @param object [IN] Handle to the object.\n @param slot [IN] Slot number (or slot constant) for the targeted data item\n    in the object. A slot constant is used in two situations:  (1) If an\n    event or session object field is targeted, the slot constant \"XC_EVENT\"\n    (for  an event object), or \"XC_SESSION\" (for a session object) must be\n    used. (These objects always have a single slot; therefore, numerical slot\n    identification is never required for them.). (2) If object-level (not\n    item-level) container fields are targeted, the slot constant\n    \"XC_CONTAINER\" is used. Note that item-level and container-level fields\n    cannot be included in the same field set. Container-level fields are\n    treated as belonging to a separate data item in the object.\n @param desc [IN] Pointer to an array of descriptors (type XC_FIELD_DESC)\n    identifying the ad hoc field set to be read and the destination for the\n    data. One descriptor is included for each field or field group to be\n    read. The descriptors may include (optional) conversion instructions for\n    converting the field values to a string, float, or double, as\n    appropriate.Each descriptor in a field set must be associated with the\n    same data item in the same object.  Container-Level fields are treated as\n    belonging to their own data item, so they can not be included in the same\n    field set as item-Level fields.\n @param desc_count [IN] Number of descriptors in the desc array.\n\n Common error codes include:\n @retval XSUCCESS Operation completed successfully; all requested data\n    returned.\n @retval XPARTIALSUCCESS Some fields or field groups could not be extracted,\n    but others could. Individual status codes available inside descriptor\n    array.\n @retval XERROR No data was returned (for a variety of reasons).\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADFIELD Invalid field.\n @retval XBADSLOT Invalid slot number.\n @retval XPENDING Object has not received data yet.\n @retval XNODATA Could not find requested data.\n @retval XBADSTATE Slot is empty.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcGetFieldSet(
        object: xhandle,
        slot: xuint32,
        desc: *mut XC_FIELD_DESC,
        desc_count: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Attach a set of fields or field groups to a slot.\n\n This call takes an array of descriptors that identify which fields and/or\n field groups should be automatically populated before each callback on the\n specified slot.  This call can be made regardless of the state of the slot\n (that is, it may be used at any time before or after xcRequestItemByString\n is called), but must not be made in the context of a callback.\n\n Note that the input descriptor array will be used to communicate output\n status and counts (through the xfd_out_count and xfd_status fields of\n each XC_FIELD_DESC element) for each event callback; thus, the descriptor\n array must remain in active memory until the field set is detached or\n the slot is cleared.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n\n @param object [IN] Handle to the container object.\n @param slot [IN] Slot number of the targeted slot.  (The field set will be\n    attached to this slot.) Must be a slot number (slot constants such as\n    XC_CONTAINER are not valid).\n @param desc [IN] Array of descriptors (type XC_FIELD_DESC) identifying the\n    ad hoc field set to be attached to the slot.  One descriptor is included\n    for each field or field group to be read; each descriptor also includes a\n    buffer address for the output buffer to be populated with prefetched\n    data. Descriptors may include (optional) conversion instructions for\n    converting the field values to a string, float, or double, as\n    appropriate.\n @param desc_count [IN] Number of descriptors in the desc array.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS Operation completed successfully; all supplied fields are\n    valid.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADFIELD One or more of the specified field IDs or field group\n    IDs was invalid.\n @retval XBADSLOT Invalid slot number.\n @retval XMODIFIED Same as XSUCCESS, but indicates that a previously attached\n    field set has been replaced.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcAttachFieldSet(
        object: xhandle,
        slot: xuint32,
        desc: *mut XC_FIELD_DESC,
        desc_count: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Detach a set of fields or field groups from a slot.\n\n This call removes a field set which has been attached to a slot. When the\n call returns, the descriptor array may be deallocated by the application.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n\n @param object [IN] Handle to the container object.\n @param slot [IN] Slot number of the targeted slot. (The previously\n    attached field set will be detached from this slot.)\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS Operation completed successfully; all passed-in fields\n    were valid.\n @retval XNOENT No field group was attached to the given slot.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADFIELD One or more of the specified field IDs or field group\n    IDs was invalid.\n @retval XBADSLOT Invalid slot number.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcDetachFieldSet(object: xhandle, slot: xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Modify an individual field value in a single item in an object.\n\n Overwrites an individual field value in an item contained within an object.\n\n @param object [IN] The handle to the object (must be for one of the\n    object types listed in the table above).\n @param slot [IN] Slot number of the data item in the object. (The item\n    whose field is being set.)\n @param fieldID [IN] ID of field to be written to.\n @param ibuf [IN] Address of input data buffer.\n @param ibufsiz [IN] Size of input data buffer (in bytes).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSIZE Input buffer smaller than size of field to be modified.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSetField(
        object: xhandle,
        slot: xuint32,
        fieldID: XC_FIELD_ID,
        ibuf: *const ::std::os::raw::c_void,
        ibufsiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Modify an individual field value in one or more items in an object.\n\n Overwrites an individual field value in one or more contiguous items\n contained within an object.\n\n @param object [IN] The handle to the object (must be for an object type\n    listed in the table above).\n @param slot [IN] Slot number of the targeted item within the object. (The\n    item whose array field is being set.)\n @param fieldID [IN] ID of the array field to be written to. An index number\n    may be appended to the Field ID, thereby specifying a starting point in\n    the array other than the zeroeth element. Thus \"fieldID+n\", where n is\n    the index number of the initial element to be written to. (Total number\n    of elements to be written to is specified as the elmcnt.)\n @param ibuf [IN] Address of input data buffer.\n @param elmsiz [IN] Size of each element in the input data buffer (in bytes).\n @param elmcnt [IN/OUT] Number of elements supplied (number of elements\n    actually set is returned).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XMOREDATA Successful completion, but more input elements were\n    supplied than were present in the container (or than could be added).\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSIZE Input buffer smaller than size of field to be modified.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSetFieldArray(
        object: xhandle,
        slot: xuint32,
        fieldID: XC_FIELD_ID,
        ibuf: *const ::std::os::raw::c_void,
        elmsiz: xuint32,
        elmcnt: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Modify a group of field values in a single item in an object.\n\n Overwrites a group of field values in an item contained within an object.\n\n @param object [IN] The handle to the object.\n @param slot [IN] Slot number of the targeted item within the object. (The\n    item whose field group is being set.)\n @param groupID [IN] ID of the field group to be written to.\n @param ibuf [IN] Address of the input data buffer.\n @param ibufsiz [IN] Size of input data buffer (in bytes).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSIZE Input buffer smaller than size to field to be modified.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSetFieldGroup(
        object: xhandle,
        slot: xuint32,
        groupID: XC_FIELD_GROUP_ID,
        ibuf: *const ::std::os::raw::c_void,
        ibufsiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Modify a group of field values in one or more items in an object.\n\n Overwrites a group of field values in one or more contiguous items\n contained within an object.\n\n @param object [IN] The handle to the object.\n @param slot [IN] Slot number of the associated item within the object.\n @param groupID [IN] ID of field group to be written to. An index number may\n    be appended to the Group ID, thereby specifying a starting point in each\n    field array other than the zeroeth element. Thus \"groupID+n\", where n is\n    the index number of the initial element to be written to. (Total number\n    of elements to be written to is specified as the elmcnt.)\n @param ibuf [IN] Address of input data buffer.\n @param elmsiz [IN] Size of each element in the input data buffer (in bytes).\n @param elmcnt [IN/OUT] Number of elements supplied (number of elements\n    actually set/modified is returned).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XMOREDATA Successful completion, but more input elements were\n    supplied than were present in the container (or that could be added).\n @retval XBADSLOT Invalid slot number.\n @retval XBADFIELD Invalid field.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADSIZE Input buffer smaller than size of field to be modified.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSetFieldGroupArray(
        object: xhandle,
        slot: xuint32,
        groupID: XC_FIELD_GROUP_ID,
        ibuf: *const ::std::os::raw::c_void,
        elmsiz: xuint32,
        elmcnt: *mut xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Submit an item to the server for persistent storage.\n\n Create or update the given item on the server.\n\n If this function returns XSUCCESS, the caller can expect at least one\n callback on the given slot.  If this function returns an error, then\n no operation took place.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param container [IN] The handle to the object.\n @param key_string [IN] The Exegy key string identifying the data item being\n    submitted. An Exegy key string for a financial instrument takes the form:\n     &lt;i &gt;countrycode:exchangeid:symbol &lt;/i &gt;, where  &lt;i\n    &gt;countrycode &lt;/i&gt; is the 2-character Exegy country identifier,\n    &lt;i &gt;exchangeid &lt;/i &gt;the 1- or 2 character Exegy exchange ID,\n    and  &lt;i&gt;symbol &lt;/i &gt; a string identifying a unique financial\n    instrument on the exchange. Baskets, keylists, and keylist filters have\n    key string identifiers of the same form, in which the  &lt;i\n    &gt;countrycode &lt;/i &gt; and  &lt;i &gt;exchangeid &lt;/i &gt;\n    portions of the identifier are fixed (XX:BX for baskets, XX:UX for\n    keylists, XX:RX for keylist filters) and the symbol portion is a\n    user-supplied name for the item.\n @param turnkey [IN] Opaque value that will be stored in the targeted\n    container object and passed to callback function when the latter is\n    triggered for this data item.\n @param slot [IN] Slot number for the slot holding the data item being\n    submitted.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT The specified slot range is not valid.\n @retval XTYPE The specified container is not of a compatible type.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSubmitItemByString(
        container: xhandle,
        key_string: *const ::std::os::raw::c_char,
        turnkey: xuint64,
        slot: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Submit items to the server for persistent storage.\n\n Create or update the given items on the server.\n\n If this function returns XSUCCESS, the caller can expect at least one\n callback on each affected slot.  If this function returns an error, then\n no operation took place.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param container [IN] handle to the object (must be a READWRITE,\n    WRITEONLY, or STATIC container).\n @param contexts [IN] Array of information that includes the an Exegy key\n    (type XC_KEY) and an Exegy turnkey for each submitted item. See the note\n    in the function description above for important information about using\n    XC_KEYs which include a long symbol.\n @param context_count [IN] The number of contexts (items) passed in.\n @param slot [IN] Number of the first slot of a contiguous block of slots\n    whose items are being submitted.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT The specified slot range is not valid.\n @retval XTYPE The specified container is not of a compatible type.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSubmitItems(
        container: xhandle,
        contexts: *mut XC_SLOT_CONTEXT,
        context_count: xuint32,
        slot: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Remove an item from the server.\n\n Remove the specified item from the server.  Upon successful deletion, the\n item associated with the slot is deleted and the slot is reverted to the\n empty state.\n\n If this function returns XSUCCESS, the caller can expect at least one\n callback on the given slot.  If this function returns an error, then no\n operation took place and no corresponding callback should be expected.\n\n If the slot is non-empty at the time of the xcDeleteItemByString call, then\n its associated request key must match the one specified in the 'key_string'\n parameter.  While the delete operation is pending, any callbacks associated\n with the slot will continue to happen and will not stop until the item is\n actually deleted; if the delete operation fails, the usual events will\n continue uninterrupted.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param container [IN] Handle to the object (must be a read-write container\n    object).\n @param key_string [IN] The Exegy key string for the data item being deleted.\n    An Exegy instrument key string takes the following form:\n    &lt;i&gt;countrycode:exchangeid:symbol &lt;/i&gt;, where\n    &lt;i&gt;countrycode &lt;/i&gt; is the 2-character Exegy country\n    identifier, &lt;i&gt;exchangeid &lt;/i&gt; the 1- or 2 character Exegy\n    exchange ID, and  &lt;i &gt;symbol &lt;i&gt; a symbol string identifying\n    a unique financial instrument on the exchange. Baskets, keylists, and\n    keylist filters have key string identifiers of the same form, in which\n    the &lt;i &gt;countrycode &lt;/i &gt; and  &lt;i &gt;exchangeid &lt;/i\n    &gt; are fixed (XX:BX for baskets, XX:UX for keylists, XX:RX for keylist\n    filters) and the  &lt;i &gt;symbol &lt;/i &gt; is a user-supplied name\n    for the item.\n @param turnkey [IN] A turnkey to be associated with the call being made.\n @param slot [IN] Slot number for the slot holding the data item being\n    deleted. (Or an empty slot may be used.)\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Specified slot range is not valid.\n @retval XTYPE Specified container is not of a compatible type.\n @retval XBADSTATE Specified key does not match existing key in a non-empty\n    slot.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcDeleteItemByString(
        container: xhandle,
        key_string: *const ::std::os::raw::c_char,
        turnkey: xuint64,
        slot: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Remove items from the server.\n\n Remove the specified items from the server.  Upon successful deletion, the\n item associated with the slot is deleted and the slot is reverted to the\n empty state.\n\n If this function returns XSUCCESS, the caller can expect at least one\n callback on each affected slot (although the statuses for those can be a\n mix of good and bad).  If this function returns an error, then no operation\n took place and no corresponding callbacks should be expected.\n\n If a slot is non-empty at the time of the xcDeleteItems call, then its\n associated request key must match the one specified in the XC_SLOT_CONTEXT\n passed in to the 'contexts' parameter.  While the delete operation is\n pending, any callbacks associated with the slot will continue to happen and\n will not stop until the item is actually deleted; if the delete operation\n fails, the usual events will continue uninterrupted.\n\n Restrictions:\n    -This function may not be called from within a callback function.\n    -Belongs to the Mutually Exclusive function set.\n\n @param container [IN] Handle to the object (must be a read-write container\n    object).\n @param contexts [IN] Array of one or more slot contexts, identifying the\n    item(s) targeted for deletion. (A slot context includes the XC_KEY and\n    the user-specified Exegy turnkey that were associated with the data item\n    when it was placed in persistent storage.)  See the note in the function\n    description above for important information about using XC_KEYs which\n    include a long symbol.\n @param context_count [IN] The number of contexts (i.e., items to be\n    deleted) passed in.\n @param slot [IN] The slot number for a slot in the read-write object.  The\n    slot must be empty or must contain the data item being deleted.  Note\n    that if multiple items are being deleted in a single call, the slot\n    number passed in represents the first slot in a contiguous block of slots\n    to be associated with the deletions.  These slots must either be empty or\n    must each contain the same data item as the corresponding element in the\n    slot context array. Passing in XC_NEXT_AVAILABLE_SLOT will cause the same\n    empty slot (if one is available) to be used for deleting all items\n    specified in the contexts parameter.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADSLOT Specified slot range is not valid.\n @retval XTYPE Specified container is not of a compatible type.\n @retval XBADSTATE Specified key does not match existing key in a non-empty\n    slot.\n @retval XNOTCONNECTED Session not connected.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcDeleteItems(
        container: xhandle,
        contexts: *mut XC_SLOT_CONTEXT,
        context_count: xuint32,
        slot: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the total number of slots in the object\n\n Return the number of slots that are allocated in a container object.\n\n @param object [IN] Handle to the container object being queried.\n @param count [OUT] Address of the variable to receive the total slot\n    count.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcSlotCount(object: xhandle, count: *mut xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the number of ACTIVE slots in the object\n\n Return the number of ACTIVE slots within a container object.\n\n @param object [IN] Handle to the container object.\n @param count [OUT] Address of the  xuint32 variable which will receive the\n    active slot count.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle."]
    pub fn xcActiveCount(object: xhandle, count: *mut xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the slot number of the lowest number free slot.\n\n Return the slot number of the lowest number free slot.\n\n @param object [IN] The handle to the container object being queried.\n @param object_type [OUT]  Address of the XC_OBJECT_TYPE variable to receive\n    the object type identifier.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTCONNECTED Session not connected."]
    pub fn xcNextSlot(object: xhandle, slot: *mut xuint32) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return a flag indicating whether a slot is empty.\n\n Return a boolean indicating whether a slot within a container object is\n empty. A slot starts out empty after xcCreateContainer, and returns to\n the empty state following a successful call to xcClearSlots or\n xcDeleteItems.\n\n @param object [IN] Handle to the container object.\n @param slot [IN] Slot number of the slot being checked.\n @param active [OUT] Address of the variable which will receive the xbool\n    response. (XTRUE if the slot is EMPTY.)\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number."]
    pub fn xcIsEmpty(object: xhandle, slot: xuint32, empty: *mut xbool) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return a flag indicating whether a slot is pending.\n\n Return a boolean indicating whether a slot within a container object is\n pending.  A slot is pending when xcRequestItems/xcRequestItemByString has\n been called on it but no data events have yet been received.\n\n @param object [IN] Handle to the container object.\n @param slot [IN] Slot number of the slot being checked.\n @param pending [OUT]  Address of the variable which will receive the xbool\n    response. (XTRUE if the slot is PENDING.)\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number."]
    pub fn xcIsPending(object: xhandle, slot: xuint32, pending: *mut xbool) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return a flag indicating whether a slot is active.\n\n Return a boolean indicating whether a slot within a container object is\n active. A slot is active if it's not empty or pending.\n\n @param object [IN] Handle to the container object.\n @param slot [IN] Slot number for the slot being checked.\n @param active [OUT] Address of the variable which will receive the xbool\n    response. (XTRUE if the slot is ACTIVE ).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number."]
    pub fn xcIsActive(object: xhandle, slot: xuint32, active: *mut xbool) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return a flag indicating whether a slot has been suspended.\n\n Return a boolean indicating whether callbacks on a slot have been\n suspended by a call to xcSuspendCallbacks.\n\n Restrictions:\n    -Belongs to the Mutually Exclusive function set.\n\n @param object [IN] Handle to the container object being queried.\n @param slot [IN] Slot number of the slot being checked.\n @param suspend [OUT]  Address of the variable which will receive the xbool\n    response. (XTRUE if the slot is suspended.)\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XTHREAD Called from an invalid thread.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTCONNECTED Session not connected."]
    pub fn xcIsSuspended(object: xhandle, slot: xuint32, suspend: *mut xbool) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the context associated with a given slot.\n\n Return the context associated with a given slot in a container, as specified\n by the previous call to xcRequestItems/xcRequestItemByString on the slot in\n question.\n\n Note that for items populated with xcRequestItemByString, the xcreq_key\n field of the returned XC_SLOT_CONTEXT will be zeroed out.  The key string\n that was used may be retrieved using xcSlotKeyString().\n\n For event objects, the key will be from the slot in the container on which\n the event callback is being invoked.  Note that the 'slot' parameter must\n be XC_EVENT for event objects.\n\n This call is invalid for session objects.\n\n @param object [IN] The handle to the object being queried.\n @param slot [IN] Slot number of the targeted slot within the object. If\n    the object is an event object, the slot constant \"XC_EVENT\" must be\n    used.\n @param context [OUT]  Address of the XC_SLOT_CONTEXT variable to receive the\n    slot context.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number.\n @retval XBADSTATE Slot not ACTIVE or PENDING."]
    pub fn xcSlotContext(object: xhandle, slot: xuint32, context: *mut XC_SLOT_CONTEXT) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the key associated with the item referenced by a given slot,\n in the form of a string suitable for xcRequestItemByString().\n\n For event objects, the key will be from the item in the container for which\n the event callback is being invoked.  Note that the 'slot' parameter must\n be XC_EVENT for event objects.\n\n This call is invalid for session objects.\n\n @param object [IN] Handle to the object being queried.\n @param slot [IN] Slot number of the targeted item within the object. Must\n    be set to the slot constant XC_EVENT if the object is an event object.\n @param key_buffer [OUT] Address at which to write the key string.\n @param key_buffer_size [IN] Number of bytes available (including terminating\n    NUL) at key_buffer.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully, and a key string was\n    retrieved.\n @retval XINVAL\u{a0} An invalid parameter was supplied.\n @retval XBADHANDLE\u{a0} Invalid handle.\n @retval XBADSLOT\u{a0} Invalid slot number.\n @retval XPENDING Slot is in the PENDING state..\n @retval XBADSTATE Slot is in the EMPTY state.\n @retval XNODATA The event does not pertain to a particular data item."]
    pub fn xcSlotKeyString(
        object: xhandle,
        slot: xuint32,
        key_buffer: *mut ::std::os::raw::c_char,
        key_buffer_size: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the key associated with the item referenced by a given slot.\n\n Return the key associated with the item referenced by the given slot in a\n container.\n\n For event objects, the key will be from the item in the container for which\n the event callback is being invoked.  Note that the 'slot' parameter must\n be XC_EVENT for event objects.\n\n This call is invalid for session objects.\n\n @param object [IN] Handle to the object.\n @param slot [IN] Slot number of the targeted data item in the object. Must\n    be set to XC_EVENT if the object is an event object.\n @param key [OUT]  Address of XC_KEY variable to receive the requested key.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XTHREAD Called from an invalid thread.\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number.\n @retval XPENDING Slot is PENDING.\n @retval XNOTCONNECTED Session not connected."]
    pub fn xcItemKey(object: xhandle, slot: xuint32, key: *mut XC_KEY) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the parent handle of the given object.\n\n Each valid object has another object as parent, except for session-type\n objects.  Therefore, calling this routine on a session-type object will\n result in a NULL return value (as will calling it with an invalid handle).\n\n An event's parent is a Container object.\n A snapshot's parent is a Container object.\n A container's parent is a Session object.\n A session's parent is NULL.\n\n @param object [IN] The handle to the object being queried.\n @param parent [OUT]  Address of the variable to receive the handle to the\n    parent object (or NULL for a session object).\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully\n @retval XINVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XNOTCONNECTED Session not connected."]
    pub fn xcParentHandle(object: xhandle, parent: *mut xhandle) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Return the object type identifier of the given object.\n\n @param object [IN] The handle to the object being queried.\n @param object_type [OUT] Address of the XC_OBJECT_TYPE variable to receive\n    the object type identifier.\n\n @return An xerr type indicating the status of the operation.\n\n Common error codes include:\n @retval XINVAL An invalid parameter was supplied.\n @retval XNOTCONNECTED Session not connected.\n @retval XSUCCESS The operation completed successfully\n @retval INVAL An invalid parameter was supplied.\n @retval XBADHANDLE Invalid handle.\n @retval XBADSLOT Invalid slot number.\n @retval XNOTCONNECTED Session not connected."]
    pub fn xcObjectType(object: xhandle, object_type: *mut XC_OBJECT_TYPE) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Convert xerr Exegy error code into text string.\n\n Convert an xerr Exegy error code into an ASCII text string.\n\n @param exegy_error_code [IN] The xerr error code to be converted into a\n    printable ASCII character string.\n @param error_string [OUT] The address of a constant character string\n    pointer. The address of an error string corresponding to the error code\n    is returned. The returned string is a constant character array that is\n    owned by the Exegy library and should not be freed or deleted.\n\n @return An xerr type indicating the status of the ExegyTranslateError()\n operation.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XINVAL An invalid parameter was supplied."]
    pub fn xcTranslateError(
        exegy_error_code: xerr,
        error_string: *mut *const ::std::os::raw::c_char,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Retrieve the field ID of the given field name.\n\n Retrieves the field ID of the given field name.\n\n @param session [IN] handle to the session object\n @param field_name [IN] name of the field\n @param field_id [OUT] XCAPI assigned field id for the added field\n\n @return An xerr type indicating the status of retrieving a field id.\n\n Common error codes include:\n @retval XSUCCESS The operation completed successfully.\n @retval XBADHANDLE An invalid session handle was supplied.\n @retval XINVAL An invalid parameter was supplied.\n @retval XNODATA No field id was found in this session for the given field name."]
    pub fn xcGetFieldId(
        session: xhandle,
        field_name: *const ::std::os::raw::c_char,
        field_id: *mut xuint64,
    ) -> xerr;
}
unsafe extern "C" {
    #[doc = " @brief Retrieve the current time in Exegy hi-resolution time format."]
    pub fn xcGetCurrentHiTime() -> XC_HITIME;
}
