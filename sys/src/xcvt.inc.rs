/* automatically generated by rust-bindgen 0.71.1 */

pub type XCFMT_GLOBAL_OPTIONS = xuint32;
pub type XCFMT_ENUM_OPTIONS = xuint32;
pub type XCFMT_KEY_OPTIONS = xuint32;
pub type XCFMT_NUMERIC_OPTIONS = xuint32;
pub type XCFMT_TIMEDATE_OPTIONS = xuint32;
pub type XCFMT_PRICE_OPTIONS = xuint32;
pub type XCFMT_EXCHANGE_ID_OPTIONS = xuint32;
pub type XCFMT_COUNTRY_ID_OPTIONS = xuint32;
pub type XCFMT_CURRENCY_ID_OPTIONS = xuint32;
pub type XCFMT_SYMBOL_OPTIONS = xuint32;
pub type XCFMT_STRING_OPTIONS = xuint32;
pub type XCFMT_STRUCT_OPTIONS = xuint32;
#[doc = "Note that there are separate options for each thread; therefore,\nchanges made to the options in one thread will not affect the options\nused in any other thread.\n\nBy default, all the listed options are off."]
pub type XCPRS_OPTIONS = xuint32;
#[doc = " @brief String Conversion Control/State Block\n\n Maintain state for the suite of string conversion routines.  Fields\n can be read or written at will, although it's certainly possible to\n cause unintended results by so doing!\n"]
#[repr(C)]
pub struct XC_FORMAT_CONTROL {
    #[doc = "< pointer to output buffer"]
    pub xfc_obuf: *mut ::std::os::raw::c_char,
    #[doc = "< size of output buffer (in bytes)"]
    pub xfc_obufsiz: xuint32,
    #[doc = "< current output pointer (within xfc_obuf)"]
    pub xfc_optr: *mut ::std::os::raw::c_char,
    #[doc = "< output pointer before most recent conversion"]
    pub xfc_oprevptr: *mut ::std::os::raw::c_char,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_00: [xuint32; 4usize],
    #[doc = "< do not NUL-terminate after each conversion"]
    pub xfc_no_nul_term: xbool,
    #[doc = "< automatically add a space after each conversion"]
    pub xfc_add_space_after: xbool,
    #[doc = "< automatically expand field width when needed"]
    pub xfc_auto_expand: xbool,
    #[doc = "< fall-back default field width"]
    pub xfc_field_width: xint32,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_01: [xuint32; 4usize],
    #[doc = " type-specific default field widths"]
    pub xfc_fw_alternate_id: xint32,
    pub xfc_fw_country_id: xint32,
    pub xfc_fw_currency_id: xint32,
    pub xfc_fw_date: xint32,
    pub xfc_fw_enum: xint32,
    pub xfc_fw_exchange_id: xint32,
    pub xfc_fw_key: xint32,
    pub xfc_fw_numeric: xint32,
    pub xfc_fw_price: xint32,
    pub xfc_fw_string: xint32,
    pub xfc_fw_symbol: xint32,
    pub xfc_fw_time: xint32,
    pub xfc_fw_timedate: xint32,
    pub xfc_fw_traded_value: xint32,
    pub xfc_fw_volume: xint32,
    #[doc = "< not the usual field width; an indent level instead"]
    pub xfc_indent_struct: xint32,
    pub xfc_fw_order_ref_id: xint32,
    pub xfc_fw_mmid: xint32,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_02: [xint32; 2usize],
    #[doc = " type-specific output options"]
    pub xfc_opt_alternate_id: XCFMT_STRING_OPTIONS,
    pub xfc_opt_country_id: XCFMT_COUNTRY_ID_OPTIONS,
    pub xfc_opt_currency_id: XCFMT_CURRENCY_ID_OPTIONS,
    pub xfc_opt_enum: XCFMT_ENUM_OPTIONS,
    pub xfc_opt_exchange_id: XCFMT_EXCHANGE_ID_OPTIONS,
    pub xfc_opt_key: XCFMT_KEY_OPTIONS,
    pub xfc_opt_numeric: XCFMT_NUMERIC_OPTIONS,
    pub xfc_opt_price: XCFMT_PRICE_OPTIONS,
    pub xfc_opt_string: XCFMT_STRING_OPTIONS,
    pub xfc_opt_symbol: XCFMT_SYMBOL_OPTIONS,
    pub xfc_opt_timedate: XCFMT_TIMEDATE_OPTIONS,
    pub xfc_opt_traded_value: XCFMT_PRICE_OPTIONS,
    pub xfc_opt_volume: XCFMT_NUMERIC_OPTIONS,
    pub xfc_opt_struct: XCFMT_STRUCT_OPTIONS,
    pub xfc_opt_order_ref_id: XCFMT_STRING_OPTIONS,
    pub xfc_opt_mmid: XCFMT_STRING_OPTIONS,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_03: xuint32,
    #[doc = "< default price type (if not otherwise specified)"]
    pub xfc_def_price_type: XC_PRICE_TYPE,
    #[doc = "< default qualifier type (if not otherwise specified)"]
    pub xfc_def_qual_type: XM_DATA_TYPE,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_04: xuint16,
    #[doc = "< reserved for future expansion"]
    pub XFC_RESERVED_05: [xuint32; 2usize],
    #[doc = "< determines whether block has been initialized"]
    pub xfc_magic_cookie: xuint64,
}
pub const XF_NONE: u32 = 0;
pub const XF_USE: u32 = 1;
pub const XF_SETGBL: u32 = 3;
pub const XF_RIGHT: u32 = 4;
pub const XF_CENTER: u32 = 8;
pub const XF_TRIM: u32 = 16;
pub const XFENUM_UPCASE: u32 = 65536;
pub const XFENUM_DOWNCASE: u32 = 131072;
pub const XFENUM_LONGDESC: u32 = 16777216;
pub const XFENUM_NOPREFIX: u32 = 33554432;
pub const XFENUM_NOTRUNCATE: u32 = 67108864;
pub const XFKEY_NOSYM: u32 = 65536;
pub const XFKEY_NONAMESPACE: u32 = 131072;
pub const XFNUM_ZEROFILL: u32 = 65536;
pub const XFNUM_SIGNPLUS: u32 = 131072;
pub const XFNUM_SIGNRIGHT: u32 = 262144;
pub const XFNUM_SIGNSEP: u32 = 524288;
pub const XFNUM_NEGPARENS: u32 = 1048576;
pub const XFNUM_COMMAS: u32 = 2097152;
pub const XFNUM_EURO: u32 = 4194304;
pub const XFNUM_SCALED_DEC: u32 = 8388608;
pub const XFNUM_SCALED_BIN: u32 = 16777216;
pub const XFNUM_TRUNCATE: u32 = 33554432;
pub const XFNUM_TRUNCATE_ALL: u32 = 67108864;
pub const XFNUM_HEX: u32 = 2147483648;
pub const XFDT_NODELIM: u32 = 65536;
pub const XFDT_NOORDINAL: u32 = 131072;
pub const XFDT_NOYEAR: u32 = 262144;
pub const XFDT_NOMONTH: u32 = 524288;
pub const XFDT_NODAY: u32 = 1048576;
pub const XFDT_NUMERIC: u32 = 2097152;
pub const XFDT_NODATE: u32 = 4063232;
pub const XFDT_NONANOSECONDS: u32 = 4194304;
pub const XFDT_NOMICROSECONDS: u32 = 12582912;
pub const XFDT_NOMILLISECONDS: u32 = 29360128;
pub const XFDT_NOSUBSECONDS: u32 = 29360128;
pub const XFDT_NOSECONDS: u32 = 62914560;
pub const XFDT_NOMINUTES: u32 = 130023424;
pub const XFDT_NOTIME: u32 = 264241152;
pub const XFDT_NOAUTOSENSE: u32 = 2147483648;
pub const XFPRI_ZEROFILL: u32 = 65536;
pub const XFPRI_SIGNPLUS: u32 = 131072;
pub const XFPRI_SIGNRIGHT: u32 = 262144;
pub const XFPRI_SIGNSEP: u32 = 524288;
pub const XFPRI_NEGPARENS: u32 = 1048576;
pub const XFPRI_COMMAS: u32 = 2097152;
pub const XFPRI_EURO: u32 = 4194304;
pub const XFPRI_SCALED_DEC: u32 = 8388608;
pub const XFPRI_SCALED_BIN: u32 = 16777216;
pub const XFPRI_TRUNCATE: u32 = 33554432;
pub const XFEXCH_BLANKNULS: u32 = 65536;
pub const XFEXCH_PARENS: u32 = 131072;
pub const XFCC_BLANKNULS: u32 = 65536;
pub const XFCUR_BLANKNULS: u32 = 65536;
pub const XFSYM_BLANKNULS: u32 = 65536;
pub const XFSTR_UPCASE: u32 = 65536;
pub const XFSTR_DOWNCASE: u32 = 131072;
pub const XFSTR_VERBATIM: u32 = 262144;
pub const XFSTR_TRUNCATE: u32 = 524288;
pub const XFSTRUCT_HEXDUMP: u32 = 65536;
pub const XFSTRUCT_RESERVED: u32 = 131072;
pub const XFSTRUCT_NORECUR: u32 = 262144;
pub const XCFMT_ALTERNATE_ID_DEFOPT: u32 = 1;
pub const XCFMT_ORDER_REF_ID_DEFOPT: u32 = 1;
pub const XCFMT_MMID_DEFOPT: u32 = 1;
pub const XCFMT_COUNTRY_ID_DEFOPT: u32 = 1;
pub const XCFMT_CURRENCY_ID_DEFOPT: u32 = 1;
pub const XCFMT_ENUM_DEFOPT: u32 = 1;
pub const XCFMT_EXCHANGE_ID_DEFOPT: u32 = 1;
pub const XCFMT_KEY_DEFOPT: u32 = 1;
pub const XCFMT_NUMERIC_DEFOPT: u32 = 1;
pub const XCFMT_PRICE_DEFOPT: u32 = 1;
pub const XCFMT_STRING_DEFOPT: u32 = 1;
pub const XCFMT_SYMBOL_DEFOPT: u32 = 1;
pub const XCFMT_TIMEDATE_DEFOPT: u32 = 1;
pub const XCFMT_TRADED_VALUE_DEFOPT: u32 = 1;
pub const XCFMT_VOLUME_DEFOPT: u32 = 2097153;
pub const XCFMT_STRUCT_DEFOPT: u32 = 1;
pub const XFW_UNLIMITED: u32 = 0;
pub const XFW_DEFAULT: i32 = -1;
pub const XPT_DEFAULT: u32 = 255;
pub const XPRSOPT_EURO_NUMBERS: u32 = 1;
pub const XPRSOPT_EURO_DATES: u32 = 2;
pub const XPRSOPT_ENUM_ABBREV: u32 = 4;
pub const XPRSOPT_ENUM_CASE_MATCH: u32 = 8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XC_FORMAT_CONTROL"][::std::mem::size_of::<XC_FORMAT_CONTROL>() - 248usize];
    ["Alignment of XC_FORMAT_CONTROL"][::std::mem::align_of::<XC_FORMAT_CONTROL>() - 8usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_obuf"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_obuf) - 0usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_obufsiz"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_obufsiz) - 8usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_optr"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_optr) - 16usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_oprevptr"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_oprevptr) - 24usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_00"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_00) - 32usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_no_nul_term"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_no_nul_term) - 48usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_add_space_after"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_add_space_after) - 49usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_auto_expand"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_auto_expand) - 50usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_field_width"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_field_width) - 52usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_01"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_01) - 56usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_alternate_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_alternate_id) - 72usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_country_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_country_id) - 76usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_currency_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_currency_id) - 80usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_date"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_date) - 84usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_enum"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_enum) - 88usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_exchange_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_exchange_id) - 92usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_key"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_key) - 96usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_numeric"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_numeric) - 100usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_price"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_price) - 104usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_string"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_string) - 108usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_symbol"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_symbol) - 112usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_time"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_time) - 116usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_timedate"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_timedate) - 120usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_traded_value"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_traded_value) - 124usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_volume"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_volume) - 128usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_indent_struct"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_indent_struct) - 132usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_order_ref_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_order_ref_id) - 136usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_fw_mmid"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_fw_mmid) - 140usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_02"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_02) - 144usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_alternate_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_alternate_id) - 152usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_country_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_country_id) - 156usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_currency_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_currency_id) - 160usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_enum"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_enum) - 164usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_exchange_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_exchange_id) - 168usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_key"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_key) - 172usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_numeric"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_numeric) - 176usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_price"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_price) - 180usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_string"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_string) - 184usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_symbol"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_symbol) - 188usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_timedate"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_timedate) - 192usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_traded_value"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_traded_value) - 196usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_volume"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_volume) - 200usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_struct"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_struct) - 204usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_order_ref_id"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_order_ref_id) - 208usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_opt_mmid"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_opt_mmid) - 212usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_03"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_03) - 216usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_def_price_type"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_def_price_type) - 220usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_def_qual_type"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_def_qual_type) - 222usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_04"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_04) - 224usize];
    ["Offset of field: XC_FORMAT_CONTROL::XFC_RESERVED_05"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, XFC_RESERVED_05) - 228usize];
    ["Offset of field: XC_FORMAT_CONTROL::xfc_magic_cookie"]
        [::std::mem::offset_of!(XC_FORMAT_CONTROL, xfc_magic_cookie) - 240usize];
};
impl ::std::fmt::Debug for XC_FORMAT_CONTROL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "XC_FORMAT_CONTROL {{ xfc_obuf: {:?}, xfc_optr: {:?}, xfc_oprevptr: {:?}, XFC_RESERVED_00: {:?}, XFC_RESERVED_01: {:?}, XFC_RESERVED_02: {:?}, XFC_RESERVED_05: {:?} }}",
            self.xfc_obuf,
            self.xfc_optr,
            self.xfc_oprevptr,
            self.XFC_RESERVED_00,
            self.XFC_RESERVED_01,
            self.XFC_RESERVED_02,
            self.XFC_RESERVED_05
        )
    }
}
unsafe extern "C" {
    pub fn xcFmtInitialize(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        obuf: *mut ::std::os::raw::c_char,
        osiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtSetBuffer(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        obuf: *mut ::std::os::raw::c_char,
        osiz: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtChar(fmtCtrl: *mut XC_FORMAT_CONTROL, data: ::std::os::raw::c_char) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtCharRepeat(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: ::std::os::raw::c_char,
        repeat: xuint32,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtString(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        string: *const ::std::os::raw::c_char,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtString(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        string: *const ::std::os::raw::c_char,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtFixedString(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtFixedString(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        string: *const ::std::os::raw::c_char,
        len: usize,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtUnsigned(fmtCtrl: *mut XC_FORMAT_CONTROL, data: xuint64) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtUnsigned(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: xuint64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtSigned(fmtCtrl: *mut XC_FORMAT_CONTROL, data: xint64) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtSigned(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: xint64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtDouble(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: xreal64,
        frac: ::std::os::raw::c_int,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtDouble(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: xreal64,
        frac: ::std::os::raw::c_int,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtKey(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_KEY) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtKey(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_KEY,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_KEY_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtKeyDesc(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_KEY_DESC) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtKeyDesc(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_KEY_DESC,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_KEY_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtTime(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_TIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtTime(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_TIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtExTime(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_EXTIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtExTime(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_EXTIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtHiTime(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_HITIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtHiTime(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_HITIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtHiTimeDelta(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_HITIME_DELTA) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtHiTimeDelta(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_HITIME_DELTA,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtDate(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_DATE) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtDate(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_DATE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtDateTime(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_DATETIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtDateTime(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_DATETIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtIPv4Address(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        address: *const XC_IPV4_ADDRESS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtIPv4Address(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        address: *const XC_IPV4_ADDRESS,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtPrice(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtPrice(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtPriceAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        display_typ: XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtPriceAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        display_typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtPriceDesc(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_PRICE_DESC) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtPriceDesc(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE_DESC,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtPriceDescAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE_DESC,
        display_typ: XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtPriceDescAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PRICE_DESC,
        display_typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtVolume(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_VOLUME) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtVolume(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_VOLUME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtTradedValue(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_TRADED_VALUE,
        typ: XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtTradedValue(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_TRADED_VALUE,
        typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtExchangeId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_EXCHANGE_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtExchangeId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_EXCHANGE_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_EXCHANGE_ID_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtCountryId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_COUNTRY_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtCountryId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_COUNTRY_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_COUNTRY_ID_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtCurrencyId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_CURRENCY_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtCurrencyId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_CURRENCY_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_CURRENCY_ID_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtAlternateId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_ALTERNATE_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtAlternateId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_ALTERNATE_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtTradeVenue(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_TRADE_VENUE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtOrderRefId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_ORDER_REF_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtOrderRefId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_ORDER_REF_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtOrderRefIdAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_ORDER_REF_ID,
        typ: XC_ORDER_REF_ID_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtOrderRefIdAs(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_ORDER_REF_ID,
        typ: XC_ORDER_REF_ID_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtMMID(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_MMID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtMMID(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_MMID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtSymbol(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_SYMBOL) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtSymbol(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_SYMBOL,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_SYMBOL_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtEventId(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_EVENT_ID) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtEventId(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_EVENT_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtDfloat_64(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_DFLOAT_64) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtDfloat_64(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_DFLOAT_64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtProbability(fmtCtrl: *mut XC_FORMAT_CONTROL, data: *const XC_PROBABILITY) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtProbability(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const XC_PROBABILITY,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtEnum(fmtCtrl: *mut XC_FORMAT_CONTROL, data: xuint64, typ: XM_DATA_TYPE) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtEnum(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: xuint64,
        typ: XM_DATA_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_ENUM_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtStruct(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtStruct(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
        line_indent: ::std::os::raw::c_int,
        opt: XCFMT_STRUCT_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcFmtData(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcXFmtData(
        fmtCtrl: *mut XC_FORMAT_CONTROL,
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_GLOBAL_OPTIONS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcGet_ShowFmtCtrl() -> *mut XC_FORMAT_CONTROL;
}
unsafe extern "C" {
    pub fn xcShowString(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowString(
        str_: *const ::std::os::raw::c_char,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowFixedString(
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowFixedString(
        str_: *const ::std::os::raw::c_char,
        len: usize,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowUnsigned(data: xuint64) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowUnsigned(
        data: xuint64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowSigned(data: xint64) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowSigned(
        data: xint64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowDouble(data: xreal64, frac: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowDouble(
        data: xreal64,
        frac: ::std::os::raw::c_int,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowTime(data: *const XC_TIME) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowTime(
        data: *const XC_TIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowExTime(data: *const XC_EXTIME) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowExTime(
        data: *const XC_EXTIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowHiTime(data: *const XC_HITIME) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowHiTime(
        data: *const XC_HITIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowHiTimeDelta(data: *const XC_HITIME_DELTA) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowHiTimeDelta(
        data: *const XC_HITIME_DELTA,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowDate(data: *const XC_DATE) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowDate(
        data: *const XC_DATE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowDateTime(data: *const XC_DATETIME) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowDateTime(
        data: *const XC_DATETIME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_TIMEDATE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowIPv4Address(data: *const XC_IPV4_ADDRESS) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowIPv4Address(
        data: *const XC_IPV4_ADDRESS,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowPrice(data: *const XC_PRICE, typ: XC_PRICE_TYPE) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowPrice(
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowPriceAs(
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        display_typ: XC_PRICE_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowPriceAs(
        data: *const XC_PRICE,
        typ: XC_PRICE_TYPE,
        display_typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowPriceDesc(data: *const XC_PRICE_DESC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowPriceDesc(
        data: *const XC_PRICE_DESC,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowPriceDescAs(
        data: *const XC_PRICE_DESC,
        display_typ: XC_PRICE_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowPriceDescAs(
        data: *const XC_PRICE_DESC,
        display_typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowVolume(data: *const XC_VOLUME) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowVolume(
        data: *const XC_VOLUME,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_NUMERIC_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowTradedValue(
        data: *const XC_TRADED_VALUE,
        typ: XC_PRICE_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowTradedValue(
        data: *const XC_TRADED_VALUE,
        typ: XC_PRICE_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_PRICE_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowExchangeId(data: *const XC_EXCHANGE_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowExchangeId(
        data: *const XC_EXCHANGE_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_EXCHANGE_ID_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowCountryId(data: *const XC_COUNTRY_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowCountryId(
        data: *const XC_COUNTRY_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_COUNTRY_ID_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowCurrencyId(data: *const XC_CURRENCY_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowCurrencyId(
        data: *const XC_CURRENCY_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_CURRENCY_ID_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowAlternateId(data: *const XC_ALTERNATE_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowAlternateId(
        data: *const XC_ALTERNATE_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowOrderRefId(data: *const XC_ORDER_REF_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowOrderRefId(
        data: *const XC_ORDER_REF_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowOrderRefIdAs(
        data: *const XC_ORDER_REF_ID,
        typ: XC_ORDER_REF_ID_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowOrderRefIdAs(
        data: *const XC_ORDER_REF_ID,
        typ: XC_ORDER_REF_ID_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowMMID(data: *const XC_MMID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowMMID(
        data: *const XC_MMID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowSymbol(data: *const XC_SYMBOL) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowSymbol(
        data: *const XC_SYMBOL,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_SYMBOL_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowEventId(data: *const XC_EVENT_ID) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowEventId(
        data: *const XC_EVENT_ID,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowDfloat_64(data: *const XC_DFLOAT_64) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowDfloat_64(
        data: *const XC_DFLOAT_64,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowProbability(data: *const XC_PROBABILITY) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowProbability(
        data: *const XC_PROBABILITY,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_STRING_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowKey(data: *const XC_KEY) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowKey(
        data: *const XC_KEY,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_KEY_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowKeyDesc(data: *const XC_KEY_DESC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowKeyDesc(
        data: *const XC_KEY_DESC,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_KEY_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowEnum(data: xuint64, typ: XM_DATA_TYPE) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowEnum(
        data: xuint64,
        typ: XM_DATA_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_ENUM_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowStruct(
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowStruct(
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
        line_indent: ::std::os::raw::c_int,
        opt: XCFMT_STRUCT_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcShowData(
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcXShowData(
        data: *const ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
        fw: ::std::os::raw::c_int,
        opt: XCFMT_GLOBAL_OPTIONS,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcParseGetOptions() -> XCPRS_OPTIONS;
}
unsafe extern "C" {
    pub fn xcParseSetOptions(options: XCPRS_OPTIONS) -> XCPRS_OPTIONS;
}
unsafe extern "C" {
    pub fn xcParseAddOptions(options: XCPRS_OPTIONS) -> XCPRS_OPTIONS;
}
unsafe extern "C" {
    pub fn xcParseRemoveOptions(options: XCPRS_OPTIONS) -> XCPRS_OPTIONS;
}
unsafe extern "C" {
    pub fn xcParseHiTime(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_HITIME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseHiTimeDelta(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_HITIME_DELTA,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseTime(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_TIME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseDate(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_DATE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseDateTime(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_DATETIME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseIPv4Address(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_IPV4_ADDRESS,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParsePrice(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_PRICE,
        typ: *mut XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParsePriceAs(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_PRICE,
        typ: XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParsePriceDesc(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_PRICE_DESC,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseVolume(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_VOLUME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseTradedValue(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_TRADED_VALUE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseExchangeId(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_EXCHANGE_ID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseCountryId(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_COUNTRY_ID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseCurrencyId(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_CURRENCY_ID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseTradeVenue(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_TRADE_VENUE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseAlternateId(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_ALTERNATE_ID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseOrderRefId(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_ORDER_REF_ID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseOrderRefIdAs(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_ORDER_REF_ID,
        typ: XC_ORDER_REF_ID_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseMMID(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_MMID,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseSymbol(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_SYMBOL,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseDfloat_64(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_DFLOAT_64,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseKey(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_KEY,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseKeyDesc(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut XC_KEY_DESC,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseEnum(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseData(
        inp: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        odata: *mut ::std::os::raw::c_void,
        typ: XM_DATA_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcParseProbability(
        inp: *const ::std::os::raw::c_char,
        odata: *mut XC_PROBABILITY,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPrice(
        inp: *const XC_PRICE,
        inptyp: XC_PRICE_TYPE,
        outtyp: XC_PRICE_TYPE,
        out: *mut XC_PRICE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPriceDesc(inp: *mut XC_PRICE_DESC, outtyp: XC_PRICE_TYPE) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtTradedValue(
        inp: *const XC_TRADED_VALUE,
        inptyp: XC_PRICE_TYPE,
        outtyp: XC_PRICE_TYPE,
        out: *mut XC_TRADED_VALUE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPriceToFloat(inp: *const XC_PRICE, inptyp: XC_PRICE_TYPE, out: *mut f32) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPriceDescToFloat(inp: *const XC_PRICE_DESC, out: *mut f32) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtFloatToPrice(inp: f32, out: *mut XC_PRICE, outtyp: *mut XC_PRICE_TYPE) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtFloatToPriceDesc(inp: f32, out: *mut XC_PRICE_DESC) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPriceToDouble(inp: *const XC_PRICE, inptyp: XC_PRICE_TYPE, out: *mut f64) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtPriceDescToDouble(inp: *const XC_PRICE_DESC, out: *mut f64) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDoubleToPrice(inp: f64, out: *mut XC_PRICE, outtyp: *mut XC_PRICE_TYPE) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDoubleToPriceDesc(inp: f64, out: *mut XC_PRICE_DESC) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtTradedValueToDouble(
        inp: *const XC_TRADED_VALUE,
        inptyp: XC_PRICE_TYPE,
        out: *mut f64,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDoubleToTradedValue(
        inp: f64,
        out: *mut XC_TRADED_VALUE,
        outtyp: *mut XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtHiTimeToTime(inp: *const XC_HITIME, out: *mut XC_TIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtTimeToHiTime(inp: *const XC_TIME, out: *mut XC_HITIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtExTimeToHiTime(
        inp: *const XC_EXTIME,
        timezone_offset: xint32,
        out: *mut XC_HITIME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtHiTimeToExTime(
        inp: *const XC_HITIME,
        timezone_offset: xint32,
        out: *mut XC_EXTIME,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtExTimeToTime(inp: *const XC_EXTIME, out: *mut XC_TIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtTimeToExTime(inp: *const XC_TIME, out: *mut XC_EXTIME) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDfloat_64ToXcPrice(
        inp: *const XC_DFLOAT_64,
        out: *mut XC_PRICE,
        outtyp: *mut XC_PRICE_TYPE,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtXcPriceToDfloat_64(
        price: *const XC_PRICE,
        price_type: XC_PRICE_TYPE,
        out: *mut XC_DFLOAT_64,
    ) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDfloat_64ToXcVolume(inp: *const XC_DFLOAT_64, out: *mut XC_VOLUME) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtXcVolumeToDfloat_64(volume: *const XC_VOLUME, out: *mut XC_DFLOAT_64) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDfloat_64ToDouble(inp: *const XC_DFLOAT_64, out: *mut f64) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDoubleToDfloat_64(inp: f64, out: *mut XC_DFLOAT_64) -> xerr;
}
unsafe extern "C" {
    pub fn xcCvtDfloat_64(inp: *mut XC_DFLOAT_64, exponent: u64) -> xerr;
}
